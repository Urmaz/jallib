#def header
-- Title: ADC channel configuration.
-- Author: SÃ©bastien Lelong, Copyright (C) 2009, all rights reserved. 
-- Adapted-by: 
-- Compiler: >=2.4k
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library acts as a wrapper. When included, it'll define ways to
-- configure the number ADC channels. There are 3 different cases:
--    1. the number of channels is specified setting/clearing PCFG bits
--       => a combination of PCFG bits selects a given number of ADC channels.
--          It is not possible to independently select which pins as ADC pins.
--          If available, Vref+ and Vref- are part of these combinations.
--          PCFG bits are in ADCON1, as ADCON1_PCFG
--    2. the number of channels is specified clearing PCFG bits (case only found in 18F, I think)
--       => pins can be configured independently (you can decide which pin will act as
--          an analog pin, and define your own combination
--          Vref+/Vref- are configured using VCFG bits.
--          PCFG bits are in ADCON0 and ADCON1, and are numbered (eg. ADCON_PCFG5)
--    3. the number of channels is set using ANS bits (18F and non-18F)
--       => same as case 2., channels can be configured independently
--          Vref+/Vref- are configured using VCFG bits.
--
--
-- Notes: this file is generated, don't modify it directly...
--

#end def

#def deps
include adc_pindef
#end def


#def analyze_config(bits,dpins,mapping)
	#set analog = [d for d in dpins.items() if d[1] == 'A']
	#set vrefs = [d for d in dpins.items() if d[1].startswith('VREF')]
	#set num_a = len(analog)
	#set num_vref = len(vrefs)
	## There can be "anything" bits...
	#silent bits = bits.replace("x","0")
	## Mapping for 0, 1 or 2 VREF
	#silent mapping.setdefault(num_a + num_vref,{0 : '0', 1 : '0', 2 : '0', 'analog_pins' : []})[num_vref] = bits
	#silent mapping[num_a + num_vref]['analog_pins'] = analog + vrefs
	#return "const bit*%d ADC_PCFG_%sANA_%sREF = 0b_%s" % (len(bits),num_a,num_vref,bits)
#end def

#def pcfg_conf(dsref)
	#set confs = $adc_pcfg[$dsref]
	#set mapping = {}
         -- These are some constants similar to what can be found in MCC18 adc.h header file
	#for bits,dpins in confs.items()
		#set r = $analyze_config(bits,dpins,mapping)
         $r
	#end for
	#set smap = sorted(mapping.items())
	#set lmap = []
	#silent [(lmap.append(m[1][0]),lmap.append(m[1][1]),lmap.append(m[1][2])) for m in smap]
	#set lenlmap = str(len(lmap))
	#set lenbits = str(len(bits))
	#set map = "const byte ADC_PCFG_MAP [" + lenlmap + "] = {0b_" + ", 0b_".join(lmap) + "}"

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         $map
         var bit*$lenbits no_vref = 0
         var bit*$lenbits one_vref = 0
         var bit*$lenbits two_vref = 0

	## Generate procedure to access combinations
	## All PICs in this section are in the same DS (assert)
	## Get a PIC in this DS to access ANx pins mapping
	#set dummy_pic = $ds_pic[dsref][-1]
    #for i,(numch,dconf) in enumerate(smap)
		#if i == 0
         if (ADC_NCHANNEL + ADC_NVREF) == $numch then
		#else
         elsif (ADC_NCHANNEL + ADC_NVREF) == $numch then
		#end if
		#for strpin in dconf['analog_pins']:
			#set an_pin = strpin[0].split("/")[0]
			#if not an_pin.startswith("AN")
				#silent an_pin = $adc_pins[dummy_pic][an_pin]
			#end if
            adc_pin_${an_pin}_direction = input
		#end for
	#end for
         end if
#end def


#def pcfg_combination
	#set bydsref = {}
	#silent [bydsref.setdefault($pic_ds[p],[]).append(p) for p in $pcfg_combination_pics]
	#for dsref, pics in bydsref.items()
		#set condition = " | ".join(map(lambda x: "target_chip == PIC_%s" % x.upper(),pics))
		#set ds_refs = list(set([$pic_ds[p] for p in pics]))
		#assert len(ds_refs) == 1

   -- Datasheet: $ds_refs[0]
   if $condition then

$pcfg_conf($dsref)
   end if

	#end for

   -- Retrieve config bits according to selected number of ADC channels
   const byte idx = (ADC_NCHANNEL - 1) * 3
   if ADC_NVREF == 0 then
      no_vref = ADC_PCFG_MAP[idx]
      ADCON1_PCFG = no_vref
   elsif ADC_NVREF == 1 then
      one_vref = ADC_PCFG_MAP[idx + 1]
      ADCON1_PCFG = one_vref
   elsif ADC_NVREF == 2 then
      two_vref = ADC_PCFG_MAP[idx + 2]
      ADCON1_PCFG = two_vref
   else
      _error "You can't have more than 2 VRef..."
   end if


#end def

#def pcfg_18f
	## PCFG0  in ANCON0
	## PCFG1  in ANCON0
	## PCFG2  in ANCON0
	## PCFG3  in ANCON0
	## PCFG4  in ANCON0
	## PCFG5  in ANCON0
	## PCFG6  in ANCON0
	## PCFG7  in ANCON0
	## PCFG8  in         ANCON1
	## PCFG9  in         ANCON1
	## PCFG10 in         ANCON1
	## PCFG11 in         ANCON1
	## PCFG12 in         ANCON1

   -- Selecting the number of ADC channels is done using PCFG bits
   -- User can optionally specify ADC channels number
   if defined(ADC_NCHANNEL) == true then
      if ADC_NCHANNEL > ADC_NTOTAL_CHANNEL then
         _error "More ADC channels than available, adjust ADC_NCHANNEL"
      end if
      -- Max 13 ADC channels
      -- At least 1 channel
      if ADC_NCHANNEL > 0 then
         ANCON0_PCFG0 = false
         adc_pin_AN0_direction = input
      end if
      -- At least 2 channels
      if ADC_NCHANNEL > 1 then
         ANCON0_PCFG1 = false
         adc_pin_AN1_direction = input
      end if
      -- At least 3 channels
      if ADC_NCHANNEL > 2 then
          ANCON0_PCFG2 = false
         adc_pin_AN2_direction = input
      end if
      -- At least 4 channels
      if ADC_NCHANNEL > 3 then
         ANCON0_PCFG3 = false
         adc_pin_AN3_direction = input
      end if
      -- At least 5 channels
      if ADC_NCHANNEL > 4 then
         ANCON0_PCFG4 = false
         adc_pin_AN4_direction = input
      end if
      -- At least 6 channels
      if ADC_NCHANNEL > 5 then
         ANCON0_PCFG5 = false
         adc_pin_AN5_direction = input
      end if
      -- At least 7 channels
      if ADC_NCHANNEL > 6 then
         ANCON0_PCFG6 = false
         adc_pin_AN6_direction = input
      end if
      -- At least 8 channels
      if ADC_NCHANNEL > 7 then
         ANCON0_PCFG7 = false
         adc_pin_AN7_direction = input
      end if
      -- At least 9 channels
      if ADC_NCHANNEL > 8 then
         ANCON1_PCFG8 = false
         adc_pin_AN8_direction = input
      end if
      -- At least 10 channels
      if ADC_NCHANNEL > 9 then
         ANCON1_PCFG9 = false
         adc_pin_AN9_direction = input
      end if
      -- At least 11 channels
      if ADC_NCHANNEL > 10 then
         ANCON1_PCFG10 = false
         adc_pin_AN10_direction = input
      end if
      -- At least 12 channels
      if ADC_NCHANNEL > 11 then
         ANCON1_PCFG11 = false
         adc_pin_AN11_direction = input
      end if
      -- At least 13 channels
      if ADC_NCHANNEL > 12 then
         ANCON1_PCFG12 = false
         adc_pin_AN12_direction = input
      end if


   -- Or specify manually which pin should act as ADC
   -- Provide procedure for this (eg. for pin AN7 to be analog, set_analog_pin(7))
   else

      -- Configure a pin to act as an analog pin.
      -- an_pin_num references the 'x' in ANx notation.
      -- Say you want to activate pin AN7, which is pin #12, also named RA4 in digital mode:
      --     - set_analog_pin(7) will set this pin as analog
      --     - set_analog_pin(12) won't set this pin as analog, but the equivalent
      --       one named AN12, if any
      --     - set_analog_pin(4) will do the same for AN4
      procedure set_analog_pin(byte in an_pin_num) is
         -- There's a mininum of 5 channels, so ANCON0_PCFG0, ANCON0_PCFG1,
         -- ANCON0_PCFG2, ANCON0_PCFG3 and ANCON0_PCFG4 are always defined
         if an_pin_num == 0 then
            ANCON0_PCFG0 = false
            adc_pin_AN0_direction = input
         end if
         if an_pin_num == 1 then
            ANCON0_PCFG1 = false
            adc_pin_AN1_direction = input
         end if
         if an_pin_num == 2 then
            ANCON0_PCFG2 = false
            adc_pin_AN2_direction = input
         end if
         if an_pin_num == 3 then
            ANCON0_PCFG3 = false
            adc_pin_AN3_direction = input
         end if
         if an_pin_num == 4 then
            ANCON0_PCFG4 = false
            adc_pin_AN4_direction = input
         end if

         -- Sometimes, there are gaps in PCFG bits
         -- 18lf24j50 has PCFG0 to PCFG12 bits, but without PCFG5, PCFG6 and PCFG7
         -- (this is because these bits only exist in the 44-pins version, according to DS)
         -- This shouldn't be a problem because numbering between PCFG bits and
         -- analog pins is respected: there's no AN5, AN6 and AN7 as well)

         -- PCFG5, PCFG6 and PCFG7 are always found together
         if defined(ANCON0_PCFG5) == true & defined(ANCON0_PCFG6) == true & defined(ANCON0_PCFG7) == true then
            if an_pin_num == 5 then
               ANCON0_PCFG5 = false
               adc_pin_AN5_direction = input
            end if
            if an_pin_num == 6 then
               ANCON0_PCFG6 = false
               adc_pin_AN6_direction = input
            end if
            if an_pin_num == 7 then
               ANCON0_PCFG7 = false
               adc_pin_AN7_direction = input
            end if
         end if

         -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
         if defined(ANCON1_PCFG8) == true & defined(ANCON1_PCFG9) == true & defined(ANCON1_PCFG10) == true & defined(ANCON1_PCFG11) == true & defined(ANCON1_PCFG12) == true then
            if an_pin_num == 8 then
               ANCON1_PCFG8 = false
               adc_pin_AN8_direction = input
            end if
            if an_pin_num == 9 then
               ANCON1_PCFG9 = false
               adc_pin_AN9_direction = input
            end if
            if an_pin_num == 10 then
               ANCON1_PCFG10 = false
               adc_pin_AN10_direction = input
            end if
            if an_pin_num == 11 then
               ANCON1_PCFG11 = false
               adc_pin_AN11_direction = input
            end if
            if an_pin_num == 12 then
               ANCON1_PCFG12 = false
               adc_pin_AN12_direction = input
            end if
         end if
      end procedure

      -- Configure a pin to act as an digital pin.
      -- Because setting a pin to act as digital makes only sens for
      -- pins which can also be configured as analog,
      -- an_pin_num references the 'x' in ANx notation.
      -- Say you want to deactivate pin AN7, which is pin #12, also named RA4 in digital mode:
      --     - set_digital_pin(7) will set this pin as digital
      --     - set_analog_pin(12) won't set this pin as digital, but the equivalent
      --       one named AN12, if any
      --     - set_analog_pin(4) will do the same for AN4
      -- 
      -- Note: the pin direction is not modified
      procedure set_digital_pin(byte in an_pin_num) is
         if an_pin_num == 0 then
            ANCON0_PCFG0 = true
            adc_pin_AN0_direction = input
         end if
         if an_pin_num == 1 then
            ANCON0_PCFG1 = true
            adc_pin_AN1_direction = input
         end if
         if an_pin_num == 2 then
            ANCON0_PCFG2 = true
            adc_pin_AN2_direction = input
         end if
         if an_pin_num == 3 then
            ANCON0_PCFG3 = true
            adc_pin_AN3_direction = input
         end if
         if an_pin_num == 4 then
            ANCON0_PCFG4 = true
            adc_pin_AN4_direction = input
         end if

         -- PCFG5, PCFG6 and PCFG7 are always found together
         if defined(ANCON0_PCFG5) == true & defined(ANCON0_PCFG6) == true & defined(ANCON0_PCFG7) == true then
            if an_pin_num == 5 then
               ANCON0_PCFG5 = true
               adc_pin_AN5_direction = input
            end if
            if an_pin_num == 6 then
               ANCON0_PCFG6 = true
               adc_pin_AN6_direction = input
            end if
            if an_pin_num == 7 then
               ANCON0_PCFG7 = true
               adc_pin_AN7_direction = input
            end if
         end if

         -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
         if defined(ANCON1_PCFG8) == true & defined(ANCON1_PCFG9) == true & defined(ANCON1_PCFG10) == true & defined(ANCON1_PCFG11) == true & defined(ANCON1_PCFG12) == true then
            if an_pin_num == 8 then
               ANCON1_PCFG8 = true
               adc_pin_AN8_direction = input
            end if
            if an_pin_num == 9 then
               ANCON1_PCFG9 = true
               adc_pin_AN9_direction = input
            end if
            if an_pin_num == 10 then
               ANCON1_PCFG10 = true
               adc_pin_AN10_direction = input
            end if
            if an_pin_num == 11 then
               ANCON1_PCFG11 = true
               adc_pin_AN11_direction = input
            end if
            if an_pin_num == 12 then
               ANCON1_PCFG12 = true
               adc_pin_AN12_direction = input
            end if
         end if
      end procedure
   end if

#end def

#def ans
   -- Selecting the number of ADC channels is done using ANS bits
   asm nop
#end def


#def vcfg()
   -- Normalize for VCFG format
   var byte vcfg_shadow = ADC_NVREF
   if ADC_NVREF == 2 then
	  vcfg_shadow = 3   -- 0b_10 | 0b_01 => 0b_11 => one bit per VCFG bit*2
   end if
   
   if defined(ADCON0_VCFG) == true then
	  ADCON0_VCFG = vcfg_shadow
   elsif defined(ADCON1_VCFG) == true then
	  ADCON1_VCFG = vcfg_shadow
   else
	  _error "There should be VCFG bits, I've made a mistake..."
   end if

#end def


#def main
$header
$deps
#set pcfg_combination_condition = " | ".join(map(lambda x: "target_chip == PIC_%s" % x.upper(),$pcfg_combination_pics))

-- -----------------------------------------
-- FIRST CASE: 
--  - PCFG bits exist, 
--  - analog are dependent from each other
--  - Vref config is done via PCFG bits
--    combination
-- -----------------------------------------

## Check PICs which use PCFG bits as combinations
if $pcfg_combination_condition then
$pcfg_combination


-- --------------------------------------------
-- SECOND CASE: 
--  - PCFG bits exist 
--  - analog are independent from each other
--  - Vref config is done via VCFG bits
-- --------------------------------------------

## 18F PICs, which use PCFG bits
elsif target_cpu == PIC_16 & (defined(ANCON0_PCFG0) | defined(ANCON0_PCFG1) | defined(ANCON0_PCFG2) | defined(ANCON0_PCFG3) | defined(ANCON0_PCFG4) | defined(ANCON0_PCFG5) | defined(ANCON0_PCFG6) | defined(ANCON0_PCFG7) | defined(ANCON1_PCFG10) | defined(ANCON1_PCFG11) | defined(ANCON1_PCFG12) | defined(ANCON1_PCFG8) | defined(ANCON1_PCFG9)) then
$pcfg_18f
$vcfg

-- --------------------------------------------
-- THIRD CASE: 
--  - ANS bits exist, 
--  - analog are independent from each other
--  - Vref config is done via VCFG bits
-- --------------------------------------------

## So these are PICs which use ANS bits, wether non-18F or 18F
else
$ans
$vcfg

end if
#end def

$main
