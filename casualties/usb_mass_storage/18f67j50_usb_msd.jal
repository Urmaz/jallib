-- Title: USB Mass Storage
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4o
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Test program for mass storage with SD Card.
--

include 18f67j50                    -- target PICmicro
-- include chip
pragma target clock 48_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target WDT  disabled        -- no watchdog
pragma target PLLDIV        P2     -- divide by 2
pragma target CPUDIV        P1     -- no cpu system clock divide
pragma target OSC  INTOSC_NOCLKOUT_PLL -- internal resonator
pragma target IESO  DISABLED
pragma target FCMEN DISABLED
OSCTUNE_PLLEN = 1                  -- set 96mhz pll
OSCCON_SCS = 0b00
_usec_delay(1_000)                 -- wait for OSC PLL to settle
--
enable_digital_io()   -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize
--
enable_digital_io()                -- make all pins digital I/O

include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200*2   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

-- setup SPI library
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange

-- whether or not using the serial port
const HAS_SERIAL_DEBUG_PORT = 1

include format

-- enable usb debugging
const bit USB_DEBUG = FALSE
const bit USB_DEBUG_HIGH = FALSE

;const bit USB_HID_DEBUG = TRUE
;const bit USB_HID_DEBUG_HIGH = TRUE

-- setup debug lib
alias debug_data is serial_data
const bit DEBUG_MASTER_ENABLE = OFF    -- enables debugging
include debug
--
-- turn on and off debug levels.
debug_lvl_0 = OFF
debug_lvl_1 = OFF -- display data in/out
debug_lvl_2 = OFF  -- display commands
debug_lvl_3 = OFF  -- display commands
--
var byte debug_text1[] = "DEBUG STARTED"
debug_string(DEBUG_1,debug_text1)
debug_crlf(DEBUG_1)

;procedure serial_print_spc() is
;   debug_char(1, " ")
;end procedure
;
;procedure serial_newline() is
;   debug_crlf(1)
;end procedure

-- setup the sd card pins
alias sd_chip_select is pin_SS
alias sd_chip_select_direction is pin_SS_direction
sd_chip_select = high
sd_chip_select_direction = output
--
-- setup the sd card library
alias sd_force_spi_mode is spi_master_hw_set_mode_11 -- always set spi mode to 1,1
const bit SD_EXTRA_SPEED = TRUE
const bit SD_DELAY_AFTER_WRITE = TRUE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings

-- include MSD library
var dword usb_msd_block_size = 512
var dword usb_msd_num_of_blocks = 2097152 -- 2097152 * 512 = 1gb
include usb_drv_msd_class
-- -----------------------------------------------------------------------------



-- main program

-- print welcome string
print_crlf(serial_data)
const  byte str_welcome[] = "JAL USB MSD demo! Please wait (takes about 10 seconds) before the device is fully configured"
print_string(serial_data, str_welcome )
print_crlf(serial_data)

-- variables
var bit usb_initialized = false
var word char_count = 0

-- main loop
forever loop
   -- poll the usb ISR function on a regular base, in order to 
   -- serve the USB requests
   usb_msd_tasks()
   
   -- check if USB device has been configured by the HOST
   if usb_is_configured()  then
      
      -- note user via serial line that USB has been configured
      if usb_initialized == false then
         usb_initialized = true
         
         if defined( HAS_SERIAL_DEBUG_PORT ) == true then			
            const  byte str[] = "USB device has been configured by the HOST!"
            print_string(serial_data, str )
            print_crlf(serial_data)
         end if		
         
      end if
      
   end if


   if defined( HAS_SERIAL_DEBUG_PORT ) == true then
      if PIR1_RCIF then
      end if
   end if	

   -- let us know the PIC is actually doing something
   -- by sending char "_" to serial port
   if char_count == 40000 then
      print_byte_dec(serial_data,usb_msd_state)
      _usec_delay(100)
      char_count = 0
   end if
   char_count = char_count + 1
end loop
