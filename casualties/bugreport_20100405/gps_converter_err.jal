
; inbuffer contains one field of the message at the time
const byte IN_BUF_SIZE = 20
var byte GpsInBuffer[IN_BUF_SIZE];



var byte GpsInBufferIndex  ; Index for GpsInBuffer
;var byte GpsFieldIndex     ; Index for FieldSearch
var byte GpsMsgNr;         ; ID of current message
;var byte GpsNextField      ; Next field to process (0 = MsgID)
var byte GpsFieldNr        ; Current field we're working on (0 = MsgID)
;var byte GpsDestination    ; Index of field in i2c array / output buffer
;var byte GpsFieldMethode   ; Methode (procedure) to process this field
var byte GpsErrorCode = 1  ; errorcode 1 = startup (wait for $).



const byte str_inbuffer[] = "InBuf "

procedure DumpGpsInBuffer is      
   pragma inline 
   var byte i

   print_string(serial_hw_data, str_inbuffer)
   
   i = 0
   while (GpsInBuffer[i] != 0) loop
   	serial_hw_data = " "     
   	print_byte_hex(serial_hw_data, GpsInBuffer[i]) 
   	serial_hw_data = " "     
      serial_hw_data = GpsInBuffer[i]  

      i = i + 1
   end loop
      
   serial_hw_data = "."
   print_crlf(serial_hw_data)
end procedure


; StoreBytes - place bytes in GpsInBuffer and count them.
function StoreBytes (byte in char) return bit is

   ; if comma, then done
   if (char == ",") then
      return true
   end if
   
   if (GpsInBufferIndex >= (IN_BUF_SIZE-1)) then
      ; buffer overflow
      GpsErrorCode = 201
      return;
   end if
   
   GpsInBuffer[GpsInBufferIndex] = char
   GpsInBufferIndex = GpsInBufferIndex + 1
   GpsInBuffer[GpsInBufferIndex] = 0 ; iedere keer de afsluit-0 plaatsen.
      
   return false ; not done yet.
end function

function IsMsg(byte in name[]) return bit is
   var byte i
   
   for 5 using i loop       
;      serial_hw_data = GpsInBuffer[i]
;      serial_hw_data = "_"     
;      serial_hw_data = name[i]    
;      serial_hw_data = " "    
      
      if (name[i] != GpsInBuffer[i]) then return false end if
   end loop
;   serial_hw_data = "*"
;      serial_hw_data = 13     
;      serial_hw_data = 10     
   return true
end function

const byte str_gpgga[] = "GPGGA" 
const byte str_gpgll[] = "GPGLL" 
const byte str_gpgsa[] = "GPGSA" 
const byte str_gpgsv[] = "GPGSV" 
const byte str_gprmc[] = "GPRMC" 
const byte str_gpvtg[] = "GPVTG" 

function ParseMessageID() return byte is
   if (IsMsg(str_gpgga)) then return 1 end if
   if (IsMsg(str_gpgll)) then return 2 end if
   if (IsMsg(str_gpgsa)) then return 3 end if
   if (IsMsg(str_gpgsv)) then return 4 end if
   if (IsMsg(str_gprmc)) then return 5 end if
   if (IsMsg(str_gpvtg)) then return 6 end if
   
   return 0 ; unknown message
end function




const byte str_msg[] = "Msg "
const byte str_error[] = "Error "
var byte verbose = 0
  
procedure GpsTakt is
   pragma inline
   
   var byte char
  
   if (!Serial_HW_read(char)) then
      return
   end if

   if (verbose>0) then   
;      serial_hw_data = char 
   end if

   if (GpsErrorCode > 1) then                     
      print_string(serial_hw_data, str_error)
      print_byte_dec(serial_hw_data, GpsErrorCode)
      print_crlf(serial_hw_data) 
      GpsErrorCode = 1
   end if
   
   if (char == "$") then
      ; nieuwe string
      GpsMsgNr    = 0
      GpsFieldNr  = 0                      
      GpsInBufferIndex = 0
      
      GpsErrorCode = 0  ; clear prev errors on new msg start
      
      verbose = 0
      return
   end if

   if (GpsErrorCode > 0) then
      return
   end if   
   
   if (StoreBytes(char)) then ; put byte in buffer, true = field end
      ; got a field in buffer, so process!
      if (GpsFieldNr == 0) then
         ; message ID
         ;ParseMessageID()    
         GpsMsgNr = ParseMessageID()    
         
         print_string(serial_hw_data, str_msg)  
         print_byte_dec(serial_hw_data, GpsMsgNr) 
         print_crlf(serial_hw_data)

         if (GpsMsgNr == 1) then verbose = 1 end if
         if (GpsMsgNr == 5) then verbose = 1 end if

         
      end if
      
      ; next field
      GpsInBufferIndex = 0
      GpsFieldNr = GpsFieldNr + 1
      
   end if
end procedure                             