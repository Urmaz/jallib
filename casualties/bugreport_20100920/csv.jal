
var word eeprom_adres = 0   ; higher and lower address byte

   ; csv logging vars
   var bit csvheader
   var byte csv_magic
   const byte csv_step  = 8      ; blok-grootte, 64/n
   const byte csv_valid = 3      ; aantal daadwerkelijk gebruikte bytes 
             ; (exclusief magic nr, maximaal step-1)

function read_byte_from_eeprom(word in addr) return byte is
   var byte chr
   var bit ret
   
   i2c_start()
   ret = i2c_transmit_byte(0xA0)            ; chip adres, write
   ret = i2c_transmit_byte(byte(addr >> 8))              ; hi adres
   ret = i2c_transmit_byte(byte(addr & 0xFF))              ; lo adres
   i2c_restart()
   ret = i2c_transmit_byte(0xA1)            ; chip adres, read
   chr = i2c_receive_byte(0) ;_HW_receive_byte_nack(chr) ; read, Nack
   i2c_stop()

   return chr
end function

procedure CsvLog is
   var bit flag
   
   if (csvheader) then
      ; init csv logging

      csv_magic = read_byte_from_eeprom(0) ; magic number (code voor laatste logreeks)
      csv_magic = csv_magic + 1 ; nieuwe magic nummer = oude + 1

      ; schrijf csv header
      i2c_start()
      flag = i2c_transmit_byte(0xA0)        ; chip adres, write
      flag = i2c_transmit_byte(0x0)  ; hi adres
;      if (flag) then F877_serial_transmit("A") else F877_serial_transmit("N") end if

      flag = i2c_transmit_byte(0x0)            ; lo adres

      flag = i2c_transmit_byte(csv_magic)      ; magic number (uniek per log-reeks)
      flag = i2c_transmit_byte(csv_step)       ; blok-grootte, 64/n
      flag = i2c_transmit_byte(csv_valid)      ; aantal daadwerkelijk gebruikte bytes 
                ; (exclusief magic nr, maximaal step-1)
      i2c_stop()

      eeprom_adres = 0
      ; -------------------------------------------------------------------------

      csvheader = false
      return ; niet doorgaan want de eeprom is nu aan het schrijven! 
   end if

;   F877_serial_transmit("l")
   ; ----------------------------------------------------------------
   if (eeprom_adres < 32000) then          ; geen wrap around!
      eeprom_adres = eeprom_adres + csv_step
   end if

;   serial_decimal_3(eeprom_adres_h)
;   F877_serial_transmit(" ")
;   serial_decimal_3(eeprom_adres_l)
;   F877_serial_transmit(" ")

   ; log/schrijf csv regel
   i2c_start()
   flag = i2c_transmit_byte(0xA0)           ; chip adres, write
   flag = i2c_transmit_byte(byte(eeprom_adres >> 8))              ; hi adres
   flag = i2c_transmit_byte(byte(eeprom_adres & 0xFF))              ; lo adres

   flag = i2c_transmit_byte(csv_magic)      ; magic number
;   flag = i2c_transmit_byte(RequestControl) ; databyte 1
;   flag = i2c_transmit_byte(Ldist)   
;   flag = i2c_transmit_byte(Rdist)   


   i2c_stop()
   ; ----------------------------------------------------------------

end procedure


procedure CsvReset is
   csvheader = true;
end procedure

procedure CsvOutput is
   var bit flag;
   var byte chr;

   serial_hw_data = "C"
   serial_hw_data = "S"
   serial_hw_data = "V"
   serial_hw_data = "_"
   serial_hw_data = "D"
   serial_hw_data = "U"
   serial_hw_data = "M"
   serial_hw_data = "P"
   Print_CrLf(serial_hw_data)

   eeprom_adres = 0 

   var byte magic = read_byte_from_eeprom(0) ; magic number (code voor laatste logreeks)
   var byte step  = read_byte_from_eeprom(1) ; bytes per regel in eeprom, 64 / n
   var byte valid = read_byte_from_eeprom(2) ; gebruikte bytes, max step - 1 (ivm magic nr)

   serial_hw_data = "M"
   serial_hw_data = " "
   Print_Byte_Dec(serial_hw_data, magic)
	Print_CrLf(serial_hw_data)

   serial_hw_data = "S"
   serial_hw_data = " "
   Print_Byte_Dec(serial_hw_data, step)
	Print_CrLf(serial_hw_data)

   serial_hw_data = "V"
   serial_hw_data = " "
   Print_Byte_Dec(serial_hw_data, valid)
   Print_CrLf(serial_hw_data)

   if (valid == 0) then
      ; valid = 0 betekent dat er geen records gelogd zijn en dat kan niet...
      serial_hw_data = "I"
      serial_hw_data = "n"
      serial_hw_data = "v"
      serial_hw_data = "a"
      serial_hw_data = "l"
      serial_hw_data = "i"
      serial_hw_data = "d"
      Print_CrLf(serial_hw_data)
      return
   end if

   flag = true
   while flag loop
      eeprom_adres = eeprom_adres + step
      chr = read_byte_from_eeprom(eeprom_adres) ; magic number
      if (chr == magic) then
         var byte x = 1
         serial_hw_data = "*"

         while x < step loop
            if (x <= valid) then
               ; print
               Chr = read_byte_from_eeprom(eeprom_adres + x)
   		      Print_Byte_Dec(serial_hw_data, Chr)
               if (x < valid) then
                  serial_hw_data = ","
               end if
            end if
            x = x + 1
         end loop

         ; end of line
         Print_CrLf(serial_hw_data)
      else
         flag = false
      end if
   end loop
end procedure

procedure CsvDump is
   var byte chr;

   eeprom_adres = 0   ; lower address byte

   while (eeprom_adres < 32) loop     
      chr = read_byte_from_eeprom(eeprom_adres);
      Print_Byte_Hex(serial_hw_data, Chr)
      serial_hw_data = " "

      eeprom_adres = eeprom_adres + 1
   end loop
   Print_CrLf(serial_hw_data)

end procedure