;-----------------------------------------------------------------------------
; Rikishi2 - Software of my second sumo bot
;-----------------------------------------------------------------------------
; author    : Joep Suijs
; date      : 16 November 2007
; purpose   : JAL V2 control software of sumo robot controller
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

; io list  
;
; a0 slave board - vloersensor analoog in
; a1 slave board - vloersensor analoog in
; a2 vbatt via 2k2/1k spanningsdeler
; a3
; a4 slave bord - vloersensor leds
; a5       
;
; b0 nc
; b1 h-bridge
; b2 h-bridge
; b3 groene led, button
; b4 h-bridge
; b5 h-bridge
; b6 program , oranje led, button
; b7 program, gele led, button
; 
; c0 hbrug pwm
; c1 hbrug pwm
; c2 nc
; c3 i2c (eeprom, io)
; c4 i2c (eeprom, io)
; c5 buzzer
; c6 serial
; c7 serial

; led/button circuit:
; - LED aan IO pin, via 470E naar massa.
; - parallel aan LED een weerstand van 10k
; - button van + naar knooppunt LED/470E.  


 
;---------------------------------- 
; 10-pin connector naar slave board
;
; 1  5v
; 2  ground
; 3  scl
; 4  sda
; 5  nc
; 6  A4
; 7  nc
; 8  A0
; 9  nc
; 10 A1
; 

-- setup chip
include 16f876a
pragma target clock 20_000_000   -- xtal frequency
pragma target OSC        hs
pragma target   LVP disabled     -- no low-voltage programming
pragma target   WDT disabled     -- no watchdog

include delay
include print	

-- serial setup
const Serial_HW_Baudrate  = 115_200  ;1_250_000 ;115_200 
include  serial_hardware
Serial_HW_init

-- setup AD converter 
const bit  ADC_HIGH_RESOLUTION = high
const byte ADC_NCHANNEL = 5
const byte ADC_NVREF = 0
include adc
adc_init()

-- setup the timer0_isr_interval library
const word timer0_isr_rate = 1000   -- 1 kHz isr rate
const DELAY_SLOTS = 2               -- support 2 delays at the same time
include timer0_isr_interval
timer0_isr_init()                   -- init timer0 isr



   -- i2c setup
   const word _i2c_bus_speed = 1 ; * 100kHz
   const bit _i2c_level = true   ; i2c levels (not SMB;  i2c_hw only)
   include i2c_hardware
   ;include i2c_software  


-- motor (pwm & hbridge) setup   
var volatile bit  Bridge_1  is pin_b5
var volatile bit  Bridge_2  is pin_b4
var volatile bit  Bridge_3  is pin_b2
var volatile bit  Bridge_4  is pin_b1

pin_b5_direction = output  -- bridge_1
pin_b4_direction = output  -- bridge_2
pin_b2_direction = output  -- bridge_3
pin_b1_direction = output  -- bridge_4

bridge_1 = low
bridge_2 = low
bridge_3 = low
bridge_4 = low

-- Configure PWM
pin_ccp1_direction = output
pin_ccp2_direction = output
include pwm_hardware
pwm_max_resolution(1)
pwm1_on()
pwm2_on()

;-- Configure PWM
;include pwm_hardware
;pwm_max_resolution(1)
;pwm1_on()

   var volatile bit LedYellow is pin_b7
   var volatile bit LedOrange is pin_b6
   var volatile bit LedGreen is pin_b3

   pin_b7_direction = output
   pin_b6_direction = output
   pin_b3_direction = output

   var byte PcfData

   include buttons
   include behave

   include vloersensor
   include pcf8574
   include csv   
   include console

 	
   var byte str1[] = "\nRikishi NG (V2.0)\r\n"
   Print_String(serial_hw_data, str1)

   var word PrevIsr_counter

   ccpr1l = 0;
   ccpr2l = 0;
   Bridge_2 = ! Bridge_1
   Bridge_4 = ! Bridge_3
 
   PrevWinner = 255
   var byte PrevPcfData = 255

   FlagWaitStart = true

BatteryCheck();
    
   forever loop

      if (PrevIsr_counter != isr_counter) then
      
         ; (1 ms loop)
         Previsr_counter = isr_counter
         -- ----------------------------
         -- stap 1 : verwerk sensor input 
         -- ----------------------------
         Buttons()         ; ca 50 us
         VloerSensor()     ; ca 600 us

; todo: ReadPcd blokkeert.         
;         ReadPcf8574(PcfData)
         if (PcfData != PrevPcfData) then
            var byte mstr2[] = "PcfData: "
            print_string(serial_hw_data, mstr2)
		      print_byte_hex(serial_hw_data, PcfData)
		      print_CrLf(serial_hw_data)

            PrevPcfData = PcfData
         end if
         -- -----------------------------
         -- stap 2 : activeer gedragingen
         -- -----------------------------

         MotorL = 0
         MotorR = 0
         RequestControl = 0
         
;         BehaveSeek(1)
;         BehaveCruise(2)
;         BehaveSideView(3)
;         BehaveTrackLong(4)
;         BehaveSpotTarget(5)


;          BehaveTurn(7)
;          Behave_Track_Short(8)
if (RequestControl < 8) then
         BehaveAvoid(9)
end if
         BehaveWaitStart(15)

         -- bewaar & display winnaar
         if (PrevWinner != RequestControl) then
            var byte mstr1[] = "Winner: "
            Print_String(serial_hw_data, mstr1)
		      Print_Byte_Dec(serial_hw_data, RequestControl)
		      Print_CrLf(serial_hw_data)

         end if
         PrevWinner = RequestControl;

         -- ---------------------------
         -- stap 3 : aansturing motoren
         -- ---------------------------

         ; set output   
         ccp1con = 0x0c       -- set pwm mode (b4:5 = 2 lsb pwm)
         if (MotorL >= 0) then
            ccpr2l = 2 * byte(MotorL)   -- set pwm power
            Bridge_3 = false
         else 
            ccpr2l = 2 * byte(-MotorL)   -- set pwm power
            Bridge_3 = true
         end if
         Bridge_4 = ! Bridge_3

         ccp2con = 0x0c       -- set pwm mode (b4:5 = 2 lsb pwm)
         if (MotorR >= 0) then
            ccpr1l = 2 * byte(MotorR)   -- set pwm power
            Bridge_1 = false
         else 
            ccpr1l = 2 * byte(-MotorR)   -- set pwm power
            Bridge_1 = true
         end if
         Bridge_2 = ! Bridge_1
         


         if (check_delay(0) ) then
            ; 100 ms loop
            set_delay(0, 100)
            
            ; knipper gele led tijdens wedstrijd
            if (PrevWinner != 15) then
               LedYellow = ! LedYellow
            end if
            
            BatteryCheck()
         end if

        console()

      end if
   end loop
; end of main