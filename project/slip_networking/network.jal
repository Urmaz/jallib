-- Title: Network Initialization & Constants
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sets up the network link layer and defines constants
--
-- Sources:
-- http://www.comptechdoc.org/independent/networking/protocol/protnet.html
--

--------------------------------------------------------------------------------
-- Reads a recieve packet. Verifies IP Header data such as IP
-- address and checksum (with ip_header.jal), then sends the
-- rest of the data to the correct procedure depending on packet type.
--------------------------------------------------------------------------------
procedure network_received_packet(byte in packet_size) is
   ;if NETWORK_LINK_LAYER == SLIP then
   ;end if

   print_crlf(serial_sw_data)
   const byte str1[] = "---------- PACKET RECEIVED ----------"
   print_string(serial_sw_data, str1)
   print_crlf(serial_sw_data)

   const byte str2[] = "-- IP Header --"
   print_string(serial_sw_data, str2)
   print_crlf(serial_sw_data)
   
   if packet_size > network_max_packet_size then
      -- your packet may have a problem, it is too large
      const byte str[] = "---------- ERROR: packet too large for buffer ----------"
      print_string(serial_sw_data, str)
      print_crlf(serial_sw_data)
      
      network_clear_rx_queue() -- clear bad data in the queues
      return                   -- ignore the packet
   end if
   
   -- check if the header destination ip matches PIC ip,
   -- and check if ip_header checksum is ok.
   if ip_header_verify() == 1 then
      print_crlf(serial_sw_data)

      -- check what type of packet it is (what protocol)
      if ip_header_protocol == ICMP then -- ICMP protocol
         const byte str2[] = "-- ICMP Packet --"
         print_string(serial_sw_data, str2)

         -- send the data to ICMP lib for reading
         icmp_read_packet(packet_size - 20)
      -- check what type of packet it is (what protocol)
      elsif ip_header_protocol == UDP then -- UDP protocol
         const byte str2[] = "-- UDP Packet --"
         print_string(serial_sw_data, str2)

         -- send the data to UDP lib for reading
         udp_read_packet(packet_size - 20)
      else                               -- unknown protocol
         const byte str3[] = "-- raw data --"
         print_string(serial_sw_data, str3)
         print_crlf(serial_sw_data)
         
         -- just print the raw data
         for packet_size - 20 loop               -- for each byte in packet
            print_byte_hex(serial_sw_data, network_rx_buffer)
            serial_sw_data = " "
         end loop
      end if
   else
      -- ignore the packet, it wasn't for us, or ip header checksum failed.
      -- must read all packet data to keep buffer in sync.
      print_crlf(serial_sw_data)
      const byte str2[] = "-- header verify failed --"
      print_string(serial_sw_data, str2)
      for packet_size - 20 loop
         -- ignore the packet
         var byte x = network_rx_buffer
      end loop
      print_crlf(serial_sw_data)
   end if
   --
   print_crlf(serial_sw_data)
end procedure





