-- Title: Network Initialization & Constants
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sets up the network link layer and defines constants
--
-- Sources:
-- http://www.comptechdoc.org/independent/networking/protocol/protnet.html
--

const byte NETWORK_PROTOCOL_ICMP = 0b0000_0001

--------------------------------------------------------------------------------
-- recieved packet procedure
--------------------------------------------------------------------------------
procedure network_received_packet(byte in packet_size) is
   if NETWORK_LINK_LAYER == SLIP then
      if packet_size > SLIP_MTU then
         -- your packet may have a problem, it is too large
      end if

      print_crlf(serial_sw_data)
      for 50 loop
          serial_sw_data = "-"
      end loop
      
      print_crlf(serial_sw_data)
      for packet_size loop               -- for each byte in packet
         print_byte_hex(serial_sw_data, slip_rx_buffer)
         serial_sw_data = " "
         ;serial_sw_data = slip_rx_buffer -- do something with the packet data
      end loop
   end if
end procedure

--------------------------------------------------------------------------------
-- constant aliases
--------------------------------------------------------------------------------
if NETWORK_LINK_LAYER == SLIP then
   -- alias slip for networking
   alias network_send_data is slip_send_data
   alias network_packet_available is slip_packet_available
   alias network_max_packet_size is SLIP_MTU
   alias network_packet_queue_size is QUEUE01_SIZE
   alias network_end_packet is slip_end_packet

   -- callback for when a full slip packet is recieved
   procedure slip_received_packet_callback(byte in packet_size) is
      pragma inline
      network_received_packet(packet_size)
   end procedure
end if




-- setup ip header lib
include ip_header

-- setup icmp lib
include icmp

