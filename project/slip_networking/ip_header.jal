-- Title: Creates a IP Header
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library creates a IP header
--
-- Sources:
-- http://www.faqs.org/rfcs/rfc791.html
-- http://www.tekelec.com/ss7/protocols/ip2.asp
-- http://www.networksorcery.com/enp/protocol/ip.htm
--

-- checksum lib is required
include checksum

-- Setup the ip header bytes
var byte*20 _ip_header
var byte ip_header[20] at _ip_header
--
var bit*4 ip_header_length  at _ip_header : 0                -- Internet header length in 32-bit words.
var bit*4 ip_header_version at _ip_header : 4                -- ip version
var byte ip_header_service  at _ip_header : 8                -- Type of Service.
var byte ip_header_total_length_high at _ip_header : 16      -- length of the internet header in 32 bit dwords
var byte ip_header_total_length_low at _ip_header : 24
var byte ip_header_identification_high at _ip_header : 32    -- Packet Identification (Used in fragmentation)
var byte ip_header_identification_low at _ip_header : 40
var bit*3 ip_header_flags at _ip_header : 53                 -- Various Control Flags
var bit*5 ip_header_fragment_offset_high at _ip_header : 48
var byte ip_header_fragment_offset_low at _ip_header : 56
var byte ip_header_ttl at _ip_header : 64                     -- Time to live in seconds
var byte ip_header_protocol at _ip_header : 72                -- next level protocol such as ICMP,UDP
var byte ip_header_checksum_1 at ip_header : 80               -- checksum of ip header
var byte ip_header_checksum_0 at ip_header : 88
var byte ip_header_source_ip_3 at ip_header : 96              -- source ip address (PIC's ip address)
var byte ip_header_source_ip_2 at ip_header : 104
var byte ip_header_source_ip_1 at ip_header : 112
var byte ip_header_source_ip_0 at ip_header : 120
var byte ip_header_destination_ip_3 at ip_header : 128        -- destination ip address.
var byte ip_header_destination_ip_2 at ip_header : 136
var byte ip_header_destination_ip_1 at ip_header : 144
var byte ip_header_destination_ip_0 at ip_header : 152

procedure ip_header_identification'put(word in data) is
   pragma inline
   var byte _data[2] at data
   ip_header_identification_low = _data[0]
   ip_header_identification_high = _data[1]
end procedure

function ip_header_identification'get() return word is
   pragma inline
   var word data
   var byte _data[2] at data
   _data[0] = ip_header_identification_low
   _data[1] = ip_header_identification_high
   return
end function

--------------------------------------------------------------------------------
-- Set the main local ip address
--------------------------------------------------------------------------------
var byte ip_header_ip[4]
procedure ip_header_set_ip(byte in byte3, byte in byte2, byte in byte1, byte in byte0) is
   pragma inline
   ip_header_ip[3] = byte3
   ip_header_ip[2] = byte2
   ip_header_ip[1] = byte1
   ip_header_ip[0] = byte0
end procedure

--------------------------------------------------------------------------------
-- Set source ip address in ip header
--------------------------------------------------------------------------------
procedure ip_header_set_source_ip(byte in byte3, byte in byte2, byte in byte1, byte in byte0) is
   pragma inline
   ip_header_source_ip_3 = byte3
   ip_header_source_ip_2 = byte2
   ip_header_source_ip_1 = byte1
   ip_header_source_ip_0 = byte0
end procedure

--------------------------------------------------------------------------------
-- Set destination ip address in ip header
--------------------------------------------------------------------------------
var byte ip_header_destination_ip[4]
procedure ip_header_set_destination_ip(byte in byte3, byte in byte2, byte in byte1, byte in byte0) is
   pragma inline
   ip_header_destination_ip_3 = byte3
   ip_header_destination_ip_2 = byte2
   ip_header_destination_ip_1 = byte1
   ip_header_destination_ip_0 = byte0
end procedure

--------------------------------------------------------------------------------
-- Send a ip header
--------------------------------------------------------------------------------
procedure ip_header_send(byte in ip_3,byte in ip_2,byte in ip_1,byte in ip_0, byte in protocol_select, word in data_length) is

   -- gets the length of the ip header into bytes
   data_length = data_length + 20
   var byte _data_length[2] at data_length

   -- set data bits of ip header
   ip_header_version              = 0b0100
   ip_header_length               = 0b0101
   ip_header_service              = 0b0000_0000
   ip_header_total_length_high    = _data_length[1]
   ip_header_total_length_low     = _data_length[0]
   ip_header_identification_high  = 0b1000_1000
   ip_header_identification_low   = 0b0001_0000
   
   ip_header_identification = 0b1000_1000_0001_0000
   
   ip_header_flags                = 0b010          -- dont' fragment
   ip_header_fragment_offset_high = 0b0_0000
   ip_header_fragment_offset_low  = 0b_0000_0000
   ip_header_ttl                  = 0b0111_1111
   ip_header_protocol             = protocol_select
   ip_header_checksum_1 = 0          -- checksum set to 0 before calculation
   ip_header_checksum_0 = 0         -- checksum set to 0 before calculation;
   
   -- set source/destination ip addresses
   ip_header_set_destination_ip(ip_3,ip_2,ip_1,ip_0)
   ip_header_set_source_ip     (ip_header_ip[3],ip_header_ip[2],ip_header_ip[1],ip_header_ip[0])

   -- set the checksum bytes for transmit
   checksum_calc(ip_header,count(ip_header),ip_header_checksum_1,ip_header_checksum_0)
   
   -- put the data into the output buffer
   var byte count1 = 0
   for 20 loop                             -- loop through all bytes in packet
      network_send_data(ip_header[count1]) -- send slip packet data via serial port
      count1 = count1 + 1
   end loop
end procedure

--------------------------------------------------------------------------------
-- Verify incomming ip header. Checks that ip header ip address is
-- the same as our local ip address. checks ip header checksum
--------------------------------------------------------------------------------
function ip_header_verify() return byte is
   -- get the ip header
   var byte count1 = 0
   for 20 using count1 loop
      ip_header[count1] = network_rx_buffer
      print_byte_hex(serial_sw_data,ip_header[count1])
      serial_sw_data = " "
   end loop

   -- check if the destination ip is the PIC's ip address
   if (ip_header[16] == ip_header_ip[3]) & (ip_header[17] == ip_header_ip[2]) & (ip_header[18] == ip_header_ip[1]) & (ip_header[19] == ip_header_ip[0]) then
   -- check the checksum
   -- checksum may be wrong if recieved ip header is longer then usual
   ;if checksum_verify(ip_header,count(ip_header)) then
         return 1
   ;   end if
   end if
end function
