-- Title: Checksum
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library calculates checksums for data error detection.
--
-- Sources:
--

--------------------------------------------------------------------------------
-- compute checksum from an array using every 2 bytes in that array and
-- outputs 2 checksum bytes that would have been a word.
-- Mostly used for IP header checksums.
--------------------------------------------------------------------------------
procedure checksum_calc(byte in buff[], word in size, byte out checksum_1, byte out checksum_0) is
   alias count1 is size
   var word i = 0
   var word word16
   var dword sum = 0
   var byte _sum[2] at sum

   -- make 16 bit words out of every two adjacent 8 bit words in the packet
   -- and add them up
   while (count1 > 1) loop
      sum = sum + word((word(buff[i + 0]) << 8) + buff[i + 1])
      i = i + 2
      count1 = count1 - 2

      if sum > 0xFFFF then
         sum = word(sum) + 1
      end if
   end loop

   -- also check odd numbered buffer
   if count1 == 1 then
      sum = sum + (word(buff[i + 0]) << 8)
      if sum > 0xFFFF then
         sum = word(sum) + 1
      end if
   end if
   
   -- ones complement the result
   sum = word(!sum)

   -- set the out bytes
   checksum_1 = _sum[1]
   checksum_0 = _sum[0]
end procedure

--------------------------------------------------------------------------------
-- Verify checksum from an array using every 2 bytes in that array.
-- Mostly used for IP header checksums.
--------------------------------------------------------------------------------
function checksum_verify(byte in buff[], word in size) return bit is
   var byte a
   var byte b

   -- calculate the checksum
   checksum_calc(buff,size,a,b)

   -- checksum is ok if checksum result is 0 or -0 (0xFFFF)
   if (a == 0 & b == 0) | (a == 0xFF & b == 0xFF) then
      return 1
   end if
end function
