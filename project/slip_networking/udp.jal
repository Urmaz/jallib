-- Title: UDP (User Datagram Protocol)
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: An unreliable connection less protocol used to control the
--              management of application level services between computers.
--              It is used for transport by some applications which must
--              provide their own reliability.
--
-- Sources:
-- http://www.networksorcery.com/enp/protocol/udp.htm
--
-- Note:
-- untested
--
const byte UDP = 17 -- UDP protocol number for ip header

const word UDP_SOURCE_PORT = 0
const word UDP_DESTINATION_PORT = 2
const word UDP_LENGTH = 4
const word UDP_CHECKSUM = 6
--
const word UDP_TYPE  = 8
const word UDP_CLASS = 10

--------------------------------------------------------------------------------
-- Read a UDP packet
--------------------------------------------------------------------------------
procedure udp_read_packet(byte in data_size) is
   network_var_offset = ip_header_size
   
   -- print unknown UDP message
   var byte count1 = ip_header_size
   for data_size loop               -- for each byte in packet
      debug_byte_hex(DEBUG_4, network_data[count1])
      serial_sw_data = " "
      count1 = count1 + 1
   end loop
end procedure

--------------------------------------------------------------------------------
-- Sends a UDP packet
--------------------------------------------------------------------------------
procedure udp_send(byte in ip_3, byte in ip_2, byte in ip_1, byte in ip_0,word in source_port, word in destination_port, byte in data[]) is
   var word UDP_DATA_LENGTH = 8 + count(data)
   
   -- create the ip header
   ip_header_create(ip_3,ip_2,ip_1,ip_0,UDP,UDP_DATA_LENGTH)
   
   -- set the UDP header data
   network_word[UDP_SOURCE_PORT] = source_port
   network_word[UDP_DESTINATION_PORT] = destination_port
   network_word[UDP_LENGTH] = count(data)
   network_word[UDP_CHECKSUM] = 0
   
   -- calculate and set the checksum
   network_word[ICMP_CHECKSUM] = checksum_16_byte_calc(network_data,0,ip_header_size + UDP_DATA_LENGTH + count(data))

   -- put the UDP data into the network array
   var byte count1
   for count(data) using count1 loop
      network_data[ip_header_size + count1] = data[count1]
   end loop

   ;-- change the variable offset to after the UDP data
   ;network_var_offset = ip_header_size + count(data)
   ;-- set variable data
   ;network_word[UDP_TYPE]  = ""
   ;network_word[UDP_CLASS] = ""
   
   network_send_packet(ip_header_size + UDP_DATA_LENGTH) -- slip end packet (ethernet not tested yet)
end procedure
