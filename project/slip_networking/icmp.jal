-- Title: Internet control message protocol (ICMP)
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Establishes communication between computers
--
-- Sources:
-- http://www.faqs.org/rfcs/rfc792.html
--
-- Notes:
-- Linux default echo/ping message size is 64, windows is 32
-- const byte ICMP_MAX_MESSAGE_SIZE = 64
--

const byte ICMP = 1 -- ICMP protocol number for ip header

-- ICMP message types
const ICMP_ECHO_REPLY = 0
const ICMP_DESTINATION_UNREACHABLE = 3
const ICMP_SOURCE_QUENCH = 4
const ICMP_REDIRECT = 5
const ICMP_ECHO = 8
const ICMP_TIME_EXCEEDED = 11
const ICMP_PARAMETER_PROBLEM = 12
const ICMP_TIMESTAMP = 13
const ICMP_TIMESTAMP_REPLY = 14
const ICMP_INFORMATION_REQUEST = 15
const ICMP_INFORMATION_REPLY = 16

-----

const byte ICMP_TYPE = 0
const byte ICMP_CODE = 1
const word ICMP_CHECKSUM = 2
const word ICMP_IDENTIFIER = 4
const word ICMP_SEQUENCE_NUMBER = 6
   
--------------------------------------------------------------------------------
-- Sends an echo (PING) message
--------------------------------------------------------------------------------
procedure icmp_send_echo(byte in ip_3, byte in ip_2, byte in ip_1, byte in ip_0) is
   -- print a debug message
   var byte sending_ping[] = "---------- sending ping... ----------"
   debug_string(DEBUG_2,sending_ping)
   debug_crlf(DEBUG_2)
   
   -- set the length of the ICMP data
   const byte ECHO_DATA_LENGTH = 8

   -- create the ip header
   ip_header_create(ip_3,ip_2,ip_1,ip_0,ICMP,ECHO_DATA_LENGTH)

   -- set network variable values
   network_byte[ICMP_TYPE]            = ICMP_ECHO
   network_byte[ICMP_CODE]            = 0x00
   network_word[ICMP_CHECKSUM]        = 0x00_00
   network_word[ICMP_IDENTIFIER]      = 0x00_01
   network_word[ICMP_SEQUENCE_NUMBER] = 0x00_00

   -- set the checksum bytes for transmit
   network_word[ICMP_CHECKSUM] = checksum_16_byte_calc(network_data,0,ip_header_size + ECHO_DATA_LENGTH)

   -- send the packet
   network_send_packet(ip_header_size+ECHO_DATA_LENGTH)
end procedure

--------------------------------------------------------------------------------
-- Sends an echo reply message
--------------------------------------------------------------------------------
procedure icmp_send_echo_reply(byte in message_size) is
   debug_crlf(DEBUG_2)
   const byte icmp_str1[] = "---------- sending ping reply! ----------"
   debug_string(DEBUG_2, icmp_str1)
   debug_crlf(DEBUG_2)

   -- create the ip header
   ip_header_create(ip_header_source_ip_3,ip_header_source_ip_2,ip_header_source_ip_1,ip_header_source_ip_0,ICMP,message_size)

   -- set the ICMP header data
   network_byte[ICMP_TYPE] = ICMP_ECHO_REPLY
   network_word[ICMP_CHECKSUM] = 0

   -- calculate and set the checksum
   network_word[ICMP_CHECKSUM] = checksum_16_byte_calc(network_data,0,ip_header_size + message_size)

   -- send the packet
   network_send_packet(ip_header_size + message_size)
end procedure

--------------------------------------------------------------------------------
-- Read an ICMP packet and do something with it's data
--------------------------------------------------------------------------------
procedure icmp_read_packet(byte in data_size) is
   -- set network variable offsets
   network_var_offset = ip_header_size

   if network_byte[ICMP_TYPE] == ICMP_ECHO_REPLY then
      debug_crlf(DEBUG_2)
      const byte icmp_str1[] = "---------- ping reply received! ----------"
   
      debug_string(DEBUG_2, icmp_str1)
      debug_crlf(DEBUG_2)

      -- print the data
      var byte count1 = ip_header_size
      for data_size loop               -- for each byte in packet
         debug_byte_hex(DEBUG_4, network_data[count1])
         debug_char(DEBUG_4," ")
         count1 = count1 + 1
      end loop
      
   elsif network_byte[ICMP_TYPE] == ICMP_ECHO then
      debug_crlf(DEBUG_2)
      const byte icmp_str1[] = "---------- ping received! ----------"
      debug_string(DEBUG_2, icmp_str1)
      debug_crlf(DEBUG_2)

      -- print the data
      var byte count1 = ip_header_size
      for data_size loop               -- for each byte in packet
         debug_byte_hex(DEBUG_4, network_data[count1])
         debug_char(DEBUG_4," ")
         count1 = count1 + 1
      end loop
      
      -- reply to the ping (we already got the first byte so minus 1)
      icmp_send_echo_reply(data_size)
   else
      -- print unknown ICMP message
      var byte count1 = ip_header_size
      for data_size - 1 loop               -- for each byte in packet
         debug_byte_hex(DEBUG_4, network_data[count1])
         debug_char(DEBUG_4," ")
         count1 = count1 + 1
      end loop
   end if
end procedure
