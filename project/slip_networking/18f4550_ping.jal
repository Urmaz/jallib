-- Title: Sample PING via SLIP
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample sends and receives PING via SLIP
--
-- Notes: Does not work!
--
-- Sources:
-- http://tools.ietf.org/html/rfc1055
--

include 18f4550                    -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- (unspecified configuration bits may cause a different frequency!)(
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target PLLDIV  P1           -- PLL off
pragma target CPUDIV  P2           -- no cycle divisor
pragma target WDT  disabled        -- no watchdog
pragma target XINST disabled       -- not supported by JalV2
pragma target LVP  disabled        -- no Low Voltage Programming
pragma target MCLR external        -- reset externally
--
--
enable_digital_io()                      -- make all pins digital I/O
--
include print

-- setup serial software
const serial_sw_baudrate = 38400
alias serial_sw_tx_pin is pin_B4
alias serial_sw_rx_pin is pin_B5
pin_B4_direction = output
pin_B5_direction = input
include serial_software
serial_sw_init()

-- setup uart for communication
const serial_hw_baudrate  = 9600   -- set the baudrate
include serial_hardware
serial_hw_init()

-- setup SLIP
const word SLIP_MTU = 254  -- Max bytes per packet (Max Transfer Unit)
--
-- choose your interrupt routine. you may ignore this and create your own
-- isr or use polling method slip_poll()
const bit SLIP_USE_SERIAL_HW_ISR = TRUE -- TRUE = recieve data via serial hw interrupt
const SLIP_DO_CALLBACK_IN_ISR == TRUE -- the callback will get run within the ISR
--
-- choose your data carrier
alias slip_serial_data is serial_hw_data
alias slip_data_available is serial_hw_data_available
--
-- Choose the size of your recieve buffer.
-- Should be the same as SLIP MTU if slip interrupts are not enabled
const byte QUEUE01_SIZE = 254
include queue01 -- include the queue/buffer library
alias slip_rx_buffer is queue01_nb  -- alias buffer for recieved data
--
-- Choose buffer to hold packet sizes (for interrupts only)
const byte QUEUE02_SIZE = 100
include queue02 -- include the queue/buffer library
alias slip_packet_size_buffer is queue02_nb     -- alias buffer for packet sizes
alias slip_packets_available is queue02_nr_used -- alias for number of packets avail
--
-- callback is defined in network.jal
procedure slip_received_packet_callback(byte in packet_size)
--
include slip -- include the library
--
slip_init() -- init the slip library

-- setup networking
const byte NETWORK_LINK_LAYER = SLIP
include network

----------------------------------------------------------------
-- MAIN PROGRAM
----------------------------------------------------------------
ip_header_set_source_ip     (192,168,2,3) -- PIC's ip address

-- inform user PIC is ready !
for 10 loop
    serial_sw_data = "!"
end loop

-- choose ip_header protocol and destination ip
ip_header_protocol = NETWORK_PROTOCOL_ICMP -- ICMP
ip_header_set_destination_ip(192,168,2,2)  -- destination ip

forever loop
   icmp_send_echo()
   _usec_delay(1_000_000)
end loop


