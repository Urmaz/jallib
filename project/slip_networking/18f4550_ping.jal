-- Title: Sample PING via SLIP
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample sends and receives PING via SLIP
--
-- Notes: Does not work!
--
-- Sources:
-- http://tools.ietf.org/html/rfc1055
--

include 18f4550                    -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- (unspecified configuration bits may cause a different frequency!)(
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target PLLDIV  P1           -- PLL off
pragma target CPUDIV  P2           -- no cycle divisor
pragma target WDT  disabled        -- no watchdog
pragma target XINST disabled       -- not supported by JalV2
pragma target LVP  disabled        -- no Low Voltage Programming
pragma target MCLR external        -- reset externally


enable_digital_io()  -- make all pins digital I/O

-- setup serial software
const serial_sw_baudrate = 115200
alias serial_sw_tx_pin is pin_B4
alias serial_sw_rx_pin is pin_B5
pin_B4_direction = output
pin_B5_direction = input
include serial_software
serial_sw_init()


-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()

alias debug_data is serial_sw_data
const bit DEBUG_MASTER_ENABLE = TRUE    -- enables debugging
include debug
--
-- turn on and off debug levels.
;debug_lvl_0 = ON
debug_lvl_1 = ON   -- network error messages
debug_lvl_2 = ON   -- network general text
debug_lvl_3 = ON   -- network packet data type text
debug_lvl_4 = ON   -- network debug data
;debug_lvl_5 = ON
;debug_lvl_6 = ON

var byte debug_text1[] = "DEBUG STARTED"
debug_string(DEBUG_2,debug_text1)
debug_crlf(DEBUG_2)

-- setup a button
alias button is pin_a0
alias button_direction is pin_a0_direction
--
button_direction = INPUT

-- setup SLIP
const word SLIP_MTU = 254  -- Max bytes per packet (Max Transfer Unit)
--
-- choose your interrupt routine. you may ignore this and create your own
-- isr or use polling method slip_poll()
const bit SLIP_USE_SERIAL_HW_ISR = TRUE -- TRUE = recieve data via serial hw interrupt
const SLIP_DO_CALLBACK_IN_ISR == FALSE -- the callback will get run within the ISR
--
-- choose your data carrier
alias slip_serial_data is serial_hw_data
alias slip_data_available is serial_hw_data_available
--
-- Choose the size of your recieve buffer.
-- Should be the same as SLIP MTU if slip interrupts are not enabled
const byte QUEUE01_SIZE = 254
include queue01 -- include the queue/buffer library
alias slip_rx_buffer is queue01_nb  -- alias buffer for recieved data
--
-- Choose buffer to hold packet sizes (for interrupts only)
const byte QUEUE02_SIZE = 10
include queue02 -- include the queue/buffer library
alias slip_packet_size_buffer is queue02_nb     -- alias buffer for packet sizes
alias slip_packets_available is queue02_nr_used -- alias for number of packets avail
--
-- prototype for procedure defined in network.jal
procedure network_received_packet(byte in packet_size)
-- allias callback for when a full slip packet is recieved
alias slip_received_packet_callback is network_received_packet

include slip -- include the library
--
-- alias slip for networking
alias network_send_data is slip_send_data
alias network_rx_packet_available is slip_packet_available
alias network_rx_buffer is slip_rx_buffer
alias network_max_packet_size is SLIP_MTU
alias network_packet_queue_size is QUEUE01_SIZE
alias network_end_packet is slip_end_packet
--
-- queue clear procedure for networking
procedure network_clear_rx_queue() is
   queue01_clear()
   queue02_clear()
end procedure
--
slip_init() -- init the slip library

-- setup ip header lib
include ip_header
ip_header_set_ip (192,168,2,3) -- PIC's ip address

-- setup icmp lib
const byte ICMP_MAX_MESSAGE_SIZE = 64
include icmp

include udp

include dns

-- setup networking
const byte NETWORK_LINK_LAYER = SLIP -- choose network link
include network

----------------------------------------------------------------
-- MAIN PROGRAM
----------------------------------------------------------------

-- inform user PIC is ready!
var byte program_started[] = "PROGRAM STARTED"
debug_string(DEBUG_2,program_started)
debug_crlf(DEBUG_2)

var byte char
forever loop
   -- send ping when button is pressed
   if button == LOW then
      icmp_send_echo(192,168,2,2)
      ;dns_quiry_domain()
      
      while button == LOW loop
         _usec_delay(10_000)
      end loop
   end if

   -- poll for full packets
   if network_rx_packet_available then
      -- check what type of packet it is and do whatever has to be done
      network_received_packet(slip_packet_size_buffer)
   end if
end loop


