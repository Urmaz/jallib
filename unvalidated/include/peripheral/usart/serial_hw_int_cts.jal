-- ===================================================
-- Title: serial_hw_int_cts.jal. Interrupt driven buffered serial interface with flow control.
--
-- Author: Rob Hamerling, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: =2.4h
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Serial communications
--              - receive and transmit data transfer is interrupt driven
--              - receive and transmit data transfer uses circular buffers
--              - automatic CTS flow control with spare free space for FiFo buffer
--
-- Sources:
--
-- Notes:
--
-- The PIC ports use positive logic:
-- '1' is positive voltage, '0' is ground.
--
-- In the RS232 standard:
-- - Negative voltage ('mark') means OFF for control signals, and
--   indicates 1 (one) for data signals (start-, data-, stop-bits).
-- - Positive voltage ('space') means ON for control signals and
--   0 (zero) for start-, data- and stop-bits.
-- - Signal levels: 'mark' = -3V to -15V,  'space' = +3V to +15V
--
-- Between PIC and RS232 normally an interface chip is used, such as a
-- Maxim/Dallas MAX232 or MAX202. These are not only voltage level CONverter
-- but also signal INverter. You should be aware of the following:
-- - The inversion of PIC data-in and data-out by the MAX2x2 is required
--   to convert data-, start- and stop-bits to/from the corresponding
--   RS232 polarity. So nothing special has to be done in the program
--   because the USART of the PIC uses 'inverted' signal levels!
-- - For CTS the inversion by the MAX2x2 is NOT desired.
--   Therefore the program has to use inverted signalling for CTS:
--   'FALSE' is used for CTS ON and 'TRUE' for CTS OFF!
--   As a reminder for this 'inverted' logic the signal is called
--   serial_cts_inv (e.g. serial_CTS_inv = TRUE means CTS is FALSE!).
--
-- Remember also: RxD of RS232-plug connects to TX of PIC via MAX2x2
--                TxD of RS232-plug connects to RX of PIC via MAX2x2
--
-- This library supports:
--     - Data format: 8 bits data, 1 start-bit, 1 stop bit
--     - Fixed speed in the range 1200..57600, depending on the resonator
--       frequency (see BAUD RATES tables in the datasheet with BRGH=1).
--
-- Available procedures/functions for application programs:
--
--  - serial_setup()                            -- initialise communications
--                                              -- (called automatically)
--  - serial_send_byte(byte out <byte>)         -- send byte
--                                              -- returns the transmitted byte
--  - serial_receive_byte(byte in <byte>) returns bit  -- receive byte
--                                              -- returns TRUE with data,
--                                              -- FALSE when no data available
--
-- =======================================================================
--
-- Application program must specify _before_ including this library
-- (values are recommended, if possible keep SERIAL_DELTA = 17).
--
--  const   SERIAL_XMTBUFSIZE  = 32             -- size of transmit buffer
--  const   SERIAL_RCVBUFSIZE  = 64             -- size of receive buffer
--  const   SERIAL_DELTA       = 17             -- spare space receive buffer
--
--  const   SERIAL_BPSRATE     = 19200          -- host communications
--                                              -- (range 9600..57600)
--
--  var  bit serial_overflow_discard = [ FALSE | TRUE ]
--                                              With transmit buffer overflow:
--                                                - TRUE: discard data
--                                                - FALSE: wait for free space
--                                               With receive buffer overflow
--                                               data is always discarded
--                                               without notification!
--
--
--  var  bit  serial_ctsinv            is pin_B4    -- incoming data flow control
--  var  bit  serial_ctsinv_direction  is pin_B4_direction
--
-- Notes: - For data transmit and receive the pins TX and RX are used
--          automatically, these have not to be assigned by the application.
--        - The CTS pin selected above is an example!
--        - When CTS flow control is not desired then assign both
--          serial_ctsinv and serial_cts_inv_direction to a dummy bit,
--          for example:
--              var  bit  dummy_bit
--              var  bit  serial_ctsinv            is dummy_bit1
--              var  bit  serial_ctsinv_direction  is dummy_bit2
--        - The serial_overflow_discard bit may be dynamically changed
--          (depending on how important the data is for th receiving party).
--
-- =======================================================================
--
-- Declare circular buffers for communications via UART:

var    byte  _serial_xmtbuf[SERIAL_XMTBUFSIZE]   -- circular output buffer
var    byte  _serial_rcvbuf[SERIAL_RCVBUFSIZE]   -- circular input buffer

-- Declare offsets in circular buffers:

var    byte  _serial_offsetxmthead               -- offset next byte from appl
var    byte  _serial_offsetxmttail               -- offset next byte to port
var    byte  _serial_offsetrcvhead               -- offset next byte from port
var    byte  _serial_offsetrcvtail               -- offset next byte to appl


-- =======================================================================
-- - UART - serial transmit interrupt handling
-- =======================================================================

procedure  _serial_transmit_interrupt_handler() is

   pragma interrupt

   var  byte  x;

   if ((PIR1_TXIF == TRUE) & (PIE1_TXIE == TRUE)) then  -- UART xmit interrupt
      if (_serial_offsetxmttail != _serial_offsetxmthead) then  -- data in xmit buffer
         x = _serial_xmtbuf[_serial_offsetxmttail]              -- next byte to xmit
         _serial_offsetxmttail = _serial_offsetxmttail + 1      -- next position
         if (_serial_offsetxmttail >= SERIAL_XMTBUFSIZE) then   -- beyond buffer
            _serial_offsetxmttail = 0           -- wrap to begin
         end if
         if (_serial_offsetxmttail == _serial_offsetxmthead) then  -- last byte xmt'd
            PIE1_TXIE = FALSE                   -- disable xmit interrupts
         end if
         TXREG = x                              -- actually xmit byte
      end if
   end if

end procedure


-- =======================================================================
-- - UART - serial receive interrupt handling
-- =======================================================================

procedure  _serial_receive_interrupt_handler() is

   pragma interrupt

   var  byte  x;

   if  (PIR1_RCIF == TRUE)  then                -- UART receive interrupt

      if ((RCSTA_OERR == TRUE) | (RCSTA_FERR == TRUE)) then  -- frame/overr error
         x = RCREG                              -- flush hardware buffer
         while RCSTA_OERR == TRUE loop          -- overrun state
            RCSTA_CREN = FALSE                  -- disable UART
            RCSTA_CREN = TRUE                   -- re-enable UART
            x = RCREG                           -- \  flush hardware buffers
            x = RCREG                           -- /
         end loop                               -- until no more overrun
         _serial_offsetrcvtail = 0              -- \  flush circular buffer
         _serial_offsetrcvhead = 0              -- /
         serial_ctsinv = FALSE                  -- ensure CTS true

      else                                      -- data without errors
         _serial_rcvbuf[_serial_offsetrcvhead] = RCREG      -- move byte to rcv buffer
         x = _serial_offsetrcvhead + 1          -- update offset
         if x >= SERIAL_RCVBUFSIZE then         -- buffer overflow
            x = 0                               -- wrap
         end if
         if (x != _serial_offsetrcvtail) then   -- buffer not yet full
            _serial_offsetrcvhead = x           -- update offset
         end if                                 -- (else discard byte,
                                                --  CTS flow control has failed)
         if (serial_ctsinv == FALSE) then       -- CTS is TRUE
            if _serial_offsetrcvhead > _serial_offsetrcvtail then  -- offset difference
               x = SERIAL_RCVBUFSIZE - _serial_offsetrcvhead + _serial_offsetrcvtail
            else
               x = _serial_offsetrcvtail - _serial_offsetrcvhead
            end if
            if (x < SERIAL_DELTA) then          -- circular buffer almost full
               serial_ctsinv = TRUE             -- set CTS FALSE
            end if
         end if

      end if

   end if

end procedure


-- --------------------------------------------------------------
--  Return byte (if any) from circular receive buffer for UART
--
--  input:   nothing
--
--  output:  received byte (if any)
--
--  returns: true  when byte returned
--           false if no byte available
--
--  notes: - Rises CTS when receive buffer has more than <DELTA>
--           bytes free space after delivering byte to caller.
--
-- -----------------------------------------------

function  serial_receive_byte(byte out data) return bit is

   var  byte  x                                 -- for buffer management

   if (_serial_offsetrcvtail == _serial_offsetrcvhead) then  -- receive buffer empty
      return false                              -- no data available
   end if

   data = _serial_rcvbuf[_serial_offsetrcvtail]  -- first available byte
   _serial_offsetrcvtail = _serial_offsetrcvtail + 1
   if (_serial_offsetrcvtail >= SERIAL_RCVBUFSIZE) then  -- buffer overflow
      _serial_offsetrcvtail = 0                 -- wrap
   end if
   if (serial_ctsinv == TRUE) then              -- CTS is FALSE
      if (_serial_offsetrcvhead > _serial_offsetrcvtail) then
         x = SERIAL_RCVBUFSIZE - _serial_offsetrcvhead + _serial_offsetrcvtail
      else
         x = _serial_offsetrcvtail - _serial_offsetrcvhead  -- offset difference
      end if
      if (x >= SERIAL_DELTA) then               -- enough free space now
         serial_ctsinv = FALSE                  -- make CTS TRUE
      end if
   end if

   return true                                  -- byte available

end function


-- --------------------------------------------------------------
--  Put a single byte in circular transmit buffer for UART
--
--  input:   byte to transmit
--
--  returns: transmitted byte (or 0x00 when data discarded)
--
--  notes: - Activates transmit interrupt handler when data buffered
--         - When buffer full act as indicated in 'serial_overflow_discard'
--           * TRUE:  discard data
--                    (and return 0x00 as data byte)
--           * FALSE: wait for free buffer space
--                    (returns only after data has been stored in buffer)
--
-- -----------------------------------------------

function  serial_send_byte(byte in data) return byte is

   var  byte  newxmthead                        -- offset in circular buffer

   if (_serial_offsetxmthead == _serial_offsetxmttail  &  -- nothing buffered
       PIR1_TXIF == true) then                  -- and UART not busy
      PIE1_TXIE = FALSE                         -- disable xmt interrupt
      TXREG = data                              -- transmit byte immediately
   else                                         -- use circular buffer
      _serial_xmtbuf[_serial_offsetxmthead] = data  -- put byte in buffer
      newxmthead = _serial_offsetxmthead + 1    -- offset next char
      if (newxmthead >= SERIAL_XMTBUFSIZE) then  -- beyond buffer end
         newxmthead = 0                         -- wrap to begin
      end if
      if (newxmthead != _serial_offsetxmttail) then  -- buffer not full
         _serial_offsetxmthead = newxmthead     -- update offset
      else                                      -- buffer full!
         if (serial_overflow_discard == FALSE) then  -- do not discard data!
            while (newxmthead == _serial_offsetxmttail) loop   -- buffer full
               -- nothing                       -- spin until something xmit'd
            end loop
            _serial_offsetxmthead = newxmthead  -- update offset
         else
            data = 0x00                         -- indicate byte discarded
         end if
      end if
      PIE1_TXIE = TRUE                          -- (re-)enable xmit interrupts
   end if

   return data                                  -- transmitted byte!

end function


-- -----------------------------------------------------------------------
-- Serial_Setup - procedure to initialize serial communications
-- -----------------------------------------------------------------------

procedure serial_setup() is

   serial_ctsinv_direction = output             -- input: UART CTS->PC

   _serial_offsetxmthead  = 0                   -- offset next byte from appl
   _serial_offsetxmttail  = 0                   -- offset next byte to port
   _serial_offsetrcvhead  = 0                   -- offset next byte from port
   _serial_offsetrcvtail  = 0                   -- offset next byte to appl

   RCSTA                  = 0b0000_0000         -- reset
   RCSTA_SPEN             = enabled             -- serial port enable
   RCSTA_CREN             = enabled             -- continuous receive enable

   TXSTA                  = 0b0000_0000         -- reset (8 bit, asyn)
   TXSTA_TXEN             = enabled             -- UART transmit enabled
   TXSTA_BRGH             = true                -- high baud rate
   SPBRG                  = (target_clock / 16 / SERIAL_BPSRATE * 10 - 5) / 10

   PIE1_RCIE              = enabled             -- UART receive int. enable
                                                -- (PIE1_TXIE dynamically)
   INTCON_PEIE            = enabled             -- periferal
   INTCON_GIE             = enabled             -- general

   serial_ctsinv          = false               -- CTS true: accept PC data

end procedure


-- -----------------------------------------------------------------------
-- Initialize serial communications
-- -----------------------------------------------------------------------

serial_setup()

-- =======================================================================

