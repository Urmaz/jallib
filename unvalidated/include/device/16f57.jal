-- ===================================================
-- Title: JalV2 device include file for pic16f57
--
-- Author: Rob Hamerling, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: =2.4h
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Device include file for pic16f57, containing:
--                - Declaration of ports and pins of the chip.
--                - Procedures for shadowing of ports and pins
--                  to circumvent the read-modify-write problem.
--                - Symbolic definitions for config bits (fuses)
--                - Some device dependent procedures for common
--                  operations, like:
--                   . enable_digital_io()
--
-- Sources:
--  - x:/mplab814/mplab_ide/device/pic16f57.dev
--  - x:/mplab814/mpasm_suite/lkr/16f57_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.49
--  - File creation date/time: 4 Oct 2008 14:38:14.
--
-- ===================================================
--
-- DataSheet: 41213
-- Programming Specifications: 41208
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_12            -- (banks = 4)
pragma  target  chip  16f57
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   2
pragma  code    2048
pragma  data    0x10-0x1F,0x30-0x3F,0x50-0x5F,0x70-0x7F
pragma  shared  0x8-0xF
--
var volatile byte _pic_accum shared at { 0xE,0x2E,0x4E,0x6E }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0xF,0x2F,0x4F,0x6F }   -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0xFFF
const word  _FUSES                = 0xFFF
--
const word  _ID_CT                = 4
const word  _ID_BASE[_ID_CT]      = { 0x0800,0x0801,0x0802,0x0803 }
const word  _ID[_ID_CT]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x20,0x40,0x60 }
var volatile byte  _ind                 at { 0x0,0x20,0x40,0x60 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1,0x21,0x41,0x61 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x22,0x42,0x62 }
var volatile byte  _pcl                 at { 0x2,0x22,0x42,0x62 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x23,0x43,0x63 }
var volatile bit*3 STATUS_PA            at STATUS : 5
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3,0x23,0x43,0x63 }      -- (compiler)
const        byte  _PA2                 =  7      -- (compiler)
const        byte  _PA1                 =  6      -- (compiler)
const        byte  _PA0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x24,0x44,0x64 }
var volatile byte  _fsr                 at { 0x4,0x24,0x44,0x64 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5,0x25,0x45,0x65 }
--
var          byte  _PORTA_shadow        = PORTA
--
procedure _PORTA_flush() is
   pragma inline
   PORTA = _PORTA_shadow
end procedure
--
procedure PORTA'put(byte in x) is
   pragma inline
   _PORTA_shadow = x
   _PORTA_flush()
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA_flush()
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA_flush()
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit   PORTA_T0CKI          at PORTA : 4
var volatile bit   PORTA_RA3            at PORTA : 3
var volatile bit   pin_A3               at PORTA : 3
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA2            at PORTA : 2
var volatile bit   pin_A2               at PORTA : 2
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA1            at PORTA : 1
var volatile bit   pin_A1               at PORTA : 1
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA0            at PORTA : 0
var volatile bit   pin_A0               at PORTA : 0
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6,0x26,0x46,0x66 }
--
var          byte  _PORTB_shadow        = PORTB
--
procedure _PORTB_flush() is
   pragma inline
   PORTB = _PORTB_shadow
end procedure
--
procedure PORTB'put(byte in x) is
   pragma inline
   _PORTB_shadow = x
   _PORTB_flush()
end procedure
--
procedure PORTB_low'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB_flush()
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB_flush()
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit   PORTB_RB7            at PORTB : 7
var volatile bit   pin_B7               at PORTB : 7
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB6            at PORTB : 6
var volatile bit   pin_B6               at PORTB : 6
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB5            at PORTB : 5
var volatile bit   pin_B5               at PORTB : 5
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB4            at PORTB : 4
var volatile bit   pin_B4               at PORTB : 4
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB3            at PORTB : 3
var volatile bit   pin_B3               at PORTB : 3
procedure pin_B3'put(bit in x at _PORTB_shadow : 3) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB2            at PORTB : 2
var volatile bit   pin_B2               at PORTB : 2
procedure pin_B2'put(bit in x at _PORTB_shadow : 2) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB1            at PORTB : 1
var volatile bit   pin_B1               at PORTB : 1
procedure pin_B1'put(bit in x at _PORTB_shadow : 1) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB0            at PORTB : 0
var volatile bit   pin_B0               at PORTB : 0
procedure pin_B0'put(bit in x at _PORTB_shadow : 0) is
   pragma inline
   _PORTB_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTC                at { 0x7,0x27,0x47,0x67 }
--
var          byte  _PORTC_shadow        = PORTC
--
procedure _PORTC_flush() is
   pragma inline
   PORTC = _PORTC_shadow
end procedure
--
procedure PORTC'put(byte in x) is
   pragma inline
   _PORTC_shadow = x
   _PORTC_flush()
end procedure
--
procedure PORTC_low'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC_flush()
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC_flush()
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit   PORTC_RC7            at PORTC : 7
var volatile bit   pin_C7               at PORTC : 7
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC6            at PORTC : 6
var volatile bit   pin_C6               at PORTC : 6
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC5            at PORTC : 5
var volatile bit   pin_C5               at PORTC : 5
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC4            at PORTC : 4
var volatile bit   pin_C4               at PORTC : 4
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC3            at PORTC : 3
var volatile bit   pin_C3               at PORTC : 3
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC2            at PORTC : 2
var volatile bit   pin_C2               at PORTC : 2
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC1            at PORTC : 1
var volatile bit   pin_C1               at PORTC : 1
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC0            at PORTC : 0
var volatile bit   pin_C0               at PORTC : 0
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC_flush()
end procedure
--
--
--
-- ------------------------------------------------
var  byte _TRISA_shadow = 0b1111_1111         -- default all input
--
procedure PORTA_direction'put(byte in x) is
   pragma inline
   _TRISA_shadow = x
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   _TRISA_shadow = (_TRISA_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   _TRISA_shadow = (_TRISA_shadow & 0x0F) | (x << 4)
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
--
procedure pin_A4_direction'put(bit in x at _TRISA_shadow : 4) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure pin_A3_direction'put(bit in x at _TRISA_shadow : 3) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure pin_A2_direction'put(bit in x at _TRISA_shadow : 2) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure pin_A1_direction'put(bit in x at _TRISA_shadow : 1) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure pin_A0_direction'put(bit in x at _TRISA_shadow : 0) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
-- ------------------------------------------------
var  byte _TRISB_shadow = 0b1111_1111         -- default all input
--
procedure PORTB_direction'put(byte in x) is
   pragma inline
   _TRISB_shadow = x
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure PORTB_low_direction'put(byte in x) is
   _TRISB_shadow = (_TRISB_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure PORTB_high_direction'put(byte in x) is
   _TRISB_shadow = (_TRISB_shadow & 0x0F) | (x << 4)
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
--
procedure pin_B7_direction'put(bit in x at _TRISB_shadow : 7) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B6_direction'put(bit in x at _TRISB_shadow : 6) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B5_direction'put(bit in x at _TRISB_shadow : 5) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B4_direction'put(bit in x at _TRISB_shadow : 4) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B3_direction'put(bit in x at _TRISB_shadow : 3) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B2_direction'put(bit in x at _TRISB_shadow : 2) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B1_direction'put(bit in x at _TRISB_shadow : 1) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B0_direction'put(bit in x at _TRISB_shadow : 0) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
-- ------------------------------------------------
var  byte _TRISC_shadow = 0b1111_1111         -- default all input
--
procedure PORTC_direction'put(byte in x) is
   pragma inline
   _TRISC_shadow = x
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure PORTC_low_direction'put(byte in x) is
   _TRISC_shadow = (_TRISC_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure PORTC_high_direction'put(byte in x) is
   _TRISC_shadow = (_TRISC_shadow & 0x0F) | (x << 4)
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
--
procedure pin_C7_direction'put(bit in x at _TRISC_shadow : 7) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C6_direction'put(bit in x at _TRISC_shadow : 6) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C5_direction'put(bit in x at _TRISC_shadow : 5) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C4_direction'put(bit in x at _TRISC_shadow : 4) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C3_direction'put(bit in x at _TRISC_shadow : 3) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C2_direction'put(bit in x at _TRISC_shadow : 2) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C1_direction'put(bit in x at _TRISC_shadow : 1) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C0_direction'put(bit in x at _TRISC_shadow : 0) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
-- ------------------------------------------------
var  byte _OPTION_REG_shadow = 0b1111_1111         -- default all set
--
procedure OPTION_REG'put(byte in x) is
   pragma inline
   _OPTION_REG_shadow = X
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_T0CS'put(bit in x at _OPTION_REG_shadow : 7) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_T0SE'put(bit in x at _OPTION_REG_shadow : 6) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_PSA'put(bit in x at _OPTION_REG_shadow : 5) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(byte in x at _OPTION_REG_shadow : 2) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
--
-- ===================================================
--
-- Special device dependent procedures
--
-- ---------------------------------------------------
-- Switch analog ports to digital mode (if analog module present).
--
procedure enable_digital_io() is
   pragma inline
end procedure
--
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0xFFF
--
pragma fuse_def OSC 0x3 {
       EXTOSC_NOCLKOUT = 0x3
       LP = 0x0
       XT = 0x1
       HS = 0x2
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def CP 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
--
