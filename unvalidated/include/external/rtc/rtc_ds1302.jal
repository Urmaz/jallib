-- ------------------------------------------------------
-- Title: communication between rtc DS1302 chip and microcontroller
--
-- Author: Richard Zengerink,  Copyright (c) 2008, all rights reserved
--
-- Adapted-by:
--
-- Compiler: =2.4
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library to handle DS1302 rtc chip
--
-- Sources:
--
-- Notes:
--
--
-- -------------------------------------------------------------------------
--  Start of code
-- -------------------------------------------------------------------------
--
--
-- ----------------------------------------------------------------------------
-- variable declaration needed for this library
--
-- ----------------------------------------------------------------------------

var byte trick_char_reg ;trickel charge  register (90h)

var byte second    ;seconds (0 TO 59)
var byte minut     ;minutes (0 TO 59)
var byte hrs       ;houres  (0 TO 23)
var byte date      ;day of mounth (1 to 31)
var byte mounth    ;mounth (1 to 12)
var byte day       ;day of week (1 = monday 7 = sunday)
var word year      ;year (00 to 99)
var byte protreg   ;protect register

var volatile bit rout0 at trick_char_reg :0
var volatile bit rout1 at trick_char_reg :1
var volatile bit ds0 at trick_char_reg :2
var volatile bit ds1 at trick_char_reg :3

-- ----------------------------------------------------------------------------
-- programs the trickel charge register according the parameters set in the MAIN file
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

if rtc_trickel then
   trick_char_reg = 0b1010_0000
   if rtc_diode ==1 then             ;1 diode then DS1 = 0 and DS0 = 1
      ds0 = 1
      ds1 = 0
   else
      if rtc_diode ==2 then          ;2 diodes then DS1 = 1 and DS0 = 0
         ds0 = 0
         ds1 = 1
      else
         ds0 = 0                 ;no diode selection
         ds1 = 0
      end if
   end if
   if rtc_resistor ==0 then          ;rtc_RESISTOR = 0Ohm then ROUT0 = 0 and ROUT1 = 0
      rout0 = 0
      rout1 = 0
   else
      if rtc_resistor ==2 then       ;rtc_RESISTOR = 2kOhm then ROUT0 = 1 and ROUT1 = 0
         rout0 = 1
         rout1 = 0
      else
         if rtc_resistor ==4 then    ;rtc_RESISTOR = 4kOhm then ROUT0 = 0 and ROUT1 = 1
            rout0 = 0
            rout1 = 1
         else
            rout0 = 1            ;rtc_RESISTOR = 8kOhm then ROUT0 = 1 and ROUT1 = 1
            rout1 = 1
         end if
      end if
   end if
else
   trick_char_reg = 0b0000_0001
end if


-- ----------------------------------------------------------------------------
-- convert from decimal to rtc format
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure dec_to_rtc( byte in out data ) is
  var byte rtc
  rtc = data
  if rtc <= 9 then
    rtc = rtc
    else
    if rtc <= 19 then
        rtc = rtc + 6
        else
        if rtc <= 29 then
            rtc = rtc + 12
            else
            if rtc <= 39 then
                rtc = rtc + 18
                else
                if rtc <= 49 then
                    rtc = rtc + 24
                    else
                    if rtc <= 59 then
                        rtc = rtc + 30
                    end if
                end if
            end if
        end if
    end if
end if
 data = rtc
end procedure


-- ----------------------------------------------------------------------------
-- convert from rtc format to decimal
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure rtc_to_dec( byte in out data ) is
  var byte dec
  dec = data
  dec = dec & 0b0111_1111

  if dec <= 9 then
    dec = dec
    else
    if dec <= 25 then
        dec = dec - 6
        else
        if dec <= 41 then
            dec = dec - 12
            else
            if dec <= 57 then
                dec = dec - 18
                else
                if dec <= 73 then
                    dec = dec - 24
                    else
                    if dec <= 89 then
                        dec = dec - 30
                    end if
                end if
            end if
        end if
    end if
  end if
  data = dec
end procedure




-- ----------------------------------------------------------------------------
-- gives a clock puls
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure rtc_clock()  is
 rtc_sclk = high
 delay_1us
 rtc_sclk = low
 delay_1us
end procedure




procedure rtc_register_send(byte in register) is
  for 8 loop
      if (register & 0b0000_0001)== 1 then rtc_io = high else rtc_io = low end if
      rtc_clock
      register = register >> 1  ;shift right register
  end loop
end procedure




-- ----------------------------------------------------------------------------
-- sends data to rtc
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure rtc_data_send( byte in data ) is
  for 8 loop
      if (data & 0b0000_0001)== 1 then rtc_io = high else rtc_io = low end if
      rtc_clock
      data = data >> 1   ;shift right data
  end loop
end procedure



-- ----------------------------------------------------------------------------
-- reads data from rtc
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure rtc_read_data(byte out data) is

  var bit db at data : 7
    for 7 loop
      db = rtc_io
      data = data >> 1   ;shift right data
      rtc_clock
    end loop
      db = rtc_io
      rtc_clock
end procedure




-- ----------------------------------------------------------------------------
-- Writes specified data (without converting) to a specified register in the
-- rtc
-- ----------------------------------------------------------------------------

procedure rtc_write( byte in data, byte in register ) is ; send data to rtc

  rtc_iodir = output
  rtc_sclk = low
  rtc_ce =  high

  rtc_register_send (register)

  rtc_data_send (data)
  
  rtc_ce =  low
end procedure




-- ----------------------------------------------------------------------------
-- reads specified data from a specified register in the
-- rtc (without converting)
-- ----------------------------------------------------------------------------

procedure rtc_read( byte in register , byte out data ) is ; recieve data from rtc
  var bit db at data : 7

  rtc_iodir = output
  rtc_sclk = low
  rtc_ce =  high


  rtc_register_send (register)

  rtc_iodir = input

  data = 0

  for 7 loop
      db = rtc_io
      data = data >> 1   ;shift right data
      rtc_clock
  end loop
      db = rtc_io

  rtc_ce =  low
  
end procedure




-- ----------------------------------------------------------------------------
-- converts the 8 varables (SECOND,MINUT,..., YEAR and PROTREG) from decimal
-- to rtc format and writes them directly to rtc
-- ----------------------------------------------------------------------------

procedure rtc_burst_write_clock()  is ; send 8 datas to rtc

  var byte data

  rtc_iodir = output
  rtc_sclk = low
  rtc_ce =  high

  rtc_register_send (0xBE)

  rtc_sclk = low

  data = second
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = minut
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = hrs
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = date
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = mounth
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = day
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = year
  dec_to_rtc ( data )
  rtc_data_send (data)

  data = protreg
  dec_to_rtc ( data )
  rtc_data_send (data)

  rtc_ce =  low

end procedure


-- ----------------------------------------------------------------------------
-- Reads 8 variable from rtc converts them from rtc format to decimal and
-- put them in SECOND,MINUT,..., YEAR and PROTREG
-- ----------------------------------------------------------------------------

procedure rtc_burst_read_clock()  is ; READ 8 datas from rtc

  var byte data

  rtc_iodir = output
  rtc_sclk = low
  rtc_ce =  high

  rtc_register_send (0xBF)

  rtc_iodir = input

  rtc_sclk = low

  rtc_read_data (data)
  second = data

  rtc_read_data (data)
  minut = data

  rtc_read_data (data)
  hrs = data

  rtc_read_data (data)
  date = data

  rtc_read_data (data)
  mounth = data

  rtc_read_data (data)
  day = data

  rtc_read_data (data)
  year = data

  rtc_read_data (data)
  protreg = data

  rtc_ce =  low


  rtc_to_dec ( second )
  rtc_to_dec ( minut )
  rtc_to_dec ( hrs )
  rtc_to_dec ( date )
  rtc_to_dec ( mounth )
  rtc_to_dec ( year )
end procedure


-- ----------------------------------------------------------------------------
-- reads second value from rtc converts it from rtc format to decimal and
-- place it in variable SECOND
-- ----------------------------------------------------------------------------

procedure second_read() is
   var byte data
   rtc_read ( 0x81 , data )
   rtc_to_dec ( data )
   second = data
end procedure



-- ----------------------------------------------------------------------------
-- reads minut value from rtc converts it from rtc format to decimal and
-- place it in variable MINUT
-- ----------------------------------------------------------------------------

procedure minut_read() is
   var byte data
   rtc_read ( 0x83 , data )
   rtc_to_dec ( data )
   minut = data
end procedure



-- ----------------------------------------------------------------------------
-- reads hrs value from rtc converts it from rtc format to decimal and
-- place it in variable HRS
-- ----------------------------------------------------------------------------

procedure hrs_read() is
   var byte data
   rtc_read ( 0x85 , data )
   rtc_to_dec ( data )
   hrs = data
end procedure



-- ----------------------------------------------------------------------------
-- reads date value from rtc converts it from rtc format to decimal and
-- place it in variable DATE
-- ----------------------------------------------------------------------------

procedure date_read() is
   var byte data
   rtc_read ( 0x87 , data )
   rtc_to_dec ( data )
   date = data
end procedure



-- ----------------------------------------------------------------------------
-- reads mounth value from rtc converts it from rtc format to decimal and
-- place it in variable MOUNTH
-- ----------------------------------------------------------------------------

procedure mounth_read() is
   var byte data
   rtc_read ( 0x89 , data )
   rtc_to_dec ( data )
   mounth = data
end procedure



-- ----------------------------------------------------------------------------
-- reads day value from rtc converts it from rtc format to decimal and
-- place it in variable DAY
-- ----------------------------------------------------------------------------

procedure day_read() is
   var byte data
   rtc_read ( 0x8B , data )
   rtc_to_dec ( data )
   day = data
end procedure



-- ----------------------------------------------------------------------------
-- reads year value from rtc converts it from rtc format to decimal and
-- place it in variable YEAR
-- ----------------------------------------------------------------------------

procedure year_read() is
   var byte data
   rtc_read ( 0x8D , data )
   rtc_to_dec ( data )
   year = data
end procedure



-- ----------------------------------------------------------------------------
-- reads protection register value from rtc converts it from rtc format to
-- decimal and place it in variable PROTREG
-- ----------------------------------------------------------------------------

procedure protreg_read() is
   var byte data
   rtc_read ( 0x8F , data )
   rtc_to_dec ( data )
   protreg = data
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable SECOND from decimal to rtc format and
-- writes it into the rtc second register
-- ----------------------------------------------------------------------------

procedure second_write() is
   var byte data
   data = second
   dec_to_rtc ( data )
   rtc_write ( data , 0x80 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable MINUT from decimal to rtc format and
-- writes it into the rtc minut register
-- ----------------------------------------------------------------------------

procedure minut_write() is
   var byte data
   data = minut
   dec_to_rtc ( data )
   rtc_write ( data , 0x82 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable HRS from decimal to rtc format and
-- writes it into the rtc hrs register
-- ----------------------------------------------------------------------------

procedure hrs_write() is
   var byte data
   data = hrs
   dec_to_rtc ( data )
   rtc_write ( data , 0x84 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable DATE from decimal to rtc format and
-- writes it into the rtc date register
-- ----------------------------------------------------------------------------

procedure date_write() is
   var byte data
   data = date
   dec_to_rtc ( data )
   rtc_write ( data , 0x86 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable MOUNTH from decimal to rtc format and
-- writes it into the rtc mounth register
-- ----------------------------------------------------------------------------

procedure mounth_write() is
   var byte data
   data = mounth
   dec_to_rtc ( data )
   rtc_write ( data , 0x88 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable DAY from decimal to rtc format and
-- writes it into the rtc day register
-- ----------------------------------------------------------------------------

procedure day_write() is
   var byte data
   data = day
   dec_to_rtc ( data )
   rtc_write ( data , 0x8A )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable YEAR from decimal to rtc format and
-- writes it into the rtc year register
-- ----------------------------------------------------------------------------

procedure year_write() is
   var byte data
   data = year
   dec_to_rtc ( data )
   rtc_write ( data , 0x8c )
end procedure



-- ----------------------------------------------------------------------------
-- converts value from variable PROTREG from decimal to rtc format and
--  writes it into the rtc protection register
-- ----------------------------------------------------------------------------

procedure protreg_write() is
   var byte data
   data = protreg
   dec_to_rtc ( data )
   rtc_write ( data , 0x8e )
end procedure




-- ----------------------------------------------------------------------------
-- stops the rtc
--
-- ----------------------------------------------------------------------------

procedure rtc_stop() is
   second_read
   second = second | 0b1000_0000
   second_write
end procedure




-- ----------------------------------------------------------------------------
-- starts the rtc
--
-- ----------------------------------------------------------------------------

procedure rtc_start() is
   second_read
   second = second & 0b0111_1111
   second_write
end procedure



-- ----------------------------------------------------------------------------
-- initials the rtc
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure init_rtc() is
rtc_iodir   = output
rtc_ce = low
rtc_write ( trick_char_reg , 0x90 ) ;program trickel charge register
end procedure


init_rtc

