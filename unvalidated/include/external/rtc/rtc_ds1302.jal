-- ------------------------------------------------------
-- Title: communication between RTC DS1302 chip and microcontroller
--
-- Author: Richard Zengerink,  Copyright (c) 2008, all rights reserved
--
-- Adapted-by:
--
-- Compiler: =2.4
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Library to handle DS1302 RTC chip
--
-- Sources:
--
-- Notes:
--
--
-- -------------------------------------------------------------------------
--  Start of code
-- -------------------------------------------------------------------------
--
--
-- ----------------------------------------------------------------------------
-- variable declaration needed for this library
--
-- ----------------------------------------------------------------------------

var byte TRICK_CHAR_REG ;trickel charge  register (90h)

var byte SECOND    ;seconds (0 TO 59)
var byte MINUT     ;minutes (0 TO 59)
var byte HRS       ;houres  (0 TO 23)
var byte DATE      ;day of mounth (1 to 31)
var byte MOUNTH    ;mounth (1 to 12)
var byte DAY       ;day of week (1 = monday 7 = sunday)
var word YEAR      ;year (00 to 99)
var byte PROTREG   ;protect register

var volatile bit ROUT0 at TRICK_CHAR_REG :0
var volatile bit ROUT1 at TRICK_CHAR_REG :1
var volatile bit DS0 at TRICK_CHAR_REG :2
var volatile bit DS1 at TRICK_CHAR_REG :3

-- ----------------------------------------------------------------------------
-- programs the trickel charge register according the parameters set in the MAIN file
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

if RTC_TRICKEL then
   TRICK_CHAR_REG = 0b1010_0000
   If RTC_DIODE ==1 then             ;1 diode then DS1 = 0 and DS0 = 1
      DS0 = 1
      DS1 = 0
   else
      If RTC_DIODE ==2 then          ;2 diodes then DS1 = 1 and DS0 = 0
         DS0 = 0
         DS1 = 1
      else
         DS0 = 0                 ;no diode selection
         DS1 = 0
      end if
   end if
   If RTC_RESISTOR ==0 then          ;RTC_RESISTOR = 0Ohm then ROUT0 = 0 and ROUT1 = 0
      ROUT0 = 0
      ROUT1 = 0
   else
      If RTC_RESISTOR ==2 then       ;RTC_RESISTOR = 2kOhm then ROUT0 = 1 and ROUT1 = 0
         ROUT0 = 1
         ROUT1 = 0
      else
         If RTC_RESISTOR ==4 then    ;RTC_RESISTOR = 4kOhm then ROUT0 = 0 and ROUT1 = 1
            ROUT0 = 0
            ROUT1 = 1
         else
            ROUT0 = 1            ;RTC_RESISTOR = 8kOhm then ROUT0 = 1 and ROUT1 = 1
            ROUT1 = 1
         end if
      end if
   end if
else
   TRICK_CHAR_REG = 0b0000_0001
end if


-- ----------------------------------------------------------------------------
-- convert from decimal to RTC format
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure DEC_TO_RTC ( byte in out DATA ) is
  var byte RTC
  RTC = DATA
  If RTC <= 9 Then
    RTC = RTC
    Else
    If RTC <= 19 Then
        RTC = RTC + 6
        Else
        If RTC <= 29 Then
            RTC = RTC + 12
            Else
            If RTC <= 39 Then
                RTC = RTC + 18
                Else
                If RTC <= 49 Then
                    RTC = RTC + 24
                    Else
                    If RTC <= 59 Then
                        RTC = RTC + 30
                    End If
                End If
            End If
        End If
    End If
End If
 DATA = RTC
end procedure


-- ----------------------------------------------------------------------------
-- convert from RTC format to decimal
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure RTC_TO_DEC ( byte in out DATA ) is
  var byte DEC
  DEC = DATA
  DEC = DEC & 0B0111_1111

  If DEC <= 9 Then
    DEC = DEC
    Else
    If DEC <= 25 Then
        DEC = DEC - 6
        Else
        If DEC <= 41 Then
            DEC = DEC - 12
            Else
            If DEC <= 57 Then
                DEC = DEC - 18
                Else
                If DEC <= 73 Then
                    DEC = DEC - 24
                    Else
                    If DEC <= 89 Then
                        DEC = DEC - 30
                    End If
                End If
            End If
        End If
    End If
  End If
  DATA = DEC
end procedure




-- ----------------------------------------------------------------------------
-- gives a clock puls
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure RTC_CLOCK  is
 RTC_SCLK = high
 delay_1us
 RTC_SCLK = low
 delay_1us
end procedure




procedure RTC_REGISTER_SEND (byte in REGISTER) is
  for 8 loop
      if (REGISTER & 0b0000_0001)== 1 then RTC_IO = high else RTC_IO = low end if
      RTC_CLOCK
      REGISTER = REGISTER >> 1  ;shift right REGISTER
  end loop
end procedure




-- ----------------------------------------------------------------------------
-- sends data to RTC
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure RTC_DATA_SEND ( byte in DATA ) is
  for 8 loop
      if (DATA & 0b0000_0001)== 1 then RTC_IO = high else RTC_IO = low end if
      RTC_CLOCK
      DATA = DATA >> 1   ;shift right DATA
  end loop
end procedure



-- ----------------------------------------------------------------------------
-- reads data from RTC
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure   RTC_READ_DATA (byte out DATA) is

  var bit DB at DATA : 7
    for 7 loop
      DB = RTC_IO
      DATA = DATA >> 1   ;shift right DATA
      RTC_CLOCK
    end loop
      DB = RTC_IO
      RTC_CLOCK
end procedure




-- ----------------------------------------------------------------------------
-- Writes specified data (without converting) to a specified register in the
-- RTC
-- ----------------------------------------------------------------------------

procedure RTC_WRITE ( byte in DATA, byte in REGISTER ) is ; send data to RTC

  RTC_IODir = output
  RTC_SCLK = low
  RTC_CE =  high

  RTC_REGISTER_SEND (REGISTER)

  RTC_DATA_SEND (DATA)
  
  RTC_CE =  LOW
end procedure




-- ----------------------------------------------------------------------------
-- reads specified data from a specified register in the
-- RTC (without converting)
-- ----------------------------------------------------------------------------

procedure RTC_READ ( byte in REGISTER , byte out DATA ) is ; recieve data from RTC
  var bit DB at DATA : 7

  RTC_IODir = output
  RTC_SCLK = low
  RTC_CE =  high


  RTC_REGISTER_SEND (REGISTER)

  RTC_IODir = input

  DATA = 0

  for 7 loop
      DB = RTC_IO
      DATA = DATA >> 1   ;shift right DATA
      RTC_CLOCK
  end loop
      DB = RTC_IO

  RTC_CE =  LOW
  
end procedure




-- ----------------------------------------------------------------------------
-- converts the 8 varables (SECOND,MINUT,..., YEAR and PROTREG) from decimal
-- to RTC format and writes them directly to RTC
-- ----------------------------------------------------------------------------

procedure RTC_BURST_WRITE_CLOCK  is ; send 8 datas to RTC

  var byte DATA

  RTC_IODir = output
  RTC_SCLK = low
  RTC_CE =  high

  RTC_REGISTER_SEND (0xBE)

  RTC_SCLK = low

  DATA = SECOND
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = MINUT
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = HRS
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = DATE
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = MOUNTH
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = DAY
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = YEAR
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  DATA = PROTREG
  DEC_TO_RTC ( DATA )
  RTC_DATA_SEND (DATA)

  RTC_CE =  LOW

end procedure


-- ----------------------------------------------------------------------------
-- Reads 8 variable from RTC converts them from RTC format to decimal and
-- put them in SECOND,MINUT,..., YEAR and PROTREG
-- ----------------------------------------------------------------------------

procedure RTC_BURST_READ_CLOCK  is ; READ 8 datas from RTC

  var byte DATA

  RTC_IODir = output
  RTC_SCLK = low
  RTC_CE =  high

  RTC_REGISTER_SEND (0xBF)

  RTC_IODir = input

  RTC_SCLK = low

  RTC_READ_DATA (DATA)
  SECOND = DATA

  RTC_READ_DATA (DATA)
  MINUT = DATA

  RTC_READ_DATA (DATA)
  HRS = DATA

  RTC_READ_DATA (DATA)
  DATE = DATA

  RTC_READ_DATA (DATA)
  MOUNTH = DATA

  RTC_READ_DATA (DATA)
  DAY = DATA

  RTC_READ_DATA (DATA)
  YEAR = DATA

  RTC_READ_DATA (DATA)
  PROTREG = DATA

  RTC_CE =  LOW


  RTC_TO_DEC ( SECOND )
  RTC_TO_DEC ( MINUT )
  RTC_TO_DEC ( HRS )
  RTC_TO_DEC ( DATE )
  RTC_TO_DEC ( MOUNTH )
  RTC_TO_DEC ( YEAR )
end procedure


-- ----------------------------------------------------------------------------
-- reads second value from RTC converts it from RTC format to decimal and
-- place it in variable SECOND
-- ----------------------------------------------------------------------------

procedure SECOND_READ is
   var byte DATA
   RTC_READ ( 0x81 , DATA )
   RTC_TO_DEC ( DATA )
   SECOND = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads minut value from RTC converts it from RTC format to decimal and
-- place it in variable MINUT
-- ----------------------------------------------------------------------------

procedure MINUT_READ is
   var byte DATA
   RTC_READ ( 0x83 , DATA )
   RTC_TO_DEC ( DATA )
   MINUT = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads hrs value from RTC converts it from RTC format to decimal and
-- place it in variable HRS
-- ----------------------------------------------------------------------------

procedure HRS_READ is
   var byte DATA
   RTC_READ ( 0x85 , DATA )
   RTC_TO_DEC ( DATA )
   HRS = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads date value from RTC converts it from RTC format to decimal and
-- place it in variable DATE
-- ----------------------------------------------------------------------------

procedure DATE_READ is
   var byte DATA
   RTC_READ ( 0x87 , DATA )
   RTC_TO_DEC ( DATA )
   DATE = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads mounth value from RTC converts it from RTC format to decimal and
-- place it in variable MOUNTH
-- ----------------------------------------------------------------------------

procedure MOUNTH_READ is
   var byte DATA
   RTC_READ ( 0x89 , DATA )
   RTC_TO_DEC ( DATA )
   MOUNTH = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads day value from RTC converts it from RTC format to decimal and
-- place it in variable DAY
-- ----------------------------------------------------------------------------

procedure DAY_READ is
   var byte DATA
   RTC_READ ( 0x8B , DATA )
   RTC_TO_DEC ( DATA )
   DAY = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads year value from RTC converts it from RTC format to decimal and
-- place it in variable YEAR
-- ----------------------------------------------------------------------------

procedure YEAR_READ is
   var byte DATA
   RTC_READ ( 0x8D , DATA )
   RTC_TO_DEC ( DATA )
   YEAR = DATA
end procedure



-- ----------------------------------------------------------------------------
-- reads protection register value from RTC converts it from RTC format to
-- decimal and place it in variable PROTREG
-- ----------------------------------------------------------------------------

procedure PROTREG_READ is
   var byte DATA
   RTC_READ ( 0x8F , DATA )
   RTC_TO_DEC ( DATA )
   PROTREG = DATA
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable SECOND from decimal to RTC format and
-- writes it into the RTC second register
-- ----------------------------------------------------------------------------

procedure SECOND_WRITE is
   var byte DATA
   DATA = SECOND
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x80 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable MINUT from decimal to RTC format and
-- writes it into the RTC minut register
-- ----------------------------------------------------------------------------

procedure MINUT_WRITE is
   var byte DATA
   DATA = MINUT
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x82 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable HRS from decimal to RTC format and
-- writes it into the RTC hrs register
-- ----------------------------------------------------------------------------

procedure HRS_WRITE is
   var byte DATA
   DATA = HRS
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x84 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable DATE from decimal to RTC format and
-- writes it into the RTC date register
-- ----------------------------------------------------------------------------

procedure DATE_WRITE is
   var byte DATA
   DATA = DATE
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x86 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable MOUNTH from decimal to RTC format and
-- writes it into the RTC mounth register
-- ----------------------------------------------------------------------------

procedure MOUNTH_WRITE is
   var byte DATA
   DATA = MOUNTH
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x88 )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable DAY from decimal to RTC format and
-- writes it into the RTC day register
-- ----------------------------------------------------------------------------

procedure DAY_WRITE is
   var byte DATA
   DATA = DAY
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x8A )
end procedure




-- ----------------------------------------------------------------------------
-- converts value from variable YEAR from decimal to RTC format and
-- writes it into the RTC year register
-- ----------------------------------------------------------------------------

procedure YEAR_WRITE is
   var byte DATA
   DATA = YEAR
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x8C )
end procedure



-- ----------------------------------------------------------------------------
-- converts value from variable PROTREG from decimal to RTC format and
--  writes it into the RTC protection register
-- ----------------------------------------------------------------------------

procedure PROTREG_WRITE is
   var byte DATA
   DATA = PROTREG
   DEC_TO_RTC ( DATA )
   RTC_WRITE ( DATA , 0x8E )
end procedure




-- ----------------------------------------------------------------------------
-- stops the RTC
--
-- ----------------------------------------------------------------------------

procedure RTC_STOP is
   SECOND_READ
   SECOND = SECOND | 0b1000_0000
   SECOND_WRITE
end procedure




-- ----------------------------------------------------------------------------
-- starts the RTC
--
-- ----------------------------------------------------------------------------

procedure RTC_START is
   SECOND_READ
   SECOND = SECOND & 0b0111_1111
   SECOND_WRITE
end procedure



-- ----------------------------------------------------------------------------
-- initials the RTC
-- (this procedure is only used inside this file)
-- ----------------------------------------------------------------------------

procedure INIT_RTC is
RTC_IODir   = output
RTC_CE = LOW
RTC_WRITE ( TRICK_CHAR_REG , 0x90 ) ;Program Trickel Charge register
end procedure


INIT_RTC

