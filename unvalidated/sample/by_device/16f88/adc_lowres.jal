-- Title: Sample showing how to use adc_hardware library
-- Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this program shows how to use adc_hardware library. It regurlarly performs an
-- Analog-to-Digital Conversion, on channel AN0 (for 16f88, it's pin A0), and sends
-- the result through serial.
-- 
-- Notes: as output, this sample produces characters on a serial link, and uses delay library.
-- First be sure you're able to run serial and delay tests.
--
--
-- Few words about diagram: this program performs ADC on channel AN0, so you can 
-- any voltage source connected to AN0 (no more 5V please). To test the whole, you can
-- use a voltage divider:
--		
--     5V
--     |
--     Z
--     Z R1        -----------
--     Z           |
--     |------ AN0-|   PIC
--     Z           |
--     Z R2        |
--     Z
--     |
--    GND
--
--
--		- R1=1K, R2=1K: you should get ~127 as ADC value
-- 		- R1=1K, R2=2.2K: you should get ~175 as ADC value
--

-- select chip
include 16f88
-- set all IO as digital, will turn ADC on later (by adc lib)
enable_digital_io()

-- We'll use internal oscillator. It work @ 8MHz
pragma target CLOCK		8_000_000
pragma target OSC		INTOSC_NOCLKOUT
-- no watchdog, please
pragma target WDT		disabled

include delay_any_mc
-- ok, now setup serial
const usart_hw_serial = true	-- true = RS232, false = SPI
const serial_hw_baudrate = 19_200
include serial_hardware
serial_hw_init()
-- inform user PIC is ready !
serial_hw_write("!")

-- Configure ADC
-- We just need only one ADC channel
const adc_hardware_nchan = 1
-- We won't use any external VRef, so measures are done
-- according to PIC powering voltage 
const adc_hardware_nvref = 0
-- The maximum resistance while measuring ADC is... (unit: ohms)
-- Being accurate helps speeding up ADC acquisition
const adc_hardware_rsource = 2_000
-- In this example, we'll perform low resolution ADC: results are
-- coded on 8bits
const adc_hardware_high_resolution = false
-- Now include the famous library
include adc_hardware
-- And initialize the whole with our parameters
adc_init()


-- will periodically send those chars
var byte measure
forever loop
	-- get ADC result, on channel 0
	measure = adc_read_low_res(0)
	-- send it back through serial
	serial_hw_write(measure)
	-- and sleep a litte...
	delay_1ms(200)
end loop

