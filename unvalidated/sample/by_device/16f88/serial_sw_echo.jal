-- Title: Sample using software implemented USART.
-- Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to setup a simple software serial communication link.
-- It echoes every received char.
--

-- select chip
include 16f88
-- set all IO as digital
enable_digital_io()

-- We'll use internal oscillator. It work @ 8MHz
pragma target clock		8_000_000
pragma target OSC		INTOSC_NOCLKOUT
-- no watchdog, please
pragma target WDT		disabled

-- ok, now setup serial
-- setup speed. Standard values are: 57_600, 19_200, 9_600, 2_400, ...
-- Note: as it's a software implementation, not all baudrates can work with 
-- our 8MHz clock. For instance, 19200 gives too much errors. We'll a lower
-- baudrate here.
const serial_sw_baudrate = 2_400
-- because it's a software implementation, we also need to define 
-- tx and rx pins. How clever we are: we use the same pin as in hardware,
-- so it works out of the box with any board having an USART module...
var volatile bit serial_sw_tx_pin is pin_B5
var volatile bit serial_sw_rx_pin is pin_B2
-- and we also need to specify direction
pin_B5_direction = output
pin_B2_direction = input
-- finally, how levels are understood ? Inverted or not ?
-- Note in hardware serial, it's inverted. Since we're talking to a PC
-- we need to invert the signal
const serial_sw_invert = true
-- now we can use serial_software module
include serial_software
-- initialize the whole with our parameters
serial_sw_init()

-- inform user PIC is ready !
serial_sw_write("!")

-- let's build our loop
var byte char	-- will store received char
forever loop
	if serial_sw_read(char)
	then
		serial_sw_write(char)	-- that's the echo...
	end if
end loop

