-- JAL 2.0.4
;WRITEN BY: R.P.M. ZENGERINK
;KREHALON INDUSTRIE B.V.
;LONDENSTRAAT 10
;DEVENTER
;
;DATE:04-08-2008			
;VERSION:1.0		
;FILENAME:Test LCD st7036 and ds1302.jal	
;CPU:	16F877			
;CLOCK:20Mhz			
;
;
;
;
;


-------------  INCLUDE files ----------------------------------------
pragma target clock       20_000_000 ;
include 16f877_ok


---initial config  (addr 2007h) for config PIC-chip page 120 --------



pragma target osc         hs    ;(lp,xt,hs,zie 16f887_inc_all.jal)
pragma target watchdog    off   ;(on,off)
pragma target LVP         off   ;low voltage ICSP (on,off)
pragma target BOR         off   ;Burn Out Reset  (on,off)
pragma target protection  off   ;Flash Prog mem code Protection  (off,half,all)
pragma target CPD         off   ;Data EEprom mem code Protection (on,off)
pragma target powerup     off   ;power up delay (72mS after power up)(on,off)
pragma target DEBUG       off   ;In-Circuit Debugger mode (on,off)


------------- DEFINES -----------------------------------------------

--a poort
pin_a0_direction = output   ; A poort display
pin_a1_direction = output
pin_a2_direction = output
pin_a3_direction = output
pin_a5_direction = output

--b poort
pin_b0_direction = input  ;B poorten input alarmen
pin_b1_direction = input
pin_b2_direction = input
pin_b3_direction = output
pin_b4_direction = input
pin_b5_direction = input
pin_b6_direction = input
pin_b7_direction = input

--c poort

pin_c3_direction = output  ; clock RTC
pin_c4_direction = input   ; I/O   RTC
pin_c5_direction = output  ; CE    RTC
pin_c6_direction = output  ; RS232
pin_c7_direction = input   ; RS232

--d poort
port_d_direction = all_input  ; poort D input alarmen



--e poort
pin_e0_direction = input    ; poort e input alarmen
pin_e1_direction = input
pin_e2_direction = input





Serial_HW_enable      ; zet hardware voor uart aan

GIE = 1               ;general interupt enabled
PEIE = 1              ;Peripheral interupt enabled
T0IE = 0              ;timer 0 interupt disabled
TMR1IE = 0            ;timer 1 interupt disabled
------------- OPTION register met timer0  -------------------------------
OPTION_REG = 0B0000_0111
;NOT_RBPU at OPTION_REG : 7 = 0   0 = weak pull-up on port B
;intedg   at OPTION_REG : 6 = 0   1 = opgaande flank interupt op RB0
;T0CS     at OPTION_REG : 5 = 0   internal instruction cycle clock
;T0SE     at OPTION_REG : 4 = 0   nvt ivm setting T0CS
;PSA      at OPTION_REG : 3 = 0   prescaler voor timer 0
;PS2      at OPTION_REG : 2 = 1   prescaler op 256 (20Mhz/4/128) = 39062,5HZ
;PS1      at OPTION_REG : 1 = 1   1/(39062,5/39)TMR0 = 39 >> ~1mS = tijd van
;PS0      at OPTION_REG : 0 = 1   timer0

 --------- timer1-----------
 T1CON = 0B0011_0100
;not used   at T1CON : 7  = 0
;T1RUN      at T1CON : 6  = 0     ;wordt geset als interne clock op T1 loopt
;T1CKPS1    at T1CON : 5  = 1     ; samen met T1CKPSO prescaler
;T1CKPS0    at T1CON : 4  = 1     ;
;T1OSCEN    at T1CON : 3  = 0     ;1 = osc is enabled 0 = osc is shut off
;T1INSYNC   at T1CON : 2  = 1     ;1 = do not sync ext. clk  0 = sync ext.clk
;TMR1CS     at T1CON : 1  = 0     ;1 = ext. clock 0 = int. clock (Fosc/4)
;TMR1ON     at T1CON : 0  = 0     ;1 = enables timer1 0 =  disables timer 1
;
;in is Foc/4 = 5000000/prescaler = 5000000/8 =  635000 / 625 = 1mS
;625 = 65280 - 64655  64655/256= 252,55859375  TMR1H = 252
;252,55859375 - 252 = 0,55859375 x 256 = 143   TMR1L = 143


-------------------------------------------------------------------------
---------------------------- LCD Variables ------------------------------
-------------------------------------------------------------------------
 var bit not_connected



 var volatile bit LCD_data  is pin_a0
 var volatile bit LCD_data_dir  is pin_a0_direction
 var volatile bit LCD_clk  is pin_a1
 var volatile bit LCD_rs is pin_a2   -- data/command select
 var volatile bit LCD_csb  is pin_a3

 var volatile bit LCD_enable  is not_connected
 var volatile bit LCD_rw is not_connected



 var volatile bit LCD_d0 is not_connected
 var volatile bit LCD_d1 is not_connected
 var volatile bit LCD_d2 is not_connected
 var volatile bit LCD_d3 is not_connected
 var volatile bit LCD_d4 is not_connected
 var volatile bit LCD_d5 is not_connected
 var volatile bit LCD_d6 is not_connected
 var volatile bit LCD_d7 is not_connected


 const LCD_hardware = 1    ;4 is 4 line, 8 = 8 line and 1 = serial
 const LCD_number_of_display_lines      = 2
 const LCD_number_of_display_characters = 16


 include lcd_st7036_rz

-------------------------------------------------------------------------
-------------------------------------------------------------------------


-------------------------------------------------------------------------
---------------------------- RTC Variables ------------------------------
-------------------------------------------------------------------------

 var bit RTC_CE     is pin_c5 -- out
 var bit RTC_SCLK   is pin_c3 -- out
 var bit RTC_IO     is pin_c4 -- in/out
 var volatile bit RTC_IODir   is pin_c4_direction    ; bidirectional

 var byte RTC_DIODE  = 1     ; DIODE = 1 or DIODE = 2
 var byte RTC_RESISTOR  = 8  ; RESISTOR = 0 (0ohm) RESISTOR = 2 (2K),
                           ; RESISTOR = 4 (4K) or RESISTOR = 8 (8K)
 var bit RTC_TRICKEL = ON   ; TRICKEL = ON or TRICKEL = OFF (no charging)

 include ds1302_rz

-------------------------------------------------------------------------
-------------------------------------------------------------------------




 ------------- Variable -----------------------------------------------



  ------------------------------------------------------------------------
  ------------- Procedures -----------------------------------------------
  ------------------------------------------------------------------------




procedure Encoder is
   pragma interrupt

 ----------------Interupt ingang INT(RB0) ---------------------

 --------------------------------------------------------------

 ----------------Interupt ingang RB4 ---------------------

 --------------------------------------------------------------

 ----------------Interupt Timer 0 ---------------------


-----------------------------------------------------------------



end procedure





--------------------------------------------------------------------------
------------- MAIN program -----------------------------------------------
--------------------------------------------------------------------------



   var volatile bit BACKLIGHT  is pin_a5



   var byte Data
   var word wvalue = 0
   var byte value = 0
   var byte value1 = 0
   var byte test = 0
   var word YEARW


   const byte teststring[] = "display"
   var byte volatile testlength = count(teststring)


   lcd_new_line_cursor_position (1, 1)
      lcd_write_data ("T")
      lcd_write_data ("e")
      lcd_write_data ("s")
      lcd_write_data ("t")




   lcd_new_line_cursor_position (2, 1)
   for testlength  loop
       Data = teststring[value]
       lcd_write_data (data)
       value = value + 1
   end loop
      BACKLIGHT = on
      delay_1s(1)
      lcd_shift_right (6)
      delay_1s(1)
      lcd_shift_left (4)
      delay_1s(1)
      BACKLIGHT = off
      lcd_cursor_blink_display (on,on,on)
      delay_1s(1)
      lcd_cursor_shift_left (4)
      delay_1s(1)
      lcd_cursor_shift_right (6)
      delay_1s(1)
      lcd_clear_line  ( 2 )
      delay_1s(1)
      lcd_home
      delay_1s(1)
      lcd_clear
      BACKLIGHT = on
      lcd_cursor_blink_display (off,off,on)
      lcd_clear_line  (2)
      value = 0
      while value < 255  loop
            lcd_bvalue_dp_line_pos_left_sign ( value, 0, 1, 5, true, false)
             value = value + 1
             delay_5ms(10)
            lcd_progress  (2, (value/17)+1 , 0xDB)
      end loop
      lcd_bvalue_dp_line_pos_left_sign ( value, 0, 1, 5, true, false)

      lcd_clear
      BACKLIGHT = off
      lcd_bvalue_dp_line_pos_left_sign ( 200, 0, 1, 1, true, false)
      delay_1s(1)
      lcd_bvalue_dp_line_pos_left_sign ( 5, 0, 1, 5, true, false)
      delay_1s(1)
      lcd_bvalue_dp_line_pos_left_sign ( 7, 0, 1, 9, false, false)
      delay_1s(1)
      lcd_bvalue_dp_line_pos_left_sign ( 112, 1, 1, 13, false, false)
      delay_1s(1)

      lcd_clear_line  (2)

      lcd_write_data ("V")
      lcd_write_data ("a")
      lcd_write_data ("l")

      lcd_new_line_cursor_position (2, 5)  ;

      lcd_write_data ("=")

      BACKLIGHT = on

      lcd_clear_line  (1)

      value1 = 0
      wvalue = 5000

      while wvalue != 0  loop
            LCD_wvalue_dp_line_pos_left_sign ( wvalue, 2, 2, 7, true, false)
            wvalue = wvalue - 1
            delay_1ms(3)
       end loop
            LCD_wvalue_dp_line_pos_left_sign ( wvalue, 2, 2, 7, true, false)
      delay_1s(2)

      lcd_clear
      RTC_READ(0x87,DAY)
      RTC_TO_DEC ( DAY )
      RTC_READ(0x89,MOUNTH)
      RTC_TO_DEC (MOUNTH)
      RTC_READ(0x8D,YEAR)
      RTC_TO_DEC (YEAR)


      lcd_new_line_cursor_position (1, 5)
      lcd_date ( DAY, MOUNTH, YEAR, "-", true )
      delay_1s(2)
      BACKLIGHT = off
      lcd_new_line_cursor_position (1, 5)
      lcd_date ( DAY, MOUNTH, 2000+ YEAR, "/", false )
      delay_1s(3)

      lcd_clear

  value1 = 0
  lcd_new_line_cursor_position (1, 5)
  lcd_write_data ("=")
  while value1 < 255  loop
        lcd_bvalue_dp_line_pos_left_sign ( value1, 0, 1, 1, false, false)
        lcd_new_line_cursor_position (1, 7)
        lcd_bvalue_hex (value1)
        value1 = value1 + 1
        delay_5ms(10)
  end loop

  wvalue = 0
  lcd_new_line_cursor_position (2, 7)
  lcd_write_data ("=")


  while wvalue < 2000  loop
        lcd_wvalue_dp_line_pos_left_sign ( wvalue, 0, 2, 1, false, false)
        lcd_new_line_cursor_position (2, 9)
        lcd_wvalue_hex (wvalue)
        wvalue = wvalue + 1
        delay_5ms(1)
  end loop


  lcd_clear
  BACKLIGHT = on
  forever loop
           RTC_READ(0x81,SECOND)
           RTC_TO_DEC ( SECOND )
           RTC_READ(0x83,MINUT)
           RTC_TO_DEC (MINUT )
           RTC_READ(0x85,HRS)
           RTC_TO_DEC (HRS )
           LCD_new_line_cursor_position (1, 3)
           LCD_time ( HRS, MINUT, SECOND, ":" )
           RTC_READ(0x87,DAY)
           RTC_TO_DEC ( DAY )
           RTC_READ(0x89,MOUNTH)
           RTC_TO_DEC (MOUNTH)
           RTC_READ(0x8D,YEAR)
           RTC_TO_DEC (YEAR)
           LCD_new_line_cursor_position (2, 3)
           LCD_date ( DAY, MOUNTH, 2000 + YEAR, "-", true )
           delay_5ms(20)
   end loop





