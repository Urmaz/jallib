-- Title: Sample showing how to use print library on serial port
-- Author: Joep Suijs, Copyright (c) 2008, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to use print.jal library. This very useful library
-- to show the content of variables.
-- 
-- Notes: as output, this sample produces characters on a serial link. First be sure you're able
-- to run serial tests.
--
include 16f877a

pragma target  CLOCK       16_000_000
pragma target  OSC         hs
pragma target  WDT         disabled ; WatchdogTimerEnable
pragma target  pwrte       enabled  ; PowerUpTimer
pragma target  CP          disabled ; code protection
pragma target  BROWNOUT    enabled  
pragma target  LVP         disabled  

include delay

-- setup serial (see echo.jal for more details)
const usart_hw_serial = true	-- true = RS232, false = SPI
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()


include format
include print

var bit LED is pin_b0

pin_b0_direction = output
 
forever loop
   delay_100ms( 5 )
   LED = high
   delay_100ms( 5 )
   LED = low
  
   -- serial_hw_data is a pseudo-var of the desired output-device. 
   serial_hw_data = "A" -- output an A to the serial port.
   
   --
   -- The print_* and format_* routines assing the output chars to this pseudo-var.
   --
   
   -- output the string, the pseudo var is the first param. 
   const byte str1[] = " - Test print.jal- bytes\r\n"   -- define a string
   print_string(serial_hw_data, str1)                 -- output string
--   print_string(serial_hw_data, " - Test print.jal- bytes\r\n") -- output string (not yet supported by JAL)
   
   -- -----------
   -- byte stuff
   -- -----------
   var  byte a =  210
   var sbyte b = -109

   print_byte_dec(serial_hw_data, a)   -- output in (unsigned) decimal format
   print_crlf(serial_hw_data)          -- output Carriage Return and Linefeed (0x0D 0x0A), new line
   print_byte_hex(serial_hw_data, a)   -- output in hex format
   print_crlf(serial_hw_data)        
   print_byte_binary(serial_hw_data, a)   -- output in binary format
   print_crlf(serial_hw_data)        
      
   print_sbyte_dec(serial_hw_data, b)   -- output in signed decimal format
   print_crlf(serial_hw_data)        


   -- -----------
   -- word stuff
   -- -----------
   const byte str2[] = "Test print.jal - words\r\n"   -- define a string
   print_string(serial_hw_data, str2) 
   
   var  word c =  45678
   var sword d = -32109

   print_word_dec(serial_hw_data, c)   -- output in (unsigned) decimal format
   print_crlf(serial_hw_data)          -- output Carriage Return and Linefeed (0x0D 0x0A), new line
   print_word_hex(serial_hw_data, c)   -- output in hex format
   print_crlf(serial_hw_data)       
   print_word_binary(serial_hw_data, c)   -- output in binary format
   print_crlf(serial_hw_data)       
    
   print_sword_dec(serial_hw_data, d)   -- output in signed decimal format
   print_crlf(serial_hw_data)        

   -- -----------
   -- dword stuff
   -- -----------
   const byte str3[] = "Test print.jal - dwords\r\n"   -- define a string
   print_string(serial_hw_data, str3) 
   
   var  dword e =  3210987654
   var sdword f =  -8388609
;   var sdword f = -2109876543

   print_dword_dec(serial_hw_data, e)   -- output in (unsigned) decimal format
   print_crlf(serial_hw_data)          -- output Carriage Return and Linefeed (0x0D 0x0A), new line
   print_dword_hex(serial_hw_data, e)   -- output in hex format
   print_crlf(serial_hw_data)        
   print_dword_binary(serial_hw_data, e)   -- output in binary format
   print_crlf(serial_hw_data)        
      
   print_sdword_dec(serial_hw_data, f)   -- output in signed decimal format
   print_crlf(serial_hw_data)        

   -- -----------
   -- bit stuff
   -- -----------
   const byte str4[] = "Test print.jal - bit\r\n"   -- define a string
   print_string(serial_hw_data, str4) 

   var bit g = 1

   print_bit_10(serial_hw_data, g)           -- output 0 or 1
   serial_hw_data = " "                      -- output a space

   print_bit_highlow(serial_hw_data, g)      -- output text 'high' or 'low'
   serial_hw_data = " "                      -- output a space

   print_bit_truefalse(serial_hw_data, g)    -- output text 'true' or 'false'
   serial_hw_data = " "                      -- output a space

   g = 0

   print_bit_10(serial_hw_data, g)           -- output 0 or 1
   serial_hw_data = " "                      -- output a space

   print_bit_highlow(serial_hw_data, g)      -- output text 'high' or 'low'
   serial_hw_data = " "                      -- output a space

   print_bit_truefalse(serial_hw_data, g)    -- output text 'true' or 'false'
   
   print_crlf(serial_hw_data)       
   
   
   -- -------------
   -- and together:
   -- -------------
 
   var byte x = "y"
   const byte str5[] = "Variable x has decimal value "
   print_string(serial_hw_data, str5) 
   print_byte_dec(serial_hw_data, x)  

   const byte str6[] = " which is hex value "
   print_string(serial_hw_data, str6) 
   print_byte_hex(serial_hw_data, x)  

   const byte str7[] = " and represents ASCII character "
   print_string(serial_hw_data, str7) 
   serial_hw_data = x
   
   print_crlf(serial_hw_data)        
   print_crlf(serial_hw_data)        

end loop



-- A - Test print.jal- bytes
-- 210
-- D2
-- 11010010
-- -109
-- Test print.jal - words
-- 45678
-- B26E
-- 1011001001101110
-- -32109
-- Test print.jal - dwords
-- 3210987654
-- BF63C886
-- 10111111011000111100100010000110
-- -2109876543
-- Test print.jal - bit
-- 1 high true 0 low false
-- Variable x has decimal value 121 which is hex value 79 and represents ASCII character y

