-- ------------------------------------------------------
-- Title: Test (Demo) program for startersguide (serial interface)
--
-- Author: Joep Suijs, Copyright (c) 2008..2010, all rights reserved.
--
-- Adapted-by: 
--
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Demo program, for use in the startersguide. Much of the code is not
--              meaningful on itself, but very usefull as part of the startersguide.
--
-- Sources:
--
-- Notes: as output, this sample produces characters on a serial link.
--
-- ------------------------------------------------------

;@jallib use chipdef
;@jallib use led

include delay

-- set all IO as digital
enable_digital_io()


-- setup serial (see echo.jal for more details)
;@jallib use serial
include serial_hardware
serial_hw_init()

alias sg_output is serial_hw_data

include print

led_direction = output


-- pseudo variable part
var byte PvStore

procedure pv'put(byte in invar) is
   PvStore = invar + 1   
end procedure

function pv'get() return byte is
   return PvStore * 2
end function

-- definition of (dummy) procedure and fuctions
procedure sgd_initialize() is
   ;
end procedure

function sgd_transmit_byte(byte in data) return bit is  
	;
   data = 123
end function

function sgd_receive_function() return byte is      
   var byte data = 0
	;
   return data
end function

procedure sgd_receive_procedure(bit in ACK, byte in out data) is      
   data = 0
	;
end procedure


var  byte   alpha  = 0b0100_0011 -- binary 
;var  byte*4 bravo  = 0q203       -- octal 
var dword   charly = 0x43        -- hex
var  byte*3 delta  
var  byte   echo[3] at delta
var  byte   foxtrot[10]
var  byte   hotel[]   = { 1, 2, 4 }
var  byte   india[]    = "foxtrot"
var  bit    julia at alpha:0

const byte str1[] = "Hello startersguide world!"

var byte x

forever loop
   delay_100ms(5)
   print_string(serial_hw_data, str1)
  
   if (Alpha > 0) then
      Alpha = Alpha + 1
   end if
 
   If (Alpha > 0) THEN
      alpha = AlPhA + 1
   END IF

   alpha = charly

   alpha = byte(charly)
   x = sgd_receive_function()

   pv = 7
   print_byte_dec(serial_hw_data, pv)
   print_crlf(serial_hw_data)

   if (x > 0) then
      x = x - 1
   end if

   if (x > 0) then
      x = x - 1
   else
      x = x + 1
   end if

   if (x == 1) then
      x = x + 1
   elsif (x > 7) then
      x = x + 2
   else
      x = x + 3
   end if
   print_byte_dec(serial_hw_data, x)
   print_crlf(serial_hw_data)

   case (x) of
      1 : block
         x = 1
      end block
      2 : block
         x = 3
      end block
      3 : block
         x = 2
      end block
      otherwise block
         x = x / 2
      end block
   end case
   print_byte_dec(serial_hw_data, x)
   print_crlf(serial_hw_data)
   
   x = 0
   forever loop
      serial_hw_data = "!"
      x = x + 1
      if (x > 10) then
         exit loop
      end if
   end loop
   print_crlf(serial_hw_data)
   
   for 7 loop
      serial_hw_data = "@"
   end loop 
   print_crlf(serial_hw_data)

   var byte lc
   for 7 using lc loop
      print_byte_dec(serial_hw_data, lc)
      serial_hw_data = " "
   end loop
   print_crlf(serial_hw_data)

   var byte x = 0
   repeat      
      serial_hw_data = "#"
      x = x + 1
   until (x == 0)
   print_crlf(serial_hw_data)
   
   x = 0
   while (x > 0) loop 
      serial_hw_data = "$"
      x = x - 1
   end loop
   print_crlf(serial_hw_data)

   x = 4
   while (x > 0) loop 
      serial_hw_data = "%"
      x = x - 1
   end loop
   print_crlf(serial_hw_data)
           
end loop

