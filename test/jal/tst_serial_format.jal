-- ------------------------------------------------------
-- Title: Test program for format.jal
-- Author: Joep Suijs, Copyright (c) 2008..2008, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.4m
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Test program, extensive test (too much for sample generation...)
--
-- Sources:
--
-- Notes: as output, this sample produces characters on a serial link. First 
--        run serial tests to make sure serial comms works okay.
--
-- ------------------------------------------------------

;@jallib use chipdef
;@jallib use led
include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial
const usart_hw_serial = true	-- true = RS232, false = SPI
;@jallib use serial
include serial_hardware
serial_hw_init()

include format
include print

var byte tst_sign = 0;



;------------------------------------------------------------------------------
; nformat_byte_dec - writes decimal formatted byte to output device
;------------------------------------------------------------------------------
; Parameters:                                   
;  device = pseudo-var of output device
;  data   = data to be formatted
;  n_tot  = the total length (including sign and decimal point)
;  n2     = number of digits behind the point (fraction). 0 means no decimal point
;  sign   = sign character, 0 = no sign is printed 
;------------------------------------------------------------------------------
procedure nformat_byte_dec(volatile byte out device, byte in data, byte in n_tot, byte in n2, byte in sign) is   
   var byte digits ; nr of digits in data
   var byte pos    ; nr of positions required for data, decimal point, sign

   ; determine nr of printable digits
   digits = 1
   if (data > 100) then
      digits = 3
   elsif (data > 10) then
      digits = 2
   end if   

   ; add impact of n2
   pos = digits
   if (n2 > 0) then
      pos = pos + 1  ; decimal point pos
      if (pos < (n2 + 2)) then
         pos = n2 + 2   ; minimal = '0' + '.' + n2 
      end if     
   end if   

   ; impact of sign
   if (sign != 0) then
      pos = pos + 1
   end if

   ; too large => print #-signs & return
   if (pos > n_tot) then       
      for n_tot loop
         device = "#"
      end loop
      return
   end if                       
   
   ; print padding spaces
   if (n_tot > pos) then       
      for (n_tot - pos) loop
         device = " "
      end loop
   end if

   ; print sign
   if (sign != 0) then
      device = sign   
      pos = pos - 1      
   end if

   ; ** remove decimal_point digit from pos ** 
   if (n2 > 0) then
      pos = pos - 1
   end if

   ; handle cases which need extra zero's
   if (pos > digits) then
      for pos - digits loop
         device = "0"
         pos = pos - 1
         if pos == n2 then
            device = "."
         end if
      end loop
   end if

   ; print most significant digit 
   if (pos > 2) then
      device = "0" + data / 100
      data = data % 100
      if (n2 == 2) then 
         device = "." 
      end if
   end if
   
   ; print next significant digit 
   if (pos > 1) then
      device = "0" + data / 10
      data = data % 10
      if (n2 == 1) then 
         device = "." 
      end if
   end if

   ; print least significant digit 
   device = "0" + data
   
end procedure

;------------------------------------------------------------------------------
; nformat_sbyte_dec - writes decimal formatted sbyte to output device
;------------------------------------------------------------------------------
; Parameters:
;  device = pseudo-var of output device
;  data   = data to be formatted
;  n_tot = the total length (including sign and decimal point)
;  n2    = number of digits behind the point (fraction). 0 means no decimal point
;  sign  = sign character, 0 = no char is printed if data is positive.
;          if data is negative, '-' is printed and the parameter sign is not used
;------------------------------------------------------------------------------
procedure nformat_sbyte_dec(volatile byte out device, byte in data, byte in n_tot, byte in n2, byte in sign) is   
   var bit msb at data:7

   if msb then
      sign = "-"
      data = -data
   end if

   nformat_byte_dec(device, data, n_tot, n2, sign)
end procedure













procedure plingcrlf() is
   serial_hw_data = "!"
   serial_hw_data = 13
   serial_hw_data = 10
end procedure

procedure line(byte in nr) is 
   serial_hw_data = nr + "0"
   serial_hw_data = " "
   
   for 20 loop   
      serial_hw_data = "-"
   end loop
   serial_hw_data = 13
   serial_hw_data = 10
end procedure




procedure test_byte_dec(byte in data, byte in n_tot, byte in n2) is

   serial_hw_data = "u" 
   serial_hw_data = "b" 
   if (tst_sign != 0) then
      serial_hw_data = tst_sign
   end if
   serial_hw_data = " " 

   print_byte_dec(serial_hw_data, n_tot)
   serial_hw_data = " " 

   print_byte_dec(serial_hw_data, n2)
   serial_hw_data = " " 

   print_byte_dec(serial_hw_data, data)
   serial_hw_data = " " 

   serial_hw_data = "^" 
   nformat_byte_dec(serial_hw_data, data, n_tot, n2, tst_sign)    
   serial_hw_data = "^" 

   print_crlf(serial_hw_data)
   
end procedure

procedure test_sbyte_dec(sbyte in data, byte in n_tot, byte in n2) is

   serial_hw_data = "s" 
   serial_hw_data = "b" 
   if (tst_sign != 0) then
      serial_hw_data = tst_sign
   end if
   serial_hw_data = " " 

   print_byte_dec(serial_hw_data, n_tot)
   serial_hw_data = " " 

   print_byte_dec(serial_hw_data, n2)
   serial_hw_data = " " 

   print_sbyte_dec(serial_hw_data, data)
   serial_hw_data = " " 

   serial_hw_data = "^" 
   nformat_sbyte_dec(serial_hw_data, data, n_tot, n2, tst_sign)    
   serial_hw_data = "^" 

   print_crlf(serial_hw_data)
   
end procedure

forever loop    

   var byte n_tot, n2
   
   for 8 using n_tot loop
      for 8 using n2 loop
         if (n2 < n_tot) then
            tst_sign = 0
            test_byte_dec(0, n_tot, n2) 
            test_byte_dec(1, n_tot, n2) 
            test_byte_dec(12, n_tot, n2) 
            test_byte_dec(123, n_tot, n2) 
            tst_sign = "+"
            test_byte_dec(0, n_tot, n2) 
            test_byte_dec(1, n_tot, n2) 
            test_byte_dec(12, n_tot, n2) 
            test_byte_dec(123, n_tot, n2) 
         end if
      end loop
   end loop

   for 8 using n_tot loop
      for 8 using n2 loop
         if (n2 < n_tot) then
            tst_sign = 0
            test_sbyte_dec(-123, n_tot, n2) 
            test_sbyte_dec(-12, n_tot, n2) 
            test_sbyte_dec(-1, n_tot, n2) 
            test_sbyte_dec(0, n_tot, n2) 
            test_sbyte_dec(1, n_tot, n2) 
            test_sbyte_dec(12, n_tot, n2) 
            test_sbyte_dec(123, n_tot, n2) 
            tst_sign = "+"
            test_sbyte_dec(-123, n_tot, n2) 
            test_sbyte_dec(-12, n_tot, n2) 
            test_sbyte_dec(-1, n_tot, n2) 
            test_sbyte_dec(0, n_tot, n2) 
            test_sbyte_dec(1, n_tot, n2) 
            test_sbyte_dec(12, n_tot, n2) 
            test_sbyte_dec(123, n_tot, n2) 
         end if
      end loop
   end loop



   delay_100ms(10)

end loop

; 2010_06_21 test output:
;
;  ub 1 0 0 ^0^
;  ub 1 0 1 ^1^
;  ub 1 0 12 ^#^
;  ub 1 0 123 ^#^
;  ub+ 1 0 0 ^#^
;  ub+ 1 0 1 ^#^
;  ub+ 1 0 12 ^#^
;  ub+ 1 0 123 ^#^
;  ub 2 0 0 ^ 0^
;  ub 2 0 1 ^ 1^
;  ub 2 0 12 ^12^
;  ub 2 0 123 ^##^
;  ub+ 2 0 0 ^+0^
;  ub+ 2 0 1 ^+1^
;  ub+ 2 0 12 ^##^
;  ub+ 2 0 123 ^##^
;  ub 2 1 0 ^##^
;  ub 2 1 1 ^##^
;  ub 2 1 12 ^##^
;  ub 2 1 123 ^##^
;  ub+ 2 1 0 ^##^
;  ub+ 2 1 1 ^##^
;  ub+ 2 1 12 ^##^
;  ub+ 2 1 123 ^##^
;  ub 3 0 0 ^  0^
;  ub 3 0 1 ^  1^
;  ub 3 0 12 ^ 12^
;  ub 3 0 123 ^123^
;  ub+ 3 0 0 ^ +0^
;  ub+ 3 0 1 ^ +1^
;  ub+ 3 0 12 ^+12^
;  ub+ 3 0 123 ^###^
;  ub 3 1 0 ^0.0^
;  ub 3 1 1 ^0.1^
;  ub 3 1 12 ^1.2^
;  ub 3 1 123 ^###^
;  ub+ 3 1 0 ^###^
;  ub+ 3 1 1 ^###^
;  ub+ 3 1 12 ^###^
;  ub+ 3 1 123 ^###^
;  ub 3 2 0 ^###^
;  ub 3 2 1 ^###^
;  ub 3 2 12 ^###^
;  ub 3 2 123 ^###^
;  ub+ 3 2 0 ^###^
;  ub+ 3 2 1 ^###^
;  ub+ 3 2 12 ^###^
;  ub+ 3 2 123 ^###^
;  ub 4 0 0 ^   0^
;  ub 4 0 1 ^   1^
;  ub 4 0 12 ^  12^
;  ub 4 0 123 ^ 123^
;  ub+ 4 0 0 ^  +0^
;  ub+ 4 0 1 ^  +1^
;  ub+ 4 0 12 ^ +12^
;  ub+ 4 0 123 ^+123^
;  ub 4 1 0 ^ 0.0^
;  ub 4 1 1 ^ 0.1^
;  ub 4 1 12 ^ 1.2^
;  ub 4 1 123 ^12.3^
;  ub+ 4 1 0 ^+0.0^
;  ub+ 4 1 1 ^+0.1^
;  ub+ 4 1 12 ^+1.2^
;  ub+ 4 1 123 ^####^
;  ub 4 2 0 ^0.00^
;  ub 4 2 1 ^0.01^
;  ub 4 2 12 ^0.12^
;  ub 4 2 123 ^1.23^
;  ub+ 4 2 0 ^####^
;  ub+ 4 2 1 ^####^
;  ub+ 4 2 12 ^####^
;  ub+ 4 2 123 ^####^
;  ub 4 3 0 ^####^
;  ub 4 3 1 ^####^
;  ub 4 3 12 ^####^
;  ub 4 3 123 ^####^
;  ub+ 4 3 0 ^####^
;  ub+ 4 3 1 ^####^
;  ub+ 4 3 12 ^####^
;  ub+ 4 3 123 ^####^
;  ub 5 0 0 ^    0^
;  ub 5 0 1 ^    1^
;  ub 5 0 12 ^   12^
;  ub 5 0 123 ^  123^
;  ub+ 5 0 0 ^   +0^
;  ub+ 5 0 1 ^   +1^
;  ub+ 5 0 12 ^  +12^
;  ub+ 5 0 123 ^ +123^
;  ub 5 1 0 ^  0.0^
;  ub 5 1 1 ^  0.1^
;  ub 5 1 12 ^  1.2^
;  ub 5 1 123 ^ 12.3^
;  ub+ 5 1 0 ^ +0.0^
;  ub+ 5 1 1 ^ +0.1^
;  ub+ 5 1 12 ^ +1.2^
;  ub+ 5 1 123 ^+12.3^
;  ub 5 2 0 ^ 0.00^
;  ub 5 2 1 ^ 0.01^
;  ub 5 2 12 ^ 0.12^
;  ub 5 2 123 ^ 1.23^
;  ub+ 5 2 0 ^+0.00^
;  ub+ 5 2 1 ^+0.01^
;  ub+ 5 2 12 ^+0.12^
;  ub+ 5 2 123 ^+1.23^
;  ub 5 3 0 ^0.000^
;  ub 5 3 1 ^0.001^
;  ub 5 3 12 ^0.012^
;  ub 5 3 123 ^0.123^
;  ub+ 5 3 0 ^#####^
;  ub+ 5 3 1 ^#####^
;  ub+ 5 3 12 ^#####^
;  ub+ 5 3 123 ^#####^
;  ub 5 4 0 ^#####^
;  ub 5 4 1 ^#####^
;  ub 5 4 12 ^#####^
;  ub 5 4 123 ^#####^
;  ub+ 5 4 0 ^#####^
;  ub+ 5 4 1 ^#####^
;  ub+ 5 4 12 ^#####^
;  ub+ 5 4 123 ^#####^
;  ub 6 0 0 ^     0^
;  ub 6 0 1 ^     1^
;  ub 6 0 12 ^    12^
;  ub 6 0 123 ^   123^
;  ub+ 6 0 0 ^    +0^
;  ub+ 6 0 1 ^    +1^
;  ub+ 6 0 12 ^   +12^
;  ub+ 6 0 123 ^  +123^
;  ub 6 1 0 ^   0.0^
;  ub 6 1 1 ^   0.1^
;  ub 6 1 12 ^   1.2^
;  ub 6 1 123 ^  12.3^
;  ub+ 6 1 0 ^  +0.0^
;  ub+ 6 1 1 ^  +0.1^
;  ub+ 6 1 12 ^  +1.2^
;  ub+ 6 1 123 ^ +12.3^
;  ub 6 2 0 ^  0.00^
;  ub 6 2 1 ^  0.01^
;  ub 6 2 12 ^  0.12^
;  ub 6 2 123 ^  1.23^
;  ub+ 6 2 0 ^ +0.00^
;  ub+ 6 2 1 ^ +0.01^
;  ub+ 6 2 12 ^ +0.12^
;  ub+ 6 2 123 ^ +1.23^
;  ub 6 3 0 ^ 0.000^
;  ub 6 3 1 ^ 0.001^
;  ub 6 3 12 ^ 0.012^
;  ub 6 3 123 ^ 0.123^
;  ub+ 6 3 0 ^+0.000^
;  ub+ 6 3 1 ^+0.001^
;  ub+ 6 3 12 ^+0.012^
;  ub+ 6 3 123 ^+0.123^
;  ub 6 4 0 ^0.0000^
;  ub 6 4 1 ^0.0001^
;  ub 6 4 12 ^0.0012^
;  ub 6 4 123 ^0.0123^
;  ub+ 6 4 0 ^######^
;  ub+ 6 4 1 ^######^
;  ub+ 6 4 12 ^######^
;  ub+ 6 4 123 ^######^
;  ub 6 5 0 ^######^
;  ub 6 5 1 ^######^
;  ub 6 5 12 ^######^
;  ub 6 5 123 ^######^
;  ub+ 6 5 0 ^######^
;  ub+ 6 5 1 ^######^
;  ub+ 6 5 12 ^######^
;  ub+ 6 5 123 ^######^
;  ub 7 0 0 ^      0^
;  ub 7 0 1 ^      1^
;  ub 7 0 12 ^     12^
;  ub 7 0 123 ^    123^
;  ub+ 7 0 0 ^     +0^
;  ub+ 7 0 1 ^     +1^
;  ub+ 7 0 12 ^    +12^
;  ub+ 7 0 123 ^   +123^
;  ub 7 1 0 ^    0.0^
;  ub 7 1 1 ^    0.1^
;  ub 7 1 12 ^    1.2^
;  ub 7 1 123 ^   12.3^
;  ub+ 7 1 0 ^   +0.0^
;  ub+ 7 1 1 ^   +0.1^
;  ub+ 7 1 12 ^   +1.2^
;  ub+ 7 1 123 ^  +12.3^
;  ub 7 2 0 ^   0.00^
;  ub 7 2 1 ^   0.01^
;  ub 7 2 12 ^   0.12^
;  ub 7 2 123 ^   1.23^
;  ub+ 7 2 0 ^  +0.00^
;  ub+ 7 2 1 ^  +0.01^
;  ub+ 7 2 12 ^  +0.12^
;  ub+ 7 2 123 ^  +1.23^
;  ub 7 3 0 ^  0.000^
;  ub 7 3 1 ^  0.001^
;  ub 7 3 12 ^  0.012^
;  ub 7 3 123 ^  0.123^
;  ub+ 7 3 0 ^ +0.000^
;  ub+ 7 3 1 ^ +0.001^
;  ub+ 7 3 12 ^ +0.012^
;  ub+ 7 3 123 ^ +0.123^
;  ub 7 4 0 ^ 0.0000^
;  ub 7 4 1 ^ 0.0001^
;  ub 7 4 12 ^ 0.0012^
;  ub 7 4 123 ^ 0.0123^
;  ub+ 7 4 0 ^+0.0000^
;  ub+ 7 4 1 ^+0.0001^
;  ub+ 7 4 12 ^+0.0012^
;  ub+ 7 4 123 ^+0.0123^
;  ub 7 5 0 ^0.00000^
;  ub 7 5 1 ^0.00001^
;  ub 7 5 12 ^0.00012^
;  ub 7 5 123 ^0.00123^
;  ub+ 7 5 0 ^#######^
;  ub+ 7 5 1 ^#######^
;  ub+ 7 5 12 ^#######^
;  ub+ 7 5 123 ^#######^
;  ub 7 6 0 ^#######^
;  ub 7 6 1 ^#######^
;  ub 7 6 12 ^#######^
;  ub 7 6 123 ^#######^
;  ub+ 7 6 0 ^#######^
;  ub+ 7 6 1 ^#######^
;  ub+ 7 6 12 ^#######^
;  ub+ 7 6 123 ^#######^
;  sb 1 0 -123 ^#^
;  sb 1 0 -12 ^#^
;  sb 1 0 -1 ^#^
;  sb 1 0 0 ^0^
;  sb 1 0 1 ^1^
;  sb 1 0 12 ^#^
;  sb 1 0 123 ^#^
;  sb+ 1 0 -123 ^#^
;  sb+ 1 0 -12 ^#^
;  sb+ 1 0 -1 ^#^
;  sb+ 1 0 0 ^#^
;  sb+ 1 0 1 ^#^
;  sb+ 1 0 12 ^#^
;  sb+ 1 0 123 ^#^
;  sb 2 0 -123 ^##^
;  sb 2 0 -12 ^##^
;  sb 2 0 -1 ^-1^
;  sb 2 0 0 ^ 0^
;  sb 2 0 1 ^ 1^
;  sb 2 0 12 ^12^
;  sb 2 0 123 ^##^
;  sb+ 2 0 -123 ^##^
;  sb+ 2 0 -12 ^##^
;  sb+ 2 0 -1 ^-1^
;  sb+ 2 0 0 ^+0^
;  sb+ 2 0 1 ^+1^
;  sb+ 2 0 12 ^##^
;  sb+ 2 0 123 ^##^
;  sb 2 1 -123 ^##^
;  sb 2 1 -12 ^##^
;  sb 2 1 -1 ^##^
;  sb 2 1 0 ^##^
;  sb 2 1 1 ^##^
;  sb 2 1 12 ^##^
;  sb 2 1 123 ^##^
;  sb+ 2 1 -123 ^##^
;  sb+ 2 1 -12 ^##^
;  sb+ 2 1 -1 ^##^
;  sb+ 2 1 0 ^##^
;  sb+ 2 1 1 ^##^
;  sb+ 2 1 12 ^##^
;  sb+ 2 1 123 ^##^
;  sb 3 0 -123 ^###^
;  sb 3 0 -12 ^-12^
;  sb 3 0 -1 ^ -1^
;  sb 3 0 0 ^  0^
;  sb 3 0 1 ^  1^
;  sb 3 0 12 ^ 12^
;  sb 3 0 123 ^123^
;  sb+ 3 0 -123 ^###^
;  sb+ 3 0 -12 ^-12^
;  sb+ 3 0 -1 ^ -1^
;  sb+ 3 0 0 ^ +0^
;  sb+ 3 0 1 ^ +1^
;  sb+ 3 0 12 ^+12^
;  sb+ 3 0 123 ^###^
;  sb 3 1 -123 ^###^
;  sb 3 1 -12 ^###^
;  sb 3 1 -1 ^###^
;  sb 3 1 0 ^0.0^
;  sb 3 1 1 ^0.1^
;  sb 3 1 12 ^1.2^
;  sb 3 1 123 ^###^
;  sb+ 3 1 -123 ^###^
;  sb+ 3 1 -12 ^###^
;  sb+ 3 1 -1 ^###^
;  sb+ 3 1 0 ^###^
;  sb+ 3 1 1 ^###^
;  sb+ 3 1 12 ^###^
;  sb+ 3 1 123 ^###^
;  sb 3 2 -123 ^###^
;  sb 3 2 -12 ^###^
;  sb 3 2 -1 ^###^
;  sb 3 2 0 ^###^
;  sb 3 2 1 ^###^
;  sb 3 2 12 ^###^
;  sb 3 2 123 ^###^
;  sb+ 3 2 -123 ^###^
;  sb+ 3 2 -12 ^###^
;  sb+ 3 2 -1 ^###^
;  sb+ 3 2 0 ^###^
;  sb+ 3 2 1 ^###^
;  sb+ 3 2 12 ^###^
;  sb+ 3 2 123 ^###^
;  sb 4 0 -123 ^-123^
;  sb 4 0 -12 ^ -12^
;  sb 4 0 -1 ^  -1^
;  sb 4 0 0 ^   0^
;  sb 4 0 1 ^   1^
;  sb 4 0 12 ^  12^
;  sb 4 0 123 ^ 123^
;  sb+ 4 0 -123 ^-123^
;  sb+ 4 0 -12 ^ -12^
;  sb+ 4 0 -1 ^  -1^
;  sb+ 4 0 0 ^  +0^
;  sb+ 4 0 1 ^  +1^
;  sb+ 4 0 12 ^ +12^
;  sb+ 4 0 123 ^+123^
;  sb 4 1 -123 ^####^
;  sb 4 1 -12 ^-1.2^
;  sb 4 1 -1 ^-0.1^
;  sb 4 1 0 ^ 0.0^
;  sb 4 1 1 ^ 0.1^
;  sb 4 1 12 ^ 1.2^
;  sb 4 1 123 ^12.3^
;  sb+ 4 1 -123 ^####^
;  sb+ 4 1 -12 ^-1.2^
;  sb+ 4 1 -1 ^-0.1^
;  sb+ 4 1 0 ^+0.0^
;  sb+ 4 1 1 ^+0.1^
;  sb+ 4 1 12 ^+1.2^
;  sb+ 4 1 123 ^####^
;  sb 4 2 -123 ^####^
;  sb 4 2 -12 ^####^
;  sb 4 2 -1 ^####^
;  sb 4 2 0 ^0.00^
;  sb 4 2 1 ^0.01^
;  sb 4 2 12 ^0.12^
;  sb 4 2 123 ^1.23^
;  sb+ 4 2 -123 ^####^
;  sb+ 4 2 -12 ^####^
;  sb+ 4 2 -1 ^####^
;  sb+ 4 2 0 ^####^
;  sb+ 4 2 1 ^####^
;  sb+ 4 2 12 ^####^
;  sb+ 4 2 123 ^####^
;  sb 4 3 -123 ^####^
;  sb 4 3 -12 ^####^
;  sb 4 3 -1 ^####^
;  sb 4 3 0 ^####^
;  sb 4 3 1 ^####^
;  sb 4 3 12 ^####^
;  sb 4 3 123 ^####^
;  sb+ 4 3 -123 ^####^
;  sb+ 4 3 -12 ^####^
;  sb+ 4 3 -1 ^####^
;  sb+ 4 3 0 ^####^
;  sb+ 4 3 1 ^####^
;  sb+ 4 3 12 ^####^
;  sb+ 4 3 123 ^####^
;  sb 5 0 -123 ^ -123^
;  sb 5 0 -12 ^  -12^
;  sb 5 0 -1 ^   -1^
;  sb 5 0 0 ^    0^
;  sb 5 0 1 ^    1^
;  sb 5 0 12 ^   12^
;  sb 5 0 123 ^  123^
;  sb+ 5 0 -123 ^ -123^
;  sb+ 5 0 -12 ^  -12^
;  sb+ 5 0 -1 ^   -1^
;  sb+ 5 0 0 ^   +0^
;  sb+ 5 0 1 ^   +1^
;  sb+ 5 0 12 ^  +12^
;  sb+ 5 0 123 ^ +123^
;  sb 5 1 -123 ^-12.3^
;  sb 5 1 -12 ^ -1.2^
;  sb 5 1 -1 ^ -0.1^
;  sb 5 1 0 ^  0.0^
;  sb 5 1 1 ^  0.1^
;  sb 5 1 12 ^  1.2^
;  sb 5 1 123 ^ 12.3^
;  sb+ 5 1 -123 ^-12.3^
;  sb+ 5 1 -12 ^ -1.2^
;  sb+ 5 1 -1 ^ -0.1^
;  sb+ 5 1 0 ^ +0.0^
;  sb+ 5 1 1 ^ +0.1^
;  sb+ 5 1 12 ^ +1.2^
;  sb+ 5 1 123 ^+12.3^
;  sb 5 2 -123 ^-1.23^
;  sb 5 2 -12 ^-0.12^
;  sb 5 2 -1 ^-0.01^
;  sb 5 2 0 ^ 0.00^
;  sb 5 2 1 ^ 0.01^
;  sb 5 2 12 ^ 0.12^
;  sb 5 2 123 ^ 1.23^
;  sb+ 5 2 -123 ^-1.23^
;  sb+ 5 2 -12 ^-0.12^
;  sb+ 5 2 -1 ^-0.01^
;  sb+ 5 2 0 ^+0.00^
;  sb+ 5 2 1 ^+0.01^
;  sb+ 5 2 12 ^+0.12^
;  sb+ 5 2 123 ^+1.23^
;  sb 5 3 -123 ^#####^
;  sb 5 3 -12 ^#####^
;  sb 5 3 -1 ^#####^
;  sb 5 3 0 ^0.000^
;  sb 5 3 1 ^0.001^
;  sb 5 3 12 ^0.012^
;  sb 5 3 123 ^0.123^
;  sb+ 5 3 -123 ^#####^
;  sb+ 5 3 -12 ^#####^
;  sb+ 5 3 -1 ^#####^
;  sb+ 5 3 0 ^#####^
;  sb+ 5 3 1 ^#####^
;  sb+ 5 3 12 ^#####^
;  sb+ 5 3 123 ^#####^
;  sb 5 4 -123 ^#####^
;  sb 5 4 -12 ^#####^
;  sb 5 4 -1 ^#####^
;  sb 5 4 0 ^#####^
;  sb 5 4 1 ^#####^
;  sb 5 4 12 ^#####^
;  sb 5 4 123 ^#####^
;  sb+ 5 4 -123 ^#####^
;  sb+ 5 4 -12 ^#####^
;  sb+ 5 4 -1 ^#####^
;  sb+ 5 4 0 ^#####^
;  sb+ 5 4 1 ^#####^
;  sb+ 5 4 12 ^#####^
;  sb+ 5 4 123 ^#####^
;  sb 6 0 -123 ^  -123^
;  sb 6 0 -12 ^   -12^
;  sb 6 0 -1 ^    -1^
;  sb 6 0 0 ^     0^
;  sb 6 0 1 ^     1^
;  sb 6 0 12 ^    12^
;  sb 6 0 123 ^   123^
;  sb+ 6 0 -123 ^  -123^
;  sb+ 6 0 -12 ^   -12^
;  sb+ 6 0 -1 ^    -1^
;  sb+ 6 0 0 ^    +0^
;  sb+ 6 0 1 ^    +1^
;  sb+ 6 0 12 ^   +12^
;  sb+ 6 0 123 ^  +123^
;  sb 6 1 -123 ^ -12.3^
;  sb 6 1 -12 ^  -1.2^
;  sb 6 1 -1 ^  -0.1^
;  sb 6 1 0 ^   0.0^
;  sb 6 1 1 ^   0.1^
;  sb 6 1 12 ^   1.2^
;  sb 6 1 123 ^  12.3^
;  sb+ 6 1 -123 ^ -12.3^
;  sb+ 6 1 -12 ^  -1.2^
;  sb+ 6 1 -1 ^  -0.1^
;  sb+ 6 1 0 ^  +0.0^
;  sb+ 6 1 1 ^  +0.1^
;  sb+ 6 1 12 ^  +1.2^
;  sb+ 6 1 123 ^ +12.3^
;  sb 6 2 -123 ^ -1.23^
;  sb 6 2 -12 ^ -0.12^
;  sb 6 2 -1 ^ -0.01^
;  sb 6 2 0 ^  0.00^
;  sb 6 2 1 ^  0.01^
;  sb 6 2 12 ^  0.12^
;  sb 6 2 123 ^  1.23^
;  sb+ 6 2 -123 ^ -1.23^
;  sb+ 6 2 -12 ^ -0.12^
;  sb+ 6 2 -1 ^ -0.01^
;  sb+ 6 2 0 ^ +0.00^
;  sb+ 6 2 1 ^ +0.01^
;  sb+ 6 2 12 ^ +0.12^
;  sb+ 6 2 123 ^ +1.23^
;  sb 6 3 -123 ^-0.123^
;  sb 6 3 -12 ^-0.012^
;  sb 6 3 -1 ^-0.001^
;  sb 6 3 0 ^ 0.000^
;  sb 6 3 1 ^ 0.001^
;  sb 6 3 12 ^ 0.012^
;  sb 6 3 123 ^ 0.123^
;  sb+ 6 3 -123 ^-0.123^
;  sb+ 6 3 -12 ^-0.012^
;  sb+ 6 3 -1 ^-0.001^
;  sb+ 6 3 0 ^+0.000^
;  sb+ 6 3 1 ^+0.001^
;  sb+ 6 3 12 ^+0.012^
;  sb+ 6 3 123 ^+0.123^
;  sb 6 4 -123 ^######^
;  sb 6 4 -12 ^######^
;  sb 6 4 -1 ^######^
;  sb 6 4 0 ^0.0000^
;  sb 6 4 1 ^0.0001^
;  sb 6 4 12 ^0.0012^
;  sb 6 4 123 ^0.0123^
;  sb+ 6 4 -123 ^######^
;  sb+ 6 4 -12 ^######^
;  sb+ 6 4 -1 ^######^
;  sb+ 6 4 0 ^######^
;  sb+ 6 4 1 ^######^
;  sb+ 6 4 12 ^######^
;  sb+ 6 4 123 ^######^
;  sb 6 5 -123 ^######^
;  sb 6 5 -12 ^######^
;  sb 6 5 -1 ^######^
;  sb 6 5 0 ^######^
;  sb 6 5 1 ^######^
;  sb 6 5 12 ^######^
;  sb 6 5 123 ^######^
;  sb+ 6 5 -123 ^######^
;  sb+ 6 5 -12 ^######^
;  sb+ 6 5 -1 ^######^
;  sb+ 6 5 0 ^######^
;  sb+ 6 5 1 ^######^
;  sb+ 6 5 12 ^######^
;  sb+ 6 5 123 ^######^
;  sb 7 0 -123 ^   -123^
;  sb 7 0 -12 ^    -12^
;  sb 7 0 -1 ^     -1^
;  sb 7 0 0 ^      0^
;  sb 7 0 1 ^      1^
;  sb 7 0 12 ^     12^
;  sb 7 0 123 ^    123^
;  sb+ 7 0 -123 ^   -123^
;  sb+ 7 0 -12 ^    -12^
;  sb+ 7 0 -1 ^     -1^
;  sb+ 7 0 0 ^     +0^
;  sb+ 7 0 1 ^     +1^
;  sb+ 7 0 12 ^    +12^
;  sb+ 7 0 123 ^   +123^
;  sb 7 1 -123 ^  -12.3^
;  sb 7 1 -12 ^   -1.2^
;  sb 7 1 -1 ^   -0.1^
;  sb 7 1 0 ^    0.0^
;  sb 7 1 1 ^    0.1^
;  sb 7 1 12 ^    1.2^
;  sb 7 1 123 ^   12.3^
;  sb+ 7 1 -123 ^  -12.3^
;  sb+ 7 1 -12 ^   -1.2^
;  sb+ 7 1 -1 ^   -0.1^
;  sb+ 7 1 0 ^   +0.0^
;  sb+ 7 1 1 ^   +0.1^
;  sb+ 7 1 12 ^   +1.2^
;  sb+ 7 1 123 ^  +12.3^
;  sb 7 2 -123 ^  -1.23^
;  sb 7 2 -12 ^  -0.12^
;  sb 7 2 -1 ^  -0.01^
;  sb 7 2 0 ^   0.00^
;  sb 7 2 1 ^   0.01^
;  sb 7 2 12 ^   0.12^
;  sb 7 2 123 ^   1.23^
;  sb+ 7 2 -123 ^  -1.23^
;  sb+ 7 2 -12 ^  -0.12^
;  sb+ 7 2 -1 ^  -0.01^
;  sb+ 7 2 0 ^  +0.00^
;  sb+ 7 2 1 ^  +0.01^
;  sb+ 7 2 12 ^  +0.12^
;  sb+ 7 2 123 ^  +1.23^
;  sb 7 3 -123 ^ -0.123^
;  sb 7 3 -12 ^ -0.012^
;  sb 7 3 -1 ^ -0.001^
;  sb 7 3 0 ^  0.000^
;  sb 7 3 1 ^  0.001^
;  sb 7 3 12 ^  0.012^
;  sb 7 3 123 ^  0.123^
;  sb+ 7 3 -123 ^ -0.123^
;  sb+ 7 3 -12 ^ -0.012^
;  sb+ 7 3 -1 ^ -0.001^
;  sb+ 7 3 0 ^ +0.000^
;  sb+ 7 3 1 ^ +0.001^
;  sb+ 7 3 12 ^ +0.012^
;  sb+ 7 3 123 ^ +0.123^
;  sb 7 4 -123 ^-0.0123^
;  sb 7 4 -12 ^-0.0012^
;  sb 7 4 -1 ^-0.0001^
;  sb 7 4 0 ^ 0.0000^
;  sb 7 4 1 ^ 0.0001^
;  sb 7 4 12 ^ 0.0012^
;  sb 7 4 123 ^ 0.0123^
;  sb+ 7 4 -123 ^-0.0123^
;  sb+ 7 4 -12 ^-0.0012^
;  sb+ 7 4 -1 ^-0.0001^
;  sb+ 7 4 0 ^+0.0000^
;  sb+ 7 4 1 ^+0.0001^
;  sb+ 7 4 12 ^+0.0012^
;  sb+ 7 4 123 ^+0.0123^
;  sb 7 5 -123 ^#######^
;  sb 7 5 -12 ^#######^
;  sb 7 5 -1 ^#######^
;  sb 7 5 0 ^0.00000^
;  sb 7 5 1 ^0.00001^
;  sb 7 5 12 ^0.00012^
;  sb 7 5 123 ^0.00123^
;  sb+ 7 5 -123 ^#######^
;  sb+ 7 5 -12 ^#######^
;  sb+ 7 5 -1 ^#######^
;  sb+ 7 5 0 ^#######^
;  sb+ 7 5 1 ^#######^
;  sb+ 7 5 12 ^#######^
;  sb+ 7 5 123 ^#######^
;  sb 7 6 -123 ^#######^
;  sb 7 6 -12 ^#######^
;  sb 7 6 -1 ^#######^
;  sb 7 6 0 ^#######^
;  sb 7 6 1 ^#######^
;  sb 7 6 12 ^#######^
;  sb 7 6 123 ^#######^
;  sb+ 7 6 -123 ^#######^
;  sb+ 7 6 -12 ^#######^
;  sb+ 7 6 -1 ^#######^
;  sb+ 7 6 0 ^#######^
;  sb+ 7 6 1 ^#######^
;  sb+ 7 6 12 ^#######^
;  sb+ 7 6 123 ^#######^
;  