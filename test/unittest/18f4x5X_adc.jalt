-- Title: unittest to check ADC libs for 18f14k50
-- Author: Albert Faber, Copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this describes multiple unittests (a testcase), to test the 
-- many different combination while setting up ADC.
--
-- Notes: see jallib wiki page about unit testing to learn how to use this file
--

;@jallib section pic_4450
include 18f4450   ;@no_debug     

pragma target OSC HS           
pragma target clock 20_000_000 
pragma target WDT  disabled


-- force analog pin/port to be output, so we can check they are 
-- automagically set as input when configured (else it can be optimized away)

porta_direction = all_output
portb_direction = all_output
porte_direction = all_output
ADCON1 = 0x00

include unittest

enable_digital_io()            


const byte ADC_NVREF = ADC_NO_EXT_VREF
const bit ADC_HIGH_RESOLUTION = false
const word ADC_RSOURCE = 2_500



;@jallib section pic_4550
include 18f4550   ;@no_debug     

pragma target OSC HS           
pragma target clock 20_000_000 
pragma target WDT  disabled


-- force analog pin/port to be output, so we can check they are 
-- automagically set as input when configured (else it can be optimized away)

porta_direction = all_output
portb_direction = all_output
porte_direction = all_output
ADCON1 = 0x00

include unittest

enable_digital_io()            


const byte ADC_NVREF = ADC_NO_EXT_VREF
const bit ADC_HIGH_RESOLUTION = false
const word ADC_RSOURCE = 2_500


;@jallib section pic_4455
include 18f4455   ;@no_debug     

pragma target OSC HS           
pragma target clock 20_000_000 
pragma target WDT  disabled


-- force analog pin/port to be output, so we can check they are 
-- automagically set as input when configured (else it can be optimized away)

porta_direction = all_output
portb_direction = all_output
porte_direction = all_output
ADCON1 = 0x00

include unittest

enable_digital_io()            


const byte ADC_NVREF = ADC_NO_EXT_VREF
const bit ADC_HIGH_RESOLUTION = false
const word ADC_RSOURCE = 2_500


;@jallib section pic_4458
include 18f4458   ;@no_debug     

pragma target OSC HS           
pragma target clock 20_000_000 
pragma target WDT  disabled


-- force analog pin/port to be output, so we can check they are 
-- automagically set as input when configured (else it can be optimized away)

porta_direction = all_output
portb_direction = all_output
porte_direction = all_output
ADCON1 = 0x00

include unittest

enable_digital_io()            


const byte ADC_NVREF = ADC_NO_EXT_VREF
const bit ADC_HIGH_RESOLUTION = false
const word ADC_RSOURCE = 2_500



;@jallib section test_nchannel_0

const ADC_NCHANNEL = 0

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x00 channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0F channels_0_ADCON1


;@jallib section test_nchannel_1

const ADC_NCHANNEL = 1

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x01 channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0E channels_0_ADCON1


;@jallib section test_nchannel_2

const ADC_NCHANNEL = 2

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x03 channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0D channels_0_ADCON1

;@jallib section test_nchannel_3

const ADC_NCHANNEL = 3

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x07 channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0C channels_0_ADCON1


;@jallib section test_nchannel_4


const ADC_NCHANNEL = 4

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x0F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0B channels_0_ADCON1


;@jallib section test_nchannel_5

const ADC_NCHANNEL = 5

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0A channels_0_ADCON1

;@jallib section test_nchannel_6

const ADC_NCHANNEL = 6

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x01 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x09 channels_0_ADCON1


;@jallib section test_nchannel_7

const ADC_NCHANNEL = 7

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x03 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x08 channels_0_ADCON1


;@jallib section test_nchannel_8

const ADC_NCHANNEL = 8

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x07 channels_0_ADCON1


;@jallib section test_nchannel_9

const ADC_NCHANNEL = 9

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x04 channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x06 channels_0_ADCON1


;@jallib section test_nchannel_10

const ADC_NCHANNEL = 10

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x0C channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x05 channels_0_ADCON1


;@jallib section test_nchannel_11

const ADC_NCHANNEL = 11

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x0E channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x04 channels_0_ADCON1


;@jallib section test_nchannel_12

const ADC_NCHANNEL = 12

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x1E channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x03 channels_0_ADCON1


;@jallib section test_nchannel_13

const ADC_NCHANNEL = 13

include adc
adc_init()

-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_0_trisA

-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x1F channels_0_trisB

-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_0_trisE

-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x00 channels_0_ADCON1


;@jallib testcase test_4450_nchannel_0
;@jallib use pic_4450
;@jallib use test_nchannel_0

;@jallib testcase test_4450_nchannel_1
;@jallib use pic_4450
;@jallib use test_nchannel_1

;@jallib testcase test_4450_nchannel_2
;@jallib use pic_4450
;@jallib use test_nchannel_2

;@jallib testcase test_4450_nchannel_3
;@jallib use pic_4450
;@jallib use test_nchannel_3

;@jallib testcase test_4450_nchannel_4
;@jallib use pic_4450
;@jallib use test_nchannel_4

;@jallib testcase test_4450_nchannel_5
;@jallib use pic_4450
;@jallib use test_nchannel_5

;@jallib testcase test_4450_nchannel_6
;@jallib use pic_4450
;@jallib use test_nchannel_6

;@jallib testcase test_4450_nchannel_7
;@jallib use pic_4450
;@jallib use test_nchannel_7

;@jallib testcase test_4450_nchannel_8
;@jallib use pic_4450
;@jallib use test_nchannel_8

;@jallib testcase test_4450_nchannel_9
;@jallib use pic_4450
;@jallib use test_nchannel_9

;@jallib testcase test_4450_nchannel_10
;@jallib use pic_4450
;@jallib use test_nchannel_10

;@jallib testcase test_4450_nchannel_11
;@jallib use pic_4450
;@jallib use test_nchannel_11

;@jallib testcase test_4450_nchannel_12
;@jallib use pic_4450
;@jallib use test_nchannel_12

;@jallib testcase test_4450_nchannel_13
;@jallib use pic_4450
;@jallib use test_nchannel_13


;@jallib testcase test_4550_nchannel_0
;@jallib use pic_4550
;@jallib use test_nchannel_0

;@jallib testcase test_4550_nchannel_1
;@jallib use pic_4550
;@jallib use test_nchannel_1

;@jallib testcase test_4550_nchannel_2
;@jallib use pic_4550
;@jallib use test_nchannel_2

;@jallib testcase test_4550_nchannel_3
;@jallib use pic_4550
;@jallib use test_nchannel_3

;@jallib testcase test_4550_nchannel_4
;@jallib use pic_4550
;@jallib use test_nchannel_4

;@jallib testcase test_4550_nchannel_5
;@jallib use pic_4550
;@jallib use test_nchannel_5

;@jallib testcase test_4550_nchannel_6
;@jallib use pic_4550
;@jallib use test_nchannel_6

;@jallib testcase test_4550_nchannel_7
;@jallib use pic_4550
;@jallib use test_nchannel_7

;@jallib testcase test_4550_nchannel_8
;@jallib use pic_4550
;@jallib use test_nchannel_8

;@jallib testcase test_4550_nchannel_9
;@jallib use pic_4550
;@jallib use test_nchannel_9

;@jallib testcase test_4550_nchannel_10
;@jallib use pic_4550
;@jallib use test_nchannel_10

;@jallib testcase test_4550_nchannel_11
;@jallib use pic_4550
;@jallib use test_nchannel_11

;@jallib testcase test_4550_nchannel_12
;@jallib use pic_4550
;@jallib use test_nchannel_12

;@jallib testcase test_4550_nchannel_13
;@jallib use pic_4550
;@jallib use test_nchannel_13


;@jallib testcase test_4455_nchannel_0
;@jallib use pic_4455
;@jallib use test_nchannel_0

;@jallib testcase test_4455_nchannel_1
;@jallib use pic_4455
;@jallib use test_nchannel_1

;@jallib testcase test_4455_nchannel_2
;@jallib use pic_4455
;@jallib use test_nchannel_2

;@jallib testcase test_4455_nchannel_3
;@jallib use pic_4455
;@jallib use test_nchannel_3

;@jallib testcase test_4455_nchannel_4
;@jallib use pic_4455
;@jallib use test_nchannel_4

;@jallib testcase test_4455_nchannel_5
;@jallib use pic_4455
;@jallib use test_nchannel_5

;@jallib testcase test_4455_nchannel_6
;@jallib use pic_4455
;@jallib use test_nchannel_6

;@jallib testcase test_4455_nchannel_7
;@jallib use pic_4455
;@jallib use test_nchannel_7

;@jallib testcase test_4455_nchannel_8
;@jallib use pic_4455
;@jallib use test_nchannel_8

;@jallib testcase test_4455_nchannel_9
;@jallib use pic_4455
;@jallib use test_nchannel_9

;@jallib testcase test_4455_nchannel_10
;@jallib use pic_4455
;@jallib use test_nchannel_10

;@jallib testcase test_4455_nchannel_11
;@jallib use pic_4455
;@jallib use test_nchannel_11

;@jallib testcase test_4455_nchannel_12
;@jallib use pic_4455
;@jallib use test_nchannel_12

;@jallib testcase test_4455_nchannel_13
;@jallib use pic_4455
;@jallib use test_nchannel_13


;@jallib testcase test_4458_nchannel_0
;@jallib use pic_4458
;@jallib use test_nchannel_0

;@jallib testcase test_4458_nchannel_1
;@jallib use pic_4458
;@jallib use test_nchannel_1

;@jallib testcase test_4458_nchannel_2
;@jallib use pic_4458
;@jallib use test_nchannel_2

;@jallib testcase test_4458_nchannel_3
;@jallib use pic_4458
;@jallib use test_nchannel_3

;@jallib testcase test_4458_nchannel_4
;@jallib use pic_4458
;@jallib use test_nchannel_4

;@jallib testcase test_4458_nchannel_5
;@jallib use pic_4458
;@jallib use test_nchannel_5

;@jallib testcase test_4458_nchannel_6
;@jallib use pic_4458
;@jallib use test_nchannel_6

;@jallib testcase test_4458_nchannel_7
;@jallib use pic_4458
;@jallib use test_nchannel_7

;@jallib testcase test_4458_nchannel_8
;@jallib use pic_4458
;@jallib use test_nchannel_8

;@jallib testcase test_4458_nchannel_9
;@jallib use pic_4458
;@jallib use test_nchannel_9

;@jallib testcase test_4458_nchannel_10
;@jallib use pic_4458
;@jallib use test_nchannel_10

;@jallib testcase test_4458_nchannel_11
;@jallib use pic_4458
;@jallib use test_nchannel_11

;@jallib testcase test_4458_nchannel_12
;@jallib use pic_4458
;@jallib use test_nchannel_12

;@jallib testcase test_4458_nchannel_13
;@jallib use pic_4458
;@jallib use test_nchannel_13

