-- Title: unittest to check dynamic version of ADC libs with 18F4550
-- Author: Sebastien Lelong, Copyright (c) 2010, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: dynamic ADC libs, used for dependent analog pins like in 18F4550,
-- is used to allow user to change ADC parameters while PIC is running. Static version
-- allows only one setup, at startup.
--

;@jallib section pic_4550
include 18f4550   ;@no_debug     

pragma target OSC HS           
pragma target clock 20_000_000 
pragma target WDT  disabled


-- force analog pin/port to be output, so we can check they are 
-- automagically set as input when configured (else it can be optimized away)

porta_direction = all_output
portb_direction = all_output
porte_direction = all_output
ADCON1 = 0x00

include unittest

enable_digital_io()            

var byte ADC_NVREF = ADC_NO_EXT_VREF
var bit ADC_HIGH_RESOLUTION = low
var word ADC_RSOURCE = 2_500

var byte adc_temp = 40


;@jallib testcase test_nchannel_0_to_13_runtime
;@jallib use pic_4550

var byte adc_nchannel = 0
const bit ADC_DYNAMIC = true
include adc
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x00 channels_0_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_0_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_0_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0F channels_0_ADCON1

-- switch to 1 channel at runtime !
adc_nchannel = 1
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x01 channels_1_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_1_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_1_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0E channels_1_ADCON1


adc_nchannel = 2
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x03 channels_2_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_2_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_2_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0D channels_2_ADCON1

adc_nchannel = 3
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x07 channels_3_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_3_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_3_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0C channels_3_ADCON1

adc_nchannel = 4
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x0F channels_4_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_4_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_4_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0B channels_4_ADCON1

adc_nchannel = 5
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_5_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_5_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x00 channels_5_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x0A channels_5_ADCON1

adc_nchannel = 6
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_6_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_6_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x01 channels_6_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x09 channels_6_ADCON1

adc_nchannel = 7
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_7_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_7_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x03 channels_7_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x08 channels_7_ADCON1

adc_nchannel = 8
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_8_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x00 channels_8_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_8_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x07 channels_8_ADCON1

adc_nchannel = 9
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_9_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x04 channels_9_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_9_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x06 channels_9_ADCON1

adc_nchannel = 10
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_10_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x0C channels_10_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_10_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x05 channels_10_ADCON1

adc_nchannel = 11
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_11_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x0E channels_11_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_11_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x04 channels_11_ADCON1

adc_nchannel = 12
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_12_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x1E channels_12_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_12_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x03 channels_12_ADCON1

adc_nchannel = 13
adc_init()
-- check TRISA 
test_byte(TRISA)  ;@assertEquals 0x2F channels_13_trisA
-- check TRISB 
test_byte(TRISB)  ;@assertEquals 0x1F channels_13_trisB
-- check TRISE
test_byte(TRISE)  ;@assertEquals 0x07 channels_13_trisE
-- check ADCON1
test_byte(ADCON1)  ;@assertEquals 0x00 channels_13_ADCON1

