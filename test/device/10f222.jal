-- ===================================================
-- Title: JalV2 device include file for PIC10F222
--
-- Author: Rob Hamerling, Copyright (c) 2008..2013, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic10f222, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {MPLAB-X 1.9} crownking.edc.jar/content/edc/../PIC10F222.PIC
--
-- Notes:
--  - Created with Edc2Jal Rexx script version 0.0.18
--  - File creation date/time: 25 Sep 2013 14:48
--
-- ===================================================
--
const word DEVICE_ID   = 0x0000
const byte PICTYPE[]   = "10F222"
const byte DATASHEET[] = "41270E"
const byte PGMSPEC[]   = "41266C"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_12            -- (banks=1)
pragma  target  chip  10f222
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   2
pragma  code    511                     -- (excl high mem word)
pragma  ID      0x200,4
pragma  data    0x9-0x1F
pragma  shared  0x9-0x1F
--
var volatile byte _pic_accum at 0x1F      -- (compiler)
var volatile byte _pic_isr_w at 0x1E      -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0xFFF
const word  _FUSES                = 0b_0000_1111_1111_1111
--
var volatile byte  __osccal  at  0x5
asm          movwf __osccal                 -- calibrate oscillator
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0 }
var volatile byte   _ind                      at { 0x0 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2 }
var volatile byte   _pcl                      at { 0x2 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_GPWUF              at STATUS : 7
var volatile byte   _status                   at { 0x3 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _gpwuf                    =  7
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4 }
var volatile byte   _fsr                      at { 0x4 }
-- ------------------------------------------------
var volatile byte   OSCCAL                    at { 0x5 }
var volatile bit    OSCCAL_FOSC4              at OSCCAL : 0
var volatile bit*7  OSCCAL_CAL                at OSCCAL : 1
var volatile bit    OSCCAL_CAL0               at OSCCAL : 1
var volatile bit    OSCCAL_CAL1               at OSCCAL : 2
var volatile bit    OSCCAL_CAL2               at OSCCAL : 3
var volatile bit    OSCCAL_CAL3               at OSCCAL : 4
var volatile bit    OSCCAL_CAL4               at OSCCAL : 5
var volatile bit    OSCCAL_CAL5               at OSCCAL : 6
var volatile bit    OSCCAL_CAL6               at OSCCAL : 7
-- ------------------------------------------------
var volatile byte   _GPIO                     at { 0x6 }
alias               _PORTA                    is _GPIO
--
var          byte   PORTA                     at _PORTA
var volatile byte   _PORTA_shadow             at 0x1D
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    GPIO_GP0                  at _GPIO : 0
var volatile bit    PIN_A0                    at _GPIO : 0
alias               PIN_GP0                   is PIN_A0
alias               PIN_AN0                   is PIN_A0
alias               PIN_ICSPDAT               is PIN_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP1                  at _GPIO : 1
var volatile bit    PIN_A1                    at _GPIO : 1
alias               PIN_GP1                   is PIN_A1
alias               PIN_AN1                   is PIN_A1
alias               PIN_ICSPCLK               is PIN_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP2                  at _GPIO : 2
var volatile bit    PIN_A2                    at _GPIO : 2
alias               PIN_GP2                   is PIN_A2
alias               PIN_T0CKI                 is PIN_A2
alias               PIN_FOSC4                 is PIN_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP3                  at _GPIO : 3
var volatile bit    PIN_A3                    at _GPIO : 3
alias               PIN_GP3                   is PIN_A3
alias               PIN_MCLR                  is PIN_A3
alias               PIN_VPP                   is PIN_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x7 }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 1
var volatile bit*2  ADCON0_CHS                at ADCON0 : 2
var volatile bit*2  ADCON0_ANS                at ADCON0 : 6
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_CHS0               at ADCON0 : 2
var volatile bit    ADCON0_CHS1               at ADCON0 : 3
var volatile bit    ADCON0_ANS0               at ADCON0 : 6
alias               JANSEL_ANS0               is ADCON0_ANS0
var volatile bit    ADCON0_ANS1               at ADCON0 : 7
alias               JANSEL_ANS1               is ADCON0_ANS1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
-- ------------------------------------------------
var volatile byte   ADRES                     at { 0x8 }
var volatile bit    ADRES_ADRES0              at ADRES : 0
var volatile bit    ADRES_ADRES1              at ADRES : 1
var volatile bit    ADRES_ADRES2              at ADRES : 2
var volatile bit    ADRES_ADRES3              at ADRES : 3
var volatile bit    ADRES_ADRES4              at ADRES : 4
var volatile bit    ADRES_ADRES5              at ADRES : 5
var volatile bit    ADRES_ADRES6              at ADRES : 6
var volatile bit    ADRES_ADRES7              at ADRES : 7
-- ------------------------------------------------
var volatile byte   _TRISA_shadow             at 0x1C = 0b1111_1111    -- all input
--
procedure PORTA_direction'put(byte in x at _TRISA_shadow) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   _TRISA_shadow = (_TRISA_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   _TRISA_shadow = (_TRISA_shadow & 0x0F) | (x << 4)
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
--
procedure pin_A0_direction'put(bit in x at _TRISA_shadow : 0) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               PIN_GP0_DIRECTION         is PIN_A0_DIRECTION
alias               PIN_AN0_DIRECTION         is PIN_A0_DIRECTION
alias               PIN_ICSPDAT_DIRECTION     is PIN_A0_DIRECTION
--
procedure pin_A1_direction'put(bit in x at _TRISA_shadow : 1) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               PIN_GP1_DIRECTION         is PIN_A1_DIRECTION
alias               PIN_AN1_DIRECTION         is PIN_A1_DIRECTION
alias               PIN_ICSPCLK_DIRECTION     is PIN_A1_DIRECTION
--
procedure pin_A2_direction'put(bit in x at _TRISA_shadow : 2) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               PIN_GP2_DIRECTION         is PIN_A2_DIRECTION
alias               PIN_T0CKI_DIRECTION       is PIN_A2_DIRECTION
alias               PIN_FOSC4_DIRECTION       is PIN_A2_DIRECTION
--
-- ------------------------------------------------
var volatile byte   _OPTION_REG_shadow        at 0x1B = 0b1111_1111    -- at reset
--
procedure OPTION_REG'put(byte in x at _OPTION_REG_shadow) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(bit*3 in x at _OPTION_REG_shadow : 0) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
procedure OPTION_REG_PSA'put(bit in x at _OPTION_REG_shadow : 3) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_T0SE'put(bit in x at _OPTION_REG_shadow : 4) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_T0CS'put(bit in x at _OPTION_REG_shadow : 5) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_NGPPU'put(bit in x at _OPTION_REG_shadow : 6) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_NGPWU'put(bit in x at _OPTION_REG_shadow : 7) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
-- ===================================================
--
--    Constants and procedures for analog features
--    --------------------------------------------
--
const      ADC_GROUP          = ADC_V0
const byte ADC_NTOTAL_CHANNEL = 2
const byte ADC_ADCS_BITCOUNT  = 0
const byte ADC_MAX_RESOLUTION = 8
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ===================================================
--
--    Miscellaneous
--    -------------
--
const PPS_GROUP        = PPS_0        -- no Peripheral Pin Selection
--
-- Free shared memory: 0x9-0x1A
--
-- ===================================================
--
--    Symbolic Fuse Definitions
-- ------------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def IOSCFS 0x1 {               -- Internal Oscillator Frequency Select bit
       F8MHZ = 0x1                         -- 8 MHz
       F4MHZ = 0x0                         -- 4 MHz
       }
pragma fuse_def MCPU 0x2 {                 -- Master Clear Pull-up Enable bit
       DISABLED = 0x2                      -- Pull-up disabled
       ENABLED = 0x0                       -- Pull-up enabled
       }
pragma fuse_def WDT 0x4 {                  -- Watchdog Timer Enable bit
       ENABLED = 0x4                       -- WDT enabled
       DISABLED = 0x0                      -- WDT disabled
       }
pragma fuse_def CP 0x8 {                   -- Code protection bit
       DISABLED = 0x8                      -- Code protection off
       ENABLED = 0x0                       -- Code protection on
       }
pragma fuse_def MCLR 0x10 {                -- GP3/MCLR Pin Function Select bit
       EXTERNAL = 0x10                     -- GP3/MCLR pin function is MCLR
       INTERNAL = 0x0                      -- GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
       }
--
