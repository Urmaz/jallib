-- ===================================================
-- Title: JalV2 device include file for PIC16F874
--
-- Author: Rob Hamerling, Copyright (c) 2008..2013, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f874, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {MPLAB-X 1.9} crownking.edc.jar/content/edc/../PIC16F874.PIC
--
-- Notes:
--  - Created with Edc2Jal Rexx script version 0.0.18
--  - File creation date/time: 25 Sep 2013 14:48
--
-- ===================================================
--
const word DEVICE_ID   = 0x0920
const byte PICTYPE[]   = "16F874"
const byte DATASHEET[] = "30292D"
const byte PGMSPEC[]   = "39025F"
--
-- Vdd Range: 2.500-5.500 Nominal: 5.000
-- Vpp Range: 12.500-13.500 Default: 13.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks=4)
pragma  target  chip  16f874
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    4096
pragma  eeprom  0x2100,128
pragma  ID      0x2000,4
pragma  data    0x20-0x7D,0xA0-0xFD
pragma  shared  0x7E-0x7F
--
var volatile byte _pic_accum at 0x7F      -- (compiler)
var volatile byte _pic_isr_w at 0x7E      -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0011_1111_1111_1111
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _irp                      =  7
const        byte   _rp0                      =  5
const        byte   _rp1                      =  6
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   _PORTA                    at { 0x5 }
--
var          byte   PORTA                     at _PORTA
var volatile byte   _PORTA_shadow            
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA0                 at _PORTA : 0
var volatile bit    PIN_A0                    at _PORTA : 0
alias               PIN_AN0                   is PIN_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA1                 at _PORTA : 1
var volatile bit    PIN_A1                    at _PORTA : 1
alias               PIN_AN1                   is PIN_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA2                 at _PORTA : 2
var volatile bit    PIN_A2                    at _PORTA : 2
alias               PIN_AN2                   is PIN_A2
alias               PIN_VREF_NEG              is PIN_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA3                 at _PORTA : 3
var volatile bit    PIN_A3                    at _PORTA : 3
alias               PIN_AN3                   is PIN_A3
alias               PIN_VREF_POS              is PIN_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA4                 at _PORTA : 4
var volatile bit    PIN_A4                    at _PORTA : 4
alias               PIN_T0CKI                 is PIN_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA5                 at _PORTA : 5
var volatile bit    PIN_A5                    at _PORTA : 5
alias               PIN_SS                    is PIN_A5
alias               PIN_AN4                   is PIN_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTB                    at { 0x6,0x106 }
--
var          byte   PORTB                     at _PORTB
var volatile byte   _PORTB_shadow            
--
procedure PORTB'put(byte in x at _PORTB_shadow) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
procedure PORTB_low'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB0                 at _PORTB : 0
var volatile bit    PIN_B0                    at _PORTB : 0
--
procedure pin_B0'put(bit in x at _PORTB_shadow : 0) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB1                 at _PORTB : 1
var volatile bit    PIN_B1                    at _PORTB : 1
--
procedure pin_B1'put(bit in x at _PORTB_shadow : 1) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB2                 at _PORTB : 2
var volatile bit    PIN_B2                    at _PORTB : 2
--
procedure pin_B2'put(bit in x at _PORTB_shadow : 2) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB3                 at _PORTB : 3
var volatile bit    PIN_B3                    at _PORTB : 3
alias               PIN_PGM                   is PIN_B3
--
procedure pin_B3'put(bit in x at _PORTB_shadow : 3) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB4                 at _PORTB : 4
var volatile bit    PIN_B4                    at _PORTB : 4
--
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB5                 at _PORTB : 5
var volatile bit    PIN_B5                    at _PORTB : 5
--
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB6                 at _PORTB : 6
var volatile bit    PIN_B6                    at _PORTB : 6
alias               PIN_PGC                   is PIN_B6
--
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB7                 at _PORTB : 7
var volatile bit    PIN_B7                    at _PORTB : 7
alias               PIN_PGD                   is PIN_B7
--
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTC                    at { 0x7 }
--
var          byte   PORTC                     at _PORTC
var volatile byte   _PORTC_shadow            
--
procedure PORTC'put(byte in x at _PORTC_shadow) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
procedure PORTC_low'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC0                 at _PORTC : 0
var volatile bit    PIN_C0                    at _PORTC : 0
alias               PIN_T1OSO                 is PIN_C0
alias               PIN_T1CKI                 is PIN_C0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC1                 at _PORTC : 1
var volatile bit    PIN_C1                    at _PORTC : 1
alias               PIN_T1OSI                 is PIN_C1
alias               PIN_CCP2                  is PIN_C1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC2                 at _PORTC : 2
var volatile bit    PIN_C2                    at _PORTC : 2
alias               PIN_CCP1                  is PIN_C2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC3                 at _PORTC : 3
var volatile bit    PIN_C3                    at _PORTC : 3
alias               PIN_SCK                   is PIN_C3
alias               PIN_SCL                   is PIN_C3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC4                 at _PORTC : 4
var volatile bit    PIN_C4                    at _PORTC : 4
alias               PIN_SDI                   is PIN_C4
alias               PIN_SDA                   is PIN_C4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC5                 at _PORTC : 5
var volatile bit    PIN_C5                    at _PORTC : 5
alias               PIN_SDO                   is PIN_C5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC6                 at _PORTC : 6
var volatile bit    PIN_C6                    at _PORTC : 6
alias               PIN_TX                    is PIN_C6
alias               PIN_CK                    is PIN_C6
--
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC7                 at _PORTC : 7
var volatile bit    PIN_C7                    at _PORTC : 7
alias               PIN_RX                    is PIN_C7
alias               PIN_DT                    is PIN_C7
--
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTD                    at { 0x8 }
--
var          byte   PORTD                     at _PORTD
var volatile byte   _PORTD_shadow            
--
procedure PORTD'put(byte in x at _PORTD_shadow) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
procedure PORTD_low'put(byte in x) is
   _PORTD_shadow = (_PORTD_shadow & 0xF0) | (x & 0x0F)
   _PORTD = _PORTD_shadow
end procedure
function PORTD_low'get() return byte is
   return (PORTD & 0x0F)
end function
--
procedure PORTD_high'put(byte in x) is
   _PORTD_shadow = (_PORTD_shadow & 0x0F) | (x << 4)
   _PORTD = _PORTD_shadow
end procedure
function PORTD_high'get() return byte is
   return (PORTD >> 4)
end function
--
var volatile bit    PORTD_RD0                 at _PORTD : 0
var volatile bit    PIN_D0                    at _PORTD : 0
alias               PIN_PSP0                  is PIN_D0
--
procedure pin_D0'put(bit in x at _PORTD_shadow : 0) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD1                 at _PORTD : 1
var volatile bit    PIN_D1                    at _PORTD : 1
alias               PIN_PSP1                  is PIN_D1
--
procedure pin_D1'put(bit in x at _PORTD_shadow : 1) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD2                 at _PORTD : 2
var volatile bit    PIN_D2                    at _PORTD : 2
alias               PIN_PSP2                  is PIN_D2
--
procedure pin_D2'put(bit in x at _PORTD_shadow : 2) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD3                 at _PORTD : 3
var volatile bit    PIN_D3                    at _PORTD : 3
alias               PIN_PSP3                  is PIN_D3
--
procedure pin_D3'put(bit in x at _PORTD_shadow : 3) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD4                 at _PORTD : 4
var volatile bit    PIN_D4                    at _PORTD : 4
alias               PIN_PSP4                  is PIN_D4
--
procedure pin_D4'put(bit in x at _PORTD_shadow : 4) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD5                 at _PORTD : 5
var volatile bit    PIN_D5                    at _PORTD : 5
alias               PIN_PSP5                  is PIN_D5
--
procedure pin_D5'put(bit in x at _PORTD_shadow : 5) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD6                 at _PORTD : 6
var volatile bit    PIN_D6                    at _PORTD : 6
alias               PIN_PSP6                  is PIN_D6
--
procedure pin_D6'put(bit in x at _PORTD_shadow : 6) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
var volatile bit    PORTD_RD7                 at _PORTD : 7
var volatile bit    PIN_D7                    at _PORTD : 7
alias               PIN_PSP7                  is PIN_D7
--
procedure pin_D7'put(bit in x at _PORTD_shadow : 7) is
   pragma inline
   _PORTD = _PORTD_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTE                    at { 0x9 }
--
var          byte   PORTE                     at _PORTE
var volatile byte   _PORTE_shadow            
--
procedure PORTE'put(byte in x at _PORTE_shadow) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
procedure PORTE_low'put(byte in x) is
   _PORTE_shadow = (_PORTE_shadow & 0xF0) | (x & 0x0F)
   _PORTE = _PORTE_shadow
end procedure
function PORTE_low'get() return byte is
   return (PORTE & 0x0F)
end function
--
procedure PORTE_high'put(byte in x) is
   _PORTE_shadow = (_PORTE_shadow & 0x0F) | (x << 4)
   _PORTE = _PORTE_shadow
end procedure
function PORTE_high'get() return byte is
   return (PORTE >> 4)
end function
--
var volatile bit    PORTE_RE0                 at _PORTE : 0
var volatile bit    PIN_E0                    at _PORTE : 0
alias               PIN_RD                    is PIN_E0
alias               PIN_AN5                   is PIN_E0
--
procedure pin_E0'put(bit in x at _PORTE_shadow : 0) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE1                 at _PORTE : 1
var volatile bit    PIN_E1                    at _PORTE : 1
alias               PIN_WR                    is PIN_E1
alias               PIN_AN6                   is PIN_E1
--
procedure pin_E1'put(bit in x at _PORTE_shadow : 1) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
var volatile bit    PORTE_RE2                 at _PORTE : 2
var volatile bit    PIN_E2                    at _PORTE : 2
alias               PIN_CS                    is PIN_E2
alias               PIN_AN7                   is PIN_E2
--
procedure pin_E2'put(bit in x at _PORTE_shadow : 2) is
   pragma inline
   _PORTE = _PORTE_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_RBIF               at INTCON : 0
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_CCP1IF               at PIR1 : 2
var volatile bit    PIR1_SSPIF                at PIR1 : 3
var volatile bit    PIR1_TXIF                 at PIR1 : 4
var volatile bit    PIR1_RCIF                 at PIR1 : 5
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_PSPIF                at PIR1 : 7
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xD }
var volatile bit    PIR2_CCP2IF               at PIR2 : 0
var volatile bit    PIR2_BCLIF                at PIR2 : 3
var volatile bit    PIR2_EEIF                 at PIR2 : 4
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
var volatile bit    T1CON_T1INSYNC            at T1CON : 2
var volatile bit    T1CON_T1SYNC              at T1CON : 2
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_T2CKPS0             at T2CON : 0
var volatile bit    T2CON_T2CKPS1             at T2CON : 1
var volatile bit    T2CON_TOUTPS0             at T2CON : 3
var volatile bit    T2CON_TOUTPS1             at T2CON : 4
var volatile bit    T2CON_TOUTPS2             at T2CON : 5
var volatile bit    T2CON_TOUTPS3             at T2CON : 6
-- ------------------------------------------------
var volatile byte   SSPBUF                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   SSPCON                    at { 0x14 }
var volatile bit*4  SSPCON_SSPM               at SSPCON : 0
var volatile bit    SSPCON_CKP                at SSPCON : 4
var volatile bit    SSPCON_SSPEN              at SSPCON : 5
var volatile bit    SSPCON_SSPOV              at SSPCON : 6
var volatile bit    SSPCON_WCOL               at SSPCON : 7
var volatile bit    SSPCON_SSPM0              at SSPCON : 0
var volatile bit    SSPCON_SSPM1              at SSPCON : 1
var volatile bit    SSPCON_SSPM2              at SSPCON : 2
var volatile bit    SSPCON_SSPM3              at SSPCON : 3
--
alias               SSPCON1                   is SSPCON
alias               SSPCON1_SSPM              is SSPCON_SSPM
alias               SSPCON1_CKP               is SSPCON_CKP
alias               SSPCON1_SSPEN             is SSPCON_SSPEN
alias               SSPCON1_SSPOV             is SSPCON_SSPOV
alias               SSPCON1_WCOL              is SSPCON_WCOL
alias               SSPCON1_SSPM0             is SSPCON_SSPM0
alias               SSPCON1_SSPM1             is SSPCON_SSPM1
alias               SSPCON1_SSPM2             is SSPCON_SSPM2
alias               SSPCON1_SSPM3             is SSPCON_SSPM3
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x16 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x17 }
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
var volatile bit*2  CCP1CON_DC1B              at CCP1CON : 4
var volatile bit    CCP1CON_CCP1M0            at CCP1CON : 0
var volatile bit    CCP1CON_CCP1M1            at CCP1CON : 1
var volatile bit    CCP1CON_CCP1M2            at CCP1CON : 2
var volatile bit    CCP1CON_CCP1M3            at CCP1CON : 3
-- ------------------------------------------------
var volatile byte   RCSTA                     at { 0x18 }
var volatile bit    RCSTA_RX9D                at RCSTA : 0
var volatile bit    RCSTA_OERR                at RCSTA : 1
var volatile bit    RCSTA_FERR                at RCSTA : 2
var volatile bit    RCSTA_ADDEN               at RCSTA : 3
var volatile bit    RCSTA_CREN                at RCSTA : 4
var volatile bit    RCSTA_SREN                at RCSTA : 5
var volatile bit    RCSTA_RX9                 at RCSTA : 6
var volatile bit    RCSTA_SPEN                at RCSTA : 7
var volatile bit    RCSTA_RCD8                at RCSTA : 0
var volatile bit    RCSTA_RC9                 at RCSTA : 6
var volatile bit    RCSTA_NRC8                at RCSTA : 6
var volatile bit    RCSTA_RC8_9               at RCSTA : 6
-- ------------------------------------------------
var volatile byte   TXREG                     at { 0x19 }
-- ------------------------------------------------
var volatile byte   RCREG                     at { 0x1A }
-- ------------------------------------------------
var volatile word   CCPR2                     at { 0x1B }
-- ------------------------------------------------
var volatile byte   CCPR2L                    at { 0x1B }
-- ------------------------------------------------
var volatile byte   CCPR2H                    at { 0x1C }
-- ------------------------------------------------
var volatile byte   CCP2CON                   at { 0x1D }
var volatile bit*4  CCP2CON_CCP2M             at CCP2CON : 0
var volatile bit*2  CCP2CON_DC2B              at CCP2CON : 4
var volatile bit    CCP2CON_CCP2M0            at CCP2CON : 0
var volatile bit    CCP2CON_CCP2M1            at CCP2CON : 1
var volatile bit    CCP2CON_CCP2M2            at CCP2CON : 2
var volatile bit    CCP2CON_CCP2M3            at CCP2CON : 3
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 2
var volatile bit*3  ADCON0_CHS                at ADCON0 : 3
var volatile bit*2  ADCON0_ADCS               at ADCON0 : 6
var volatile bit    ADCON0_GO                 at ADCON0 : 2
var volatile bit    ADCON0_CHS0               at ADCON0 : 3
var volatile bit    ADCON0_CHS1               at ADCON0 : 4
var volatile bit    ADCON0_CHS2               at ADCON0 : 5
var volatile bit    ADCON0_ADCS0              at ADCON0 : 6
var volatile bit    ADCON0_ADCS1              at ADCON0 : 7
var volatile bit    ADCON0_NDONE              at ADCON0 : 2
var volatile bit    ADCON0_GO_DONE            at ADCON0 : 2
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_NRBPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_PS0            at OPTION_REG : 0
var volatile bit    OPTION_REG_PS1            at OPTION_REG : 1
var volatile bit    OPTION_REG_PS2            at OPTION_REG : 2
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
alias               PORTA_DIRECTION           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
alias               PIN_A0_DIRECTION          is TRISA_TRISA0
alias               PIN_AN0_DIRECTION         is PIN_A0_DIRECTION
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
alias               PIN_A1_DIRECTION          is TRISA_TRISA1
alias               PIN_AN1_DIRECTION         is PIN_A1_DIRECTION
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
alias               PIN_A2_DIRECTION          is TRISA_TRISA2
alias               PIN_AN2_DIRECTION         is PIN_A2_DIRECTION
alias               PIN_VREF_NEG_DIRECTION    is PIN_A2_DIRECTION
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
alias               PIN_A3_DIRECTION          is TRISA_TRISA3
alias               PIN_AN3_DIRECTION         is PIN_A3_DIRECTION
alias               PIN_VREF_POS_DIRECTION    is PIN_A3_DIRECTION
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
alias               PIN_A4_DIRECTION          is TRISA_TRISA4
alias               PIN_T0CKI_DIRECTION       is PIN_A4_DIRECTION
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
alias               PIN_A5_DIRECTION          is TRISA_TRISA5
alias               PIN_SS_DIRECTION          is PIN_A5_DIRECTION
alias               PIN_AN4_DIRECTION         is PIN_A5_DIRECTION
--
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86,0x186 }
alias               PORTB_DIRECTION           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
alias               PIN_B0_DIRECTION          is TRISB_TRISB0
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
alias               PIN_B1_DIRECTION          is TRISB_TRISB1
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
alias               PIN_B2_DIRECTION          is TRISB_TRISB2
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
alias               PIN_B3_DIRECTION          is TRISB_TRISB3
alias               PIN_PGM_DIRECTION         is PIN_B3_DIRECTION
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
alias               PIN_B4_DIRECTION          is TRISB_TRISB4
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
alias               PIN_B5_DIRECTION          is TRISB_TRISB5
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
alias               PIN_B6_DIRECTION          is TRISB_TRISB6
alias               PIN_PGC_DIRECTION         is PIN_B6_DIRECTION
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
alias               PIN_B7_DIRECTION          is TRISB_TRISB7
alias               PIN_PGD_DIRECTION         is PIN_B7_DIRECTION
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x87 }
alias               PORTC_DIRECTION           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
alias               PIN_C0_DIRECTION          is TRISC_TRISC0
alias               PIN_T1OSO_DIRECTION       is PIN_C0_DIRECTION
alias               PIN_T1CKI_DIRECTION       is PIN_C0_DIRECTION
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
alias               PIN_C1_DIRECTION          is TRISC_TRISC1
alias               PIN_T1OSI_DIRECTION       is PIN_C1_DIRECTION
alias               PIN_CCP2_DIRECTION        is PIN_C1_DIRECTION
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
alias               PIN_C2_DIRECTION          is TRISC_TRISC2
alias               PIN_CCP1_DIRECTION        is PIN_C2_DIRECTION
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
alias               PIN_C3_DIRECTION          is TRISC_TRISC3
alias               PIN_SCK_DIRECTION         is PIN_C3_DIRECTION
alias               PIN_SCL_DIRECTION         is PIN_C3_DIRECTION
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
alias               PIN_C4_DIRECTION          is TRISC_TRISC4
alias               PIN_SDI_DIRECTION         is PIN_C4_DIRECTION
alias               PIN_SDA_DIRECTION         is PIN_C4_DIRECTION
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
alias               PIN_C5_DIRECTION          is TRISC_TRISC5
alias               PIN_SDO_DIRECTION         is PIN_C5_DIRECTION
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
alias               PIN_C6_DIRECTION          is TRISC_TRISC6
alias               PIN_TX_DIRECTION          is PIN_C6_DIRECTION
alias               PIN_CK_DIRECTION          is PIN_C6_DIRECTION
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
alias               PIN_C7_DIRECTION          is TRISC_TRISC7
alias               PIN_RX_DIRECTION          is PIN_C7_DIRECTION
alias               PIN_DT_DIRECTION          is PIN_C7_DIRECTION
--
-- ------------------------------------------------
var volatile byte   TRISD                     at { 0x88 }
alias               PORTD_DIRECTION           is TRISD
--
procedure PORTD_low_direction'put(byte in x) is
   TRISD = (TRISD & 0xF0) | (x & 0x0F)
end procedure
function PORTD_low_direction'get() return byte is
   return (TRISD & 0x0F)
end function
--
procedure PORTD_high_direction'put(byte in x) is
   TRISD = (TRISD & 0x0F) | (x << 4)
end procedure
function PORTD_high_direction'get() return byte is
   return (TRISD >> 4)
end function
--
var volatile bit    TRISD_TRISD0              at TRISD : 0
alias               PIN_D0_DIRECTION          is TRISD_TRISD0
alias               PIN_PSP0_DIRECTION        is PIN_D0_DIRECTION
--
var volatile bit    TRISD_TRISD1              at TRISD : 1
alias               PIN_D1_DIRECTION          is TRISD_TRISD1
alias               PIN_PSP1_DIRECTION        is PIN_D1_DIRECTION
--
var volatile bit    TRISD_TRISD2              at TRISD : 2
alias               PIN_D2_DIRECTION          is TRISD_TRISD2
alias               PIN_PSP2_DIRECTION        is PIN_D2_DIRECTION
--
var volatile bit    TRISD_TRISD3              at TRISD : 3
alias               PIN_D3_DIRECTION          is TRISD_TRISD3
alias               PIN_PSP3_DIRECTION        is PIN_D3_DIRECTION
--
var volatile bit    TRISD_TRISD4              at TRISD : 4
alias               PIN_D4_DIRECTION          is TRISD_TRISD4
alias               PIN_PSP4_DIRECTION        is PIN_D4_DIRECTION
--
var volatile bit    TRISD_TRISD5              at TRISD : 5
alias               PIN_D5_DIRECTION          is TRISD_TRISD5
alias               PIN_PSP5_DIRECTION        is PIN_D5_DIRECTION
--
var volatile bit    TRISD_TRISD6              at TRISD : 6
alias               PIN_D6_DIRECTION          is TRISD_TRISD6
alias               PIN_PSP6_DIRECTION        is PIN_D6_DIRECTION
--
var volatile bit    TRISD_TRISD7              at TRISD : 7
alias               PIN_D7_DIRECTION          is TRISD_TRISD7
alias               PIN_PSP7_DIRECTION        is PIN_D7_DIRECTION
--
-- ------------------------------------------------
var volatile byte   TRISE                     at { 0x89 }
alias               PORTE_DIRECTION           is TRISE
--
procedure PORTE_low_direction'put(byte in x) is
   TRISE = (TRISE & 0xF0) | (x & 0x0F)
end procedure
function PORTE_low_direction'get() return byte is
   return (TRISE & 0x0F)
end function
--
procedure PORTE_high_direction'put(byte in x) is
   TRISE = (TRISE & 0x0F) | (x << 4)
end procedure
function PORTE_high_direction'get() return byte is
   return (TRISE >> 4)
end function
--
var volatile bit    TRISE_TRISE0              at TRISE : 0
alias               PIN_E0_DIRECTION          is TRISE_TRISE0
alias               PIN_RD_DIRECTION          is PIN_E0_DIRECTION
alias               PIN_AN5_DIRECTION         is PIN_E0_DIRECTION
--
var volatile bit    TRISE_TRISE1              at TRISE : 1
alias               PIN_E1_DIRECTION          is TRISE_TRISE1
alias               PIN_WR_DIRECTION          is PIN_E1_DIRECTION
alias               PIN_AN6_DIRECTION         is PIN_E1_DIRECTION
--
var volatile bit    TRISE_TRISE2              at TRISE : 2
alias               PIN_E2_DIRECTION          is TRISE_TRISE2
alias               PIN_CS_DIRECTION          is PIN_E2_DIRECTION
alias               PIN_AN7_DIRECTION         is PIN_E2_DIRECTION
--
var volatile bit    TRISE_PSPMODE             at TRISE : 4
var volatile bit    TRISE_IBOV                at TRISE : 5
var volatile bit    TRISE_OBF                 at TRISE : 6
var volatile bit    TRISE_IBF                 at TRISE : 7
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_CCP1IE               at PIE1 : 2
var volatile bit    PIE1_SSPIE                at PIE1 : 3
var volatile bit    PIE1_TXIE                 at PIE1 : 4
var volatile bit    PIE1_RCIE                 at PIE1 : 5
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_PSPIE                at PIE1 : 7
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x8D }
var volatile bit    PIE2_CCP2IE               at PIE2 : 0
var volatile bit    PIE2_BCLIE                at PIE2 : 3
var volatile bit    PIE2_EEIE                 at PIE2 : 4
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NBOR                 at PCON : 0
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBO                  at PCON : 0
-- ------------------------------------------------
var volatile byte   SSPCON2                   at { 0x91 }
var volatile bit    SSPCON2_SEN               at SSPCON2 : 0
var volatile bit    SSPCON2_RSEN              at SSPCON2 : 1
var volatile bit    SSPCON2_PEN               at SSPCON2 : 2
var volatile bit    SSPCON2_RCEN              at SSPCON2 : 3
var volatile bit    SSPCON2_ACKEN             at SSPCON2 : 4
var volatile bit    SSPCON2_ACKDT             at SSPCON2 : 5
var volatile bit    SSPCON2_ACKSTAT           at SSPCON2 : 6
var volatile bit    SSPCON2_GCEN              at SSPCON2 : 7
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   SSPADD                    at { 0x93 }
-- ------------------------------------------------
var volatile byte   SSPSTAT                   at { 0x94 }
var volatile bit    SSPSTAT_BF                at SSPSTAT : 0
var volatile bit    SSPSTAT_UA                at SSPSTAT : 1
var volatile bit    SSPSTAT_R_NW              at SSPSTAT : 2
var volatile bit    SSPSTAT_S                 at SSPSTAT : 3
var volatile bit    SSPSTAT_P                 at SSPSTAT : 4
var volatile bit    SSPSTAT_D_NA              at SSPSTAT : 5
var volatile bit    SSPSTAT_CKE               at SSPSTAT : 6
var volatile bit    SSPSTAT_SMP               at SSPSTAT : 7
var volatile bit    SSPSTAT_R                 at SSPSTAT : 2
var volatile bit    SSPSTAT_D                 at SSPSTAT : 5
var volatile bit    SSPSTAT_I2C_READ          at SSPSTAT : 2
var volatile bit    SSPSTAT_I2C_START         at SSPSTAT : 3
var volatile bit    SSPSTAT_I2C_STOP          at SSPSTAT : 4
var volatile bit    SSPSTAT_I2C_DATA          at SSPSTAT : 5
var volatile bit    SSPSTAT_NW                at SSPSTAT : 2
var volatile bit    SSPSTAT_NA                at SSPSTAT : 5
var volatile bit    SSPSTAT_NWRITE            at SSPSTAT : 2
var volatile bit    SSPSTAT_NADDRESS          at SSPSTAT : 5
var volatile bit    SSPSTAT_R_W               at SSPSTAT : 2
var volatile bit    SSPSTAT_D_A               at SSPSTAT : 5
var volatile bit    SSPSTAT_READ_WRITE        at SSPSTAT : 2
var volatile bit    SSPSTAT_DATA_ADDRESS      at SSPSTAT : 5
-- ------------------------------------------------
var volatile byte   TXSTA                     at { 0x98 }
var volatile bit    TXSTA_TX9D                at TXSTA : 0
var volatile bit    TXSTA_TRMT                at TXSTA : 1
var volatile bit    TXSTA_BRGH                at TXSTA : 2
var volatile bit    TXSTA_SYNC                at TXSTA : 4
var volatile bit    TXSTA_TXEN                at TXSTA : 5
var volatile bit    TXSTA_TX9                 at TXSTA : 6
var volatile bit    TXSTA_CSRC                at TXSTA : 7
var volatile bit    TXSTA_TXD8                at TXSTA : 0
var volatile bit    TXSTA_NTX8                at TXSTA : 6
var volatile bit    TXSTA_TX8_9               at TXSTA : 6
-- ------------------------------------------------
var volatile byte   SPBRG                     at { 0x99 }
alias               SPBRGL                    is SPBRG
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x9F }
var volatile bit*4  ADCON1_PCFG               at ADCON1 : 0
var volatile bit    ADCON1_ADFM               at ADCON1 : 7
var volatile bit    ADCON1_PCFG0              at ADCON1 : 0
var volatile bit    ADCON1_PCFG1              at ADCON1 : 1
var volatile bit    ADCON1_PCFG2              at ADCON1 : 2
var volatile bit    ADCON1_PCFG3              at ADCON1 : 3
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x10C }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x10D }
-- ------------------------------------------------
var volatile byte   EEDATH                    at { 0x10E }
var volatile bit*6  EEDATH_EEDATH             at EEDATH : 0
-- ------------------------------------------------
var volatile byte   EEADRH                    at { 0x10F }
var volatile bit*5  EEADRH_EEADRH             at EEADRH : 0
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x18C }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_EEPGD              at EECON1 : 7
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x18D }
--
-- ===================================================
--
--    Constants and procedures for analog features
--    --------------------------------------------
--
const      ADC_GROUP          = ADC_V1
const byte ADC_NTOTAL_CHANNEL = 8
const byte ADC_ADCS_BITCOUNT  = 2
const byte ADC_MAX_RESOLUTION = 10
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_0111         -- digital I/O
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
end procedure
--
-- ===================================================
--
--    Miscellaneous
--    -------------
--
const PPS_GROUP        = PPS_0        -- no Peripheral Pin Selection
--
-- No free shared memory!
--
-- ===================================================
--
--    Symbolic Fuse Definitions
-- ------------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x3 {                  -- Oscillator Selection bits
       RC_NOCLKOUT = 0x3                   -- RC oscillator
       HS = 0x2                            -- HS oscillator
       XT = 0x1                            -- XT oscillator
       LP = 0x0                            -- LP oscillator
       }
pragma fuse_def WDT 0x4 {                  -- Watchdog Timer Enable bit
       ENABLED = 0x4                       -- WDT enabled
       DISABLED = 0x0                      -- WDT disabled
       }
pragma fuse_def PWRTE 0x8 {                -- Power-up Timer Enable bit
       DISABLED = 0x8                      -- PWRT disabled
       ENABLED = 0x0                       -- PWRT enabled
       }
pragma fuse_def CP 0x3030 {                -- FLASH Program Memory Code Protection bits
       DISABLED = 0x3030                   -- Code protection off
       UPPER_256 = 0x2020                  -- 0F00h to 0FFFh code protected
       HALF = 0x1010                       -- 0800h to 0FFFh code protected
       R0000H_0FFFH = 0x0                  -- 0000h to 0FFFh code protected
       }
pragma fuse_def BROWNOUT 0x40 {            -- Brown-out Reset Enable bit
       ENABLED = 0x40                      -- BOR enabled
       DISABLED = 0x0                      -- BOR disabled
       }
pragma fuse_def LVP 0x80 {                 -- Low Voltage In-Circuit Serial Programming Enable bit
       ENABLED = 0x80                      -- RB3/PGM pin has PGM function; low-voltage programming enabled
       DISABLED = 0x0                      -- RB3 is digital I/O, HV on MCLR must be used for programming
       }
pragma fuse_def CPD 0x100 {                -- Data EE Memory Code Protection
       DISABLED = 0x100                    -- Code Protection off
       ENABLED = 0x0                       -- Data EEPROM memory code-protected
       }
pragma fuse_def WRT 0x200 {                -- FLASH Program Memory Write Enable
       ENABLED = 0x200                     -- Unprotected program memory may be written to by EECON control
       DISABLED = 0x0                      -- Unprotected program memory may not be written to by EECON control
       }
pragma fuse_def DEBUG 0x800 {              -- In-Circuit Debugger Mode bit
       DISABLED = 0x800                    -- In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
       ENABLED = 0x0                       -- In-Circuit Debugger enabled, RB6 and RB7 are dedicated to the debugger
       }
--
