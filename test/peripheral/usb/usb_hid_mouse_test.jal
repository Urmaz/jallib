-- Title: USB HID device demo
-- Author: Albert Faber, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: -
-- Compiler: >=2.4j
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This application emulates a mouse pointing USB human interface device
-- (HID), once the USB device has been conifgured and the USB HID is recognized by
-- the host operating systems, it will move around the mouse pointer
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: compiled with following flags
--	-loader18 -no-fuse 
--	use -no-variable-reuse when debugging flags are
--  set due to a compiler issue
--
-- ------------------------------------------------------
-- ------------------------------------------------------
--
--

-- note, include order is important
include usb_board

const bit USB_DEBUG = false
const bit USB_DEBUG_HIGH = false
const bit USB_HID_DEBUG = false
const bit USB_HID_DEBUG_HIGH = false
const byte USB_HID_ENDPOINT = 0x01
var volatile bit usb_hid_can_tx = true


include usb_defs
include usb_hid_mouse_config


procedure usb_ep_data_in_callback(byte in end_point, word in buffer_addr, word in byte_count) is
    
    if USB_HID_DEBUG_HIGH then
        const byte str[] = " EP data in: "
        const byte str1[] = " bytes "
        serial_print_str(str)
        serial_print_int(byte_count & 0xFF)
        serial_print_str(str1)
    end if
    
    -- data has been sent, so do we need to send more?
    if (end_point == USB_HID_ENDPOINT) then
        -- it's the data end point
        usb_hid_can_tx = true
    end if
end procedure

procedure usb_ep_data_out_callback(byte in end_point, word in buffer_addr, word in byte_count) is
    var byte cdc_rx_next
    if USB_HID_DEBUG then
        const byte str[] = " EP data out: "
        const byte str1[] = " bytes "
        serial_print_str(str)
        serial_print_int(byte_count)
        serial_print_str(str1)
    end if
    
    -- We have some data!
    if (end_point == USB_HID_ENDPOINT) then
	end if
end procedure


include usb_drv_core
include usb_drv

TRISD = 0b0000_0000


-- constants
const sbyte dir_table[] = {-4,-4,-4, 0, 4, 4, 4, 0}
const  byte str_welcome[] = "JAL USB HID MOUSE DEMO version 0.3\nplease wait (takes ~20 seconds) before the device is fully configured"

-- variables
var word i = 0
var byte movement_length
var byte vector = 0
var bit usb_initialized = false
var byte data_buffer[3]
var word ticks100us = 0
var bit enable_mouse = false


procedure usb_tasks() is    
    -- Servicing Hardware
    -- use polling method
    usb_handle_isr()
end procedure

-- interrupts? No thanks
while INTCON_GIE loop
    INTCON_GIE = false
end loop

if defined( HAS_SERIAL_DEBUG_PORT ) == high then
	-- put info on RS-232 serial line
	serial_newline()
	serial_newline()

	serial_print_str( str_welcome )
	serial_newline()
end if

-- setup the USB device
usb_setup()

-- enable USB device
usb_enable_module()

-- initialize HID buffer
data_buffer[0] = 0x00
data_buffer[1] = 0x00
data_buffer[2] = 0x00

-- main loop
forever loop
	-- poll the usb ISR function on a regular base, in order to 
	-- serve the USB requests
    usb_tasks()
    
    -- check if USB device has been configured by the HOST
    if usb_is_configured()  then

		-- note user via serial line that USB has been configured
		if usb_initialized == false then
			usb_initialized = true
			
			if defined( HAS_SERIAL_DEBUG_PORT ) == true then			
				const  byte str[] = "USB device has been configured by the HOST!"
				serial_print_str( str )
				serial_newline()
			end if
		end if

		-- now the mouse pointer can be moved around
		enable_mouse = true
    end if
    
    if enable_mouse then
		ticks100us = ticks100us + 1
		delay_10us(10)
		
		if ticks100us == 250 then
			ticks100us = 0
						
			if( movement_length > 16 ) then
				data_buffer[0] = 0
				data_buffer[1] = dir_table[vector & 0x07] -- X-Vector
				data_buffer[2] = dir_table[(vector+2) & 0x07] -- Y-Vector
				vector = vector+1
				movement_length = 0
			end if

			if 	( usb_hid_can_tx ) then
				usb_hid_can_tx = false
				usb_send_data(1, data_buffer, 3, low )
				movement_length =  movement_length + 1
			end if			
						
		end if
    end if
    
	if defined( HAS_SERIAL_DEBUG_PORT ) == true then    
		if PIR1_RCIF then
			serial_putc( RCREG )
			
			if RCREG == "S" then
			end if
			if RCREG == "T" then
			end if
		end if
	end if	
    
end loop
