-- -----------------------------------------------------------------------------
-- Title: USB CDC demo
-- Author: Albert Faber, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: -
-- Compiler: >=2.4i
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: This application demonstratesest USB CDC, this application will 
-- emulate a RS-232 terminal device. Once the USB device has been detected by the 
-- host operating system, it will create a virtual COM port. When opening this COM
-- on the host computer, using a standard terminal application, it should show a
-- welcome message, after the welcome message all input characters are echoed back
-- to the terminal application
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: not sure about the compiler version
--
-- ------------------------------------------------------
-- ------------------------------------------------------
--
--


-- uncomment lines for debugging
-- const bit USB_DEBUG = true
-- const bit USB_CDC_DEBUG = true


-- note, include order is important
include usb_board
include usb_defs
include usb_cdc_test_config
include usb_drv_core
include usb_drv_cdc_class
include usb_drv

TRISD = 0b0000_0000

-- constants
const  byte str_welcome[] = "JAL USB CDC RS-232 emulation demo version 0.30 (JALLIB)\nplease wait (takes ~10 seconds) before the device is fully configured"
const  byte str_cdc_welcome[] = "\nJAL USB CDC RS-232 echo demo, characters will be echoed\n"
-- const  byte str_cdc_welcome[] = "12345678"
const  byte str_tqbf[] = "The quick brown fox jumps over the lazy dog"

-- variables
var word i = 0
var byte movement_length
var byte vector = 0
var bit usb_initialized = false
var word ticks100us = 0
var bit enable_modem = false
var byte loop_cnt_lo = 0
var byte loop_cnt_hi = 0
 

procedure usb_tasks() is    
    -- Servicing Hardware
    -- use polling method
    usb_handle_isr()
end procedure


-- interrupts? No thanks
while INTCON_GIE loop
    INTCON_GIE = false
end loop

if defined( HAS_SERIAL_DEBUG_PORT ) == true then 
	-- put info on RS-232 serial line
	serial_newline()
	serial_newline()

	serial_print_str( str_welcome )
	serial_newline()
end if	


-- setup the USB device
usb_setup()

-- enable the interrupt flags, move to library?
turn_usb_ints_on()

delay_1ms(200)

-- enable USB device
usb_enable_module()


procedure usb_cdc_print_hex( byte in value ) is 

	var byte nibble = value >>4
	if ( nibble > 9 ) then
		usb_cdc_putc( "A" - 10 + nibble )
	else
		usb_cdc_putc( "0" + nibble )
	end if

	nibble = value & 0x0F

	if ( nibble > 9 ) then
		usb_cdc_putc( "A" - 10 + nibble )
	else
		usb_cdc_putc( "0" + nibble )
	end if
end procedure



-- main loop
forever loop
	-- poll the usb ISR function on a regular base, in order to 
	-- serve the USB requests
    usb_tasks()
    
    -- check if USB device has been configured by the HOST
    if usb_is_configured()  then

		-- note user via serial line that USB has been configured
		if usb_initialized == false then
			usb_initialized = true
			
			if defined( HAS_SERIAL_DEBUG_PORT ) == true then 
				const  byte str[] = "USB device has been configured by the HOST!"
				serial_print_str( str )
				serial_newline()
			end if	
		end if

    end if

	if ( usb_cdc_line_status() > 0x00 )  then
		-- modem is connected to DTE
		if ( enable_modem == false ) then
			enable_modem = true
			if defined( HAS_SERIAL_DEBUG_PORT ) == true then 
				const  byte str[] = "DTE online!"
				serial_print_str( str )
				serial_newline()
			end if	
			ticks100us = 0
		end if
	else
		enable_modem = false			
	end if

	
    if enable_modem then

		delay_10us(10)

		if ticks100us == 1500  then
			var byte idx
			for count( str_cdc_welcome ) using idx loop
				usb_cdc_putc( str_cdc_welcome[ idx ]  )
			end loop
			ticks100us = ticks100us + 1
		end if	
		
		if ticks100us < 10000 then
			ticks100us = ticks100us + 1
		end if


if false then
		-- if ticks100us == 50 then
		if ticks100us == 50 then
			var byte idx

			usb_cdc_print_hex( loop_cnt_hi ) 
			usb_cdc_print_hex( loop_cnt_lo ) 
			loop_cnt_lo = loop_cnt_lo +1

			if ( loop_cnt_lo == 0 ) then
				loop_cnt_hi = loop_cnt_hi + 1
			end if
			
			usb_cdc_putc( " " )

			for count( str_tqbf ) using idx loop
				usb_cdc_putc( str_tqbf[ idx ]  )
			end loop

			usb_cdc_putc( 10  )
			usb_cdc_putc( 13  )

			ticks100us = 0
		end if
end if			
		
		-- echo all characters
		while ( usb_cdc_rx_avail() == high ) loop
			var byte ch = usb_cdc_getc()
			usb_cdc_putc( ch )
		end loop
    end if
    
	if defined( HAS_SERIAL_DEBUG_PORT ) == true then
		if PIR1_RCIF then
			serial_putc( RCREG )
			
			if RCREG == "S" then
			end if
			if RCREG == "T" then
			end if
		end if
	end if
	
end loop
