-- ------------------------------------------------------
-- Title: BOARD FILE for 16f88
-- Author: Joep Suijs, Copyright (c) 2008..2008, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This file defines the configuration for a 16f88 prototyping board,
-- the SirBot's mainboard.
-- --
-- The full description on this board can be found here, and can be freely  reproduced:
--    * http://sirbot.org/sirbot-modules/main_board
-- --
-- BOARD DESCRIPTION
-- -----------------
-- The SirBot's mainboard is based on a 16f88. 
-- While an external xtal can be used, the default is to use the internal resonator @ 8MHz
-- Two connectors, one for each PORT of 16f88 (PORTA and PORTB) can be used to:
--   - either plug a breadboard
--   - or plug one or more daugther boards
--
-- Sources:
--
-- Notes: this is mainly based on board_16f88_js.jal board file
--
-- ------------------------------------------------------

;@jallib section chipdef
-- chip setup
include 16f88

;-- 
-- We'll use internal oscillator. It work @ 8MHz
pragma target clock		8_000_000
pragma target OSC		INTOSC_NOCLKOUT
-- Specify no postscaler, ie. really runs @8MHz
OSCCON_IRCF = 0b_111
pragma target WDT		   disabled       -- no watchdog
pragma target LVP		   disabled       -- no low-voltage programming
pragma target CCP1MUX	   RB0            -- ccp1 pin on B0
pragma        bootloader   long_start     -- for TinyBootloader


;@jallib section serial
const serial_hw_baudrate = 57_600

;@jallib section led
-- LED IO definition
var bit led             is pin_b3
var bit led_direction   is pin_b3_direction
var bit led2            is pin_b1
var bit led2_direction  is pin_b1_direction

;@jallib section lcd_hd44780_4
-- LCD IO definition
var bit lcd_rs           is pin_a6              -- LCD command/data select.
var bit lcd_rs_direction is pin_a6_direction
var bit lcd_en           is pin_a7              -- LCD data trigger
var bit lcd_en_direction is pin_a7_direction

var byte lcd_dataport is porta_low              -- LCD data  port
var byte lcd_dataport_direction is porta_low_direction
const byte LCD_ROWS     = 4                     -- 4 lines
const byte LCD_CHARS    = 20                    -- 20 chars per line      

-- backlight control (can be variable and digital on this pin)
var volatile bit lcd_bl is pin_b0
var volatile bit lcd_bl_direction is pin_b0_direction

;@jallib section i2c
-- I2C io definition
var volatile bit i2c_scl            is pin_b4
var volatile bit i2c_scl_direction  is pin_b4_direction
var volatile bit i2c_sda            is pin_b1
var volatile bit i2c_sda_direction  is pin_b1_direction

;@jallib section ccp
-- ccp setup: since CCP1 is multiplexed, we need to define
-- alias pointing to the active CCP1 pin
var volatile bit pin_ccp1_direction is pin_ccp1_rb0_direction

;@jallib section gp2d02
var volatile bit gp2d02_vin is pin_a4
var volatile bit gp2d02_vout is pin_a6
var bit gp2d02_vin_direction is pin_a4_direction
var bit gp2d02_vout_direction is pin_a6_direction

