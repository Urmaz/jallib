-- ------------------------------------------------------
-- Title: BOARD FILE for [see filename]
-- Author: Albert Faber, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This file defines the configuration of a specific test-board.
-- --
-- BOARD DESCRIPTION
-- -----------------
-- --
-- This file is the setup for my homebrew, PICDEM like 18f4550 board
-- The board consist of a reset button switch to gnd (tided to pin1, with 4k7 pull up)
-- A program button switch to gnd (tided to pin37, with 4k7 pull up) 
-- A 20 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 18 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F4450
-- +5v to power the board 
-- data- wire to pin 23 (D-)
-- data+ wire to pin 24 (D+)
-- ground wire to the Vss of the PIC
--
-- In addition, a MAX232 chip connccted to the USART pins, for serial (mainly to debug) 
-- communication.
-- The board is loaded with the standard microchip bootloader, therefore the examples
-- are compiled with the following JAL compiler flags: -loader18 -no-fuse 
--
-- Sources:
-- Sources: http://www.microchip.org for PICDEM docs
--
-- Notes:
--
-- ------------------------------------------------------

-- This board is used as a reference while generating samples
;@jallib preferred

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV		DIVIDE_BY_5__20MHZ_INPUT_
pragma target CPUDIV		_OSC1_OSC2_SRC___1__96MHZ_PLL_SRC___2_
pragma target USBPLL		CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC			HS_PLL
pragma target FCMEN			DISABLED
pragma target IESO			DISABLED
pragma target PWRTE			DISABLED	-- power up timer
pragma target VREGEN		ENABLED		-- USB voltage regulator
pragma target VOLTAGE		V20			-- brown out voltage
pragma target BROWNOUT		DISABLED	-- no brownout detection
pragma target WDTPS			P32768		-- watch dog saler setting
pragma target WDT			DISABLED    -- no watchdog
pragma target CCP2MUX		RC1			-- CCP2 pin
pragma target PBADEN		DIGITAL		-- digital input port<0..4>
pragma target LPT1OSC		DISABLED	-- low power timer 1
pragma target MCLR			EXTERNAL	-- master reset on RE3
pragma target STVR			DISABLED    -- reset on stack over/under flow
pragma target LVP			DISABLED    -- no low-voltage programming
pragma target XINST			ENABLED		-- extended instruction set
pragma target BACKBUG		DISABLED	-- background debugging
pragma target CP_0			DISABLED	-- code block 0 not protected
pragma target CP_1			DISABLED	-- code block 1 not protected
pragma target CP_2			DISABLED	-- code block 2 not protected
pragma target CP_3			DISABLED	-- code block 3 not protected
pragma target CPB			DISABLED	-- bootblock code not write protected
pragma target CPD			DISABLED	-- eeprom code not write protected
pragma target WRT_0			DISABLED	-- table writeblock 0 not protected
pragma target WRT_1			DISABLED	-- table write block 1 not protected
pragma target WRT_2			DISABLED	-- table write block 2 not protected
pragma target WRT_3			DISABLED	-- table write block 3 not protected
pragma target WRTB			DISABLED	-- bootblock not write protected
pragma target WRTD			DISABLED	-- eeprom not write protected
pragma target WRTC			DISABLED	-- config not write protected
pragma target EBTR_0		DISABLED	-- table read block 0 not protected
pragma target EBTR_1		DISABLED	-- table read block 1 not protected
pragma target EBTR_2		DISABLED	-- table read block 2 not protected
pragma target EBTR_3		DISABLED	-- table read block 3 not protected
pragma target EBTRB 		DISABLED	-- boot block not protected


;@jallib section led
-- LED IO definition
var bit led             is pin_b3
var bit led_direction   is pin_b3_direction
var bit led2            is pin_b1
var bit led2_direction  is pin_b1_direction

;@jallib section serial
const serial_hw_baudrate = 115_200



;@jallib section lcd_hd44780_4

procedure PORTLCD'put(byte in x) is

	var volatile bit x_0 at x:0
	var volatile bit x_1 at x:1 
	var volatile bit x_2 at x:2
	var volatile bit x_3 at x:3

	pin_b1 = x_0
	pin_b2 = x_1
	pin_b3 = x_2
	pin_b4 = x_3	
end procedure

function PORTLCD'get() return byte is
	var byte ret
	var volatile bit ret_0 at ret:0 = pin_b1
	var volatile bit ret_1 at ret:1 = pin_b2
	var volatile bit ret_2 at ret:2 = pin_b3
	var volatile bit ret_3 at ret:3 = pin_b4
	return ret
end function

procedure PORTLCD_direction'put(byte in x) is

	var volatile bit x_0 at x:0
	var volatile bit x_1 at x:1 
	var volatile bit x_2 at x:2
	var volatile bit x_3 at x:3

	pin_b1_direction = x_0
	pin_b2_direction = x_1
	pin_b3_direction = x_2
	pin_b4_direction = x_3
end procedure

function PORTLCD_direction'get() return byte is
	var byte ret
	var volatile bit ret_0 at ret:0 = pin_b1_direction
	var volatile bit ret_1 at ret:1 = pin_b2_direction
	var volatile bit ret_2 at ret:2 = pin_b3_direction
	var volatile bit ret_3 at ret:3 = pin_b4_direction
	return ret
end function

-- LCD IO definition
var bit lcd_rs           is pin_d2              -- LCD command/data select.
var bit lcd_rs_direction is pin_d2_direction
var bit lcd_en           is pin_b0              -- LCD data trigger
var bit lcd_en_direction is pin_b0_direction

var byte lcd_dataport is portlcd             -- LCD data  port
var byte lcd_dataport_direction is portlcd_direction
const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line

;@jallib section i2c
-- I2C io definition, using hardware I2C, currently mutual exlusive with display
-- this will be fixed in next board
var volatile bit i2c_scl            is pin_b1
var volatile bit i2c_scl_direction  is pin_b1_direction
var volatile bit i2c_sda            is pin_b0
var volatile bit i2c_sda_direction  is pin_b0_direction


;@jallib section bootloader
var volatile bit bootloader_program_pin	is pin_b5
var volatile bit bootloader_program_pin_direction	is pin_b5_direction
