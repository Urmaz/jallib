-- This must be in first line
include c16f877

-- Chip definition
const target_chip = pic_16f877

-- config fuses
pragma target protection off
pragma target debug off
pragma target cdp off
pragma target lvp off
pragma target bor off
pragma target powerup on
pragma target watchdog off
pragma target osc xt

-- Fosc definition
pragma target clock 4_000_000


-- PORTB and TRISB definitions
var volatile byte PORTB at {0x06,0x106}
var volatile byte TRISB at {0x86,0x186}

-- B0 pin definition
var volatile bit pin_b0 at PORTB : 0

-- B4 pin definition
var volatile bit pin_b4 at PORTB : 4


-- Button at pin_b0
var volatile bit Button is pin_b0

-- Led at pin_b4
var volatile bit LED is pin_b4


-- 1 second wait procedure
-- TMR0_delay = ( 256 - InitTMR0 ) * 4 * prescaler / Fosc
-- TMR0_delay = ( 256 - 6 ) * 4 * 4 / 4_000_000 = 0.001 = 1 msec.
--
-- InitTMR0 = 6
-- Prescaler = 1:4
-- Fosc = 4_000_000
--
-- Delay = 0.001 secs


-- Init TMR0, free run mode, int osc, prescaler 1:4
var volatile byte TMR0 at {0x01,0x101}
var volatile byte OPTION_REG at {0x81,0x181}
OPTION_REG = 0b_1000_0001

-- Disable interrupts, reset TMR0 flag
var volatile byte INTCON at {0x0B,0x8B,0x10B,0x18B}
var volatile bit T0if at INTCON : 2
INTCON = 0



procedure wait_1sec is
   for 1_000 loop  
      -- Wait for TMR0 1 msec.
      while ( ! T0if ) loop
      end loop
      -- Reset TMR0IF
      T0if = low
      -- Add InitTMR0, instead of TMR0 = 6
      TMR0 = TMR0 + 6
   end loop
end procedure


-- Reset PORTB
PORTB = 0b_0000_0000

-- PORTB => B0 input, B1..B7 output
TRISB = 0b_0000_0001
PORTB = 0b_0000_0001


-- main loop
forever loop
   if ! Button then   ; Check if Button pressed
      LED = on
      wait_1sec
      LED = off
      wait_1sec
   end if
end loop   
