{\rtf1\ansi\deff5\deflang1024
{\fonttbl{\f3\fnil\fcharset0 Zapf Chancery;}
{\f4\fnil\fcharset204 Zapf Chancery;}
{\f5\fnil\fcharset204 Times;}
{\f6\fnil\fcharset204 Helvetica;}
{\f7\fnil\fcharset204 Helvetica;}
{\f8\fnil\fcharset204 Courier;}
{\f9\fnil\fcharset2 Symbol;}
{\f10\fnil\fcharset0 MT Extra;}
{\f11\fnil\fcharset238 Zapf Chancery;}
{\f12\fnil\fcharset238 Times;}
{\f13\fnil\fcharset238 Helvetica;}
{\f14\fnil\fcharset238 Helvetica;}
{\f15\fnil\fcharset238 Courier;}
{\f16\fnil\fcharset0 Times;}
{\f17\fnil\fcharset0 Book Antiqua;}
{\f18\fnil\fcharset0 Bookman Old Style;}
{\f19\fnil\fcharset0 Century Gothic;}
{\f20\fnil\fcharset0 New Century Schoolbook;}
{\f21\fnil\fcharset0 Helvetica;}
{\f22\fnil\fcharset0 Helvetica;}
{\f23\fnil\fcharset0 Courier;}
}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
\red0\green0\blue128;
\red0\green128\blue128;
\red0\green128\blue0;
\red128\green0\blue128;
\red128\green0\blue0;
\red128\green128\blue0;
\red128\green128\blue128;
\red192\green192\blue192;
}
{\stylesheet
{\s0\fs24\snext0 Normal;}
{\s2\ql\sb240\sa60\keepn\f16\b\fs40 \sbasedon0\snext0 heading 1;}
{\s2\ql\sb240\sa60\keepn\f16\b\fs40\li0 \sbasedon0\snext0 heading 1;}
{\s6\ql\sb240\sa60\keepn\f16\b\fs24\li2048 \sbasedon0\snext0 heading 5;}
{\s3\ql\sb240\sa60\keepn\f16\b\fs32\li512 \sbasedon0\snext0 heading 2;}
{\s7\ql\sb240\sa60\keepn\f16\b\fs24\li2560 \sbasedon0\snext0 heading 6;}
{\s4\ql\sb240\sa60\keepn\f16\b\fs32\li1024 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa60\keepn\f16\b\fs24\li1536 \sbasedon0\snext0 heading 4;}
{\s6\ql\sb240\sa60\keepn\f16\b\fs24 \sbasedon0\snext0 heading 5;}
{\s1\qc\sb240\sa60\keepn\f16\b\fs40 \sbasedon0\snext0 part;}
{\s3\ql\sb240\sa60\keepn\f16\b\fs32 \sbasedon0\snext0 heading 2;}
{\s7\ql\sb240\sa60\keepn\f16\b\fs24 \sbasedon0\snext0 heading 6;}
{\s4\ql\sb240\sa60\keepn\f16\b\fs32 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa60\keepn\f16\b\fs24 \sbasedon0\snext0 heading 4;}
}
\paperw11960\paperh16900\margl2060\margr2100\margt2520\margb1940\pgnstart0\widowctrl\qj\ftnbj\aftnnar
{\qj\fi360 {{\i JAL 2.0} {\cf1 Manual}\par
{\cf1 }{\cf1 \qj\fi0 Copyright {\f9\'d3}2006} {\cf1 {\scaps Javier Mart\'EDnez}}{\cf1 ,} {\cf1 {\scaps Dave Lagzdin}} {\cf1 \~and}{\cf1 {\scaps \~Vasile Surducan}}{\cf1 .}\par
{\cf1 }{\cf1 \qj\fi0 Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections,} with this Front-Cover {\cf1 Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \rdblquote GNU Free Documentation License\rdblquote .} }\par

\par\pard\qc {\fs36 {\i \qc\fi360 JAL 2.0} manual}
\par\qc {\fs28 {\scaps Javier Mart\'EDnez} {\scaps Dave Lagzdin} {\scaps Vasile Surducan}}
\par\qc {\fs28 }\par
{}\qj\fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter\par\par
{\i JAL 2.0} manual\par
}{\i \qj\sb60 \fi0 JAL 2.0} 
[{\field{\*\fldinst{\lang1024 REF BIB_pJALdownload \\* MERGEFORMAT }}{\fldrslt{3}}}
] is a high-level language for a number of Microchip \'99\~PIC microcontrollers\~
[{\field{\*\fldinst{\lang1024 REF BIB_Microchip_web \\* MERGEFORMAT }}{\fldrslt{1}}}
].\par
\qj\fi360 It was created by {\scaps Kyle York}, who also wrote the {\i PICbsc} compiler\~
[{\field{\*\fldinst{\lang1024 REF BIB_PICbsc \\* MERGEFORMAT }}{\fldrslt{2}}}
]. {\scaps Stef Mientki} got in touch with {\scaps Kyle York} and ask him if he could look into rewriting {\i JAL} using the {\i PICbsc} engine, the prospect intrigued him{\i .} {\i JAL 2.0} not only shares the same {\i JAL\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wouter_web \\* MERGEFORMAT }}{\fldrslt{4}}}
]} syntax, but adds new features (like new types, arrays, etc.) to {\i JAL,} keeping the {\i PICbsc} internal compiler design as well. This manual covers all aspects of {\i JAL 2.0} without any reference to {\i JAL} trying to be useful for all, novices and users with {\i JAL} experience. \par
{\i \qj\fi360 JAL} was developed by {\scaps Wouter van Ooijen}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}Wouter released JAL under GPL ({\field{\*\fldinst{ HYPERLINK "http://jal.sourceforge.net" }{{}}}{\fldrslt{\ul http://jal.sourceforge.net}}}) in January of 2003.}
 . He created {\i JAL} because he did not like any of the low-cost (or free) languages for these chips and implementing a high level language looked like a nice project. \par
\qj\fi360 For a quick impression of {\i JAL 2.0} here\rquote s a small example how {\i JAL 2.0} looks. Also, you could read either the summary{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsec_GNU_FDL \\* MERGEFORMAT }}{\fldrslt{6}}}\~{sec:GNU-FDL}}
  or the examples{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsec_Examples \\* MERGEFORMAT }}{\fldrslt{4}}}\~{sec:Examples}}
  section of this manual.\par
{\b \qj\fi360 Example}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    ; microcontroller definition file
\par    include c16F877_10
\par 
\par    ; set pin a0 direction as output
\par    pin_a0_direction = output 
\par 
\par    ; do forever the statements inside the loop
\par    forever loop 
\par  
\par      pin_a0 = ! pin_a0  ; complement value of a0
\par      delay_1s(1)        ; wait 1 second
\par  
\par    end loop
\par    
\par \par
}\qj\fi360 {}\par
\column \qj\fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter\par\par
Revision history\par
}{\*\bkmkstart BMsec_Revision_history}{\*\bkmkend BMsec_Revision_history}{\qj\sb50 \li300\fi-300 {\b 7th\~March\~2006} First edition, {\i pJAL} version 0.9 (Released on 2006 March 2).\par
\qj\li300\fi0 {\fs22 Written by:} {\scaps \fs22 Javier Mart\'EDnez, Dave Lagzdin} {\fs22 and} {\scaps \fs22 Vasile Surducan}\par
\qj\li300\fi0 {\fs22 Thanks to:} {\scaps \fs22 Joep Suijs, Kyle York}{\fs22 ,} {\scaps \fs22 Michael Watterson, Stef Mientki} {\fs22 and} {\scaps \fs22 Wouter van Ooijen.}{\fs22 \par
}\qj\sb50 \li300\fi-300 {\b 21th\~April\~2006} Second edition, {\i JAL} 2.0 (Released on 2006 April 20).\par
\qj\li300\fi0 {\fs22 Updated by:} {\scaps \fs22 Javier Mart\'EDnez, Dave Lagzdin} {\fs22 and} {\scaps \fs22 Vasile Surducan}{\fs22 }\par
\qj\li300\fi0 {\fs22 Modifications: changed compiler name, corrected small} {\i \fs22 bugs,} {\fs22 added some suggestions and updated multi-word configuration bits.}{\fs22 \par
}\qj\sb50 \li300\fi-300 {\b 10th\~June\~2006} Third edition, {\i JAL 2.0} (Released on 2006 June 8).\par
\qj\li300\fi0 {\fs22 Updated by:} {\scaps \fs22 Javier Mart\'EDnez, Dave Lagzdin} {\fs22 and} {\scaps \fs22 Vasile Surducan}{\fs22 }\par
\qj\li300\fi0 {\fs22 Thanks to:} {\scaps \fs22 Norbert Schlichthaerle, Andree Steenveld.}{\fs22 }\par
\qj\li300\fi0 {\fs22 Modifications: corrected small} {\i \fs22 bugs,} {\fs22 added some suggestions and new compiler features.}{\fs22 \par
}}\column \qj\sb112 \fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter {\*\bkmkstart BMsec_Language_definition}1{\*\bkmkend BMsec_Language_definition}\par\par
Language definition\par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Language_basics}1{\*\bkmkend BMsub_Language_basics}  basics\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Format}1.1{\*\bkmkend BMsub_Format}  Format\par
}\qj\sb60 \fi0 The {\i JAL 2.0} language is free-format (except for comments) and not case-sensitive. All characters with an ASCII value below the space (tab, carriage return, new line, form feed, etc.) are treated as spaces, except that the end of a line terminates a comment.\par
{\i \qj\fi360 JAL 2.0} does not use statement separators. The only real separators are the comma\rquote s between the (formal or actual) arguments to a procedure or function {\b0\i0\scaps0\f23 "( , )"}, or in an array definition {\b0\i0\scaps0\f23 "\{ , \}"}.\par
{}{\b \qj\fi0 Example}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    -- if statement in preferred format
\par    if a > b then
\par       a = b + 1
\par    else
\par       a = b - 1
\par    end if
\par     
\par    -- but this has exactly the same effect
\par    if a > b then a = b + 1 else a = b - 1 end if
\par    
\par    -- comma's between actual arguments
\par    f( a, b, c, d )
\par    var byte msg[5] = "Hello"
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Comments}1.2{\*\bkmkend BMsub_Comments}  Comments\par
}\qj\sb60 \fi0 A comment is started by the token {\b0\i0\scaps0\f23 "--"} or {\b0\i0\scaps0\f23 ";"} and continues until the end of the line.\par
{\b \qj\fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- the next line contains a comment 
\par    -- after the assignment
\par    ticks = ticks + 1 ; one more tick
\par     
\par    ; the next line contains the same comment 
\par    ; after the assignment
\par    ticks = ticks + 1 -- one more tick
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Includes}1.3{\*\bkmkend BMsub_Includes}  Includes \par
}\qj\sb60 \fi0 An include causes the content of the included file to be read. A subsequent include for the same file name will be ignored. This makes it possible for a library file to include all required lower libraries.\par
\qj\fi360 Included files are sought first in the current directory, and next in each location indicated by the compilers search path. All {\i }{\i JAL 2.0} files have the extension {\b0\i0\scaps0\f23 ".jal"}. Be care not to include this extension in the {\i include} statement.\par
\qj\fi360 Includes can be nested to any level.\par
{\b \qj\fi360 Example}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    include serial    -- include the serial.jal file
\par    include i2c       -- include the i2c.jal file
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 1.4  Program\par
}\qj\sb60 \fi0 A {\i JAL 2.0} program is a sequence of statements. Declarations are also considered statements, so declarations can appear almost anywhere in a program.\par
{\b \qj\fi360 Example}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    -- my first program 
\par    var byte b       -- variable declaration
\par    while b > 0 loop -- start of loop
\par       b = b + 1     -- variable assignment
\par    end loop         -- end of loop
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 1.5  Scope\par
}{\i \qj\sb60 \fi0 JAL 2.0} is a block-structured language, so each declaration is visible from its declaration to the end of the block in which the declaration appears (in practice this means to the first end at the current nesting level).\par
\qj\fi360 A declaration can hide a declaration of the same name from an enclosing block. A declaration can not hide a name which was already declared at the same nesting level.\par
{\b \qj\fi360 Example}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    var byte b
\par    while b > 0 loop
\par       var bit b    -- Overrides the byte b defined
\par                    -- outside the while block.
\par    
\par       b = false    -- The bit b, not the byte
\par    
\par       var byte b   -- Error, "b" already declared
\par                    -- as a bit inside the while block.
\par    end loop
\par    
\par    var word b      -- Error, "b" already declared
\par                    -- as a byte before while block.
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 1.6  Block\par
}\qj\sb60 \fi0 A block is a sequence of statements. Variables, constants, procedures, and functions defined in a block will not be visible outside of the block.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_basic_types}2{\*\bkmkend BMsub_basic_types}  basic types\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Built_in_types}2.1{\*\bkmkend BMsub_Built_in_types}  Built-in types\par
}\qj\sb60 \fi0 These are the types of range values that {\i JAL 2.0} supports.\par
{\qj\sb50 \li300\fi-300 {\b BIT} 1 bit unsigned boolean value (range is 0 or 1){\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn} {\i JAL 2.0} support aditional names for this range: {\i 0 = FALSE = LOW = OFF} and {\i 1=TRUE=HIGH=ON.}}
 . \par
\qj\sb50 \li300\fi-300 {\b BYTE} 8 bit unsigned value (range is 0 .. 255). \par
\qj\sb50 \li300\fi-300 {\b SBYTE} 8 bit signed value (range is -128 .. 127). \par
\qj\sb50 \li300\fi-300 {\b WORD} 16 bit unsigned value (range is 0 .. 65,535). \par
\qj\sb50 \li300\fi-300 {\b SWORD} 16 bit signed value (range is -32,768 .. 32,767). \par
\qj\sb50 \li300\fi-300 {\b DWORD} 32 bit unsigned value (range is 0 .. 4,294,967,296). \par
\qj\sb50 \li300\fi-300 {\b SDWORD} 32 bit signed value (range is -2,147,483,648 .. 2,147,483,647). \par
\qj\sb50 \li300\fi-300 {\b } \~ \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Extending_types_with}2.2{\*\bkmkend BMsub_Extending_types_with}  Extending types\par
}\qj\sb60 \fi0 Basic types can be extended using the token {\i {[}{*}cexpr{]}}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}{\i cexpr} means a constant expression or a literal value.}
  preceded by token {\i type}. Being {\i type} one of the following built-in types{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Built_in_types \\* MERGEFORMAT }}{\fldrslt{1.2.1}}}\~{sub:Built-in-types}}
 : BIT, BYTE or SBYTE.\par
\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 2.2.0.1  {\i BYTE} and {\i SBYTE}\par
} \qj\sb60 \fi0 For {\i BYTE} and {\i SBYTE}, this means the variable will be defined as an integer using {\i cexpr} bytes.\par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23     WORD is simply shorthand for BYTE*2 
\par    DWORD is simply shorthand for BYTE*4 
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 2.2.0.2  BIT\par
} \qj\sb60 \fi0 If type is {\i BIT}, the definition changes. A {\i BIT} variable, as defined in {\i JAL}, is really of type boolean. When assigned any non-zero value, it takes on the value of 1.\par
\qj\fi360 Using the {\i {[}}{*}cexpr{\i {]}}, the definition changes to be more like a C bit field: assignment is masked.\par
\qj\fi360 We can create a \rquote nibble-like\rquote  grouping of bits with range 0 to ({{\field{\*\fldinst{ EQ {2\\s\\up6({\fs20 {\i c}{\i e}{\i x}{\i p}{\i r}})-1}}}{\fldrslt }}}), i.e.: with 2 bits we can count to 3 ( 0b11 ) \par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23     VAR BIT*2 cc 
\par    
\par    -- when assigning to cc, the internal 
\par    -- compiler assignment is: 
\par    cc = (value & 0x03) -- mask 2 least significative bits
\par                        -- remember 0x03=0b00000011
\par    
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Literals}3{\*\bkmkend BMsub_Literals}  Literals\par
}\qj\sb60 \fi0 Literals are numeric constants with a invariant value, the format is:\par
{\qj\sb50 \li300\fi-300 {\b 12} a decimal numeric constant \par
\qj\sb50 \li300\fi-300 {\b 0x12} a hexadecimal numeric constant \par
\qj\sb50 \li300\fi-300 {\b 0b01} a binary numeric constant \par
\qj\sb50 \li300\fi-300 {\b 0q01} an octal numeric constant \par
\qj\sb50 \li300\fi-300 {\b \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}a\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}} an ASCII char constant \par
\qj\sb50 \li300\fi-300 {\b \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Hello\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}} a {\i string} constant. Following {\i escape sequence} chars can be used inside a string:\par
{\qj\li300\fi-300 \par
\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrt\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {Escape sequence char}\cell
\pard\intbl\ql {Description}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\a}}\cell
\pard\intbl\ql {Bell}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\b}}\cell
\pard\intbl\ql {Backspace}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\f}}\cell
\pard\intbl\ql {Form Feed}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\n}}\cell
\pard\intbl\ql {Line Feed}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\r}}\cell
\pard\intbl\ql {Carriage Return}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\t}}\cell
\pard\intbl\ql {Horizontal TAB}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\v}}\cell
\pard\intbl\ql {Vertical TAB}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx3900
\pard\intbl\qc {{\b0\i0\scaps0\f23 }}\cell
\pard\intbl\ql \cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {+}\cell
\pard\intbl\ql {\\{}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\?}}\cell
\pard\intbl\ql {? }\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\'}}\cell
\pard\intbl\ql {\rquote }\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\"}}\cell
\pard\intbl\ql {\rdblquote }\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\0}}\cell
\pard\intbl\ql {Hexadecimal value: {\b0\i0\scaps0\f23 0x00}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 \\x##}}\cell
\pard\intbl\ql {Hexadecimal value: {\b0\i0\scaps0\f23 0x##}}\cell
\row
} \par
}\qj\sb72 \fi0 Literals other than ASCII constants may also contain a number of underscores {\b0\i0\scaps0\f23 "_"} which are ignored, but are useful for making them more readable.\par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23     0b_0000_1111  -- a binary literal
\par    
\par    -- a fuse definition (14 bit word)
\par    0b_11_0000_1111_0000 
\par    
\par    1_234_567     -- a decimal literal
\par    
\par \par
}\qj\fi360 String constants can use C style initialization style, eg:\par
\qj\fi360 {\b0\i0\scaps0\f23 var byte string[] = "abc" "def" "ghi"}\par
\qj\fi360 is the same as:\par
\qj\fi360 {\b0\i0\scaps0\f23 var byte string[] = "abcdefghi"}\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Constants}4{\*\bkmkend BMsub_Constants}  Constants\par
}\qj\sb60 \fi0 A constant declaration introduces a name which has a constant value throughout its scope. When the type is omitted the constant has a {\i SDWORD} type. A single constant declaration can introduce a number of constants of the same type.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    CONST [type[*cexpr]] identifier [ '[' cexpr ']' ]
\par 
\par    \{ '=' cexpr | = '\{' cexpr1[, cexpr2,...]'\}' | = '"' cexpr '"'\}
\par 
\par    [ , identifier2...]
\par    
\par \par
}{\qj\sb50 \li300\fi-300 {\b CONST} denotes the beginning of a constant definition clause. \par
}{\qj\sb50 \li300\fi-300 {\b type{[}{*}cexpr{]}} Defines the type of the constant. If none is given, the constant becomes universal type which is 32 bit signed ({\i SDWORD}). \par
}{\qj\sb50 \li300\fi-300 {\b \rquote {[}\rquote \~cexpr\~\rquote {]}\rquote } Defines a constant table {\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Constant_tables \\* MERGEFORMAT }}{\fldrslt{1.6.1}}}\~{sub:Constant-tables}}
 .\par
\qj\li300\fi0 A constant table will not take any space unless it is indexed at least once with a non-constant subscript. On the PIC, constant tables consume {\i code} space, not {\i data} space, and are limited to 255 elements. \par
}{\qj\sb50 \li300\fi-300 {\b \rquote =\rquote \~cexpr} For non-table constants this assigns the value to the constant. \par
}{\qj\sb50 \li300\fi-300 {\b \rquote =\rquote \~\rquote \{\rquote \~cexpr1{[},\~cexpr2\~...{]}\~\rquote \}\rquote } For tables of constants this assigns the value to each element. There must be the same number of {\i cexprs} as there are elements defined. \par
\qj\sb50 \li300\fi-300 {\b } \~ \par
\qj\sb50 \li300\fi-300 {\b \rquote \rquote \rquote \rquote \~cexpr\~\rquote \rquote \rquote \rquote } A {\i string} constant can be assigned to a constant table: \par
\qj\li300\fi0 {\b0\i0\scaps0\f23 const byte x[] = "hello"}. \par
}{\b \qj\sb72 \fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23     const byte cr = 0x0D, lf = 10 -- byte constants
\par    const word cr = 1492          -- word constant
\par    
\par    -- Literal (SDWORD) constant
\par    const seconds_per_day = 60 * 60 * 24
\par    
\par    -- constant table
\par    const byte mytable[5] = \{"M","2",24,1,43\} 
\par    -- String constant table
\par    const byte zz[] = "Hello"
\par    
\par    -- Extended type constant
\par    const byte*3 my_pointer = 0xFFCC00
\par    
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Variables}5{\*\bkmkend BMsub_Variables}  Variables\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Variable_Declaration}5.1{\*\bkmkend BMsub_Variable_Declaration}  Declaration\par
}\qj\sb60 \fi0 A variable declaration introduces a name which will be used within the {\i JAL 2.0} program. In PIC architecture this name will correspond to a hardware location called {\i register} located in RAM memory. \par
\qj\fi360 These {\i registers} can be of two types: \par
{\qj\sb50 \li600\fi-300 \bullet\tab GPR. General Purpose Registers \par
\qj\sb50 \li600\fi-300 \bullet\tab SFR. Special Function Registers \par
}\qj\sb72 \fi0 Optionally the name can be bound to a specific location{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Location \\* MERGEFORMAT }}{\fldrslt{1.5.2}}}\~{sub:Location}}
 , or to other already declared variable{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Alias \\* MERGEFORMAT }}{\fldrslt{1.5.4}}}\~{sub:Alias}}
 , otherwise the compiler allocates a suitable and available GPR location. \par
\qj\fi360 In a declaration a value can be assigned to a variable, which has the same effect as an equivalent assignment immediately following the declaration. \par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23     var byte demo = 0xAF 
\par    
\par    --  ... same as ...
\par    var byte demo
\par    demo = 0xAF
\par    
\par \par
}\qj\fi360 The initial value does not need to be a constant expression.\par
{\i \qj\fi360 JAL 2.0} will set the correct bank memory while addressing a variable (except in inline assembler{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Inline_assembler \\* MERGEFORMAT }}{\fldrslt{1.11}}}\~{sub:Inline-assembler}}
 ).\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23     VAR [VOLATILE] type[*cexpr] 
\par       identifier [ '[' cexpr ']' ]
\par 
\par       [ \{ AT cexpr [ : bit ] | 
\par              variable [ : bit ] | 
\par             '\{' cexpr1[, cexpr2...] '\}'
\par 
\par       | IS variable \}
\par 
\par     [ '=' cexpr | '\{' cexpr1, ... '\}' | '=' '"' cexpr '"']
\par 
\par     [, identifier2...]
\par 
\par \par
}{\qj\sb50 \li300\fi-300 {\b VAR} denotes the beginning of a variable definition clause. \par
}{\qj\sb50 \li300\fi-300 {\b VOLATILE} A variable can be declared volatile, which expresses that the variable does not possess normal variable semantics{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Volatile \\* MERGEFORMAT }}{\fldrslt{1.5.3}}}\~{sub:Volatile}}
 . \par
}{\qj\sb50 \li300\fi-300 {\b type{[}{*}cexpr{]}} The {\i type} of the variable{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Built_in_types \\* MERGEFORMAT }}{\fldrslt{1.2.1}}}\~{sub:Built-in-types} and section {\field{\*\fldinst{\lang1024 REF BMsub_Extending_types_with \\* MERGEFORMAT }}{\fldrslt{1.2.2}}}\~{sub:Extending-types-with}.}
 . \par
}{\qj\sb50 \li300\fi-300 {\b Identifier} Any valid {\i JAL 2.0} identifier. \par
}{\qj\sb50 \li300\fi-300 {\b \rquote {[}\rquote \~cexpr\~\rquote {]}\rquote } Defines a table{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Variable_tables \\* MERGEFORMAT }}{\fldrslt{1.6.2}}}\~{sub:Variable-tables}.}
  of {\i cexpr}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}{\i cexpr} means a constant expression or a literal value.}
  elements. The table index starts at 0 and continues through (cexpr - 1). cexpr must be >= 1. A table {\i MUST} fit entirely within a single PIC data bank. \par
}{\qj\sb50 \li300\fi-300 {\b AT\~...} denotes the location of the variable{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Location \\* MERGEFORMAT }}{\fldrslt{1.5.2}}}\~{sub:Location}}
 . \par
}{\qj\sb50 \li300\fi-300 {\b IS\~variable} Tells the compiler that this identifier is simply an alias for another{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Alias \\* MERGEFORMAT }}{\fldrslt{1.5.4}}}\~{sub:Alias}}
 . \par
}{\qj\sb50 \li300\fi-300 {\b \rquote =\rquote \~expr} Shorthand assignment. The variable will be assigned expr. \par
}{\qj\sb50 \li300\fi-300 {\b \rquote =\rquote \~\rquote \{\rquote \~expr1\~{[},\~expr2\~...{]}\~\rquote \}\rquote } For a table variable, the elements will be assigned expr1, expr2, .... \par
}{\qj\sb50 \li300\fi-300 {\b \rquote \rquote \rquote \rquote \~cexpr\~\rquote \rquote \rquote \rquote } A {\i string} constant can be assigned to a variable table: \par
\qj\li300\fi0 {\b0\i0\scaps0\f23 var byte x[5] = "hello"}. \par
}{\qj\sb50 \li300\fi-300 {\b ,\~identifier2\~...} Allows defining multiple variables with the same attributes: VAR BYTE a,b,c \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23     var byte x, y=3
\par    var word z
\par    var dword i=0
\par    var byte AD_lo, AD_hi
\par    var word AD_result = AD_lo + 256*AD_hi
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Location}5.2{\*\bkmkend BMsub_Location}  Location\par
}\qj\sb60 \fi0 A variable declaration can specify the adress of the variable. The address expression must be compile-time constant. The compiler takes care of the translation to the banked address. \par
{\qj\sb50 \li300\fi-300 {\b AT\~cexpr\~{[}\~\rquote :\rquote \~bit\~{]}} Places the new variable at address {\i cexpr}. \par
}{\qj\sb50 \li300\fi-300 {\b AT\~variable\~{[}\~\rquote :\rquote \~bit\~{]}} Places the new variable at the same address as an existing variable. Any address uses for explicit placement will not be allocated to another variable. \par
}{\qj\sb50 \li300\fi-300 {\b AT\~\rquote \{\rquote \~cexpr1{[},\~cexpr2\~...{]}\~\rquote \}\rquote } Places the new variable at multiple address. On the PIC, many of the special purpose registers{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}SFRs in Microchip\'99\rquote s terminology.}
  are mirrored in two or more data banks. Telling the compiler which address hold the variable allows it to optimize the data access bits. \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    var byte volatile porta at 0x06
\par    var volatile byte _status AT \{0x0003, 0x0083, 
\par                                  0x0103, 0x0183\}
\par    var bit  volatile _z at _status : 2
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Volatile}5.3{\*\bkmkend BMsub_Volatile}  Volatile\par
}\qj\sb60 \fi0 The {\i VOLATILE} keyword guarantees that a variable that is either used or assigned will not be optimized away, and the variable will be only read once when evaluating an expression. Normally, if a variable is assigned a value that is never used, the assignment is removed and the variable will not allocated any space.\par
\qj\fi360 If the assignment is an expression, the expression {\i will} be fully evaluated. If a variable is used, but never assigned, all instances of the variable {\i will} be replaced with the constant 0 (of the appropriate type) and the variable {\i will not} be allocated any space.\par
\qj\fi360 SFR\rquote s should always be declared as {\i VOLATILE}, as these are associated with certain hardware functions specific to the PIC being used. \par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var volatile byte FSR at 4 
\par    var volatile byte INDF at 0
\par    var volatile byte count
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Alias}5.4{\*\bkmkend BMsub_Alias}  Alias\par
}\qj\sb60 \fi0 A variable can be declared to be an alias for another variable. This is used much like a constant declaration to hide the actual identity of an identifier from subsequent code.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- fragment of a library file,
\par    -- which defines the pins used by the library
\par    var byte volatile i2c_clock    is pin_a3
\par    var byte volatile i2c_data_in  is pin_a4
\par    var byte volatile i2c_data_out is pin_a4_direction
\par    
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Tables}6{\*\bkmkend BMsub_Tables}  Tables\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Constant_tables}6.1{\*\bkmkend BMsub_Constant_tables}  Constant tables\par
}\qj\sb60 \fi0 Constant tables are stored in program code, they\rquote re limited to 255 values.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const byte msg[5] = \{"M","2",24,1,43\} 
\par \par
}\qj\fi360 A constant table will produce no code unless it\rquote s used with a variable subscript. So, if you use: \par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- Constant index:
\par    -- "msg[3]" will replace by the corresponding
\par    -- literal value, like: a=1
\par    a = msg[3] 
\par \par
}\qj\fi360 ...\~the constant value {\i 1} will be assigned into variable {\i a}. And if you use: \par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- Variable index:
\par    -- A special look up table function is built 
\par    x = 3
\par    a = msg[x]
\par \par
}\qj\fi360 ...{\i \~msg} will become a lookup table function that will return the desired value.\par
\qj\fi360 If constant table is declared with values assignment, it\rquote s not necessary to include the table {\i index:}\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const byte msg[] = \{"M","2",24,1,43\} 
\par \par
}\qj\fi360 In order to know the amount of values in the table you must use the COUNT statement{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_COUNT \\* MERGEFORMAT }}{\fldrslt{1.8.7}}}\~{sub:COUNT}}
 .\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Variable_tables}6.2{\*\bkmkend BMsub_Variable_tables}  Variable tables\par
}\qj\sb60 \fi0 Variable tables are stored in RAM memory and must fit within a single bank.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var byte msg[5] = \{"M","2",24,1,43\} 
\par \par
}{\qj\sb50 \li600\fi-300 1.\tab when {\i defining} a table, the size must be const, so\par
\qj\li600\fi0 var byte myvar{[}3{]} ; this is valid\par
\qj\li600\fi0 var byte myvar{[}n{]} ; this is {\i NOT} valid if {\i n} is a variable \par
\qj\sb50 \li600\fi-300 2.\tab when {\i using} the table, the index can be either const or a variable. The table starts at index 0. When using a variable, no bounds checking is done. \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    -- Constant index:
\par    -- "msg[3]" will replace by the exact file register
\par    -- with the index 3
\par    a = msg[3] 
\par    
\par    -- Variable index:
\par    -- An INDIRECT MEMORY ACCESS is used to get the value
\par    x = 3
\par    a = msg[x]
\par \par
}\qj\fi360 If variable table is declared with values assignment, it\rquote s not necessary to include the table {\i index:}\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var byte msg[] = "Hello" 
\par \par
}\qj\fi360 In order to know the amount of values in the table you must use the COUNT statement{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_COUNT \\* MERGEFORMAT }}{\fldrslt{1.8.7}}}\~{sub:COUNT}}
 .\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Expressions}7{\*\bkmkend BMsub_Expressions}  Expressions\par
}\qj\sb60 \fi0 An expression is constructed from literals, identifiers, function calls and operators. An identifier can identify a constant, a variable or (within a subprogram) a formal parameter.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Operators}7.1{\*\bkmkend BMsub_Operators}  Operators\par
}\qj\sb60 \fi0 The following operators are defined in {\i JAL 2.0} (ordered by priority):\par
\qj\sb120 \fi360 {} {\par
{\qc\fi0 \par
\trowd\clbrdrl\brdrs\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b Op.}}\cell
\pard\intbl\ql {{\b Description}}\cell
\pard\intbl\qc {{\b Priority}}\cell
\pard\intbl\ql {{\b Example}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b Op.}}\cell
\pard\intbl\ql {{\b Description}}\cell
\pard\intbl\qc {{\b Priority}}\cell
\pard\intbl\ql {{\b Example}}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {...}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 !!}}\cell
\pard\intbl\ql {Logical}\cell
\pard\intbl\qc {0 (highest)}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 !!5 = 1 }\line {\b0\i0\scaps0\f23 !!0 = 0}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 -}}\cell
\pard\intbl\ql {Unary negation}\cell
\pard\intbl\qc {0 (highest)}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 -1 -- negative}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 !}}\cell
\pard\intbl\ql {Bitwise complement}\cell
\pard\intbl\qc {0 (highest)}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=0b_0000_1111}\line {\b0\i0\scaps0\f23 a=!a}\line {\b0\i0\scaps0\f23 -- a=0b_1111_0000 }}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 ~}}\cell
\pard\intbl\ql {Bitwise complement}\cell
\pard\intbl\qc {0 (highest)}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=0b_0000_1111}\line {\b0\i0\scaps0\f23 a=~a}\line {\b0\i0\scaps0\f23 -- a=0b_1111_0000 }}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 *}}\cell
\pard\intbl\ql {Multiplication}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a = 2}\line {\b0\i0\scaps0\f23 a=a*3 -- a=6}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 /}}\cell
\pard\intbl\ql {Integer division}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a = 17}\line {\b0\i0\scaps0\f23 a=a/2 -- a=8}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800\cellx9750\cellx11700
\pard\intbl\qc {{\b0\i0\scaps0\f23 Modulus division}}\cell
\pard\intbl\ql {1}\cell
\pard\intbl\qc {{\b0\i0\scaps0\f23 var byte a = 17}\line {\b0\i0\scaps0\f23 a=a\\hline 
\par }}\cell
\pard\intbl\ql {Addition}\cell
\pard\intbl\q{2}\cell
\pard\intbl\qc {{\b0\i0\scaps0\f23 var byte a = 2}\line {\b0\i0\scaps0\f23 a=a}+{\b0\i0\scaps0\f23 3 -- a=5}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 -}}\cell
\pard\intbl\ql {Subtraction}\cell
\pard\intbl\qc {2}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a = 17}\line {\b0\i0\scaps0\f23 a=a-10 -- a=7}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 <<}}\cell
\pard\intbl\ql {Left shift}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a = 0x81}\line {\b0\i0\scaps0\f23 a=a<<1 -- a=0x02}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 >>}}\cell
\pard\intbl\ql {Right shift}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a = 0x82}\line {\b0\i0\scaps0\f23 a=a>>1 -- a=0x41}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 <}}\cell
\pard\intbl\ql {Less than}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=12, b=14}\line {\b0\i0\scaps0\f23 if a < b then ...}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 <}{\b0\i0\scaps0\f23 =}}\cell
\pard\intbl\ql {Less or equal than}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=12, b=12}\line {\b0\i0\scaps0\f23 if a <= b then ...}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 ==}}\cell
\pard\intbl\ql {Equal}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=12, b=12}\line {\b0\i0\scaps0\f23 if a == b then ...}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 !}{\b0\i0\scaps0\f23 =}}\cell
\pard\intbl\ql {Not equal}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=12, b=14}\line {\b0\i0\scaps0\f23 if a != b then ...}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 >}{\b0\i0\scaps0\f23 =}}\cell
\pard\intbl\ql {Greater or equal than}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=14, b=12}\line {\b0\i0\scaps0\f23 if a >= b then ...}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 >}}\cell
\pard\intbl\ql {Greater than}\cell
\pard\intbl\qc {3}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=12, b=12}\line {\b0\i0\scaps0\f23 if a >= b then ...}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800\cellx9750\cellx11700
\pard\intbl\qc {{\b0\i0\scaps0\f23 }}\cell
\pard\intbl\ql {+}\cell
\pard\intbl\qc {Bitwise AND}\cell
\pard\intbl\ql {4 (lowest)}\cell
\pard\intbl\q{{\b0\i0\scaps0\f23 var byte a=0b_1111_1110}\line {\b0\i0\scaps0\f23 a=a}}\cell
\pard\intbl\qc {0b\\s\\do6({\fs20 0})000\\s\\do6({\fs20 0})011+\line {\b0\i0\scaps0\f23 -- a=0b_0000_0010 }}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 |}}\cell
\pard\intbl\ql {Bitwise OR}\cell
\pard\intbl\qc {4 (lowest)}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=0b_0000_1110}\line {\b0\i0\scaps0\f23 a=a|0b_0011_1100}\line {\b0\i0\scaps0\f23 -- a=0b_0011_1110 }}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1950\clbrdrr\brdrs\cellx3900\clbrdrr\brdrs\cellx5850\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b0\i0\scaps0\f23 ^}}\cell
\pard\intbl\ql {Bitwise XOR}\cell
\pard\intbl\qc {4 (lowest)}\cell
\pard\intbl\ql {{\b0\i0\scaps0\f23 var byte a=0b_1111_1110}\line {\b0\i0\scaps0\f23 a=a^0b_0000_0011}\line {\b0\i0\scaps0\f23 -- a=0b_1111_1101 }}\cell
\row
}\par
}\qj\fi360 Tips:\par
{\qj\sb50 \li600\fi-300 \bullet\tab The {\i Logical} operator {\b0\i0\scaps0\f23 "!!"} returns 0 if the operand is 0, or 1 if the operand is not 0. It\rquote s useful in some expressions which need a guarantee that operand is either 1 or 0. \par
\qj\sb50 \li600\fi-300 \bullet\tab Right shift is logical for unsigned types, and arithmetic for signed types (it\rquote s sign preserving). \par
}\qj\sb60 \fi0 {} {\par
\qc\fi0 Logical right shift (for unsigned types):\par
}{\qc\fi0 
{\pict\pngblip\picw694\pich298\picwgoal7880\pichgoal3380
89504e470d0a1a0a0000000d494844520000018a000000a90802000000ba53ed6b000000097048597300000ec400000ec401952b0e1b0000000774494d4507d6011d122333897b9209000020004944415478daed5d4b8c1c57d5ae57d7a3df339e9966c6634743c006ac00028944381059220a01021b1648881548ecb26705
7b56ac114ba420014221121201214470e4c838011b27f62436607be2f1f4b31e5defaa7ff1656eea1fbbbba77b6e3fe77c8b514f4f4d557db74e9d73eeb9e79e23a6692a100804c2ec41a221201008a49e08040281d413814020f544201008a49e080402a92702814020f544201008a49e0e8546a3210842100413bba2effb
822098a61986a12008699ae21b8e60678ee3384912c7712690ec46bc88d781f33316711c1ff22d13292d13e876bbf97c9e0d9f2ccb8ee38461582a95c67add388e55551504c1f33c5dd7d3341545318a225114b99c5f966588429aa68aa2e0572622c48b784d9217d3bfb95c2e0c43dff78bc522a9a7c3c2f3bc344d0dc388
a2485194c95c348a2249922449b26dbb582ce2e1f1bd04a48d099fe3388542817811af49f20ac3509665499292244992e450ef574a485338d2d04d699a3a8eb3b5b555a95426a09b6459fef4a73fadebba20088aa2a8aa8acf7ca1691aa4e1339ff94cb55a255ec46bf2bc0a8582244938ff273ef1892008e024f6c1841c84
3908c24992a6699ee7254992cfe73dcffbe73ffff9d8638f4de0d2a2282649228a629aa65114c571cc573270725c081ebb2449bc9c76e245bc0e1f7ef23caf52a998a6b9b1b13170662750683c1b7b120441d7754dd3044178fffdf76bb5da04aeeb384eb55a8da2c8f33c4886aeebaeeb729475d7754551ec743a711c2f2f
2fcbb23c0159275ec42b8b76bbad280a22b9a552c9719c62b168dbf6008d49b127161a946519dea6a66978424110700f2b3c3cb9ae56abfffdef7f9796965cd7350c837dcfd124c2a9c6afaeebe67239f60df1225e93e1850f4110a8aa8af76bf07f917a7a3824e9795e3e9f4f9264326a5151143c05c40e71034c3eb830c2
222e4c2266f5e336c8c48b78651145519224aaaa22d86f1886655903a3e334b93b38e76732816ffa88111b771c995dfa0dc330fbbf7d523cb0e08ab389a208237998393f228b87b4c6aaaae67239cc5b079a44cbb2d8619ee709fbeb27c2fecae681c3b8f0ca8e5e1445087f10af81bca62587c3f2521405ca08a43ccf5314
65a00740ea69746715396c8aa2b8ae2b49922ccb9d4e07312c78e3beef43209051c211b66dabaaaaaaeac0d9fbb0705db7542a4551b4b3b3238aa2aeebdd6e1731da6eb7abebba288a3b3b3b5114954a258eb109883b7202a328725d5751142811e2358372386e5e34b97b84f72449121c69b851d928c0c3a618e20e9b90cd
4c417c11ea0316290cc33e92c1564c703666c1fa38ffcc12b24bf471fe87e20599735db75c2e2365399b986a591696874dd3340ca37f606e285ec27eb61ee3029bdce712c46b8a723881e745ded3e86032d16eb7054128140adbdbdb822074bbdd2449745d5755354992300c1dc7e1eb3dc164c9b20c871cbf7244a7d32997
cb6118a6695a2814b0a902e960854201525e2e973b9d0e77f390a5635916df758985e43545391cf7f322efe948da1d07c8b29cdd10c3ec98effbd8943030017d58ab8585154cf5e1d2f78f5f8e60b5700fbeef3f1c7df03c0fe18381c1daa178ddbe7d7b6b6b8bc5832ccbaa542a7cbdc245e53515399cccf322efe948d3fe
7abd0e47264912dbb6614060be909d80c338cec9dbedb661184110148bc562b11804816118b09c5c00ade7791edee1300c6ddb863cd9b61d86a1aeebc8af63077301641d979065b952a9204844bc66530e27c04b106853cbffdfd7028d0ebbc1be7924922469369bc88dc2bca052a91886512e97993de976bb87b92e0c0b4e
8233e3d75e40d4c9f77dec291fb83360285e8820a469bab7b797a629926ef04d2e97735d97fd297bf0d179b55a2d8451445154551567b62c8b78cda61c8e9bd707e91434b91bcdf9447619c21670aa2dcb2a168b3803923b10aac422312fa71aabce966561428705a92008fa38c943f1427aaa699ae572398a22bcc32c0c2f
8a22168970000ee63569059d5c2e6718866ddbd9fdfac46bd6e470dcbc6872c7213e5d2814a228c2841f830e89d1751d8eb42ccb8aa2702c20254952763394aeeb711c734c2946bcb35c2e3b8ea3288a2449aeeb62f507ebd68aa2388e532e9785be7961235c378e63c330a026344deb2febc46bba72386e5ea49e8e042cdf
064110862144a4582c2649b2b4b4845fa138f093ef8a094a524451844c5cbedb1d72b95cb3d904416c90667177c3309224f13c0fdc9bcd26c7951a24ecc02b6421128e595d8bca6b5a72386e5ea49e38445b4551449a0c528d2dcb6ab55a8542a1d3e9589625cb328a8a710cb5b2651aa4e1221aca71866e9ae6f2f232ccac
288a2c7781653330cbbcbcbc6c9a26df214595324cb284c365cf1f735ed392c309f022f574d41513782ecc14b31251954a058bb8b0278ee37094455ca5dd6e63c1ae52a97014bb72b96c9aa6aaaa8d4643d33449928220802a44844bd3b446a3a1aa2ac234bcaebbb7b7876526c432cae5f261f66411af69c9e10478917a3a
929a406264bd5e47e9bf6eb78bf5fe3b77ee60ca80b065565cb838d58ee3a0fc45b55ac567bef33bbc9ca552298e63e419239ca1aa6a1886711c23df9ae33b2c08c2eaea2af649b8ae0b1780fb2af542f29a961c4ee079917a1a1d581315046165650546036b6ab66d9f3a75cab22c541163bb3a3982adaa60aec7d764b102
f8aaaab26067b7dbc51e2ecc835808836fb57cdbb6514919bf168b458ee75f545e5394c3b1f222f5742420db8de5434651542c164dd3447a2eec30531c1c43869224b55aad8d8d0dc44d3636365aad1647ef49d3341843d775b119229f0176c063c7ac65591c85de711ccc52918874f7ee5d81eb0ada02f39a8a1c8e9bd707
f356ca7b62182a2f035b493a9d4ea552c1de48d33437373711898ca22808026c7a1a58ac67847c932008f00af9be3f703966847c1314c3c78a3b4b3b467321043870c0c098c850bc7cdfd7344dd334ac880f2c1b40bca62b8713785ea49e8e347cbc429bc3aa27e245bc8e032f9adc1108841905a927028140ea8940201048
3d110804524f04028140ea894020907a22100804524fb305d4c0cfd63c9d4c52582e97439f356cb660f57a3802a514054140fd5fee3bd78917f11aac6b24a9dd6e67fb030f4ce622f5f421969696508d94d585988058a076b8a669287d0dcd98ed7178445896254992aaaa9224a1586dff6e42c48b788d8397699abeef57ab
d5ec390796c7a3acf10f8072a8d81620ecf7b6d7757ddcadcc254962f60479b428cbcfebba3050aca82baec56a4b132fe235315e28918cca79c56211b516faff97428a09401145b675289fcf433e26b09940d8af188d96f670d9785d170af780f91dc77c847811affe679665193b0473b91caaa10fec6d4593bb0f81e76118
866118a8b3818a3963856559a74f9f46970bd4a6d0348d63610a8817eaff369bcdd3a74f73ef344dbc88d76180ba54f0cb30851c581e8f26771fea26144e84e1628eeec42677309bbeefa3af51ffce9ac38abb6ddbbaae2b8a228a621cc7d9f024f1225e93e185d909b6011f92114dee3e54edcc054531a0dddddd95959571
f49f3800c330e238cee57250919224a1be3d1798a6592a955891907c3e8f9a8a13982c102fe29505f411ea94552a954ea7a328ca804b50f74dd6ce10dd07011451e6de33fe11ee6b46ec5046761c9579853194a9275ec46b28542a15bc50a552696565a57fafd30f56034831f1526a9665ddbc79737575d5711cd66135db76
950b5807d7cb972f178b45b4b4f53cef40c3d56eb7eb380ef1225e63e23519c83ff9c94f68663702d0fc9275af17042197cb298a72ebd6ad1b376e3cf3cc33881a60319563393149923a9d8eaeeb1b1b1bd7ae5dbb79f3e697bffc6516a440497f24cea011eeb09302e245bc6608e4018d06dff799e1ca5ac2cb972fa30322
da64668fe4e8b2e1c35b6fbd55abd55cd7ed76bbd9bf32b7d9755de245bcc6c48bbca7d9057a6142bf672dd8c6c6c65ffef2977abd7efefc7918b4200838c6b06060932469b55a5b5b5b7ffbdbdff6f6f6bef8c52fe24b761b388cfd4abc88175f5ee43dcd3498c583e7cce6ff4110bcf7de7bb55aadd3e91c0840f042bd5e
c707c771b6b7b76bb51aceef791ebb100ae0132fe2353e5ee43dcd2e582d77d6ff9ad9bd13274e5cba74697b7bfbc2850bc854e03be147630c41103ccf5b5f5f7ffdf5d7df7df7dd679e79065daab12a8cdd03ecde8817f1e2ce8bbca79906b3570770fffefd1b376e3cf1c41377eedc81cde47e69cff3b0b9dcb6ed1b376e
6c6d6dddbd7b979968f6e1306bb7c48b78cd2c6853cb91166560bbd8120cbeafd56a1ffde847373737fff0873f0882c0b7412b36794751843d079aa69d3973e6539ffad4ef7fff7b34596469eeb0c9c48b788d8317794f7309cadf215ec78717c59ee6cfa5a2fc1de2b5f0bcc87b9a5750fe0ef15a785ee43dcd25287f8778
1d075ee43dcd2b287f87782d3c2ff29ee61594bf43bc169e17794f730ccadf215e0bcf8bf29ee6d275a2fc1de2751c7891f734c78b7707f25caad52abe67ab27d9a593a3039dd1d234fdd7bffe856b054180be5858126221866cb08378112fbebc28f634d3e895e7b2bdbd7debd6adf3e7cf2b8a822028eaa5f2baae2ccba6
696a9a56abd5de78e30d443450371d39359ee7618d66b4eb122fe245ded3dca3579ecba54b97565757a3280a82200882388e6ddbe67b6924d1a469fae69b6fd66a351677601110663047b096c48b7891f734f7e895e772f2e4c93ffff9cff57afde9a79f8655444480d775d160439224d3341f7becb18b172feeeeee3ef5d4
531f84182509e9c22c14c22b7f8778112ff29ee606bdf25ca228ba79f3e6dada5ad658f1cd7361418a56abf5ce3bef6c6c6ce0367cdf67e10c16f2205ec46b4cbcc87b9a5df4ca731145716565e58d37deb879f3e6850b17a22842ab458ed37e66067ddf3f79f2e46bafbd76e3c68d0b172ec8b20c71676b344992f0cadf21
5ec48bbca77942af3c979d9d9dedededb367cf5ebd7a956d55e705c4299819745df7dab56bb55aeddab56bec1b767ba3594be245bc28ef69eed127cfe5631ffb58ad56fbf5af7f9da6a9288a689bce6b25087618710d5555cf9d3bf7e4934fbef4d24bed761b4b39f813525d8817f11a072ff29ee6189d4ee7ca952bf97cfe
debd7b699a9aa639ee3c1741101e3c7870c068132fe235565e147b9a3f341a8da5a5a5f5f5f57ffce31f57af5e7deeb9e7b0256aac792efff9cf7fae5dbbf6f4d34f6337bc2449922421e240bc8817775ee43dcd2b989dfcfbdfff5e2a95eedcb9930d0d8c29cfe5ca952bb22cbffffefbece4d9e41ae245bcf8f222ef692e
813c1738d21ffff8c75f7ffdf5ededed679f7d169231be3c97f5f5f5575f7db5d96c3efbecb330c29ee7213b9978112feebcc87b9a63ef09e6a8dbedbef3ce3b8aa2b45aad71e7b9c4717cfdfaf542a170fffefd3165b8102fe245ded3223850699acab21c86e1fafafac58b17af5ebdfab5af7d6dac792e9224adaeaefef5
af7fbd7efdfaf3cf3f0f0b09734dbc8817775ee43dcd31d84e71d775af5ebdbab2b232813c977abd7eeddab5cdcdcdebd7afa763a8694dbc8817794f730f74cec8e5724110689a0623d968343ef7b9cfe9baeefbbeaaaa61184a92345afd1d66e8106d8529f67dbf542aadadadfdee77bf0bc3f0fcf9f31c0b5a132fe245de
d342794f94bf43bc8e2d2ff29e661494bf43bc8e392ff29e661794bf43bc8e392ff29e661794bf43bc8e332ff29e661a94bf43bc8e392ff29e661794bf43bc8e392ff29e661a94bf43bc8e39af6141f59e268747d6dff17dffc48913e7ce9ddbdadafaed6f7f1bc731f7097fa7d31145d1300cb48d3d77eedc17bef08571d7
15225ec48bbca70501e5ef10afe3c08b624ff307cadf215e0bcf8bbca77905e5ef10af85e745ded35c82f27788d771e045ded31c7b4f94bf43bc169b17794f73ec4051fe0ef15a6c5ee43dcd31287f87782d3c2ff29ee612545788781d075ee43dcdb1f744f93bc4ebd8f222ef694641f93bc4eb98f322ef697641f93bc4eb
98f322ef697641f93bc4eb38f322ef69a641f93bc4eb98f322ef697641f93bc4eb98f322ef69a641f93bc4eb98f3ea05aaf7347d505d21e2759c7991f734af7838cf250c4364b8c05a1e71eff8c3792e4b4b4bbbbbbb9665e12abeef3fd2a2122fe2c59117c59ee60f8fcc73614b2a58ca9124a9dbed4651346c0e71af3c97
2b57ae5cba74e9dbdffeb6288a6118aaaa1a4511df2c61e245bcc87b9a7b3c32cfa5dbed627586c51a46cb12ee95e7f2f6db6fabaafaeebbefe24bdff79965265ec48b3b2ff29ee612bdf25c5455c5f28aa2284110c8b29c24c90826ab579e0ba2adfffef7bfb14ca3288aaaaa699af2daa14ebc8817794f0be23d3d9ce792
a6297e4651c40cd70833ff5e792eb66dbff9e69b8868789e679a26bb0af1225edc79f507a9a7d985e77970e91dc749d3f4b9e79e7bf1c51799df8e3f4120468886628e70409ed879bef295afbcf8e28b0fcf2c8817f1e2cb8bd4d31ce3e13c973b77eea4697afbf6ed575e7925dddf413e5aace191792e90b3ebd7af572a15
e4b9b8aefbd24b2f112fe235265e7d20a6694a819ed944a7d3a9542a822004418080c237bef18d3367ce7cf2939ffcc52f7e71fffefdb7df7e3b9fcf63863e5aac014f3f49922449581d9f9d9d9d8d8d8d175e78e1cc99338f3ffef8cf7ef63341106edcb841bc88d798788d127b62117b4c71c7b1dd86cd5ab3dee31491bd
81a9df4cb3d9c4877abd8ed8e48f7ef42348a4a22867cf9e1d61ef3824bbff01b8d68f7ffc6324e01986b1b1b141bc88d7d1790dfbbe0b7d4e1445d181d1e1588caadbed8e237f6c64b070a3ebbab66d4ff2babd361320fa8807f9ab5ffd6a6b6b4bd33441102085b063699a5a9635c2a4a00f7efad39f9e397346108452a9
041b76f6ec59e2b5d8bca21ee0c56bb4f7bd67f23b2a5d0982e0388e24499aa6499264184692245cbc36c330f0c1f33c599691d6855aa2539949b9aeabebba2ccb8c3832fac77d3fbdb656a2c658b55a1504a1d96cbefaeaabb76fdf1645b15028388e238ae2e9d3a7317a90955ecf05f5c31e9ec2f73a3e8aa27abd7ef7ee
5d5dd72dcb5255350802d775877deec46bbe78f5cae4e4c56bc4f7bd8fb6cbfa4d5114f12d43f5f06c7162bdfdfaf8c9b825c771822088a26802fe5d76c118570cc3106b25487b63eb352fbffcf2d2d212d28565593e7dfa347ce3fe0bc97081e3380e82200882388e0fe4f53d727afb9bdffc2697cb699a268aa2a669274f
9e245e8bcd2be9015ebc467bdf856139707f2d3dcfeb743add6e77923ba17bdd0f1cd449d60364929775e9f120219d6ccae9384ea3d178e1851760579e78e209cff370db7daafcb07146312076c2fe771586e16bafbdf6e4934fc2249e3b778e782d36af5eea893bafa1def79eeac9b22c0c7a1cc7ad560b178622e782476a
50ee1965c3aa2710c46dd8b66d59563c7eb01bc81ac976bb0de1c80e91ebbaf57afd3bdff9cec993274f9d3a95a669a3d13810133980ecbf1f78b51e09d3345910210882ef7def7ba228aeafaf13afc5e6d5ebbde0c56bb4f7bd9ff7d46eb7e147244932503b0e0be83edc1f360aa5698a8a7c53544f6c4dc1b66db4c19818
3ccf634f0b83033b138621335fec11fcfce73fffec673f9b5d4fe9735ac847f6d90d5ce2705dd7755d1cf6cb5ffef2f39fff3cf15a6c5e7dd40a175ea3bdef3dd593699a5ffdea5705414050bc4f507064140a0516837feaa9a7b2fd6aa6022cd875bbdd6eb7fba52f7d69e4ba3943a15aadaeacac94cb65248c6013138b26
6270104a3c10c5c4ba492e97437f8e5ee7cffeb55c2eafafaf23ccd9e7783c745c68e4e23ec46bbe78893dc08bd768ef7bbfb44c51145115348a2245517024c7b42ba496a5698a81809b36a122a1b3743f8b3acec48b781d911755cb241008330a524f040281d413814020907a221008a49e08040281d413814020f5442010
088ba69ebaddae2008e8f8ce7e9d354451840fbeef7b9e27ecd796c79ff081e582f54fcac0c1a089240e7c8f4d00ec4f388c171cc7c10776934110f01da2a9f09a80fce0848c0e46b2d3e9302e9007d33489d72cc8214ff514c7713e9f8fe378797979797999fd3a6bea09ca2849124dd3745dc70e3b5996d33445f941962c
9b1dfa8781773549927c3eef791e5266f1bff8e0795e3e9f6787f1ba7fa4dea2b802ee1342cf0bd3e2356ef9e976bbf97cde344d0c1adb9fb1b9b9f9e0c103341ac191e57219ef33f19aa21c72564fb22cfbbeaf288a699aa6692a8ae2fb3edf76805c80ec7bf47a66d2c3d4166b4a81bff649999524495114499276777791
a78f44d874bf9ea9aeebbbbbbbec305ef7ef795ea3d1d0757d757515df944aa556abc54d20a6c46bdcf293cfe71f3c78502e9761f65555dddcdc9465d9b6edb5b5356c0ad3751d7fcdd6fc225e539143fe93bb4aa5d2e9746459966599d5279e35208f5ed33458305555e3386e369bf8129d579956eaefafa2e445ad56f37d
1fef306af4e04df67dbf56ab0541c0d1c58084150a8520089acda6aaaa6118b65a2dd4dfe1384493e7356ef9d9dbdb5b5b5bf33caf582cc21afdef7fff4b92043be6daed36b6adf175091798d704e45010046e7beed0bf185b6aa1d4e1a4f4d9553b95bd45cc0b8057ccbe47cf787804a228e672396cd1eeb5c7121baf755d
c73d2b8a62db364aff8561582c1651574c92241412ece3880d35ce688bb8b7b7b7baba8a418329eb6318871ae769f19a80fca05b247c64cc4d703fe86ac9e6f2a228f679eec46b3272c8d97bc270233081b08530911dff43ebe3fde1c61b689ae62bafbcd2ed76516c105e37a678c2fe6eec47c2344d3c89fbf7ef4302500b
18e580f1b4f0275dd739462531c35f5d5df57d5f9224cc5239eaf469f11ab7fc60dd037bfa0b850286d1f3bc52a984d18ba2a8d3e9403c388ee7a2f21ab71c72564fb66d57ab555dd7b142a1eb7ab55ab56d7bd6d413eae908fb459d6fddbaf5fdef7ffff9e79fbf78f1e2cece0ef4179c0594a6ebe3b10b826059d6dada1a
9b10398e8342c070a4d7d6d62ccb62077341b158443c52d334455172b91cbc6b8e3391a9f01ab7fca0523e4e88da43080c5996d56ab5baddaea228285d822a91c46bba72f8a133dfb316d4fe3a0e680fec6973e06cc2a00ee9d942a52c383db1e273a669fabe7fefde3d66cdbef9cd6ffef18f7f44c52ce110eddd59439756
ab552814b27f2a140a68f19c3d8ccb38a3fc3328088270986e57c38ef354784d467ed02300778e7a432c2e839b3c4c2f22e23519394cd394a73386e60de83fe3380e9b06f7720e2549725d5714453483c1e7712b268c8b2449a552290cc376bb8d79bb288a2fbffcf277bffbddaf7ffdeb7ffad39f0ec95710847abd5ead56
591a08e0384eb55aadd7ebec308ed61836ca711c5996b170c3d7624d85d7b0f2339a25c6fc14de31969c344d43c71198284992b867c32c24af09c8e134bda7388e51fd134b4282209c387142d77571cc60a13bc3301445595e5ec6afb95c8e2d91e271763a9d3ecd24b2dd29e0e2a669da6c36d1b350d3b46cf5d2feb665d8
71669650d7757ceedf217528ab35455e63f532700f88eb67cbd1e21ff7f6f6767777d9d8f6b7eac46b027238b8d6f850b78b2b61d26b5916121d075e1e8e28e285aeeb4ea0bc37bb25dff75dd7bd7cf93242bf2c70fec31ffef0debd7b86610c3c55b6fcbbe779ec5f0cc34084ebc0615cc6191a01a59ad93ff69f670d2b16
53e13582fc8c20eeacc1071b4c2c510d579f9f784d440e79aa276899200872b95c2e970b8260603b26a6f26ddbc6634b7b772be5054c98dbed362eb7b3b383e5065555bff5ad6fa1efc583070f72b95c9224032930f7c1711c9635ebfb7ef67beeb10ce805367118185618412ca6c26b58f919d62b6457dfdbdb43648d85f6
21844c2a067a43c46b3272c8d97bcaa6f00dbc3c0ec3ac617d7dfdd6ad5b13088ab3ae3bf57add75dddddd5d41107ef0831fbcf5d65b597f5555d5fed68671f43cef91efaae3384c10fb77b8196a9c7157711c1fbea1fc5062312d5e23c8cf0893d646a381097bb3d9ccbed8d90e209d4e87bbf7b478bcc62d87fc5b2198a6
592e977bfdfac883595e16cbec1af7363dcce35cd74557e5bb77ef168b455dd791c5532e97b100fc918f7ca4dbed22f7acd7a9580630323cd966632c05b2b4cf8189c2c38e73f6ae1a8d46b158c4fc9f573adcb4780d253f23f08ae3d8f7fd7c3ecf28204d11b985d9345ddff7916c4dbca628873cb3c6593c1fc9f5ec431f
b4dbed52a924cbb2ebbaf97c1e73aefe6d73b8a4b1d9b65d2a9584fdfd50a228aaaa8aa7d86c36112c1f98dacb9e3a32650f0c34cbabc6d33a90a17e74b188a208370f22fdd5e8506231455ec3cacfb0d9f088a3b10b6163531004e5721903685916c67360662ff11ab71c72564fec4ac81f65998d7d8615a7c2c999f7d4e7
7eb82049123850708c8bc522926e0f4812eea7bfb58119648e98ebba38d8f77df68d611803ade550e37ce06e219dac172117b1980aaf61e5673471475b5d6c0d633b3cf052e1279e7effd78c784d460ef97b4fc36a0aea732750df34e245bc7ae5c40b040281309320f5442010483d11080402a927028140ea89402010483d
110804524f04028130d3ea298e6394f813f6b732a00c3eaf0bbbae8b1aa0d9d38ea317cde181d2b4a88eca9a948cfba2d96454546ee07b51d4d212f6f3e0854c422cf1225e13e335dafbde332d9355d2705d17fd4b98dae272bbb22c4751843b4645fd71e78bf7074b10c79645a4a54551346ec940673dc61d7df7b0c587d7
f90541c02e76747988e39815c9275ec46b62bc4678df7bee29d3755d5114d77551220ea542cbe532af165dacd70d3a3b225715633415f504dd54afd757565604415055b5d1682c2d2d8d5b2c58d96994ac3f71e2442e97e378d13b77ee9c3a756a696929dbfa780229c8c48b787178dffb54e1330c239fcfa3d6bab0bf5d88
2358e1f493274f1a8671f7eedd74aa60c5f0f6f6f6745d2f954a13e83483ce42d08fdcdb840982b0b9b9890fe83f3a31754fbc88d7d1dff7012e16b6177a9e87aed6dcef18bb7bd836ee03fb0c2709d4afc9e7f36c4765ffedf8bce0799eaaaad86d8b0a187cc30d88651886c1b6f84e861af1225e477fdfa53eaf2b668c98
2ba2ee4fbbdde678a3e8e90ccd8d6780f644d39adc61a69d2449b3d984f962bdcec70734fe8417bdbaba8a11ce96583a220a8502dc5ec33070f246a33101b54bbc88d7d1dff77ede13541ddabd61ea8892bb5c6e17f12c0c4710045114e9ba3ec57205aeeba217f3817a5ae30ed88ba278fbf6edadad2d21530c08b55f799d
3f6b81df7befbdc71f7f1c1bd38917f19a247bfcabdd0000007849444154af11def77eea295bed080d7038b651c7bd1ea83f977568270f4ceb3076f97c1e9546c71d7e02650c2f7ce9c3542c1b0a386d766c27b0564dbc88d7d1dff7292fe7130804c2d0b12702814020f544201008a49e080402a92702814020f544201048
3d11080402a92702814020f54420106614ff077f9b4c11e17b858b0000000049454e44ae426082}
\par
}\qj\sb60 \fi360 {} {\par
\qc\fi0 Arithmetic right shift (for signed types):\par
}{\qc\fi0 
{\pict\pngblip\picw562\pich298\picwgoal6380\pichgoal3380
89504e470d0a1a0a0000000d494844520000013f000000a90802000000d28cad16000000097048597300000ec400000ec401952b0e1b0000000774494d4507d6011d12231952c05bdf000020004944415478daed5d5b6c1c57f99fcbceeeccdeedb59dd87148aaa417aab6698840a54d050a548d88902a7111bc5508097828
57f18090a008c10bcf0824105554d48010a2917888aa8a026a9592284d4d2134696e38f17dd79edd999d999d2b0fbf7f8ee6ef78d75ef7ccdabbfebe076bbd3e9e737e73cef9bef35d8f184591404444d48724d12b2022a2dd4b444444bb97888888762f1111ed5e222222dabd444444b47b89887638a5dafd2108025996d9
07dbb665594ea7d349fb874551f43c4f511441102ccbca66b361184a92c4abdf300c6559c693e3df132ec2d54b5ca2282e2f2f0f0f0f0b82e0fbbe24499224d9b6ad695a174f89da501004a669dab61d45916ddb0f3ef8e0c4c4047a4d94044178e28927c0383ef0810f0882303434c4b1df743a2d0842a15000fc8f7dec63
8220489244b808572f710982a0aa2a5892a228f7de7b6fabd58abaa4b6b25792a45c2e87cfb22ccfccccdcb871030092265114c1e1e6e7e777efdecdf7e1d56a756464849d2c585f848b70f51217446e2a95c2f1767c7cdcf77db0aa2e46d8ee5d341a8d62b1884743aca365100449bfb56c36eb380ef8138661db76b7c0da
912ccbbaae97cbe57abd5e2a9564590622c245b87a8ccbf77ddff7455154144596e54d70a5b6b2175b971d155455150461696969747434d157669a6626931145d1300c5555318cee94818ec4b852a954025f8f7341c245b87a832b0882542a954aa5a0f48229d46ab54aa5c241f67a9e67db763e9f9724093df546f6cab2ac
699a6118981e5dd725492a168bbcfa956579656565686808873118275cd7cd6432848b70f51297aeeb8542816904b66d434672d8bdcce2170481a228a2285a96c591f7b4a366b399cfe7312a18fdf0be009297b2e1384e2a95725d3797cbf5468f225c846b4d725dd7f7fdcde16abb7b4dd3cce7f38220c08a0d0d3e0c43a8
01899a0a32994cb3d98ca228954aa15f8eb60a7820d8af8aa2589605c59e7011ae9ee18a3f10ca691445ad56abab3345db5790cfe7c3301404619534ef6c07b72c0b1fa08e43e9b76d5b14c556abd56c36f1d720083a58d25dd7956599713b411018c235097f5df552da912ccbc08569f07d1f278b76140401b0341a8d766d
f027dff739e242a780e3ba2e9e40b8d6c5b555ebb05b5cc25a2e6bb89739ecde4d9065597032e9baae284a18869aa699a6e9fb3eb80013e67c1927de428797f27e086a0f0c9ecd661330195e1cb14aa552bd5e678db91026b2d168489294c964b0201cc7215cdb731df6005782bbd7f33cb89e2dcb2a97cb82205cbf7e1d32
bc582c7a9e8725120481a6697c77afeffb6118c2fe8e0f1c1f5ead56154529954a8220e472b9300cb3d9ace779c01b8621164aa9545214a55aadf2ea77717111967f38f1b10ebab56aec405c5bb50e93c6d556707508b782ae0b69c6be59932ccb8aa2686565258aa27abd6e9a661886f08fbdfbeebbac99699aec99ed08da
4e14459ee7a171e7f6e81df6770ca33375850b045cd56a358a224c3fa413fb120d3a53b7b8161717b114603e59171ae1dada75d883f95a3d428e4f5f5e5ec6a11fbf562a95743a0d63da2a3068c9e5ad2196535555c80d5555d9975c70398e8395cdba43b0771445e9749a75840668cc912b49920449825f17161608d7f65c
873dc0753775b2a1b1b06ca68ee39bce3eee7c3e0fa7b3e338411030b33bc60743fcbae63818b7e12d606a6d87f6ad560bfe6e7802d77583758bcb75dd743a8d87bbae0b25c7f3bc743a8daed1802f2e41101cc751557583a64ec2b5b5ebb007b892d27b0dc3100401f66ec48b80e1e57239d7759bcd26f47898b2b9bbec20
2e3806b2c5696161018f354db3542a799ec754ac52a9649a2606b0b0b0c0b75fb8ef4dd31c1d1db52c0bf290706ddb7598f47c25a8f7c25b85369665f9be8fcf60f06800ab12fb95cb89c5f3bc4c26c38e439665653219fc23175c383a369bcd5aad86f62c17a4d56ae1df6bb51a6bc60b178664591602ddd8bf10aeedb90e
7b806b8d833a77012849522a95b26d1b76bf743a9d4aa5e078807b4d5114c6e6b9783e5aad96a669c0a3695aabd5e2e8e1c866b3baae67b3d9e1e1e1e5e5e555a136b22c234b9335e3e60c9024d8cf25498a27a310aeedb90e7b802bc193335e13f692a2289aa6214c1ac77a78261028c3929eb9501004e572d9b66db046db
b6cbe532c7b7160401924b5dd71d1e1e0e82206edd0982607878d8755d41100a8502c77e9bcda624497866369b350c43d7758e617a838a6babd661d2b892ddbd088166fc4c96651cc03ccf5b5e5ef63ccfb22c70718eaf0ca4ebbaa669b22c23b25cd7758e0f47a41ec274d8ba771c07b61066de40ed1144057121965c8d0c
cd42a1502e973986a90e2aaead5a8749e34a76f7866188b33e830191a828caf0f0b0a2288aa220b91fea01af7e655946143b3c460867e7c8f3b070354d5314c5719c6c360b1e017e811450f078d69863e001ce81a669c2fb0f930ce1da86eb30695cc9ee5e303c4490c28c092d1490969696c0eac230acd7eb1cf528d3343d
cf2b140a989842a1e0791eeca5bc9428046ff9beafaaeaf2f2b2288ab55aad56aba13491aaaaac01478b3752bbb026868686f099635adca0e2daaa75d8035cc9da9c9985edca952b682c4912acf63060b2968661f0f592c75d7949c45a215c01113caeeb8e8d8d8d8d8dc168892f3bc7336c0e97aeeb511441552b140a57af
5e255cdb791df660be928ab5c28b880739c1588f6f980bc775ddce012eddbe35fc290802d7755dd78d8f99d75b03ff66c3d6751d7d61b6d89fd08c172e16a2185f6d9d9d1c846b0bd7610fe62bd9582bc33060c66c369bd96c365e5313c6c0542ab5115341b7312ecd6693293977fffa3e71217a0623c164c48f43ad560b75
0f59127987c0f44dc4eeb02c6b1425ed9cff49b8b6761d268d6b8d11f28d94e4429b786bdd1a360817e11a005c7497021151bf12ed5e2222dabd444444b47b89888868f71211d1ee252222a2dd4b444494f8ee457c19aad4b22f3bc48ea001f27b90d5210802ab8889828fc29d2072a17d4823daa35349921036d0b95f9453
435fb8fca1c3f3994b0d8ffdbfb720499dc7b3661d0696cc84e7b0f878c2b50371754b6c5418036e57ebda89dda1035454300c0331df9d471307661886e779beefb75a2ddff7593469bd5ebfbb32d8dd25c5f6efdf5fabd5d006b3dba1dfb9b9391629c946d221a2cdf77dcff3d0a056abeddfbf9f8daa73e8ecaa67deb871
230e1ce1789d4ba511ae01c6d52dc56339755d4742f246a2ca3714e71c0401bb7a1bacc2719c46a3d1a17d1886ad560bf993774781626428a8bb6e25cef86e5fb728693cd6bc73dc390b256d369b0cd7ba955fee0e9c66bfb217b26e3030e11a785c9b20c45aa3bad326febdada4c6ad9fbaaeb3ecb04c26c3ae305fe3082e
49888cd5340d69169665599675fbf66d4110cae532224b1171b69170b3288a8ac52292c53be497a20a2c1a188681285394c66e374e860edf2024b5f360ee1ef0e2e2223213710ccbe5728d466383871dc23578b83641966561a740f00641d06d6189b671ced037d8eda9b22cd76ab542a1d0ae3d8ed628e783a30e8bcf467d
86743a8dca35a861dfeec603cff350da3f0882e5e565765d70bbf6e8717676368aa23d7bf6b01b86dbb59f9f9f9f9c9c14ee5c0cc78a30b46b1fafee09750b635355955da98ef584f3583bc644b8061b57b7e4791e2a1f044150ad561f78e0819595956e1f92eac0f36cdbc6d6add56ab95ceed0a143d3d3d3edca564892b4
aac657a552a9d56af16f50630545abdbbd35269c711f0cca8badba486e95754d10849191917abdee795eb158c45d32ed9e3f3232122f718a2bad84f6373bc657033eaf2af2542c1671fc1b1e1e5e5959696778205c838dab5b824887b02d168bb22ccfcdcd8d8f8f73b35a55ab55d334515f53d775cff382f6c44a6fc6cff4
cf3efbece4e4e4f5ebd7a1723063151271d72474c72e8389eb3f6b12b340dcba750b13032b48bbf6b88d2a9ef9d9f9f9ec51e03ba8246adbf6c4c4c4d2d2521445333333f81eda3ee1da99b8ba25ec8555977e6c441b8f93fcfcf3cfafb9ab1dc729168b8aa2a452291c3c6459666273cd1b2571b53976a624499aa6fdfef7
bfc7730e1c38502e97655986d6b1ee258ee070b8970805723b5cff890352a954ba76edda5ffffad74f7ffad3b81660cdf6b81f80dd2ace5c0bed70adbab591753a333373fefcf9c3870fefdab50b25a0902e8b9740b8761aae6e495114941c626620961bcc47f67645712b1f58ace7795ffad2979e7ffef952a9845f71132c
e3c1bc8889f49999194dd32ccb02bb65ac1abc73dd5a0a5dd1d2d292aaaa60e7b66ddfcda409d74ec3d57b6a2b7b37414c75013b09c3f0cf7ffef3a38f3eda6c36e7e6e61e7ffc714992eaf53a4aec72acc709e5c4f7fd7c3eef38cea953a73ef399cfa45229dff771370aaa43c0e4c62bbb5a5114d3345f79e59513274e80
95767bf139e11a305c5b4049cbde53a74ebdf9e69b2323238ee330e6ca51f6b27019f800af5fbfbe67cf9ed9d959d6057409f8e839c6ca445174edda35d854d045e78b0b09d760e31a4cd95ba9549e79e699575e79a5d1683cfef8e3c29de2e91c3b85f68270b3a1a1a1dbb76fbffefaeb4f3ffd34d41b8c071fa09c73e937
0cc3e1e1e1cb972f4f4d4d7dea539ff23c4f92248e75a409577fe11a4cd9fbab5ffdcaf7fdab57afeedab58b85adf0d57bebf57adc1a79f9f2e591919146a381a2d860f360f91c793994b7b9b9b9b1b1b19999992008d60d00225c838dabf794788e91a66986611c3870e0231ff9c80f7ff8433890f9c6acc07087b090288a
eebbefbe2f7ef18bdff9ce775865c96c368b1e392adbc0b57bf7eecf7ffef3dffdee7771ed320ba3275c3b10d700cade175e7801f6c3a9a9a903070e1886c1d7d01777061a86015b62ad561b1d1dbd79f366dc74d9ad336d2332c4f3bc95959589890994dee6d805e1ea2f5c83a9f78e8f8f1f39724455d5a1a1a1bffce52f
baae1f3d7a141725f2d267e03fb42c2b9fcf23d34ad3b4f9f9f973e7ce3dfdf4d39aa6359b4df07b38f7b8f48b185249925455bd7efdfad4d4d4b163c73a143d265c838d6b606dce2cb1e3f5d75f7ff0c107996e1377ee71b74593df92706d075cfd2d7b4ba5d2934f3e290882ebbaf7dc73cfe9d3a7e7e7e79f7cf249a834
baae23bea45eafabaaba990465f25b12ae6d8cabbf65efaf7ffdeb38e7fbfbdfffbe7fff7ecbb256e558b32b88c86f49b8060c571fcbde0f7ef083070f1e445e58bd5e7fe081075e7bedb58585858f7ffce3f0ef611ca9548a6f0016f92d09d776c0d5f7fede7801a146a33135353536360669cc149b8ddcfd477e4bc2d577
b8fadbdf8b0468e6e06db55a8f3cf2c8873ffce11ffde8479aa689a2881207b66d839590df92700d12aefe96bd274f9e64cc0c6f2d0cc38b172feedebd1bb668dc771a0401f7840ff25b12aeed80ab8ff5debd7bf71e3e7c18fb3393c9789e27cbf2e8e8e8f9f3e7a7a7a79f78e2896c366b1886aaaad08d7911f92d09d776
c03508b156f1bfe233c42fea1ba05a1f773f1bf92d09d776c0d5c7b277dfbe7d8f3efaa8f0ffcbfc89a2383434f4f6db6fdfbe7dfbe8d1a3aaaadab65d28145aad1647094c7e4bc2b51d700da0ec8da2686a6a6af7eeddcd6673157325bf25e1a2bcdf6d2d7b9bcde6debd7bcf9c3953abd5108cd5683498f58ffc96848bf2
7eb7afec8582f1ce3bef80ed25916c497e4bc2b51d70f5b1bfb783f3add1683cf4d043478f1efdfef7bf8feaf81cfdbde4b7245cdb04d760eabdb036ffe73fff191919f9ef7fffcb97e791df92706d075c83a9f70a772e9ba8542a7ffbdbdf6edcb871e2c4098eb644f25b12aeed806b60652fcb2bba70e182a228cd66b3d9
6ce2960a706228391dae0b25bf25e1ea535cfd2d7b712f2b2e282c97cb376edc387dfaf417bef085743a8d7b2232998c2449a669e67239446891df927051deefb690bdb89b3bba5365f2ecd9b3c562717e7ede755df03c982e207e3bdc714e7e4bc2d5a7b8fa58f6c2abe6791e18eae4e4e4a54b97fef18f7f9c387142d7f5
6c368b3d8c1b1f717f0cf92d0917e5fd6e239b33b6287ebef1c61b9aa6398e53ad56f10d2b88c5b1ec06f92d09d776c0d5dffede300cc1f3d89da88f3df6d8534f3df5ed6f7fbb52a9e0a6b242a180d7caabd815f92d09d736c1d5f7b217fc8c25fd465174f1e2c55c2e07ff1e046f1886e4b7245c94f7bbed6ccef0dae192
725c0eba67cf9eb7de7aebd2a54bc78f1fcf6432503cd875e9e4b7245c94f7bb8df4debbe9edb7dfd6346d7676d6f33ca819abaa4f92df927051deefd6c75aad49434343fffad7bfa6a6a64e9c38016b732693715d97af9991fc96846bcb710da0ec8da2e8cd37dfcc66b37373736078d19d8424f25b122ecafbddd6b2b7d5
6aeddbb7efd5575f9d9e9e3e7efc7810049ee771e479e4b7245cdb01d760ca5e70b8b367cf8e8f8f5fbf7e9d638567f25b12ae6d85ab8ffdbded485555d3341f7becb18f7ef4a33ff9c94f20a5e9be5fc22550de6f5fe8bd9ee7054170fefcf9bd7bf75ebe7c19911be4b7245c94f7bbddf5de200810d53c3131f1f2cb2fd7
6ab5a79e7a2aa2bc5fc24579bf7d217b29ef9770ed585cfd2d7b29ef97fcb13b19577fcb5ecafb257fec0ec7d5c7b297f27ec91fbb9371f5bdde1b51de2ff963772aaefef6f752de2ff9637732ae41f0f74694f74bb8762aaefeb63953de2ff963772cae41d07bef26cafb255c3b04571fcbde764479bf846b87e01a40d91b
51de2fe1da01b80653f652de2fe1da09b80653f652de2fe1da21b8fad8dfdb8e28ef9770ed105c83a9f752de2fe11a785c83a9f752de2fe1da09b8b646f6c6fd6f48e58ba2e8d9679ffdf9cf7f0e79cbecc39b5642d8e583e7ce9dd3346d7171912936f1c77234444751343d3d5d2e971716169879933bafc509c2f7fde9e9
e962b1e8388eaeeb848b70f54ef6fabe9fc9647cdf9724097e30c771ce9c3973efbdf71e3a74280c4378c652a9d4e60c74b66d437b9124696262e2adb7deba70e1c233cf3c1386a1ebba78ace77968b039f1be26954aa56bd7ae9d3d7bf691471ea9542a4b4b4bb95c0ee9c75cc8f33c44744b925428144cd3fce31ffff8b9
cf7d8e7011aedec95eb09c20089842d26834befad5af9e3a75ca755d8862e619db345b420e431445a74f9f1e1919818613373cf2cdf8458fd56ab552a9acacac3046ce51df66638699f4f2e5cbc3c3c3d3d3d3848b70f54ef642a28aa288402841103299ccef7ef7bb7dfbf67de8431f82d8c4f7ac71b7649a260a6b088270
fffdf7bff3ce3b172e5cf8e4273f89879ba6994ea7c330844581191edf27adacac542a959b376fbef6da6bc78f1f5f5e5e2e954a7c192a7836387aa55259585878e38d373ef1894f102ec2d523d9ebfb3e8bf6646cef6b5ffbda4b2fbd84cfd56a151c6bd37a2f13ddb55a2d8aa273e7ce653219b0bd6ab57ae6cc9984ac7f
beefdfbe7d7b6c6cacd168789ee738ce9ffef4278ecf67b82ccbf27dffca952b939393848b70ad4b223c66bcc8711ccff3befef5af5fbb762d9bcdbefaeaab2323230f3ffc701886478f1efddef7beb769eb1c6c8c41104074237ae6f8f1e3478f1e1545f1a5975ed275fdca952b6075cd669317cf83c05714e52b5ff98aa6
69478e1cf9e94f7fea79ded5ab57f99a4fe3c37eeeb9e776edda45b808578f642f34db300c0dc3f8e637bf899373b95c56555514c55c2ef79bdffc064663c77136911eb42a99a35eaf2f2e2efef8c73f1604616464249d4edf73cf3daeeb2617f8f2831ffc209fcf2336f3d0a1431c0585effbcc071e86e17befbdf78b5ffc
827011ae7589a7c78815ac595c5ccce7f3711e71e4c89155cea4cd59eaf1d60cc3f8ed6f7ffbf0c30f430e439d3e78f020dbde7c8df52fbcf0c2debd7b99dd5255d5c9c949ee3301a7da2f7ff9cbc3870f132ec2b511923a7880d85104e16661187648a7881bc7474747bffce52fc703337ef6b39fb55a2d98d15555ed106e
c56233f013c677f6a5e338301b5cbc7811672158b98bc5a2655988898377aac3f34dd3645de09bce06c6f3e7cfcfcdcd316b9cebba1d9ebf095c9ee7d9b62d8aa2699aefbdf7debbefbe4bb8b61c17821f590864ad5663bf72c115dd89f1c45edb64cc6f6759c71cd3eb86373273396ce5fffce73f474747615b3e71e2c4ad
5bb7e29eeeae0ec98b8b8b90b7ab6c06274f9e1c1f1f67a5adeebffffe8d4bf55561741dfe11ddbdf8e28bc3c3c360e492248d8f8f6f825312aefec285900fd6171636475caeebc6b795e338dddabad66163b01eb3cb0d80674d6293c786fedc73cf01cfcb2fbf7cb7bdae1d3185c1711cb6d5f1e2d89f5aad16ce2d972e5d
3a7cf830e6e9c08103e02096657538b130959b1546d8e0d2b972e5cab163c7b020703aea8a08577fe1c2beb26d1b2b16c380bb840b2e447d801f6dba4a8cb0ae128be16e24b580e9a5284675f3e6cd5c2e77ecd831387856b5e94ce0df786bcd6613ffc51844dce7e479de673ffb594dd3f6ecd9c35863e72e1cc7891b15d8
b9a01d28d6e3cacaca37bef10d64936eee7513ae3ec2c51c9fec03a4252f5cf14d8beb7eba8df110d695a518876118baae43b15993c0a8d8e9029bff5bdffad61ffef0076c6676c4629721ac494110a0591004a81e8477c458003b5db8ae5babd5d0f8e4c993f7dd775f5cbcb77b3edcceab82ae3be00a6284897cf1c5178f
1f3fee754984abbf70314d909d1621d279e10ac3300cc3558a64b706ddf56dce18c4430f3d54a954605b5b9324494291c76c362b08c2d0d010b35ac178001b60b15844d055bbe7c0becfac5ff1b4a452a98447b198ad898909fca95028c4d33e154569f7fc72b98c66cc97d001148b09134551d3344dd398654eee920857df
e162ff383e3ece86ca0b17db0b8220e4f3f9c9c94926e139ec5ec672101d552a956667679929eb6e42fbb872c24e53d19d58531ca850fbafdd73608b83c0bf79f3267b1ace02beefc70f5190f0ad560b7f65ac8b75b726c54f2c302176c0c50e36f1b8d90eed09d760e0f27d1fe5eca042b34dc10b57140bc0f63caf502830
7b1837d9cb4ef6b04ec795e176ba78fcb212d775f1ead93964dd3049c3308ac5e22afb163eb3c33c0bb78c1fdb30498ee3ac5b01148716f097d1d1d1ce96f0f880df4f391ec2d55fb8d89ac72e65ea212f5c0c02362dfaea7603778a946409d0a2288aa288d7b189cb474cd344f086effb386c748e2043663fca8ea126fb46
32ad0cc340c6563e9f671dbd7f5c6ca8ec990c4ea2b8a23b8507e2cda28ed508fa62be061557d2eb704d4abcae5518867865e05ef077730cfe6c369bf880b307fae278bf1186eaba2ec60f2d05d220515c58252b2b2b98da959595c493457b325f838a2be975b835bbd7300cfc541405560416c5c56b7721f454d775d80c1a
8d06dfb7e6fb3eac208aa2303849e302a728140a7039025a3c92a94fe76b5071f5601daec10a7b7072c6069024299e24d4993d77756259352acff36003e7858b8d1922377e164a1497655930e0aff96bffced7a0e24a7a1d6e81ec45610d643357ab5598cb39b2bd66b3c90057ab55cff3144541ac292fc18b3157ab556c5d
d8cc93c6c57c6c8ee320ba9b6379972d9caf41c595f43adc9add8b3a03708e8d8c8cc04401cec7512ff53c6f6969696464047dadca707a3fc49c2223232390ba6118a6d3e9a471a186a6effbaaaaaaaa0af6cff1f95b355f838a2be975b835bbb7d168c0f8865f755d174591efad4dad564b51944aa582bb51a0e1f0a24c26
238aa2aeeb4c14e7f3f946a391342e59966ddb4ea552baaeebba9e4aa56cdbeec18d1b846b7baec3add9bd9393938d4623954ac13201b5018951bc08e7134992c05f0b8502c73b1630540c1b49678d4663727232695ca84e1c86e1e8e8e8e8e86818869aa6f5404611aeedb90e93b55ae1a08f9f9824dc10813a7530f9e07f
a3f54aa8776b2dc0614cd33404097476b26dce6a05e1804cc952a9848cd37c3e5fafd725494277eb5e75b509ff218617ffc00bd716ced7a0e24a7a1d26287bd95531aeeb9aa629cbf2bffffdef886bd1ac76c715989450d0a85eafa75229ec2e2e8429474990542a95cd664dd3846fc034cd6c360b3b16b62e5fcf87288a2c
22270802be4ed1ad9aaf41c595f43a5c93521c4f44ecdde1fa8983070ff6602964329966b3890c0ac463f3b51600912ccbe9749aed522663b1abd3e934bee178db95ebbaaaaa3a8e036f8a6ddbaaaabaaecbcb42bb55f335a8b8925e87c9ca5e2c5f5649043ac0ad5bb77af0e2e0285f5858c01898858997ec651fb2d96cb9
5c9e9d9dc537b3b3b3e572399bcdc6db70b491628923aa219bcd3a8ec3d1b9b255f335a8b8925e87c9eabd8cf321349ccd87244989ea1bcd66339bcde2afb064e6f3798e71b3ccad1f6fcf86c47ec56950e81800d0152edff715450982000343ed6f56aba97fe76b507125bd0e9395bde076b22c23a7511084f9f9f9de303c
643261ce305b1c6520f3e9a30a197befcc9c689a266608711d1cfb85fd8399be354de3f8fcad9aaf41c595f43a4c56efc57011128cd55c2e9793b69833952393c9445184db9691b4c5ebe15114653219c7714451646a4ca3d110ee5420c8e7f3c80e535535e27723a9288ab66db330fa5c2e873a86fd3e5f838a2be97598ec
eec5fd607877f88cd59cf42b43ee253c6c8ee370bf4915d9aa30b12c2f2f6362b06fc330cc66b3cbcbcb28476659164acff3ed7d838969fd325f838a2be97598ecc9b9d56aa5d36976f721b81d1c03b22c1b8681033d77bf3cd36d580eb7102b46cde1054952369b45dcccf0f070ad568bcb8d5aad86ad6b1846369be59853
827a06528ce042ecf7f91a545c49afc364776f5c99595c5c4ca7d34b4b4b9aa6e57239d4fb610a495c81e4b2bb1616167040c2306edfbeddd94bdeed6ac3633143aaaa22c80ee1938cafa301c7d94aa552a81f8478e0200870755dbfcfd7a0e24a7a1d266b736e341ac562916560b16017f021d80f969797f3f93ceee6e665
eb43118320089acd264ab488a2d86ab53a84b06ec2e68c3cf24aa5829aa03817398e83b0b85aad869aa37c6dce4888c11d14b8fa9463ad86ad9aaf41c595f43a4c56f6a2405eabd542f7a860605956b3d9946519b6b84c2683427b98398e36c656ab8501809bf28daa877ba352a980972b8a82582b4551d2e9f4e2e262a552
41ca2847db692a95c2310fb5112549320c83232fdfaaf91a545c49afc364772fcc36d009e7e6e6700ba32ccb8542616565a5542ab9ae0bab3a5f54503ba1e7789e07b330c7bc4a64c040ef1d1b1babd56ab86f0a456d6bb5dad8d818f45e64cf707c9fab7801f7449c2d99af41c595f43a4cf6e48c6037247fe140028b0e0c
71ac7e0202b853a95487f09aae4e2cb55a4defc629a6000002f549444154d334c4ee689ae6791eab20cdebc402a1ca442bca8e0b82c02e6a5ad5800baef8792cfe8117aead9aaf41c5d5837598f8eec57b715db75028b096baae97cbe56ab59a4ea759056a5eab1cc38b6b354cd5e1f8d66ab55aa55289af09102ae06a9a86
067c71c1360b29015704f361f6f57c0d2aae1eacc3a4762fac38886d6046792691e2668975bd61ddf272d60cb6a5a1a1a1ce1cbd2b5c60a5506970d0623a551886ec1b7c608ddf3f2e24dfc447155f19fd3b5f838a2be97598f8eee5769adf541ddd8d13e1225c83812bf157404444d4073667222222dabd444444b47b8988
68f7121111d1ee252222a2dd4b44b4b3a96d24172245eaf5baa6692c7845d3b49e150df57d1fb9638871e3d5eff2f232aadd0b772a0fc6bd79848b70f506177b8e288aecb64156ee6ba3c36b371a245e2272c8b6edddbb776b9ab6b0b090f455ab088849a7d38826b76d1b09d6bcfacde7f3aeeb22b9042e72e470132ec2d5
4b5cc815c73d6cc3c3c3aaaadebc79b3db8ac29d62ad10ed85c0eeceb78c73244878c330704146269359b7267d57649a26ee10635c9c633161c245b83648f19c1696d2601806eefe7dbfbb371e63cd227b85e4af039765f9d6ad5b7bf7eec518d01de254793d3f8e6e666666cf9e3d4202a5520817e1eafcfc46a35128141c
c7c1097713d5b0d6d9bdabf81c5ff6d3992741e6a354027ef2ea825dc0619a66a954ea5c00817011ae2470b19dc54eb5b84ba5abfdd5e9e48ce75a96a5288aa228b8b627696b41abd5427d7d149d89bf4d2ecf0fc3909d297050019f4a9a97132ec2b56a738111a0123dbba4b23bd5376a4fc8606695699178d5035a5a5a42
1140c330a2285a5959e1fb7cdff717171751dc50d7f5288aeaf53ae1225c3dc68522b20c23fbbc715ae7fe45568b00e4384ed28716511471a8606999c29d8b48b83c1f767ff61916c5b8059f7011ae1ee08aa2a8d16894cb65e40043e9edb69abfd8b302dc4444447c8962ad888868f7121111d1ee252222a2dd4b4444bb97
888888762f111111ed5e2222dabd444444fd49ff03b5df4cc5fc4e36d50000000049454e44ae426082}
\par
}{\qj\sb50 \li600\fi-300 \bullet\tab Operands to binary operations {\i MUST} be the same, and return the type of the operand {\i EXCEPT} the relationals ({\b0\i0\scaps0\f23 ">="}, {\b0\i0\scaps0\f23 "<"}, etc.), which return a BIT value. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- Use of relationals as BIT type selector:
\par   const myclk = 1 * ( SPI_clock == (target_clock / 4)  ) +
\par                 2 * ( SPI_clock == (target_clock / 16) ) +
\par                 3 * ( SPI_clock == (target_clock / 64) )
\par    -- myclk being assigned 1, 2, 3, or 0.
\par \par
}{\qj\sb50 \li600\fi-300 \bullet\tab An exception to the above rule is the universal type : when used in an expression, the universal type will be converted to type of the other operand. \par
}{\b \qj\sb72 \fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var byte a = 1 << n
\par    if ( a > b ) | ( c < d ) | ( x != y ) then 
\par       x = ( x & 0b_1100_0011 ) | 0b_0001_0100
\par    end if
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Priority}7.2{\*\bkmkend BMsub_Priority}  Priority\par
}\qj\sb60 \fi0 Braces can be used to force the association, otherwise the operator\rquote s associate with their arguments according to operator\rquote s priority. \par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var byte x = ! a + b  -- ( ! a ) + b
\par    var y = ! ( a + b )   -- not the same as previous
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Statements}8{\*\bkmkend BMsub_Statements}  Statements\par
}\qj\sb60 \fi0 A statement is any variable, constant, function, or procedure definition, assignment, control (IF) or looping (FOR, FOREVER, WHILE).\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.1  Declaration\par
}\qj\sb60 \fi0 Declarations are considered statements, so declarations can appear anywhere in a program where a statement is allowed. \par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    a = 5
\par    -- need a few locals here? no problem!
\par    var byte x = 1, y = 0
\par    while x < a loop 
\par       y = y + x
\par       x = x + 1
\par    end loop
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.2  Assignment\par
}\qj\sb60 \fi0 An assignment statement evaluates the expression and assigns its value to the variable or formal parameter indicated by the name on the left of the assignment.\par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var byte a
\par    procedure p( byte out q ) is 
\par       q = 5 -- assign to the (out) parameter q
\par       a = 4 -- assign to the global variable a
\par    end procedure 
\par    a = 5 -- assign to the (now local) variable a
\par    
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.3  IF\par
}\qj\sb60 \fi0 An {\i IF} statement evaluates an expression. If the result is true the list of statements following the {\i THEN} token is executed.\par
\qj\fi360 Before the {\i ELSE} token any number of {\i ELSIF} tokens can appear. When the {\i IF} condition is false, the first {\i ELSIF} condition is evaluated. If it is true the corresponding statements are executed, otherwise execution continues with the next {\i ELSIF} part.\par
\qj\fi360 When none of the {\i IF} and {\i ELSIF} conditions evaluate to true the statements in the optional {\i ELSE} part are executed. \par
\qj\fi360 The IF statement serves two purposes:\par
\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 8.3.0.1  Conditional execution\par
} {\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23    IF expr THEN 
\par       block 
\par    [ ELSIF expr THEN block ... ] 
\par    [ ELSE block ] 
\par    END IF
\par \par
}{\qj\sb60 \li512\ri512\fi360 Note: any number of ELSIF conditions may be present. \par
}{\b \qj\sb60 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    IF myvar = 13 THEN
\par       -- Case of myvar = 13 ... 
\par    ELSIF myvar = 10 THEN
\par       -- Case of myvar = 10 ... 
\par    ELSE
\par       -- Any other values of myvar
\par    END IF
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 8.3.0.2  Conditional compilation\par
} {\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23    IF cexpr THEN
\par       block 
\par    [ ELSIF cexpr THEN block ...] 
\par    [ ELSE block ] 
\par    END IF
\par \par
}\qj\fi360 In this case, a new scope is {\i NOT} opened. If {\i cexpr}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}{\i cexpr} means a constant expression or a literal value.}
  is 0, the associated statements are skipped without further processing, so it can be used to create a block comment.\par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    IF target_chip = 16f877 THEN
\par       -- Execution part if PIC16F877 
\par    ELSIF target_chip = 16f876 THEN
\par       -- Execution part if PIC16F876 
\par    ELSE
\par       -- Execution part other chips 
\par    END IF
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.4  WHILE\par
}\qj\sb60 \fi0 The WHILE statement allows conditional looping.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    WHILE expr LOOP
\par       block 
\par    END LOOP
\par \par
}\qj\fi360 A while statement evaluates the expression ({\i expr}). If the result is false, the while statement has completed its execution. Otherwise the statements are executed, after which the expression is evaluated again etc. The {\i block} statements will be executed as long as {\i expr} is non-0\par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    while r > y loop
\par       d = d + 1
\par       r = r - y
\par    end loop
\par 
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.5  FOR\par
}\qj\sb60 \fi0 The FOR statement allows looping a given number of times.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23  
\par    FOR expr [ USING variable ] LOOP 
\par       block 
\par    END LOOP
\par \par
}{}\qj\fi0 If the {\i USING variable} clause does not exist, the variable {\i _temp} is used instead of. If {\i _temp} is needed, its type will be the same type as {\i expr}.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.6  FOREVER\par
}\qj\sb60 \fi0 The {\i FOREVER} statement simply creates a loop that will never end.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    FOREVER LOOP 
\par       block 
\par    END LOOP
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_COUNT}8.7{\*\bkmkend BMsub_COUNT}  COUNT\par
}\qj\sb60 \fi0 The COUNT statement returns the number of elements of an {\i array}, can be used anywhere a constant is expected:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- using constant tables
\par    const byte x[] = "hello"
\par    var byte y
\par    var volatile byte z
\par 
\par    for count(x) using y loop
\par       z = x[y]
\par    end loop
\par 
\par    -- using variable tables
\par    var byte m[] = "hello"
\par    var byte n
\par    var volatile byte p
\par 
\par    for count(m) using n loop
\par       p = m[n]
\par    end loop
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 8.8  _usec_delay\par
}\qj\sb60 \fi0 The _USEC_DELAY creates an inline delay. \par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23   _usec_delay(cexpr)
\par \par
}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}{\i \qj\fi0 cexpr} means a constant expression or a literal value.}
 \par
\qj\fi360 For clock speeds 4MHz and higher, the delay is exact assuming interrupts are not enabled. A previous {\b0\i0\scaps0\f23 pragma target clock ... } {\i pragma statement} is required, or the error {\i target_clock not found} will be generated. The longest delay available is about 35 minutes, but this requires 5K code at 20MHz.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    _usec_delay(1000)  -- 1 msec delay with a 4MHz Xtal.
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Procedures_and_functions}9{\*\bkmkend BMsub_Procedures_and_functions}  Procedures and functions\par
}\qj\sb60 \fi0 A procedure is a named block of statements that may take parameters.\par
\qj\fi360 A function is like a procedure, the difference is it will return a single value which can be used in an expression.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    PROCEDURE identifier 
\par          [ '(' [[VOLATILE] \{IN | OUT | IN OUT \} param
\par                [, ...]] ')' ] 
\par          IS [ BEGIN ]
\par    
\par       block
\par    
\par    END PROCEDURE
\par    
\par    
\par    FUNCTION identifier
\par          [ '(' [[VOLATILE] \{IN | OUT | IN OUT \} param 
\par                [, ...]] ')' ] 
\par          RETURN type IS [ BEGIN ]
\par 
\par       block
\par       RETURN expr
\par 
\par    END FUNCTION
\par \par
}{\qj\sb60 \li512\ri512\fi360 Note : The identifier used to denote a {\i PROCEDURE} or {\i FUNCTION} belongs to the outer block, whereas all parameter names will belong to a newly created block Using of {\i {[}BEGIN{]}} is optional. \par
}{\qj\sb50 \li300\fi-300 {\b PROCEDURE} denotes the beginning of a procedure definition. \par
}{\qj\sb50 \li300\fi-300 {\b FUNCTION} denotes the beginning of a function definition. \par
}{\qj\sb50 \li300\fi-300 {\b identifier} Any legal {\i JAL 2.0} identifier. \par
}{\qj\sb50 \li300\fi-300 {\b VOLATILE} A volatile parameter must be passed in as a {\i pseudo-variable}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Pseudo_variables \\* MERGEFORMAT }}{\fldrslt{1.9.1}}}\~{sub:Pseudo-variables}}
 . If the parameter passed in is regular variable, an appropriate p{\i seudo-variable} will be created. \par
}{\qj\sb50 \li300\fi-300 {\b IN} On entry, this parameter\rquote s value is set by the caller to an expression. If this parameters is not VOLATILE, it can be used or modified like any other variable, but changes will not be passed back to the caller. If this parameter is VOLATILE, its value cannot be written. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23   procedure ex_in( byte in x ) is
\par       x = x + 1
\par    end procedure
\par    
\par    -- running the procedure:
\par    ex_in (0x0A) 
\par    -- will compute inside the block x = 0x0B, 
\par    -- there is no access outside the block to the x value
\par    
\par \par
}{\qj\sb50 \li300\fi-300 {\b OUT} On entry, this parameter\rquote s value is not defined. The caller {\i MUST} pass a variable (not a constant or expression). If this parameter is not VOLATILE, it can be used or modified like any other variable. If the parameters is VOLATILE, its value cannot be read. On exit, the caller\rquote s variable will be set to whatever value this has. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23   procedure ex_out( byte out x ) is
\par       x = 0x0A 
\par    end procedure
\par    
\par    -- running the procedure:
\par    var byte a = 0
\par    ex_out(a) 
\par    -- by using the procedure, a = 0x0A
\par    
\par \par
}{\qj\sb50 \li300\fi-300 {\b IN\~OUT} This combines properties of IN and OUT. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    procedure ex2_in_out( byte in out x ) is
\par       x = x + 1
\par    end procedure
\par    
\par    -- before running the procedure:
\par    var byte mydata = 0x0A 
\par    
\par    -- after running the procedure:
\par    ex2_in_out (mydata)
\par    -- mydata will be 0x0B
\par    
\par \par
}{\qj\sb50 \li300\fi-300 {\b param} This is defined {\i exactly} like a variable definition above, except the {\i VAR} keyword is not expected and it cannot be assigned a value. \par
}{\qj\sb50 \li300\fi-300 {\b RETURN\~type} For functions, this defines the type returned to the caller. type can be any standard type, including the width specifier. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    function compute_AD_result 
\par                       (byte in AD_hi, 
\par                        byte in AD_lo) return word is
\par    
\par       AD_result = AD_lo + 256*AD_hi 
\par       return AD_result
\par    end function
\par    
\par    compute_AD_result ( 0b_0000_0011, 0b_1111_1111 )
\par    -- will return the value AD_result = 1023
\par    
\par \par
}{\qj\sb50 \li300\fi-300 {\b RETURN\~expr} In a function, the {\i RETURN expr} statement is used to set the value returned. If no {\i RETURN expr} is used in a function, the return value will be undefined. \par
}{\qj\sb50 \li300\fi-300 {\b IS\~{[}BEGIN{]}} Starts the statement block. \par
}{\qj\sb50 \li300\fi-300 {\b block} Any group of statements. \par
}{\qj\sb50 \li300\fi-300 {\b END\~\{PROCEDURE\~\emdash \~FUNCTION\}} Terminates the statement block. \par
}{\qj\sb60 \li512\ri512\fi360 Note: PROCEDUREs and FUNCTIONs can be nested. \par
}{}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Pseudo_variables}9.1{\*\bkmkend BMsub_Pseudo_variables}  Pseudo variables\par
}\qj\sb60 \fi0 Pseudo-variables are procedures and/or functions that are references like and act like variables. The accessor of a pseudo variable is a function that takes no parameters.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    FUNCTION a'get RETURN type IS
\par       block
\par    END FUNCTION
\par \par
}{\qj\sb60 \li512\ri512\fi360 Now, any reference to {\i a} will be replaced with a call to {\i a\rquote get.} \par
}\qj\sb60 \fi0 Similarly, to set a pseudo variable, define a procedure that takes one parameter.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    PROCEDURE a'put ( param ) IS
\par       block
\par    END PROCEDURE
\par \par
}{\qj\sb60 \li512\ri512\fi360 Now, any assignment to {\i a} will be replaced with a call to {\i a\rquote put}. \par
}\qj\sb60 \fi0 If an appropriate pseudo-variable is not found, an attempt is made to find the variable itself (eg, when used in an expression, first a search is made on {\i a\rquote get()}, failing that a search is made for the variable {\i a}.\par
\qj\fi360 If more than one of the variable or accessor functions and/or variable are defined, all must be of the same type! \par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    procedure hd44780'put( byte in x ) is ...
\par    
\par    -- using the procedure
\par    hd44780 = "H"
\par    hd44780 = "e"
\par    hd44780 = "l"
\par    hd44780 = "l"
\par    hd44780 = "o"
\par    
\par    procedure async'put( byte in x ) is ...
\par    
\par    -- using the procedure
\par    async = "H"
\par    async = "e" 
\par    async = "l" 
\par    async = "l" 
\par    async = "o"
\par    
\par    function async'get return byte is ..
\par    
\par    -- using the function:
\par    x = async 
\par 
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsec_Tasks}10{\*\bkmkend BMsec_Tasks}  Tasks\par
}\qj\sb60 \fi0 A {\i TASK} is a {\i procedure} that is started and becomes an apparently parallel thread of execution. {\i JAL 2.0} implements {\i co-operative multitasking}, that each {\i Task} uses a special command to hand back program thread to the scheduler, which starts the oldest suspended task from the point it made that command. \par
\qj\fi360 A {\i Task} has the same format as a {\i PROCEDURE}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Procedures_and_functions \\* MERGEFORMAT }}{\fldrslt{1.9}}}\~{sub:Procedures-and-functions}.}
  (it can take any number of parameters), the format is:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    TASK name [ (parameters) ] IS
\par    END TASK
\par \par
}{\i \qj\fi360 Tasks} are started with:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    START name[(parameters)]
\par \par
}\qj\fi360 And suspended with:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    SUSPEND
\par \par
}\qj\fi360 If a {\i Task} reaches the {\b0\i0\scaps0\f23 "END TASK"}, it is killed. \par
\qj\fi360 Limitations:\par
{\qj\sb50 \li600\fi-300 \bullet\tab There is currently no way to determine a particular {\i Task}\rquote s ID, how many {\i Tasks} are running, or if {\i Task} creation fails. \par
\qj\sb50 \li600\fi-300 \bullet\tab There\rquote s also no way to kill a {\i Task} from another {\i Task}. \par
\qj\sb50 \li600\fi-300 \bullet\tab {\i SUSPEND} is only allowed in the {\i Task} itself (not in anything called by the {\i Task}). \par
\qj\sb50 \li600\fi-300 \bullet\tab Each {\i Task} has its own variable storage (just like any other procedure or function). \par
\qj\sb50 \li600\fi-300 \bullet\tab If the main program comes to the end, it still sleeps as before, effectively killing all running {\i Tasks}. \par
\qj\sb50 \li600\fi-300 \bullet\tab If you have two copies of the same {\i Task} running, bad things happen, so don\rquote t do that (actually, nothing really bad happens, they simply behave like a single {\i Task} occupying to slots in the task list). \par
\qj\sb50 \li600\fi-300 \bullet\tab You don\rquote t know the execution order of {\i Tasks}, and you don\rquote t know if a {\i Task} will execute immediately after the START or wait until the first SUSPEND. \par
}{\b \qj\sb72 \fi0 Example}:\par
\qj\fi360 Three {\i Tasks}: \par
{\qj\sb50 \li600\fi-300 \bullet\tab Task1 increments {\i counter1.} \par
\qj\sb50 \li600\fi-300 \bullet\tab Task2 increments {\i counter2} \par
\qj\sb50 \li600\fi-300 \bullet\tab main task simply loops. \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    VAR VOLATILE BYTE counter1
\par    VAR VOLATILE BYTE counter2
\par 
\par    TASK task1(BYTE in aa) is
\par       counter1 = aa
\par       FOREVER LOOP
\par          counter1 = counter1 + 1
\par          SUSPEND
\par       END LOOP
\par    END TASK
\par 
\par    TASK task2(BYTE in aa) is
\par       counter2 = aa
\par       FOREVER LOOP
\par          counter2 = counter2 + 1
\par          SUSPEND
\par       END LOOP
\par    END TASK
\par 
\par 
\par    START task1(10)
\par    START task2(20)
\par    FOREVER LOOP
\par       SUSPEND
\par    END LOOP
\par 
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Inline_assembler}11{\*\bkmkend BMsub_Inline_assembler}  Inline assembler\par
}\qj\sb60 \fi0 There is a full assembler available when needed, it can be accessed using two ways.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 11.1  Single assembler statement \par
}\qj\sb60 \fi0 A simple assembler statement consists of the token {\b0\i0\scaps0\f23 "asm"} followed by a single assembler statement.\par
{\b \qj\fi360 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    asm clrwdt -- single assembler statement 
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 11.2  Assembler block\par
}\qj\sb60 \fi0 A full assembler statement consists of the token {\b0\i0\scaps0\f23 "assembler"}, a sequence of label declarations, labels and assembler statements, and is terminated with the token token {\b0\i0\scaps0\f23 "end assembler"}.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    ASSEMBLER
\par    [LOCAL label[, label2...]]
\par    [label:]
\par       [ \{ BANK | PAGE \} ] asm statement
\par       ...
\par    END ASSEMBLER
\par    
\par \par
}\qj\fi360 Any labels used as the destination of a CALL or GOTO must be defined in the LOCAL clause.\par
\qj\fi360 If the assembler statement accesses a file register and the BANK mnemonic is used, the appropriate statements will be generated to guarantee the correct data bank is accessed{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See PRAGMA KEEP BANK in section {\field{\*\fldinst{\lang1024 REF BMsub_Pragmas \\* MERGEFORMAT }}{\fldrslt{1.12}}}\~{sub:Pragmas}}
 .\par
{\b \qj\fi360 Example}:\par
\qj\fi0 {\b0\i0\scaps0\f23 asm bank clrf myvar ; will set the correct bank of "myvar"}\par
\qj\fi360 If the assembler statement jumps to a label and the PAGE mnemonic is used, the appropriate statements will be generated to guarantee the correct code segment is used{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See PRAGMA KEEP PAGE in section {\field{\*\fldinst{\lang1024 REF BMsub_Pragmas \\* MERGEFORMAT }}{\fldrslt{1.12}}}\~{sub:Pragmas}}
 .\par
{\b \qj\fi360 Example}:\par
\qj\fi0 {\b0\i0\scaps0\f23 asm page goto mylabel ; will set the correct page of "mylabel"}\par
\qj\fi360 The full list of assembly statements defined in the PIC16F877/88 data sheet have been implemented using the syntax found therein. \par
\qj\sb240 \fi360 {} {\par
{\b \qc\fi0 OPCODE field description}\par
{\qc\fi0 \par
\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrt\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {f}\cell
\pard\intbl\ql {Register file address (0x00 to 0x7F)}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {w}\cell
\pard\intbl\ql {Working register (accumulator)}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {b}\cell
\pard\intbl\ql {Bit address within an 8 bit file register}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {k}\cell
\pard\intbl\ql {Literal field}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {d}\cell
\pard\intbl\ql {Destination select:\line d=w: store result in {\i W},\line d=f: store result in {\i f},\line default d=f}\cell
\row
}\par
}\qj\sb240 \fi360 {} {\par
{\b \qc\fi0 Assembler statements set summary}\par
{\qc\fi0 \par
\trowd\clbrdrl\brdrs\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrt\brdrdb\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {{\b Mnemonic}}\cell
\pard\intbl\ql {{\b Description}}\cell
\pard\intbl\qc {{\b Cycles}}\cell
\pard\intbl\qc {{\b Flags affected}}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {{\b Mnemonic}}\cell
\pard\intbl\ql {{\b Description}}\cell
\pard\intbl\qc {{\b Cycles}}\cell
\pard\intbl\qc {{\b Flags affected}}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {...}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b Byte-oriented file register operations}}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {ADDWF f,d}\cell
\pard\intbl\ql {add {\i W} and {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {C,DC,Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {ANDWF f,d}\cell
\pard\intbl\ql {AND {\i W} and {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {CLRF f}\cell
\pard\intbl\ql {Clear {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {CLRW}\cell
\pard\intbl\ql {Clear {\i W}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {COMF f,d}\cell
\pard\intbl\ql {Complement {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {DECF f,d}\cell
\pard\intbl\ql {Decrement {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {DECFSZ f,d}\cell
\pard\intbl\ql {Decrement {\i f}, skip if 0}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {INCF f,d}\cell
\pard\intbl\ql {Increment {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {INCFSZ f,d}\cell
\pard\intbl\ql {Increment {\i f}, skip if 0}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {IORWF f,d}\cell
\pard\intbl\ql {Inclusive OR {\i W} with {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {MOVF f,d}\cell
\pard\intbl\ql {Move {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {MOVWF f}\cell
\pard\intbl\ql {Move {\i W} to {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {NOP}\cell
\pard\intbl\ql {No operation}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {RLF f,d}\cell
\pard\intbl\ql {Rotate left {\i f} through {\i carry}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {C}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {RRF f,d}\cell
\pard\intbl\ql {Rotate right {\i f} through {\i carry}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {C}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SUBWF f,d}\cell
\pard\intbl\ql {Subtract {\i W} from {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {C,DC,Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SWAPF f,d}\cell
\pard\intbl\ql {Swap nibbles in {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {XORWF f,d}\cell
\pard\intbl\ql {Exclusive OR {\i W} with {\i f}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b Bit-oriented file register operations}}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {BCF f,b}\cell
\pard\intbl\ql {Bir clear f}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {BSF f,b}\cell
\pard\intbl\ql {Bit set f}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {BTFSC f,b}\cell
\pard\intbl\ql {Bit test f, skip if clear}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {BTFSS f,b}\cell
\pard\intbl\ql {Bit test f, skip if set}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b Literal and control operations}}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {ADDLW k}\cell
\pard\intbl\ql {Add {\i literal} and {\i W}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {C,DC,Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {ANDLW k}\cell
\pard\intbl\ql {AND {\i literal} with {\i W}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {CALL k}\cell
\pard\intbl\ql {Call subroutine}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {CLRWDT}\cell
\pard\intbl\ql {Clear watchdog timer}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {! TO,! PD}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {GOTO k}\cell
\pard\intbl\ql {Go to address}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {IORLW k}\cell
\pard\intbl\ql {Inclusive OR {\i literal} with {\i W}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {MOVLW k}\cell
\pard\intbl\ql {Move {\i literal} to {\i W}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {RETFIE}\cell
\pard\intbl\ql {Return from interrupt}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {RETLW k}\cell
\pard\intbl\ql {Return with {\i literal} in {\i W}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {RETURN}\cell
\pard\intbl\ql {Return from subroutine}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SLEEP}\cell
\pard\intbl\ql {Go into standby mode}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {! TO,! PD}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SUBLW k}\cell
\pard\intbl\ql {Subtract {\i W} from {\i literal}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {C,DC,Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrb\brdrdb\clbrdrr\brdrs\cellx5850\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {XORLW k}\cell
\pard\intbl\ql {Exclusive OR {\i literal} with {\i W}}\cell
\pard\intbl\qc {}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clmgf\clbrdrl\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx1950\clmrg\clbrdrb\brdrdb\cellx3900\clmrg\clbrdrb\brdrdb\cellx5850\clmrg\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {{\b Macros and extra mnemonics}}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\pard\intbl{}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {OPTION k}\cell
\pard\intbl\ql {Move {\i literal} to {\i OPTION} register}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {TRIS \{5,6,7\}}\cell
\pard\intbl\ql {Move {\i W} to {\i TRIS \{5,6,7\}} register}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {MOVFW f}\cell
\pard\intbl\ql {A synonym for MOVF {\i f}, {\i W}}\cell
\pard\intbl\qc {1}\cell
\pard\intbl\qc {Z}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SKPC}\cell
\pard\intbl\ql {A synonym for BTFSS {\i _status}, {\i _c}}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SKPNC}\cell
\pard\intbl\ql {A synonym for BTFSC {\i _status}, _{\i c}}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SKPZ}\cell
\pard\intbl\ql {A synonym for BTFSS {\i _status}, {\i _z}}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx1950\clbrdrr\brdrs\cellx3900\clbrdrr\brdrs\cellx5850\clbrdrr\brdrs\cellx7800
\pard\intbl\ql {SKPNZ}\cell
\pard\intbl\ql {A synonym for BTFSC {\i _status}, _{\i z}}\cell
\pard\intbl\qc {1(2)}\cell
\pard\intbl\qc {}\cell
\row
}\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 11.3  Scope \par
}\qj\sb60 \fi0 An assembly statement can access any variable in scope. Only the simple types BIT, BYTE, SBYTE and ARRAY are supported. \par
\qj\fi360 If the variable is a table, you must take care of:\par
{\qj\sb50 \li600\fi-300 \bullet\tab The elements of a table can only be accessed using a constant subscript: {\b0\i0\scaps0\f23 movf x[3],w} \par
\qj\sb50 \li600\fi-300 \bullet\tab Constant tables must be treated as {\i literals}: {\b0\i0\scaps0\f23 movlw x[3]} \par
\qj\sb50 \li600\fi-300 \bullet\tab Variable tables must be treated as {\i file registers}: {\b0\i0\scaps0\f23 movf x[3],w} \par
}{}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var byte x[]="hello"
\par    var bit cc = low
\par    var byte a
\par    assembler
\par    local 10:
\par       movf  x[3],w
\par       movwf a
\par       btfss cc
\par       goto  10
\par       incf  a,f
\par     10:
\par       nop
\par    end assembler
\par    
\par \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Pragmas}12{\*\bkmkend BMsub_Pragmas}  Pragmas\par
}\qj\sb60 \fi0 The user pragmas \endash  compiler directives \endash  are those most likely to be used by the average user.\par
{\qj\sb50 \li300\fi-300 {\b PRAGMA\~EEDATA\~cexpr1{[},\~cexpr2...{]}} Defines data to be stored in the EEPROM. This data always begins at the first location in the EEPROM. Each extra {\i expr} (or PRAGMA EEDATA) bumps the next usable location. If the EEPROM over fills, an error is generated{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See PRAGMA EEPROM in section {\field{\*\fldinst{\lang1024 REF BMsub_Chip_Definition_Pragmas \\* MERGEFORMAT }}{\fldrslt{1.12.1}}} \~{sub:Chip-Definition-Pragmas}}
 . \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma eedata "O","K",13,10,25
\par    
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~ERROR} Generates an error. Useful for the conditional compilation with the IF statement. \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~INTERRUPT} This must only be used inside a PROCEDURE whose execution is triggered by the reception of an interrupt. This procedure can take no parameters.\par
\qj\li300\fi0 Using PRAGMA INTERRUPT links this procedure into the interrupt chain. Any number of procedures can exist in the interrupt chain, but the order in which they are executed is not defined.\par
\qj\li300\fi0 No extra stack space is required by an interrupt entry point. Once a procedure has been marked as an interrupt entry point it cannot be directly called by the program. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var word cc, bb
\par    
\par    procedure ISR_TMR0 is 
\par    pragma interrupt       -- This procedure is an 
\par                           -- interrupt service routine
\par       if T0IF then        -- Check if TMR0 int.
\par          T0IF = low
\par          cc = cc + 1
\par       end if
\par    end procedure
\par 
\par    procedure ISR_TMR1 is 
\par    pragma interrupt       -- ... another one
\par 
\par       if TMR1IF then      -- Check if TMR1 int.
\par          TMR1IF = low
\par          bb = bb + 1
\par       end if
\par    end procedure
\par 
\par cc=0
\par bb=0 
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~JUMP_TABLE} This is obsolete and simply issues a warning. It has been replaced by constant arrays. \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~KEEP\~{[}BANK{]}\~\emdash \~{[}PAGE{]}} When using inline assembly, or assembly blocks, this instructs the compiler to not optimize away any bank or page selectors generated. Without this, the compiler will normally not generate the selectors if the selector state is known to be correct. \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~NAME\~name} Generates an error if the name the file being compiled is the same as name (what possible use is this? ). \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~TARGET\~CHIP\~ident} ident must be defined in {\b0\i0\scaps0\f23 chipdef.jal} (see the list of variables beginning with {\b0\i0\scaps0\f23 pic_*}). \par
}{\b \qj\sb72 \fi0 Example}:\par
\qj\fi360 {\b0\i0\scaps0\f23 PRAGMA TARGET CHIP 16f877}\par
{\qj\sb50 \li300\fi-300 {\b PRAGMA\~TARGET\~CPU\~ident} ident must be defined in {\b0\i0\scaps0\f23 chipdef.jal} .\par
\qj\li300\fi0 This is analogous to: {\b0\i0\scaps0\f23 CONST target_cpu = cpu_ident}.\par
{\i \qj\li300\fi0 PRAGMA TARGET CPU} can overwrite the {\i CONST TARGET_CPU} definition. \par
}{\b \qj\sb72 \fi0 Example}:\par
\qj\fi360 {\b0\i0\scaps0\f23 CONST target_chip = pic_14}\par
{\qj\sb50 \li300\fi-300 {\b PRAGMA\~TARGET\~CLOCK\~cexpr} Set the clock speed to cexpr. This is not used internally by the compiler.\par
\qj\li300\fi0 This is analogous to: {\b0\i0\scaps0\f23 CONST target_clock = cexpr}.\par
{\i \qj\li300\fi0 PRAGMA TARGET CLOCK} can overwrite the {\i CONST TARGET_CLOCK} definition. \par
}{\b \qj\sb72 \fi0 Example}:\par
\qj\fi360 {\b0\i0\scaps0\f23 CONST target_clock = 10_000_000}\par
{\qj\sb50 \li300\fi-300 {\b PRAGMA\~TARGET\~FUSES\~cexpr1\~cexpr2} Set the PIC configuration word register \emdash denoted by the index {\i cexpr1}\emdash  with value {\i cexpr}2. The literal {\i cexpr1} must be in the range denoted by the index defined in pragma {\b0\i0\scaps0\f23 CONST WORD _FUSES_BASE}. \par
{\b \qj\li300\fi0 Example}: {\par
\qj\li300\fi-300 \pard\ql\b0\i0\scaps0\f23    PRAGMA TARGET fuses 0 0b_xx_xxxx_xxxx_xxxx
\par    -- will set fuses once according to 
\par    -- first configuration word register
\par \par
}\qj\sb50 \li300\fi-300 {\b CONST\~WORD\~_FUSES\~\rquote {[}\rquote \~cexpr1\~\rquote {]}\rquote \~\rquote =\rquote \~\rquote \{\rquote \~cexpr2\~\rquote ,\rquote \~...\~\rquote \}\rquote } Set the values of a multi-word configuration fuses, {\i cexpr1} denotes the ammount of words. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const word _fuses[2] = \{0x3fff,0x3fff\}
\par 
\par \par
}{\qj\sb50 \li300\fi-300 {\b CONST\~WORD\~_FUSES_BASE\~\rquote {[}\rquote \~cexpr1\~\rquote {]}\rquote \~\rquote =\rquote \~\rquote \{\rquote \~cexpr2\~\rquote ,\rquote \~...\~\rquote \}\rquote } Set the addresses of a multi-word configuration fusess, {\i cexpr1} denotes the ammount of words. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const word _fuse_base[2] = \{0x2007, 0x2008\}
\par 
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~TARGET\~fusedef\~tag} This allows one to set a fuse based on chip mnemonics{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See PRAGMA FUSE_DEF in section {\field{\*\fldinst{\lang1024 REF BMsub_Chip_Definition_Pragmas \\* MERGEFORMAT }}{\fldrslt{1.12.1}}}\~{sub:Chip-Definition-Pragmas}}
 . \par
}\qj\sb72 \fi0 Available pragma target fuses defined are:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    PRAGMA TARGET PROTECTION \{on|off\}
\par    -- ON = flash program memory code protected
\par    -- OFF = flash program memory code unprotected
\par 
\par    PRAGMA TARGET DEBUG \{on|off\}
\par    -- ON = In Circuit Debugger enabled
\par    -- OFF = ICD disabled
\par  
\par    PRAGMA TARGET CDP \{on|off\}
\par    -- ON = data eprom code protected
\par    -- OFF = data eprom code unprotected
\par 
\par    PRAGMA TARGET LVP \{on|off\}
\par    -- ON =  low voltage ICSP enabled
\par    -- OFF = low voltage ICSP disabled
\par  
\par    PRAGMA TARGET BOR \{on|off\}
\par    -- ON =  brown out reset enabled
\par    --       (check PIC voltage greater 
\par    --        than BOR defined level)
\par    -- OFF = brown out reset disabled 
\par    --       (PIC may run at less than 
\par    --        BOR defined level)
\par 
\par    PRAGMA TARGET POWERUP \{on|off\}
\par    -- ON = powerup delay enabled 
\par    --      ( add about 72mS delay after power+ 
\par    --        up until program start)
\par    -- OFF = powerup delay disabled
\par  
\par    PRAGMA TARGET WATCHDOG \{on|off\}
\par    -- ON = watchdog enabled 
\par    --      (watchdog delay period must be 
\par    --       programmed in the postscaler reg.)
\par    -- OFF = watchdog disabled
\par 
\par    PRAGMA TARGET OSC \{lp|xt|hs|rc\}
\par    -- lp = low power oscillator, 
\par    --      use it with 32.768KHz to 200KHz crystal
\par    -- xt = crystal/resonator 1MHz up to 4MHz
\par    -- hs = high speed crystal/resonator 4MHz-20MHz 
\par    -- rc = resistor/capacitor oscillator 
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Chip_Definition_Pragmas}12.1{\*\bkmkend BMsub_Chip_Definition_Pragmas}  Chip Definition Pragmas\par
}\qj\sb60 \fi0 Internally the compiler doesn\rquote t know anything about the various chips. Instead, a chip definition file is used which describes code size, stack depth, eeprom location, general file register locations, etc.\par
\qj\fi360 Since these are only useful for those defining new chips, they\rquote re included here.\par
{\qj\sb50 \li300\fi-300 {\b PRAGMA\~CODE\~cexpr} Defines the maximum code size in words. If the total code generated exceeds this size an error is generated.\par
\qj\li300\fi0 This is analogous to: {\b0\i0\scaps0\f23 CONST _code_size = cexpr}.\par
{\i \qj\li300\fi0 PRAGMA CODE} can overwrite the {\i CONST _CODE_SIZE} definition. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    PRAGMA CODE 8192
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~DATA\~cexpr{[}-cexpr1{]}{[},\~...{]}} This chip definition defines the data area available for variables (also known as the general file register areas). \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma data  0x0020-0x007f, 0x00a0-0x00ff,
\par                 0x120-0x16f, 0x1a0-0x1ef
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~EEPROM\~cexpr1,\~cexpr2} This is a chip definition PRAGMA and sets the start and size of the EEPROM ({\i cexpr1} is the start, {\i cexpr2} is the size). If any {\i PRAGMA EEDATA} statements exist, the assembly file will include: \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    pragma eeprom 0x2100, 256
\par    
\par    ORG 0x2100
\par    DW a, b, c, ...  ; PRAGMA EEDATA values
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~STACK\~cexpr} Defines the maximum stack size in levels. If the total stack use is determined to be greater than this, an error is generated.\par
\qj\li300\fi0 This is analogous to: {\b0\i0\scaps0\f23 CONST _stack_size = cexpr}.\par
{\i \qj\li300\fi0 PRAGMA STACK} can overwrite the {\i CONST _STACK_SIZE} definition. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma stack  8
\par \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA\~FUSE_DEF\~tag\~{[}\rquote :\rquote \~cexpr1\~{]}\~mask\~\rquote \{\rquote \~tag\~\rquote =\rquote \~cexpr2\~...\~\rquote \}\rquote } This defines a fuse mnemonic that can be used to set and clear bits based on names rather than numbers. The {\i cexpr1} denotes the index of a {\i multi-word configuration table}. \par
}{\b \qj\sb72 \fi0 Example}: {\par
\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma fuse_def protection 0b10000000000000 \{
\par       on = 0b00000000000000
\par       off = 0b01000000000000
\par    \}
\par 
\par    pragma fuse_def FCMEN:1 0b0_0000_0000_0001 \{ -- At 2nd conf. word
\par       ENABLED  = 0b0_0000_0000_0001
\par       DISABLED = 0b0_0000_0000_0000
\par \}
\par 
\par \par
}\qj\fi0 This defines a target mnemonic that the would be used as follows:\par
\qj\fi0 {\b0\i0\scaps0\f23 PRAGMA TARGET protection on}\par
\qj\fi0 or\par
\qj\fi0 {\b0\i0\scaps0\f23 PRAGMA TARGET protection off} \par
\qj\fi0 Internally, it becomes: {\b0\i0\scaps0\f23 _fuses = (_fuses & ~mask) | expr} \par
{}\page{} \qj\fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter {\*\bkmkstart BMsec_Compiler}2{\*\bkmkend BMsec_Compiler}\par\par
Compiler\par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Compiler_basic}1{\*\bkmkend BMsub_Compiler_basic}  Basic\par
}\qj\sb60 \fi0 The {\i JAL 2.0} compiler is a command-line tool{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_command_line_compiler \\* MERGEFORMAT }}{\fldrslt{2.2}}}\~{sub:command-line-compiler}}
 . The same compiler is available for the MS Windows command line, and for Linux{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}Linux binary requires {\i libc.so.6} library.}
 . \par
\qj\fi360 After a successful compilation the {\i JAL 2.0} compiler produces two output files, these files will have the same basic name as the {\i JAL 2.0} file but the extensions will change to reflect their types. The base name (file name without extension) of these two files is the same of {\i JAL 2.0} program requested for compilation. The first output file has the extension {\b0\i0\scaps0\f23 ".hex"} and contains the hex dump of the compiled program. This file can be used directly with most programmers. The second file has the extension {\b0\i0\scaps0\f23 ".asm"} and contains the assembler (text) of the compiled program. This file can be used to inspect the generated code and to make small modifications. The assembler file can be assembled with the standard Microchip\'99
[{\field{\*\fldinst{\lang1024 REF BIB_Microchip_web \\* MERGEFORMAT }}{\fldrslt{1}}}
] assembler.\par
{\b \qj\fi360 Example}:\par
\qj\fi360 Let\rquote s assume that {\b0\i0\scaps0\f23 HOME_PJAL} directory (where {\i JAL 2.0} compiler is){\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}This example is valid for MS Windows compiler version. Linux users \endash  they\rquote re supposed to be used to {\i shell} \endash  can apply the same concepts.}
 :\par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal\\pjal.exe}\par
\qj\fi360 The required libraries are in the directory: \par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal\\chipdef\\}\par
\qj\fi360 On executing {\i JAL 2.0}{\fs7  } it\rquote s suggested to include {\b0\i0\scaps0\f23 chipdef} directory in the search path{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}{\i JAL 2.0}compiler will search {\i chipdef} in current directory by default.}
 \~:\par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal> pjal.exe -s c:\\pjal\\chipdef}\par
\qj\fi360 Optionally, other user libraries can be nested:\par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal> pjal.exe -s c:\\pjal\\chipdef;c:\\pjal\\lib}\par
\qj\fi360 As well other command line switches{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_command_line_compiler \\* MERGEFORMAT }}{\fldrslt{2.2}}}\~{sub:command-line-compiler}}
 :\par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal> pjal.exe -s c:\\pjal\\chipdef -long-star}\par
\qj\fi360 Finally, include the desired {\i JAL 2.0} user file:\par
\fs19 {\qj\fi0 \pard\ql\b0\i0\scaps0\f23    c:\\pjal> pjal.exe -s c:\\pjal\\chipdef;c:\\pjal\\lib c:\\pjal\\test.jal
\par \par
}\fs24 {\i \qj\fi360 JAL 2.0} compiler will report the success of compilation:\par
\fs19 {\qj\fi0 \pard\ql\b0\i0\scaps0\f23    c:\\pjal> pjal.exe -s c:\\pjal\\chipdef;c:\\pjal\\lib c:\\pjal\\test.jal
\par    picjal 0.9 (compiled Jan 19 2006)
\par    generating p-code
\par    0 errors, 0 warnings
\par    3615 tokens, 28452 chars; 912 lines; 3 files
\par    cmds removed: 9
\par    generating PIC code pass 1
\par    generating PIC code pass 2
\par    writing result
\par    Code area: 6 of 8192 used
\par    Data area: 6 of 352 used
\par    Software stack available: 96 bytes
\par    Hardware stack depth 0
\par    
\par    c:\\pjal\\  
\par \par
}\fs24 \qj\fi360 And on successful result, two new files will be created: \par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal\\test.asm}\par
\qj\fi360 {\b0\i0\scaps0\f23 c:\\pjal\\test.hex}\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_command_line_compiler}2{\*\bkmkend BMsub_command_line_compiler}  Command line compiler options\par
}\qj\sb60 \fi0 The compiler has a wealth of options to enable various debugging output{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See {\i Revision history} section for latest {\i JAL 2.0} version related with this document.}
 . \par
\qj\fi360 Format: {\b0\i0\scaps0\f23 pjal options} \par
{\qj\sb50 \li300\fi-300 {\b -hex\~{\i arg}} overrides the default name of the {\b0\i0\scaps0\f23 ".hex"} file. \par
\qj\sb50 \li300\fi-300 {\b -asm\~{\i arg}} overrides the default name of the {\b0\i0\scaps0\f23 ".asm"} file. \par
\qj\sb50 \li300\fi-300 {\b -rickpic} using with {\scaps Rick Farmer}\rquote s PIC loader. The preamble is:\par
\qj\li300\fi0 {\b0\i0\scaps0\f23 org 3}\line {\b0\i0\scaps0\f23 goto xxx} \par
\qj\sb50 \li300\fi-300 {\b -debug} show debug information. \par
\qj\sb50 \li300\fi-300 {\b -quiet} no status updates. \par
\qj\sb50 \li300\fi-300 {\b -s\~{\i arg}} set the include path, elements separated with {\b0\i0\scaps0\f23 ";"} \par
\qj\sb50 \li300\fi-300 {\b -task\~{\i arg}} turn on basic tasking, where {\i arg} is the maximum number of tasks that can run at a time. {\i Arg} must be >= 2 (since the main program is a task). \par
\qj\sb50 \li300\fi-300 {\b -pcode} show pcode in the asm file. \par
\qj\sb50 \li300\fi-300 {\b -clear} clears all user data areas on program entry (note: volatile, user-placed variables, and unused data areas are not cleared). \par
\qj\sb50 \li300\fi-300 {\b -no-expr-reduction} do not perform expression reduction. \par
\qj\sb50 \li300\fi-300 {\b -no-cexpr-reduction} do not perform constant expression reduction. \par
\qj\sb50 \li300\fi-300 {\b -nofuse} do not put FUSES into the assembly or hex file. \par
\qj\sb50 \li300\fi-300 {\b -long-start} force the first instruction to be a long jump. It is apparently the common bootloader requirement. The preamble is:\par
\qj\li300\fi0 {\b0\i0\scaps0\f23 bcf _pclath, 4}\line {\b0\i0\scaps0\f23 bcf _pclath, 3}\line {\b0\i0\scaps0\f23 goto xxx}\line {\b0\i0\scaps0\f23 goto nop} \par
\qj\sb50 \li300\fi-300 {\b -Wno-conversion} turn off signed/unsigned conversion warning. \par
\qj\sb50 \li300\fi-300 {\b -Wno-truncate} turn off possible truncation in assignment warning. \par
\qj\sb50 \li300\fi-300 {\b -Wno-warn} turn off all warnings. \par
\qj\sb50 \li300\fi-300 {\b -nocodegen} do not generate any assembly code. \par
\qj\sb50 \li300\fi-300 {\b -Wdirectives} issue a warning when a compiler directive is found. \par
\qj\sb50 \li300\fi-300 {\b -warn-stack-overflow} changes {\i hardware stack overflow} errors to warnings. \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_behaviour}3{\*\bkmkend BMsub_behaviour}  Behaviour\par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 3.1  End of program.\par
}\qj\sb60 \fi0 In {\i JAL 2.0}, if the execution runs out of statements, the following lines are automatically included:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    ASSEMBLER
\par     LOCAL label
\par     label:
\par       sleep
\par       goto label
\par    END ASSEMBLER
\par    
\par \par
}\qj\fi360 ... so one is guaranteed to never fall of the end off a program.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 3.2  FOR without USING\par
}\qj\sb60 \fi0 If the token {\i USING variable} does not exist:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    FOR expr LOOP 
\par       block 
\par    END LOOP
\par \par
}\qj\fi360 ... becomes:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    _temp = 0 
\par    WHILE (_temp < expr) LOOP
\par       block
\par       _temp = _temp + 1
\par    END LOOP
\par \par
}\qj\fi360 If the {\i USING variable} clause does exist, the {\i variable} is used instead of {\i _temp}. If {\i _temp} is needed, its type will be the same type as {\i expr}.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 3.3  Optimization\par
}\qj\sb60 \fi0 In {\i JAL 2.0}, two internal counters are kept for each variable:\par
{\qj\sb50 \li600\fi-300 \bullet\tab assign_ct: the number of times a variable has been assigned a value \par
\qj\sb50 \li600\fi-300 \bullet\tab use_ct: the number of times a variable\rquote s value appears in an expression \par
}\qj\sb72 \fi0 so, given the assignment: x = y\par
{\i \qj\fi360 x}\rquote s assign_ct is incremented, and {\i y}\rquote s use_ct is incremented.\par
\qj\fi360 During the optimizer phase, if a variable\rquote s use_ct is zero (the variable never occurs on the right-hand side of an assignment, and is never passed to a procedure), any assignment to that variable is removed.\par
\qj\fi360 Also, if a variable\rquote s assign_ct is zero (the variable never occurs on the left-hand side of an assignment, and is not an IN parameter to a procedure), that variable is changed to type CONST and is assigned a value of 0. \par
\qj\fi360 If a variable is marked VOLATILE, this optimization doesn\rquote t occur because by definition a VOLATILE variable is both assigned and used (for example, a PIC register).\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 3.4  Debug output\par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23    cmd=0x004C79D8 op=18
\par    ...4c7988[B---1]:\{4c78d8:_btemp0[B---:1]\}
\par    cmds removed: 11
\par \par
}\qj\fi360 These are debugging messages only. If you don\rquote t compile with {\b0\i0\scaps0\f23 "-pcode"} and {\b0\i0\scaps0\f23 "-debug"} you won\rquote t see them{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_command_line_compiler \\* MERGEFORMAT }}{\fldrslt{2.2}}}\~{sub:command-line-compiler}. }
 .\par
{\qj\sb50 \li300\fi-300 {\b cmd=xxxx} is the pcode cmd identifier \par
\qj\sb50 \li300\fi-300 {\b op=xx} means this is an operator pcode (as opposed to a branching one) \par
\qj\sb50 \li300\fi-300 {\b nnnnn:\rquote B\emdash x\rquote } translates to: \par
{\qj\sb50 \li600\fi-300 {\b nnnnn} : value identifier \par
\qj\sb50 \li600\fi-300 {\b B} boolean \par
\qj\sb50 \li600\fi-300 {\b C} constant \par
\qj\sb50 \li600\fi-300 {\b V} volatile \par
\qj\sb50 \li600\fi-300 {\b S} signed \par
\qj\sb50 \li600\fi-300 {\b x} width (a number) \par
}}\qj\sb112 \fi0 The variable is also dumped. This information is useless unless you\rquote ve the source code and a debugger available.\par
\page{} \qj\fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter {\*\bkmkstart BMsec_Libraries}3{\*\bkmkend BMsec_Libraries}\par\par
Libraries\par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_PIC_libary_structure}1{\*\bkmkend BMsub_PIC_libary_structure}  PIC definition library structure\par
}\qj\sb60 \fi0 These libraries describes the core of some PIC chips in order to use inside a {\i JAL 2.0} program.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_chip_def_file}1.1{\*\bkmkend BMsub_chip_def_file}  Chip definition file\par
}\qj\sb60 \fi0 The file {\b0\i0\scaps0\f23 "chipdef.jal"} contains constants needed by {\i JAL 2.0}.\par
\qj\fi360 The constant values that are assigned by {\i JAL 2.0} to {\b0\i0\scaps0\f23 target_chip} are:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const pic_16f877 = 1
\par    const pic_16f628 = 2
\par    const pic_16c84 = 3
\par    const pic_16f84 = 4
\par    const pic_12c509a = 5
\par    const pic_12f675 = 6
\par    const pic_18f242 = 7
\par    const pic_18f252 = 8
\par    const pic_18f452 = 9
\par    const pic_SX18 = 10
\par    const pic_SX28 = 11
\par    const pic_SX = 12 
\par \par
}\qj\fi360 Other constants defining different PICs may be added by the user, as long a {\i core definition} file{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Core_definition_file \\* MERGEFORMAT }}{\fldrslt{3.1.2}}}\~{sub:Core-definition-file}}
  and a {\i PIC chip definition} file{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_PIC_chip_definition \\* MERGEFORMAT }}{\fldrslt{3.1.3}}}\~{sub:PIC-chip-definition}}
  are also generated.\par
\qj\fi360 The constant values that are assigned by {\i JAL 2.0} to {\b0\i0\scaps0\f23 target_cpu}\~are:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const pic_12 = 1
\par    const pic_14 = 2
\par    const pic_16 = 3
\par    const sx_12  = 4 
\par \par
}\qj\fi360 Other constants used widely:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const bit  on    = 1
\par    const bit  off   = 0
\par    const byte w     = 0
\par    const byte f     = 1
\par    const bit  true  = 1
\par    const bit  false = 0
\par    const bit  high  = 1
\par    const bit  low   = 0 
\par \par
}{\i \qj\fi360 JAL 2.0} control bit, only useful if you are sharing libraries with {\i JAL 2.0} and JAL:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const bit  PJAL  = 1 
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Core_definition_file}1.2{\*\bkmkend BMsub_Core_definition_file}  Core definition file\par
}\qj\sb60 \fi0 Describes internal hardware structure of a subset of Microchip \'99\~PICs. As reference, here is the {\b0\i0\scaps0\f23 "c16f87x.jal"} file structure that covers all PIC16F87x subset.\par
\qj\fi360 In the {first line} must be an {\i include} to Core definition file{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_chip_def_file \\* MERGEFORMAT }}{\fldrslt{3.1.1}}}\~{sub:chip-def-file}}
 :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    include chipdef
\par \par
}\qj\fi360 Following the type of CPU :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const target_cpu = pic_14
\par \par
}\qj\fi360 Number of Stack levels :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma stack  8
\par \par
}{\i \qj\fi360 Configuration word} address and default value :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const word _fuses     = 0x3fff ; default value
\par    const word _fuse_base = 0x2007 ; address 
\par \par
}\qj\fi360 For PICs with several {\i configuration words} (ie: PIC16F88):\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const word _fuses_ct             = 2
\par    const word _fuses[_fuses_ct]     = \{0x3fff, 0x3fff\} ; default value
\par    const word _fuse_base[_fuses_ct] = \{0x2007, 0x2008\} ; where to put it
\par \par
}\qj\fi360 Minimal set of SFRs needed by {\i JAL 2.0}. You are warned not to change names, these must begin with underscore:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var volatile byte _pic_isr_w 
\par        at \{0x007f, 0x00ff, 0x017f, 0x01ff \}
\par    var volatile byte _ind  
\par        at \{0x0000, 0x0080, 0x0100, 0x0180\}
\par    var volatile byte _pcl 
\par        at \{0x0002, 0x0082, 0x0102, 0x0182\}
\par    var volatile byte _status 
\par        at \{0x0003, 0x0083, 0x0103, 0x0183\}
\par    var volatile byte _fsr    
\par        at \{0x0004, 0x0084, 0x0104, 0x0184\}
\par    var volatile byte _pclath
\par        at \{0x000a, 0x008a, 0x010a, 0x018a\}
\par \par
}\qj\fi360 Bit position of {\i STATUS} flags :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const        byte _irp    = 7
\par    const        byte _rp1    = 6
\par    const        byte _rp0    = 5
\par    const        byte _not_to = 4
\par    const        byte _not_pd = 3
\par    const        byte _z      = 2
\par    const        byte _dc     = 1
\par    const        byte _c      = 0
\par \par
}\qj\fi360 Details of {\i configuration word} fuses :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma fuse_def protection 0b11000000110000 \{
\par    on  = 0b00000000000000
\par    off = 0b11000000110000
\par    \}
\par 
\par    pragma fuse_def debug      0b00100000000000 \{
\par    on  = 0b00000000000000
\par    off = 0b00100000000000
\par    \}
\par 
\par    pragma fuse_def cdp        0b00000100000000 \{
\par    on  = 0b00000000000000
\par    off = 0b00000100000000
\par    \}
\par 
\par    pragma fuse_def lvp        0b00000010000000 \{
\par    on  = 0b00000010000000
\par    off = 0b00000000000000
\par    \}
\par 
\par    pragma fuse_def bor        0b00000001000000 \{
\par    on  = 0b00000001000000
\par    off = 0b00000000000000
\par    \}
\par 
\par    pragma fuse_def powerup    0b00000000001000 \{
\par    off = 0b00000000001000
\par    on  = 0b00000000000000
\par    \}
\par 
\par    pragma fuse_def watchdog   0b00000000000100 \{
\par    off = 0b00000000000000
\par    on  = 0b00000000000100
\par    \}
\par 
\par    pragma fuse_def osc        0b00000000000011 \{
\par    lp  = 0b00000000000000
\par    xt  = 0b00000000000001
\par    hs  = 0b00000000000010
\par    rc  = 0x00000000000011
\par    \} 
\par    
\par \par
}\qj\fi360 For PICs with several {\i configuration words} (ie: PIC16F88):\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma fuse_def IESO:1 0b0_0000_0000_0010 \{
\par       ENABLED  = 0b0_0000_0000_0010
\par       DISABLED = 0b0_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def FCMEN:1 0b0_0000_0000_0001 \{
\par       ENABLED  = 0b0_0000_0000_0001
\par       DISABLED = 0b0_0000_0000_0000
\par    \}
\par 
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_PIC_chip_definition}1.3{\*\bkmkend BMsub_PIC_chip_definition}  PIC chip definition file\par
}\qj\sb60 \fi0 This file describes an specific PIC chip, distinguishing it from the rest of PICs of the subset. As reference, here is the {\b0\i0\scaps0\f23 "c16f877.jal"} file structure for PIC16F877 PIC chip.\par
\qj\fi360 In the {first line} must be an {\i include} to the {\i Core definition} file{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Core_definition_file \\* MERGEFORMAT }}{\fldrslt{3.1.2}}}\~{sub:Core-definition-file}}
 :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    include c16f87x
\par \par
}\qj\fi360 Following chip, RAM, ROM and EEPROM memory ranges :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma target chip 16f877
\par    pragma data  0x0020-0x007f, 0x00a0-0x00ff,
\par                 0x120-0x16f, 0x1a0-0x1ef
\par    pragma code  8192
\par    pragma eeprom 0x2100, 256 
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Example_of_usage}1.4{\*\bkmkend BMsub_Example_of_usage}  Example of usage\par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23    -- main program
\par    -- This must be in first line
\par    include c16f877
\par 
\par    -- Clock frequency
\par    const target_clock = 10_000_000
\par 
\par    -- main program
\par    var volatile byte a
\par 
\par    a = a + 1 
\par \par
}\qj\fi360 Note: This small program compiles without errors.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_other_libs}2{\*\bkmkend BMsub_other_libs}  Other libraries\par
}\qj\sb60 \fi0 At the time of writing the new {\i JAL 2.0} compiler there are few tested libraries available for use in your projects{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See {\i Revision history} section{\i \~{sec:Revision-history}.}}
 . \par
\qj\fi360 To solve this problem, you can:\par
{\qj\sb50 \li600\fi-300 \bullet\tab Write your own set of libraries and share those with pjal community \endash  highly recommended \endash . \par
\qj\sb50 \li600\fi-300 \bullet\tab Wait for someone to write a set of libraries \endash  not recommended \endash . \par
\qj\sb50 \li600\fi-300 \bullet\tab Modify earlier JAL
[{\field{\*\fldinst{\lang1024 REF BIB_Wouter_web \\* MERGEFORMAT }}{\fldrslt{4}}}, {\field{\*\fldinst{\lang1024 REF BIB_JAL_SF_net \\* MERGEFORMAT }}{\fldrslt{6}}}
] libraries to use with {\i JAL 2.0} compiler and share those with pjal community \endash  highly recommended \endash . \par
\qj\sb50 \li600\fi-300 \bullet\tab Use {\scaps Stef Mientki}\rquote s libraries
[{\field{\*\fldinst{\lang1024 REF BIB_Stef_pJAL \\* MERGEFORMAT }}{\fldrslt{7}}}
]. \par
}\qj\sb72 \fi0 It\rquote s not the purpose of this manual to describe what should be a full set of useful libraries. Instead we offer some guidelines on how to code basic operations in a PIC and start to create libraries of your own. \par
{}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Operating_with_digital}2.1{\*\bkmkend BMsub_Operating_with_digital}  Operating with digital I/O ports\par
}\qj\sb60 \fi0 PIC chips \endash  like PIC16F877 \endash  have several I/O ports you can handle in your code. In order to use them in {\i JAL 2.0} you will need to declare them:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- remember to declare SRFs "volatile"
\par    var volatile byte PORTB at \{0x06,0x106\}
\par \par
}\qj\fi360 Also you will need the TRIS registers:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- remember to declare SRFs "volatile"
\par    var volatile byte _TRISB at \{0x86,0x186\}
\par \par
}\qj\fi360 Now you have a {\i basic} management of PIC ports.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    PORTB = 0             -- Reset PORTB
\par    _TRISB = 0b_0000_0000 -- All PORTB output
\par    PORTB = 0b_0001_0001  -- Set b4 and b0
\par    PORTB = 0b_0000_1001  -- Clear b4, Set b3 and b0
\par \par
}\qj\fi360 In order to manage the {\i pins} (the bits) individually, firstly you must declare them:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var volatile byte PORTB at \{0x06,0x106\}
\par    var volatile bit  pin_b0 at PORTB : 0
\par    var volatile bit  pin_b1 at PORTB : 1
\par    var volatile bit  pin_b2 at PORTB : 2
\par    var volatile bit  pin_b3 at PORTB : 3
\par    var volatile bit  pin_b4 at PORTB : 4
\par    var volatile bit  pin_b5 at PORTB : 5
\par    var volatile bit  pin_b6 at PORTB : 6
\par    var volatile bit  pin_b7 at PORTB : 7
\par 
\par    const bit input           = on
\par    const bit output          = off
\par 
\par    var volatile byte _TRISB at \{0x86,0x186\}
\par    var volatile bit pin_b0_direction at _TRISB : 0
\par    var volatile bit pin_b1_direction at _TRISB : 1
\par    var volatile bit pin_b2_direction at _TRISB : 2
\par    var volatile bit pin_b3_direction at _TRISB : 3
\par    var volatile bit pin_b4_direction at _TRISB : 4
\par    var volatile bit pin_b5_direction at _TRISB : 5
\par    var volatile bit pin_b6_direction at _TRISB : 6
\par    var volatile bit pin_b7_direction at _TRISB : 7 
\par \par
}\qj\fi360 Now you can manage pins in this way:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var bit mybit             -- declare a variable
\par 
\par    PORTB = 0                 -- Reset PORTB
\par    _TRISB = 0b_0000_0000     -- All PORTB output
\par    pin_b0 = high             -- Set b0
\par    pin_b4_direction = input  -- b4 I/O input
\par    mybit = pin_b4            -- Read b4 and store in mybit
\par \par
}\qj\fi360 If this was a step you would frequently repeat, you would put it in a procedure:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    function port_do_stuff return bit is
\par       PORTB = 0                 -- Reset PORTB
\par       _TRISB = 0b_0000_0000     -- All PORTB output
\par       pin_b0 = high             -- Set b0
\par       pin_b4_direction = input  -- b4 I/O input
\par       return pin_b4             -- Read b4 exit with value
\par    end function
\par \par
}\qj\fi360 Whenever your program needs to execute the above steps just add:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var bit mybit             -- declare a variable
\par 
\par    mybit = port_do_stuff     -- call the function and 
\par                              -- store b4 in mybit.  
\par \par
}\qj\fi360 at the appropriate places in your code.\par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Shadowing_digital_I_O}2.2{\*\bkmkend BMsub_Shadowing_digital_I_O}  Shadowing digital I/O ports\par
}\qj\sb60 \fi0 When you perform any operation with PIC registers, first the register is read, then it\rquote s modified and finally it is written back to the register. This is fine when dealing with normal registers and most SFRs. However, you can have problems with I/O ports. Why?  Because when the PIC reads a port register, it reads the actual state of the pins, rather than the output latch. This can cause two problems:\par
{\qj\sb50 \li600\fi-300 1.\tab If the pin is an input, then the input pin state will be read, the operation performed on it, and the result sent to the output latch. This may not immediately cause problems, but if that pin is made into an output later on, the state of the output latch may have changed from the time it was deliberately set by the code. \par
\qj\sb50 \li600\fi-300 2.\tab If the pin is defined as an output, the output latch and the actual pin should be in the same state. In practice sometimes they aren\rquote t. If you are driving a capacitive load, the pin will take time to respond as it charges and discharges the capacitor. A common problem occurs when using the pin is set or clear directly on a port. \par
}\qj\sb72 \fi0 In order to avoid this issue, it\rquote s common to use a {\i shadow register}. The {\i shadow register} is simply a ram location you reserve. All operations are performed on this register, and when you are finished, you copy it to the port register. It\rquote s a bit more trouble, and it can slow things down a tiny bit, but the effort is worth it for reliable operation{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}This is an extract of {\scaps Michael Rigby-Jones} explanation stored in PICList
[{\field{\*\fldinst{\lang1024 REF BIB_PICList_RMW \\* MERGEFORMAT }}{\fldrslt{8}}}
].}
 .\par
\qj\fi360 In order to implement this shadow registers using {\i JAL 2.0}, first you must declare these {\i shadow registers}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- shadow registers
\par    -- may not be declared as volatile
\par    var byte _port_b_buffer 
\par \par
}\qj\fi360 Now, write the necessary code to write into these shadow {\i registers}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    procedure portb'put( byte in x) is
\par       _port_b_buffer = x     -- make changes into "shadows"
\par       portb = _port_b_buffer -- send them to real I/O port
\par    end procedure
\par \par
}\qj\fi360 Now you have a basic management of digital I/O ports using {\i shadow registers}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    _TRISB = 0b_0000_0000   -- All PORTB output
\par    portb = 0b_1111_0000    -- Set a value in Port B
\par \par
}\qj\fi360 In order to manage the {\i pins} individually using these {\i shadow registers}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- To read pins, take them from real I/O ports
\par    -- not from shadow registers
\par    var volatile bit pin_b0 at portb : 0 
\par  
\par    -- Once pin_b0 is declared, override "write assignment"
\par    procedure pin_b0'put( bit in x at _port_b_buffer : 0 ) is
\par       portb = _port_b_buffer
\par    end procedure 
\par \par
}\qj\fi360 Now you can manage pins in this way:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var bit mybit             -- declare a variable
\par 
\par    portb = 0                 -- Reset PORTB
\par    _TRISB = 0b_0000_0000     -- All PORTB output
\par    pin_b0 = high             -- Set b0
\par    pin_b4_direction = input  -- b4 I/O input
\par    mybit = pin_b4            -- Read b4 and store in mybit
\par \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Disabling_analog_functions}2.3{\*\bkmkend BMsub_Disabling_analog_functions}  Disabling analog functions\par
}\qj\sb60 \fi0 All PIC chips that have an analog module have the corresponding pins associated with this module ready to work in {\i analog mode} on reseting the device. The reason is that if an analog voltage is applied at pin (configured in {\i digital mode}) may cause the input buffer to consume current that is out of device specifications.\par
\qj\fi360 If your application needs to work with these pins in {\i digital mode}, you must deactivate {\i analog mode} first.\par
\qj\fi360 To do this, you must locate the desired SFR location (see your PIC chip {\i datasheets}) and declare it:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    var volatile byte ADCON0      at 0x1F
\par \par
}\qj\fi360 Next, configure this SFR with the desired value:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    ADCON0 = 0x07
\par \par
}\qj\fi360 In order to make a library to be useful with different PIC chips, you can extend this for different chips:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    procedure disable_a_d_functions is
\par       if TARGET_CHIP == 16f877 then
\par          var volatile byte _adcon0 at 0x1F
\par          _adcon0 = 0x07
\par       elsif TARGET_CHIP == 16f28 then
\par          var volatile byte _vrcon0 at 0x9F
\par          _vrcon0 = 0x07
\par       end if
\par    end procedure
\par 
\par    -- call the procedure to disable AD functions
\par    disable_a_d_functions
\par \par
}\qj\fi360 In this case the expression {\b0\i0\scaps0\f23 "IF ... ELSIF ... END IF"} is a conditional compilation, that is evaluated at compile time. For this reason, SFR is declared inside the {\b0\i0\scaps0\f23 "IF ..."}. \par
\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Configuring_the_Oscillator}2.4{\*\bkmkend BMsub_Configuring_the_Oscillator}  Configuring the Oscillator\par
}\qj\sb60 \fi0 All PIC chips works thanks to an oscillator. In nearly all PICs you must configure this element in the {\i configuration word.} The basic type oscillator is built around an inverter amplifier that drives an external component (a crystal or resonator on the amplifier positive feedback loop and two capacitors connected between amplifier in/out to ground). Designing the elements of this oscillator must be done with care, as an analog device needs (the combination of the quartz quality factor, capacitor values and PCB route lenghts affects the amplitude oscillation, start up oscillator delay and oscillator supply current). For {\i PIC16F877}, configuring the oscillator it\rquote s easy:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    -- config oscillator
\par    pragma target osc xt
\par    
\par    -- Fosc value
\par    pragma target clock 4_000_000
\par \par
}\qj\fi360 Other PICs gives you several oscillator configurations, like {\i PIC16F628:}\par
\qj\sb120 \fi360 {} {\par
{\qc\fi0 \par
\trowd\clbrdrl\brdrs\clbrdrt\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx3900\clbrdrt\brdrs\clbrdrb\brdrdb\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {Mode}\cell
\pard\intbl\ql {Description}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {LP}\cell
\pard\intbl\ql {Low-Power Crystal}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {XT}\cell
\pard\intbl\ql {Crystal/Resonator}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {HS}\cell
\pard\intbl\ql {High-Speed Crystal/Resonator}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {EC}\cell
\pard\intbl\ql {IO on RA6 and External Clock on RA7}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {ER1}\cell
\pard\intbl\ql {CLKOUT on RA6 and External Resistor on RA7}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {ER2}\cell
\pard\intbl\ql {IO on RA6 and External Resistor on RA7}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {INTRC1}\cell
\pard\intbl\ql {Internal oscillator with CLKOUT on RA6 and IO on RA7}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {INTRC2}\cell
\pard\intbl\ql {Internal oscillator with IO on RA6 and RA7}\cell
\row
}\par
}\qj\fi360 Also, newer PICs have some specific SFRs to change the behaviour of the oscillator. When using these PICs, like {\i PIC16F88} ({\i PIC16F819}, {\i PIC16F688}, etc), you must take care of the default reset state values of these SFRs and initialize them in accordance with your hardware. \par
{\b \qj\fi360 Example}:\par
\qj\fi360 The OSCON register of {\i PIC16F88}.\par
\qj\sb120 \fi360 {} {\par
{\qc\fi0 \par
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx975\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx2925\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx4875\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx6825\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {}\cell
\pard\intbl\qc {R/W}\cell
\pard\intbl\qc {R/W}\cell
\pard\intbl\qc {R/W}\cell
\pard\intbl\qc {R/W}\cell
\pard\intbl\qc {R}\cell
\pard\intbl\qc {R/W}\cell
\pard\intbl\qc {R/W}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrb\brdrs\clbrdrr\brdrs\cellx975\clbrdrb\brdrs\clbrdrr\brdrs\cellx1950\clbrdrb\brdrs\clbrdrr\brdrs\cellx2925\clbrdrb\brdrs\clbrdrr\brdrs\cellx3900\clbrdrb\brdrs\clbrdrr\brdrs\cellx4875\clbrdrb\brdrs\clbrdrr\brdrs\cellx5850\clbrdrb\brdrs\clbrdrr\brdrs\cellx6825\clbrdrb\brdrs\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {\emdash }\cell
\pard\intbl\qc {IRCF2}\cell
\pard\intbl\qc {IRCF1}\cell
\pard\intbl\qc {IRCF0}\cell
\pard\intbl\qc {OSTS}\cell
\pard\intbl\qc {IOFS}\cell
\pard\intbl\qc {SCS1}\cell
\pard\intbl\qc {SCS0}\cell
\row
\trowd\clbrdrl\brdrs\clbrdrr\brdrs\cellx975\clbrdrr\brdrs\cellx1950\clbrdrr\brdrs\cellx2925\clbrdrr\brdrs\cellx3900\clbrdrr\brdrs\cellx4875\clbrdrr\brdrs\cellx5850\clbrdrr\brdrs\cellx6825\clbrdrr\brdrs\cellx7800
\pard\intbl\qc {Bit 7}\cell
\pard\intbl\qc {Bit 6}\cell
\pard\intbl\qc {Bit 5}\cell
\pard\intbl\qc {Bit 4}\cell
\pard\intbl\qc {Bit 3}\cell
\pard\intbl\qc {Bit 2}\cell
\pard\intbl\qc {Bit 1}\cell
\pard\intbl\qc {Bit 0}\cell
\row
}\par
}{{{\b \qc\sb60 \li512\ri512\fi0 Note}: \emdash  = not used, R/W = read/write, R= read only\par
}}{\qj\sb50 \li300\fi-300 {\b IRCF2\~:\~IRCF1\~:\~IRCF0} internal RC osc frequency select bits. \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    000 = 31.25KHz
\par    001 = 125KHz
\par    010 = 250KHz
\par    011 = 500KHz
\par    100 = 1MHz
\par    101 = 2MHz
\par    110 = 4MHz
\par    111 = 8MHz
\par \par
}{\qj\sb50 \li300\fi-300 {\b OSTS} Oscillator start-up time-out bit. \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    1 = running from primary clock (OSC1-OSC2 device)
\par    0 = running from secondary clock (T1OSO-T1OSI device) 
\par        or internal RC oscillator
\par \par
}{\qj\sb50 \li300\fi-300 {\b IOFS} INTOSC frequency stable bit (read only). \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    1 = frequency is stable
\par    0 = frequency is not stable
\par \par
}{\qj\sb50 \li300\fi-300 {\b SCS1\~:\~SCS0} Oscillator mode select bits. \par
}{\qj\sb72 \fi0 \pard\ql\b0\i0\scaps0\f23    00 = osc mode defined by FOSC<2:0> (configuration word 1)
\par    01 = T1OSC used as system clock
\par    10 = INTRC used as system clock
\par \par
}{\b \qj\fi360 Example}:\par
\qj\fi360 Configuration of the oscillator for {\i PIC16F88} as 4MHz internal RC oscillator and output frequency INTOSC/4 at pin RA6.\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    pragma target osc int_clko
\par    
\par    -- OSCCON
\par    var volatile byte OSCCON at 0x8F
\par    
\par    -- INTRC=4MHz, Running from INTRC as secondary clock, 
\par    -- Stable frequency, Osc. defined by FOSC bits from 
\par    -- the configuration word
\par    OSCCON = 0b_0110_0100
\par    
\par    -- OSCTUNE
\par    var volatile byte OSCTUNE at 0x90
\par    
\par    -- Set default factory calibration
\par    OSCTUNE = 0
\par    
\par    -- Declare the frequency of the configured oscillator
\par    pragma target clock 4_000_000 
\par    \par
}\qj\sb120 \fi0 {\s4\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsub_Making_pjal_recognice_pic}2.5{\*\bkmkend BMsub_Making_pjal_recognice_pic}  Making {\i JAL 2.0} to recognize your own PIC device\par
}\qj\sb60 \fi0 It is possible to add newer PIC devices to {\i JAL 2.0}, a brief description of related libraries is in previous chapter{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_PIC_libary_structure \\* MERGEFORMAT }}{\fldrslt{3.1}}}\~{sub:PIC-libary-structure}.}
 . In order to do this job, you must take into account following notes:\par
{\qj\sb50 \li600\fi-300 \bullet\tab Current {\i JAL 2.0} version{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See Revision History {sec:Revision-history}}
  only supports PIC14 architecture. \par
\qj\sb50 \li600\fi-300 \bullet\tab The modified libraries will be overwriten by future {\i JAL 2.0} libraries. \par
\qj\sb50 \li600\fi-300 \bullet\tab Future {\i JAL 2.0} versions can make your projects useless, since past changes no longer exist. \par
\qj\sb50 \li600\fi-300 \bullet\tab There is no guarantee that your changes will work with your {\i JAL 2.0} version. \par
\qj\sb50 \li600\fi-300 \bullet\tab Make a backup of whole {\f23 HOME_PJAL} directory prior to do anything. \par
}\qj\sb72 \fi0 In order to add your own favourite PIC device, you must edit {\f23 chipdef.jal}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}File located in {\f23 HOME_PJAL\\{}chipdef\\{}chipdef.jal}.}
  and write the necessary lines for your desired new PICs{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_chip_def_file \\* MERGEFORMAT }}{\fldrslt{3.1.1}}}\~{sub:chip-def-file}.}
 :\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    const pic_16f676 = 100
\par    const pic_16f88 = 101
\par \par
}\qj\fi360 Allocated numbers should not overrides the old {\i target_chip} constant definitions. Save the {\f23 chipdef.jal} overwritting the old file. \par
\qj\fi360 Create a {\i core definition file} for your favourite PIC microcontroller inspiring yourself from the PIC datasheet and the already existing {\i core definition files}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_Core_definition_file \\* MERGEFORMAT }}{\fldrslt{3.1.2}}}\~{sub:Core-definition-file}.}
 . \par
{\b \qj\fi360 Example}:\par
\qj\fi360 For the {\i PIC16F88} will look like this one:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    ; <c16f8x.jal> this is the name of the following file
\par    include chipdef
\par    ;
\par    ; chip definition for the 16f87_16F88 series
\par    const target_cpu = pic_14
\par    
\par    var volatile byte _ind AT \{0x0000, 0x0080, 0x0100, 0x0180\}
\par    var volatile byte _pcl AT \{0x0002, 0x0082, 0x0102, 0x0182\}
\par    var volatile byte _status AT \{0x0003, 0x0083, 0x0103, 0x0183\}
\par    var volatile byte _fsr AT \{0x0004, 0x0084, 0x0104, 0x0184\}
\par    
\par    const byte _irp = 7
\par    const byte _rp1 = 6
\par    const byte _rp0 = 5
\par    const byte _not_to = 4
\par    const byte _not_pd = 3
\par    const byte _z = 2
\par    const byte _dc = 1
\par    const byte _c = 0
\par 
\par    var volatile byte _pclath AT \{0x000a, 0x008a, 0x010a, 0x018a\}
\par 
\par    pragma stack 8
\par 
\par    -- where to put config_words 
\par    const word _fuses[2] = \{0x3fff,0x3fff\} ; default value
\par    const word _fuses_base[2] = \{0x2007,0x2008\} 
\par 
\par    pragma fuse_def protection 0b10_0000_0000_0000 \{
\par       on = 0b00_0000_0000_0000
\par       off = 0b01_0000_0000_0000
\par    \} 
\par 
\par    pragma fuse_def ccp1       0b01_0000_0000_0000 \{
\par       rb3 = 0b00_0000_0000_0000
\par       rb0 = 0b01_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def debug      0b00_1000_0000_0000 \{
\par       on  = 0b00_0000_0000_0000
\par       off = 0b00_1000_0000_0000
\par    \}
\par 
\par    pragma fuse_def wrt      0b00_0110_0000_0000 \{
\par       off     = 0b00_0110_0000_0000  ; write protection off
\par       on_00ff = 0b00_0100_0000_0000  ; 0000-00ff write protected
\par       on_07ff = 0b00_0010_0000_0000  ; 0000-07ff write protected
\par       on_0fff = 0b00_0000_0000_0000  ; 0000-0fff write protected
\par    \}
\par 
\par    pragma fuse_def cdp        0b00_0001_0000_0000 \{
\par       on  = 0b00_0000_0000_0000
\par       off = 0b00_0001_0000_0000
\par    \}
\par 
\par    pragma fuse_def lvp        0b00_0000_1000_0000 \{
\par       on  = 0b00_0000_1000_0000
\par       off = 0b00_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def bor        0b00_0000_0100_0000 \{
\par       on  = 0b00_0000_0100_0000
\par       off = 0b00_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def mclr       0b00_0000_0010_0000 \{
\par       on  = 0b00_0000_0010_0000
\par       off = 0b00_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def powerup    0b00_0000_0000_1000 \{
\par       off = 0b00_0000_0000_1000
\par       on  = 0b00_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def watchdog   0b00_0000_0000_0100 \{
\par       off = 0b00_0000_0000_0000
\par       on  = 0b00_0000_0000_0100
\par    \}
\par 
\par    pragma fuse_def osc        0b00_0000_0001_0011 \{
\par       lp       = 0b0000000000_0000
\par       xt       = 0b0000000000_0001
\par       hs       = 0b0000000000_0010
\par       ecio     = 0b0000000000_0011
\par       int_io   = 0b0000000001_0000
\par       int_clko = 0b0000000001_0001
\par       ext_io   = 0b0000000001_0010
\par       ext_clko = 0b0000000001_0011
\par    \}
\par 
\par    ; configuration word2 register, adr0x2008
\par    pragma fuse_def switch     0b00_0000_0000_0010 \{
\par       on  = 0b00_0000_0000_0010
\par       off = 0b00_0000_0000_0000
\par    \}
\par 
\par    pragma fuse_def safe_clk   0b00_0000_0000_0001 \{
\par      on  = 0b00_0000_0000_0001
\par      off = 0b00_0000_0000_0000
\par \}
\par \par
}\qj\fi360 Save the file in {\f23 HOME_PJAL\\{}chipdef} folder with the name {\f23 c16F8x.jal}. \par
\qj\fi360 You must also write the {\i PIC chip definition file}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_PIC_chip_definition \\* MERGEFORMAT }}{\fldrslt{3.1.3}}}\~{sub:PIC-chip-definition}.}
  for the {\i PIC16F88}:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    ; <c16f88.jal>  this is the name of the following file
\par    include c16f8x
\par 
\par    pragma data  0x0020-0x007f, 0x00a0-0x00ef,
\par                 0x120-0x16f, 0x1a0-0x1ef
\par    pragma code  4096
\par    pragma eeprom 0x2100, 256
\par \par
}\qj\fi360 Save the file in {\f23 HOME_PJAL\\{}chipdef} folder with the name {\f23 c16f88.jal}. \par
\qj\fi360 At this moment you are ready to play with your {\i PIC16F88}. Remember that all SFR\rquote s of the {\i PIC16F88} (or any used bit from any SFR) must be defined before using them! {\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}You can test a tool called {\i inc2jal.exe} developed by {\scaps Stef Mientki}
[{\field{\*\fldinst{\lang1024 REF BIB_Stef_pJAL \\* MERGEFORMAT }}{\fldrslt{7}}}
].}
 \par
\qj\fi360 This could be done directly in your project files like in the {\i Examples section}{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsec_Examples \\* MERGEFORMAT }}{\fldrslt{4}}}\~{sec:Examples}.}
 , or by writing a SFR definition file. Keep the register name or bit name identical with those from the PIC datasheet, in this way your library could be used easily by other people. Due to the very large size of SFR definition file, will be presented only a small part of it:\par
{\qj\fi0 \pard\ql\b0\i0\scaps0\f23    ; <pjal_16F88._inc.jal> this is the name of the file
\par 
\par    -- -------------------------------------------------
\par    -- Special Function Registers in BANK0 of P16F87/88
\par    -- -------------------------------------------------
\par    var volatile byte INDF at \{0x00,0x80,0x100,0x180\}
\par    var volatile byte TMR0 at \{0x01,0x101\}
\par  
\par    ; (all bank0 register definitions must be here) 
\par 
\par    -- -------------------------------------------------
\par    -- Special Function Registers in BANK1 of P16F87/88
\par    -- -------------------------------------------------
\par    var volatile byte OPTION_REG at 0x81
\par    var volatile byte TRISA      at 0x85
\par 
\par    ; (all bank1 register definitions must be here)
\par 
\par    -- -------------------------------------------------
\par    -- Special Function Registers in BANK2 of P16F87/88
\par    -- -------------------------------------------------
\par    var volatile byte WDTCON    at 0x105
\par    var volatile byte EEDATA    at 0x10C
\par 
\par    ; (all bank2 register definitions must be here)
\par 
\par    -- -------------------------------------------------
\par    -- Special Function Registers in BANK3 of P16F87/88
\par    -- -------------------------------------------------
\par    var volatile byte EECON1   at 0x18C
\par    var volatile byte EECON2   at 0x18D
\par 
\par    ; (all bank3 register definitions must be here)
\par 
\par    -- -------------------------------------------------
\par    -- OPTION_REG associated bits
\par    -- -------------------------------------------------
\par    ; this is an example of a complete SFR bit definition 
\par    var volatile bit  NOT_RBPU at OPTION_REG : 7
\par    var volatile bit  INTEDG   at OPTION_REG : 6
\par    var volatile bit  T0CS     at OPTION_REG : 5
\par    var volatile bit  T0SE     at OPTION_REG : 4
\par    var volatile bit  PSA      at OPTION_REG : 3
\par    var volatile bit  PS2      at OPTION_REG : 2
\par    var volatile bit  PS1      at OPTION_REG : 1
\par    var volatile bit  PS0      at OPTION_REG : 0
\par 
\par    ; (all other SFR bits definitions must be here)
\par  
\par    -- ------------------------------------------------
\par    -- PORTA pins
\par    -- ------------------------------------------------
\par    var volatile bit  pin_a0 at PORTA : 0
\par 
\par    ; (all port_a bit definitions must be here)
\par 
\par    -- ------------------------------------------------
\par    -- PORTB pins
\par    -- ------------------------------------------------
\par    var volatile bit  pin_b0 at PORTB : 0
\par 
\par    ; (all port_b bit definitions must be here)
\par 
\par    -- ------------------------------------------------
\par    -- Port and pin directions
\par    -- ------------------------------------------------
\par    ;  only port_a is exemplified but port_b should be also defined
\par    const bit input           = on
\par    const bit output          = off
\par    const byte all_input      = 0b_1111_1111
\par    const byte all_output     = 0b_0000_0000
\par 
\par    var volatile byte port_a_direction at _TRISA
\par    var volatile bit pin_a0_direction at _TRISA : 0
\par 
\par    ; (volatile bit directions for all pins of port_a should be here)
\par 
\par    ; IO port shadow registers may not be declared as volatile
\par    var byte _port_a_buffer
\par 
\par    procedure pin_a0'put( bit in x at _port_a_buffer : 0 ) is
\par       porta = _port_a_buffer
\par    end procedure
\par 
\par    procedure port_a'put( byte in x ) is
\par       _port_a_buffer = x
\par       porta = _port_a_buffer
\par    end procedure
\par 
\par    procedure port_a_low'put( byte in x ) is
\par       _port_a_buffer = ( _port_a_buffer  & 0xF0 ) | ( x & 0x0F )
\par       porta = _port_a_buffer
\par    end procedure
\par 
\par    procedure port_a_high'put( byte in x ) is
\par       _port_a_buffer = ( _port_a_buffer  & 0x0F ) | ( x << 4 )
\par       porta = _port_a_buffer
\par    end procedure
\par 
\par    function port_a_low'get return byte is
\par       return porta & 0x0F
\par    end function
\par 
\par    function port_a_high'get return byte is
\par       return (porta >> 4)
\par    end function
\par \par
}\qj\fi360 Save the file in {\f23 HOME_PJAL\\{}chipdef} folder with the name {\f23 pjal_16F88_inc.jal} in your own library folder or better in your project folder. For a future succesfull compilation, save all your work (including project file, libraries, all PIC definition files, and the {\b compiler executable file}) every time you\rquote re finished a project and it works in the real world.\par
\page{} \qj\fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter {\*\bkmkstart BMsec_Examples}4{\*\bkmkend BMsec_Examples}\par\par
Examples\par
}\qj\sb60 \fi0 The examples of this section have been tested in a real PIC. The circuit for all examples is:\par
\qj\fi360 
{\pict\pngblip\picw3058\pich2220\picwgoal34680\pichgoal25180
89504e470d0a1a0a0000000d49484452000006c6000004eb0103000000149d95a600000006504c5445ffffff00000055c2d37e000000097048597300002e2400002e24012ae199090000200049444154789cedbdcfcfe3c899e719515160d44125d6510d73242fe6b057e62660d3b02665a00f7bdc7f416fe720eb62f42a51
405b8b4994f8b61a6ffa90a8bae60046fb5f70dfbc40a31db28ccc4b4e798f753066e3dd1c54cd61d0a6510bac76ad79b9f10449893f82bf498994f5b52b5f512f49f1f38a8c78e2f9c60f842e54e4dc17705569e1735f406bbadcbbf14ad63f5dc9faa72b59ff7425eb9fae64fdd395ac7fba92f54f57b2fee94ad63f5dc9
faa72b59ff7425eb9fae64fdd395ac7fba92f54f57b2fee94ad63f5dc9faa72b59ff7425eb9fae64fdd395ac7fba921511dd3778b2da6a926ce6da0d9eadae9a24735dd6e0d9eaaa4132bca34e7367abad06c90847bbe6ce565b4d9231b46cee6cb5d52019b5d1b4b9b3d55693640819cd9dadb6ae640574253b91ae640574
253b91ae6405445db74bcd982b59015d2e59c774252bae41e367aca6e6c9c68d9fb19aae64c5356bfc8cd5d47cbef112c9bc7ce3ca6ef09435d47cbef102c9fc7ce30592f9f9c6ae248a9bcf377ec79a3b651d359e6fc4dff1e64e59478db73cf13d6fee947574252b208f8cdc77c490699e8c5d2a197dd711aba979b27fec
88d5d43cd96f2e954cffcd8be64e59478de7aef4d53f3777ca3a6a9c6ce23e3477ca3a6a9c6cecfee7e64e59478d670b66aedbf429aba979b2ff7eb1647fb854b2d51f3ad2fbaa79b25f74245dd06c4d2de41a33d6dc396ba849320effbac6843577ce1a6a924c26521f2e910c8a0ebc3774dedc396ba8c91264e540d2d1a0
bcc1735657a3797d11311241d68d4675a3a5becb10710c728164ba830837f00592e13da282ac1b899066639029a2cce8486fe246c9c81ee9b681ba912e68946ce25c2a99281b756474a49f74d3f59926c8460d9eb3ba9a8e41bad313b0e9b8f132c9bc9e729748c6e58f4b24f37e5c2099af2b59dbba9215d795ac6d5dc98a
eb4ad6b6ae64c575256b5b57b2e2ba92b5ad2b59715dc9dad695acb8ae646deb4a565c57b2b675252baecf1b3f6335354e863bd255ee4a56e2841738b2ce3fe1059309f1a6cf5a41ed9075a117cfe592352ef99c2dce7d156da83364edd4675d206b7e1d781888d005b2e6057d93ba40d64eacdf05b2e6efc6ae9035af2b59
dbfaa0f1337685ec729fb3cb2d1baf64c575256b5b57b2e2ea3bd910a50d0dec3fd9ca5177ccef3f99bb4396ea37bd27c3ce8b0b25236cac5e02a1ff64f6503d84aef76414e9f452c9e885920dc53f9759825cc9cea62b595c7f79640bed42c9f0fe52c9c83f5e02195591d1fe93e94a328d68c6c4ddf59a4cc48d2a327cd7
7f327ba8247b63d09edf8dd03e5390a16f0cd27732659b9aa0bfeb3d1956e641087fd27b32b4e2aa18848f7b5feaa3897d997163ba2e968c5f2ad977bb0b25237f362e948c0e87174aa669bd8f885374d9643d8f8853a421adefd155eae906974ac6a7174a86b879a1a53ebae0b8f14ad6baaa92cddc6a3add4ca355c95615
c94eb7feec952caecb25abba90cfe9e650bd92c575258beb4a565f57b2b8fef2c834f4c8b5573cf5b87e93f1557a74d85f328a9edbce3cfdfabb31db7996d2c808bab1adf930f5b81e93d9f7f668aea51ed75f326c6f6c634e538feb1619b1f5c47b59648379fad3db2132861d628f136fa7926dfa428619dd133b793da935
f5e6b63764fa03b1931cfd27234c1f133b392b462ad9fbbe90e96cac935b9e783f95ec29ee09d98c1994ac59e2fdee93e5455792eca59d783f95ec67b827f5196616597f997c3f95ec07b827318824fb65f2fd2cb27ec48d92ec5f92efa79219b827b1be2453ac179b41d691f6599eaa9075a34d9d2749f6ad9d78bffb7990
3c49b22d4bbc7f2164b72cf1fea590f1c4fb1742562622ce5197c8447465277de74b212bd13ecb51a7c8f4526dea1c75890c5a9e893cc8e822c81e14b9ab8b20830c8f6ec7deb62e810cb27294c5deddf59f4cadcb25bb84e72c457d25cb9f48beaf64f913c9f7948c3ce4eed253323dbfdb574fc98e099ad40e6e3d2053e4
88f161aa75ec9325ef4e20c336417b8274f15bb27a30c908b1fccf3beb77a61f66c8cf216394b882cc45e8837e90cd0e49b85c32fa728d06043dd3b06d1203b3fc939f95ec0882b9f73369e64a32ae0ff1160db0ed918917f9273f27193df6cfce251b208fec43201b123bffece7249b1ce7fdcf21fbd5f70c8fecdd00c8b4
22fd81ce49e6fe91072fd3c990473682c14bf8a5db45b2c4d510f73776f0ba1819a1ee474046d3fdc0a3cef89d4df6abc3eb1cb2d78f814c94faef04d9cc25e97ee05167245bfde9187114237b40ef461d248bcffb8ddd7568dc00f7de9c244714ec0e64038a5f8fe06e245f14f8bcf39191075a98ecd553ef39c3af3f0132
fcaac0e79def6eac4026ca46b383648abbf168c5e63c67af9e7af55940f687029f773eb23225c8ddd68b416e5f7f1fc8d0d7053eef746489f9f54b94fa775b2f6ebc7d3def20599d9afa6e2b637dbc363db2226320cf1b5db1e0650ed97a2dda67ee2b41f6935e90158a887d32d1a62e4b86ed130df54c46b1855a31d5fd33
727ba261838af83cd4f24c6d53d7205b170955da51916c417532ba2e125eb6a322199eea64fa19c98e59b9f47c6375b28f5f1669c6b5a4685737aa5ce9b132d95fdd353fa1406145b3df5056260beaca643f3a15996a5da6a86341ddbdc2c2a84cf6e89c645197898af22cd9c1b132d9cd59c922ce20456345eea632d9fd39
9fb3a8281a2a72a495c93667fdce22aa45865d36b1670efee5de2f96a6eeb7672cf5a3aa49c6577cb6c79307dd053b4a90bd3f514d9d7f6bd423b3e78e638ec9481b508f0c9f310689499420a806d9236699948cc0a981f10982ec7c11714c54149595cb4641668f4cf281241b20203b552b265f14bd40abc4bb85c91e03d9
9d241ba153b63ca35a2247048df1b871a7e820529c0c211387c89ab8cc0a02b207b48a45574e9defec2990fd8328410832d1f9b27240e6a255249882ef8cdaf1e30a97faef259928f51f4e4c169585f842b717918e9af09c1116dfb330d916ef4dfc6ab2d75d3447e7239b62bea0f622f215898818257b0d14be1b89241b0d
c5733647dedc6689939d404046d822f21589525fd11fa238191a98f8e7e239430c4e323bfa202d2b1a83088485fc7fe83d5153d7267b2dcac62359e264ada87d327b601249b681939ceb391b8b5b5114228887de136475e2466c1b26f94492c149ce55ea0f61084c826ca8572ff56dcca62635a1a63e3159f46e4c21ab9e2d
c03672f6e618c8e8da46e723135f8e8aac7a864790adfedb6cfffd11d15df951e722a31429c8f444568e2a46372925c826af660e90ed3db28922c5d78af2c9549af0ca7990d53abf9772238a91bd2c46365a54cfca9daae51925235f142333cdca64eced59f220402602acc0114c9559bd87347b73a2ac5c8cec2b94884154
ea1f19fe4331b23ae3cfce47168ff595aafe9ce153e5889364f1f69952d5cb46bd5007cf0614fb03eed04287ffe7a97a7da66f1533c4b4a10459220fa23c8a557fceb67fae786849c5c8162891bb5289d6184f3dffaee2a12595248be71b551aca3e3c2e8347666e11db4cdb517a3124ecc5a08c29a31a55b58f313c324ed1
04fdc422cc7c92b2a3f46274cf8b41d0eb69ca32a68c6a54d5c82c4966cf3fb66736fba9204ba65a3d492f66ec793104be35515377c66552c9f4c8cc8fede74c90cdcdf7b67a47e9c5589e17f3523a16376fd3a78c6a54d5c8663b8f6c64cf99fd3bb230652640a1b01773075f9668c59caf4759011dc8d87c63bf216606d9
637bb4201a907d21c92628398d4a2baa316baf24e3f782cc7a24336e0a492f668e2499ec1ade9d19f3d2e49520e69cdde035193db2997a37e9c5ccd187e0c5c063d6133297fb64463a197831820cbc98812cf52b7e5e79d5226382eca9201b64906df17e8e06e0c57c0c0140b7c9747f8c85cde7267b4af07a987137124906
5ecc97d035e85c79fd629a0464f395c3fe86b86b2d8b0c0de6e823f062be8207ed5c5e4c311dbe3353903d1364348f6c0479fd7750ea77fb3b0379a53e1bf16f34b42519a53eb1070b7224ebf673060ac8e6bf03b25fa5d7d4472fa66f64e27ab7388b8c4d2dcf8bf94af6e1a9f879e5558bec913d78fe6e809e22273d2246
ce7eec79312fa16cec0fd9ece7922cbd158356ff4df7bc182a5b31153fafbcaa915116904d3e02b2456acb13bc18e2793158c62093532dfb568dac8e1773c6713105349a57f7626e8b0c076d4015dbd435bc986db7b30557b284ba4e56c3b1409bd2cf992522556756b6e0a94856bd04a9d027d523cb4dc9c7548dac465e5f
c7a54b7d9fcc2e77544532a7861793eec063f542a6161211a7159f43324fa77fce9425886e138e7658353a3120cbb72ba3aa4856638eb267aa8f9c717d471eb0ab7c983cb2dc6e0131d5202be2c5049a1cbd1825d9ca99eca98b99d293f4c872bb72c454b13e1b055e8ce67931839c03c08bf1627da6245b2c0c837e8999d2
473e29991978311a925e4c1e1978313e99b26f01b7aca14e6f9972ca2c9f2cda4698f19c8fac18112f022f6688a41793374ba7742ce0c5f446598200d9909420c3b92bf0d668c5482fe67324bd98bc8f3992a97b949526a3ea6234a45a2d4f73c43ec7d28b294ea6ee05086406dea491899a3a46a6b3996ad790ea7a311a90
59f9cfd9812c6507f1bd00594a0992249ba0bc9abbae17a361f0628a94208472944eb68051011ba6f4b0556463c5b88fa8ea7a3192cc2852ea3fd00cc7823a780f6413d52f55cfd914e5d5dc75bd188d8017934fb617f55946568e72bc136459d15594cc4279f55b5d2f4623e0c5e4df8d437fcc604a5edfffced445b94fe6
44df6b832cecc5681f801753e439430c72c4695ecc124672647f673cfa5eabdf9929c834f0628a948d8865793153a4e73d673cfa5e1b64a020afaf69e05814274b2b1b0d44812c23228e96182720fb507a3145c8dea53b1698190b9a51ea27db6727201b482fa6484dfd4ef6e151fe5a9241749511eb477fd532d9237ba00d
a46351808c7e915eea6793cd5cddddc5f2202720fba82099a8cf326a6a1911d36cb2f05bda2cd7eeae91950b912d0a90ed6511309d28064621e42ca76368792a23628f2c52d5e9ad91d5f0625eaac8826c4191c99a415d24bbb155e59f9fe1294e96bf4b35325c9d8cb18cac1c2b9a7a6b8d8cd421cb7b268ba83db2ea79fd
8e9369d5c9101b553c34acd6c88675bc98d264306f7fece16c8d6c509d4c47b909e5b844e1124769add4afe1c0ebac3cd9ee7464569de76c5ef61818f47c2a32b306d97c9e7c379802536d8712110cc7c9207592fd49757ab557f362e68a2b22e95360cadf720559621dbdf85179d7a4944fc6612e2ce9c5e475a792e362e4
0c436cce1457914df6fb9d826c96f391b562fdf9c7f6ca1b1793678f8317036d2aa8a999e22ab2c9b60f0ab2761c0b9fccfcd8bef1c6c56cedecfde5ac5092ec46d57d350817d55f3d616e7c754a1de1bc2e0af5c8463693e3621edddad9fb4b322875a62bd5ae7964a229107d4b4794e75c624d32c66ec08b49ed211d4892
c936f544b512501e99be4b904d14a7891e95f3fb3445c8ac62645fa3f46bf77ea6fd963c24c8f20a90da5e0cba975e4cded872f062f06b54950cb9b101bd7a6e0152db8b411be9c5e42d36055e0ca94136fb63f42d3db700a9edc5e0adf462f25af9e0c510599fa9af82793f537fabc7aa159df2bc2bacebc590b5f462f246
a58217730764b3e43226ee31d59ff25b85f22290fa5e8cee79318a19f8a364302ea649b2dc02a4b61763785e8c95470679fd46c9dacaca1df2fa96e7c5e4f55407b2dfcb1960d557c1bc9fa9bfc5f1e7ac7db285e7c5e47c4a6db27862f904645c7a31ffc47276879a9ad5281b2771b2fc2baceb5830e9c5fcc9ced91dbc98
8c795273c956bf8fbe750232f7bf4ab2bcd172e0c5a0ea64d84db662f254b1df9513257b5e806cef914d541370e491d1fd49c92a49b46214fd07f2c8264e828cb49495abb172c0fa4e71157e2d95d2a666abb835afe36de7c8d856f19139641b37912da01d247b5b9eeced5e41963751d1e9c9de28decdc937fe9f4e824c27
72a2cb0c552c418acedf98d014a9c83ca50d1021a2e48d938ddb22abee0ce2bbd44367828029de276e32fb6d905bd5aee1a34a5f1bc8a831479996dace9fb95c997580097ce2645392977a39f9e811fd6deab8180ba7903949328bd83cfb932a92d5980b307d664a0b394a071e70e3ce606b644d8f8b91b2d04267c54ea3b7
d63ba9e8b818fd01ed618e905fe68c8b9112643356ecf35b2333adc08bc999a34c77898b199573947923c5d5e362a43a4176181793e3c50c087d79cba89ca3cceb51c6dea6e6b92c943adb67fc32f5694b64d6615ccc8ded7931293b0ef01778c375394799ccca4d6fd2c70c8a12248d2cde874e375aead57e1c1793e3c5c0
2c57824cce51f64af6dccc9869d942ea521f213b5e66ea63c53a0d51551c17631f1c0b39475906d92fd0e657dfd38e6419b3635b24850cb3f817a4e9ad8eb13890591964af118e90659c53445729643c31659b6eb7e35387bc988de7c5a47ccc808c804cce5186f2c9ec945bcc494cbd41794b3ef5c18bc1b7d28b493b8dee
8e60bd783947594686c753ea77865ea0e53cfa0e6969fcd9d18bd1bd713169797dfd61a4dfbf7e2ce7284379b3afa53e67e8099af2d85b296db9a3ea7a31fa567a3169deea007964725c0c442133377dbeabb4885894c58349fc416b659ce7c43d7a31e8b7d28b497dcec42d78f3eaa99ca38ce5cd51965eead35fe8a5677d
acebc520394799a96c31a203d928775c0c28bda626dee0b552aa9bd747cfa417934e6644c9329fb35432fca09f9c8cfd7b20fba7b406ee40fceffe6e5b6c8eb20c3277527a868ada64728eb27f4aada9d1100b3233675c8ca7f48898b8a5273ea9ed58dc787394a5f54e1a20fad227a3777973946591fde6e4642b6f8eb2d4
568cb8a89bf5fafb79e362a4d2c9a8fb65e9154b6acce952648e327103ee7db2608e32c5b23abe2cb44c25db9e884cafe1c554592f46843b65a7e1a99a6fac9e95bb5957396cc6952340b35431af5f63ed91b4e677a6282f3d4b56c56cc1a9c9d222810c55ccf0d4f1cf2a1e5956272743db4ecf68feb8fa4c5eb8dbb3d0ff
b0c6aa2ae42c6b6915d5b486cba41c33d8822a968d35e628538f736f5e35e6bbaaa4aeafaa6286bc98ff55b49189a3e1b4c996a5267d592fe6384719b6ff1777e3e87b8d640e46905e0c47d28be9f4dd68598117436c6692dd78acd1cceedf212fa6dbebc518072f06c8a861516d984d065e8c6c79767cbd18bfaf9c39b2a9
6d9bdac0249a914b1678319daea98f7394e9b740b6209a954fd6aff5623e1664c3e11c698b8264153fafbcea7a317f758bcc8126c8785e0942507fe6d7072fe6473e19cd26935e4c5e56ae59d5f5621ead7d32279b0cbc98d3ae1c5045612fe62620cb294186fe68c8acbcfef915f662eeffde7fce724a7df062a050ccf262
9a555d2f6673e7930df2ca466f85fbd37d67387f17a582bcbefb0d12a5bea8cf7263102433e4dd7ece4007b2ff82bc1824276e14646fe1453fca4620c3af804cc48d24b7a6fe0a5e34408639d9b81ce73daeb5eec64736f4d11111b188f5b35b31e0c534b5669d24dba5cc7e5e5f07b29f23d18a11edb3ec962778317afa28
ad529264fbfc09892bc95f41d127c38e6853a33cb2bd473641b56718e2e4963dc12ccdfff1f541a5734bb24a9aaeecbcf9a673e5d05b36c62c676c69c5e7ac7a3fe29b66c8f49479dd8f3a79df6fc66a3f6a0b0add5cf3b27b356664a82441f6a2e2a1077596eca7150f3d68296ec5b4d9cf8faa4856634d71f6aee2a10759
c34e92e1db4e93e1ea6399745c7b2dade9b89b64db634d9d1f215155746818ed91911a9ee7db30d903ca9e59840af6047d57c99e85c95c947d7dd4dd277bc68c5b24a3a8e0b89840d05585c18b29faf4d86705e208e53cbda10f9a26e7c21d5aed916928f062564c8e8bc93b8dd8d77564269545c8a89d4736d6137b0059da
dcc547d52193e362981c1793e71c897dd9c2230bcd260a73d96677bba768384c7c37bad55e0c3244811733f7d68bc92713ed6f9923be899165cf5b25c8c6895e6674d11ed920c8eb0b32b95e4cde3c0292ec73245b3151b21fdb59c751589284c5df14646dc5fa073236f7d68bc9ebef75240bb73c6b90e5b7cfea7a31736f
bd98efe5eceecd588f62d90228413eb3b38e83691413643060618af35a4375bd98cfbdf5621ee7ec0e2588a92243696b097ba2c848d67882ac401ea4ae17b3f2c6c57c96b33b94fa5c4136c9257b91acf130c305725775bd98e7de1c654f7376879ada4992b90f387be64788ae12250590e5e71beb8e8b41deb898bcae7d62
5fef398be4f5c51d9533fd00751d94374b588a6a8f8bf9bf605ccca37cb2391b0464fcf0aefb904bb64315b30bcd8c8b7994d73918cac641f23b63139a13110bae8ab9e066c6c53cca738e0e64b112444fc64e11898818e6c6aea2daa347fe8b1c1753958cea6e66270a51eae704bea96a665cccaf72637db1afa122fb328f
6c5c600228a5ea8e1eb9f7c6c514215b5623abda99a9a1713105c854f59988aef29eb371d56479c56c811d908dbd713145c898df3be958d641449c47363c2d995e63bd98508fb24264938a8e7dc5564cf5ecf7cd3ada8ae918d9a8861713eab909ebc3e491e9bd246b5557b2a86a3c67a8db2311680d2fc6aeedc0175b96ea
e4a5be5e39717e10e545f63afdec6becf38a871e440bf504397909d2c073460a8d663df3b898893f71a39d7ac0cadb216cc8e4a640a4ea8d8b8140fdf70f143e962d289a2b761d5964e2defe32655c4c30d1374bfda860a2eff07bab22cdec7ae3625ce709fad2a5f027b717d4be51dc26a32990a5cd51568d2c6d0acb88ea
90d9738656f815d108fbab5bfbeb5432f135c1b818a21817538d4c2f1270d52841a03589dedfbec277880399c66e6cc5ae3f906464805f7ae362b6e1a6a4df5ccb98bbca6f98465ad6b4480fc07ae36218dadcc202eff3bfbac53fd7b892ec87824cce5176a71817538d0cbb056ec77ae36204d91ac8168f097ea5cd95648f
059976248bce51962423b1af4345868af4b2ae99e1c19b2d903d72b7826ca1265bfb645f28468f24c9e2d5b0926c56e076ace7c5306cff76403441f65ba269e68de2f3468f04999ca32c99955391e9b1ae044a32fd8ff91356d4f362dc7bfbb7baab21f3f10782ccba517cdee8d15690c1b8988264b14748494673a7bdafeb
c508b237fa039069826c74f336b9e3c81464728eb26264f1d50f946478bfca1dc556cf8b1177e39b011564cf348166a886dd8eccf7820cc6c5bc0af2fa21f90f157153e51c3f33a407bd95d58b8e5e8c20fb1d3c67e6b30fa9ab0de68a96d3c87c8ae6728eb2770d92b9e973ded4213b7a3182ec9d5736be1364c3b9a213d5
c8fc0ccd4787f9aeba4d063a94fa92ecb90b3f3435d9639fecab42a57ea11204b57437820e35f5cf650cf2ec23f1833e55de8d3f46733947d91bc598c18aa57e5b2508e840f61ac8f8b391f8419e2a4b90efa1b99ca3ac18192d42d676a92f23622023ecdd6884dee0f72f933b8e4cdd23a32f15a3212b46576dd7d4e0afac
3e1141bc6bbffb04c8ee55353590c939ca88628e324544cca37ba8a3abdfb4155d0511b1687902d9039264cad5e14726f5c8fc39caa2bfad48d65e445c63bd18e56649b2165b3135b272d1cda07a63c7b778748fa0020bbf57a8e5594d7566ab89a81a99dedef0de3a59b988aa9115caf05453636413ffbaede35b3cbac7ca
db2152ea16caca5553636452d1e1063cf1fb456c3ef36299d46a6a8aec09d26dc2a305028fec3112fb2c6209a062d9ef6ab26aac3d12966bcfb8bea3914e983cfa49629f45ac1b4f31c7a29a8c652364a255be72267b1a799747f6b7c43e8b58a04fa3bb34aac9d7cd906dd862319ed24817461ed97f89dfb345ac87633167
b09ae8eb46c888cdb9351d53144e1bf3f01e7847367c71cac90e425eccd7036d264a8001458b02ce5892cc1a6690d19dd8a75ac05331d6b7022f66805e0b32f1487f44d152cb5b5ba222d989665b0205ebc53058a862a099e2dfd1c7f652cb9f2b3e49b6a01964c812b7c2f3e85bad2a582f862103bf1e6ba626c97eaa19b9
c3b5628f0c47922cbd0401b2cfa26f3525e5f0ff60bd1886f678301e00d92723fb6f35d1b2ce51940c33b400b2707f381ed903c87ec64a5f75114d54a70dd68b116464f0589011d31cb1679a55926cc2a80364e1eedd3cb20790ada26f35a594d30664038f6cb217649f6ab937639ccca65c906544576d92a90b854309f201
900d26fbef9bf3a7e5c9bcef2cd2e39647f600b217ed948d29fd7cfd529f4bb2d99e984076f798e59d2ef69c71b4ccffce2a8772316564a26d6f8f20fb2d6a6a3ed0b4c7a3d98e9873737e73f7439e756650ac6c74d034ff395b58b5800ea2e964ccdb63e21ebc1824c86e5e9b86369fcfcd9b37d3bc55d3e3640b64005946
440c640d4557f96407c7029eb30f816ca0cd7fb272e66fac72f51945cf99915feac723e2aa8a0d0c0d3d03e1c17b87b2710064a26c14ed91f93766b9525f9241749551534374d5d0fca371b26309a2262337bf92646c347fd61259d5611631c5c85639641f49326d6e0bb2bf2b49e645c4e36cb25b1e6f5357559cecf8494a
b211618e20bb01b21f58b9a558946cc39d25b43c3322626879e637210a2946168aaed4649871531b6c6eedc17c6c942b1b0fd9822c3297c57357554553379364a27df6090cd1156418c8126b7925a4ccf064914186073713841420338f5e4c846c4819ca51b477929f958bf8113cb2bf0559b9aac306632a4256675ccc6d4e
4e8d573c73be0a902d6a783137eb9c351178c533e72b9f8c3875c6586c73f240bce299f3f5974c86cc1ad9ef8c15813df18a67ce5711b23a8ec59b9c4420af78e67cb54c86ef2e954cd74e4496fc98b6c92ef66ebcdce72c63857b4fbce299f355b8d4f7bd18b617a11d244586c945ca886b3f11ff2132db4dbcd86f8a3eed
74a9ef8db1002f668ad6ae08c711465c476fe3063211f06bf7adfbc16c2fd70e80faec69a76bead1c18b71f1cb97b7b7f663827fa522439bdbb5785b330723dd27eb760c621cbc98eded17788b18907d6cb3f88d46d053b44573aa99da88d8de1c65db1345c4d54a7d3df062f0eded0001d907e4938f596238a04fa67d28c8
bca1ab1d6fc51c5a9e0cdb5b435c3b7aa691d1203c199e272023683e18001983f44f6c5c8c42bcd6d567a94cb600c84688d8c4bd13645c45660764c823cbfd7c5ef1bae34a1a7f25c84409827f3b42d821ee3f6883c19cc59372a204718840fa489420884102b91f64e0c5e0bf17340fe8d987826c912473d983f86ff4d16c
7f72b2a4f2c9c25e0cb91b81c1f76c20c8f42a616f00002000494441544c164feb8b5a7ab2766d7334db09b2392ab24207af75f54755f9cec25e0c150f1022ecdd40a0594932f1ffadacff8c1059f6b567ffb6b8aa9085bd98f1877007f2771fe90f8391bcf6b0a04e798fd0fc13f99cc1e1a7fbce92f3eb972a1b913500b2
a7ee6b416628c99e0a3253968d70f8e99eb34a35353a922d0686088405d9880c062c7e553e190732bc81c3bb5d82800232fe11c420f37730f265c858f4584106753562df0732b938496fc84460311471237f07e34334259978ced81ce2c61393d5bc1bb13da22fd79bcd6bd3c4afc886458f05b2cd561c07643ab1517fc8dc
3fb9ff0771b17bfbfafb92cc4e9c1dbb6bb1e34f4c6df2203faa2f772390a13dfa1c4bb2e4623802e673e293ed3cb2710f22e24a9aaed63903ac78c533e7ab65b293b53c936a998cbded72b600d5213b5556ae462ba6922e980c7dd30db2a1b7869ea766c83a92fd9ed94d93e153398339dfd967ac6932b2fe327b0f5ef1cc
f98a90cd79d3643af973f61ebce299e3ca891bd9bc6932037d97f1eb89bbe315cf9caf2899598b4ce1c5589903564e4866d524032f862da5172387464f17f16a25fee1bcf095965594cca84726bd98cd83f4620824f4a75ccb8aaec8e94a90614d32702c9ede492fe6a5742c18cdea3b4b508bcbc447c85ed026c888f462ee
e40c43eefb2c2fa641b29cac9c416a9311f429915ecc571e19cfb9f4137d6735e346cf8b7986a4172357e1cbcf16f4850cbc9837487a31974526bd98374be9c5bc53cc0fa250536435725745ce2ebd98bbbdf462fe13d4d5f979fd9e90492f867e21bd98dfc318917c2fe62477237623133d542243ef11d5a417f315d467a7
fbce324bfdc3802d7fdfd02515277b8a60ac24948d8a19f3146a6a868cccbbb151325c90aca16174ad93114926bd98579746269e332abd18d56ca20a9d84ac811204bc18f285f462a8628e32856a2f5f7df8ecb8d4cd27a0aa42065e0c79905e8c9cb0249f0cf62834a155ee67c7a52473226466d195033c2f06eda417e3cd
51364639e39d808c64cd715e5005c97651b2498be3620e646e3dbc8264fb08d9625463bd984dcefad44f90bc1b4f45e686c98863b6387ac41b1949db253b968d7fbc654d91e5f5b63d9041afa78a9f022a589fbd0773fdf89c9d88ec49c50f912a48767fcfc264a8c68c79f739cf99b750ad24ab35af554132feffb208599d
957072425e6f642490915a617f51b27fc7c264a4c64a389b9c6fe2484679c50f912a4a06838f4364d5e7dc2479a321bda5b881ac56019243e6df0e33c475d6d073a6939c12c41bf00effd65b32a728198c270e91551f1763e48dd23a92d59b18af20593422f6c92636659423349ad873c42c33394799ca8b294c56af00294c
060ad567926cc5278e0874ed4f565c902dcca5820cbc98ed83f462bc587f914b263f4590515e8223a98a64f23973442c329d62db741c41c65564d28bd97a5e0cf5bd981c326ffa054156af00a9483692e36298351f2d86c47e245ea00d337faa20938e05925ecc1dbc33657925c881ac56045295cc9fa36c341fcdb589fd3f
8817686b9b7f9b4ae67931f0ced47d9fd3a3ec40567366cd62642b99248cb53c896dcc1117644f81ec2d2cf9903cfb53f99ff462dec03b5397e7c420dedac62dc7fa696448660b081a2c10135f1df4ee465f21f35315991d90218f2cf78abcc940ce4df64492fd3590fd0199c928def362b68ef462dec225778dcc9b9a2449
366107b2bd20bb4b9c5d7a31dbbdf462dec26d5882aca64a9185a6beda4932e200d916c81e9079a320032f66fd85f462de068e05cbbc22ecda2e6e3bc3934b869607b26f05d91bc5d9615c8ce68d8b091c0b9e7d49ee46d4eea72543493203c8d640264afdb98a0cfaeb536f5c0c9c24ff3b4387eface282b9a1cf8e2a832c
24ef39430341762bc93682ec1bd5d945c9e97931ac585edfb399206eccfb72b35587cc36d0806b820cea331183cc9fa9ce1e90e1a264b2be13647abdf5016a90410c32980b32780171e3fcef9267975e0cf5bc98628e8597589771638b79906c32112e1a8b215ec30b18fb32ff41f2ece0c5689af4625e29d68b5129207bd2
66ee2a934cc4fa4b4bc4fa6b2463fd85394fcc46e879317428bd9861312fe6403645b56637ac43b6e233689ffdbd78b17244cb534526bd98bde7c514aba93d9b49902de38b31955325323f2b37b17546b9209bd8826c64ce13fcbe17e3785e0c47e0c5d03c0349c20bb2ecfe82b9aa4856c38b7959948c8bd2b7e2a780ca44
c4072d6a90ddb0bc6fe28c64c4c1d5c992d336c4254bc47391911a64f3bcd5d2653924c82070abf829a0327d0b0e3249f5bc7e71b256bfb33432ad8663c1e3931bc47556b2611d2f268f4cda4ce7221b5427c389c90de292f573dbf5591a590d079ed845c9da8c41627d780e32adea64ba68cb652b206b336e3c2856539b66
7532a330599bb1fe4171b2d94ee1c5503ec25f465bf8ca71313ce792a435d872fbec203599e7c5d0c08b99ec1464725cccc01b172367185a24e7688b5f808d5a6f531fb48a6efab1bee7c54cb8efc54ca7231c2b1e3c2f8619d28b4116022fa60899ccf0b49907396812fd0c8fccf762460bdf8b112f936472262fc39ba34c
92b1703e562999dc693177b50aa7fc622b8ef9649e17639abe1733d7d2c8a6de1c65f03d4fdd7b1b658bb276fbca01d9b1d45fb1f02e1e99efc59823df8be1544946d0fc853747996c53e79311d66effc699203bd6d47afc613e7a3182ccf362185191d982eca7de1c655fa342d98260ce795e9625769ac43b3e19d42a4732
1cff1b1ebd1864f95e8c924cce51f64e7a319bd7a81364f023145dc517313a7a31c8f4bd181599f46236efa417b32d4ac6bd9fbc1c49e2348977d464f20fa9f462d0c2f7629464e0c5dcbe925ecc16eab3fcbcfe3c582780d7024b27835f84e246d93b49e9c520ee7b31cabb11bc1832905ecc9b802cfb929d53901d37e573
a620334409cd7c2f464d06fdf507deb89862df59eb64d14d5936263d4ff06228f6bd9814b2a7481b78e3626474957b454e10a4f0a20c6a152493f5599cccf36286d8f76294f5199051577a31bf9733c0e65ed1a14f122f4690a662645e0c1223f3bd1803fb5e8c320621924c7a315f9624735beefb2d37bdb8314ee6793116
f1bd98c570405092ec3d4203e9c5d845ef465fed92b9ee5bf8e1c5faf1d1239e176312df8b994e873449b6d9fa643a2a4086d9a87d3297d94732557f10df8b99fd7fbe17239a6a0f0932f062d0407a3145c8a8336afd39232e74f7b6bccd1899e9ad70ef793182ccf36228c7bb0499f46224d9ce231b670e161a2edb27d3dd
3f33581e3a83ac8aa6abdbac1e6503a37db2890d77f92892ca62fe8bc5a8ce1c6589fe30218d06231ebce6e9bb15512ad913d9f74f49469c1a646c9bfcc8a3465afb6453df0d6c9cecd34c32da3ed93218c671fc4da84f6a9d39cab27e3d22af79f09aa7ef5644a9640bbf27aa926c6257772c121d7dc21ae0af79f09aa7ef
5644a9641cfd073bb40979a7586fdb4a9aa2375987ea7663330c65903db6439b51b21a6b69e1379973bad84b1ebce6e9bb15510699e75e29c96a8c1e212f8bce4cc9d3f729a254b2c025969bb3584d8daaaf38a5d3a23353f2f47d8aa8d87796206b715c0c4fbca8a6626413151976198c70faa1cb9108185fa40d3d5a3973
42663b5c745c0c4fbca8a662647aec3933bd957044acafdbffa3cb4dfa805d9cd2e658ed16f483d99efaebc5e48e8be18917d594519fd1e3266131327fbd98e572c2e62364ea3a2164cb12e702cd47d6503307babf5e0ca739ee334fbca8a68c18443f6e621e25b3fcf562b8617141b630c81d7e997229f3c168a0999ae1af
17c3c8b9cbc6c025f636778a9a1ae6fd1e98f39f8c441c89eff05d8a4d3b1f0c46a1f56272c7c5f0e0455b6deac025f636a751326a4bb24740c6049985df88005a3dd5c27c30b406a666612f0f923b2e86072fda220b5c626f731221437eeeea918d16b0e08869a2b76880d4dd21e603ba1064262a922d4027200b5c62bf1c
f9355290ddd8686eda926ccb53c946847f640e4c844aaeaac2d3f729a28c3c080f6d12458e1883c917906df66964ab1d661fcdf6dd210b5c627f334c76582f6623c81e79646c964ae660369aed4c244b98fcbc3e4fbca8a682d96fd9d20cc8263e997d1f22a3afd2ee468bf0916984c8b22f99275e5453513250fc3b93cfd9
23e491e177a9cf195d7c229f3338bc7bdf19485536ce1ffb6428954cd4d3a62c1be1f02e3c67c9cd24191b2c3e03324bfceaab8cfacc84faec160eef0919c4207f036430f0f64d6a0c621895d68be1e9fb14513d326e98cf800ce2c6b71971e31ce2c65ead17b35c5adf2019ebd3f53a2dd617018820d3fbb55ecccc99fc0e
c8e803496d9fcd070bfa1353a3a75e2fa6129937a78b20d399fe0f40261accfbb436f57c3027820c07ebc590e2b17e7bb3d5c4368f647a0d2fa6f07a31aedb6ecf4d15d9c2a89e95bbd9e6ecc18317c9fecba554854cb434abe7ae5861b26082a88aaa4666d5207b9ab3073fbe6caf577b6c3394e1a9e1c59420cbc90565eb
e464e87d4e89c78f2fbdbc604555237b5c7d262fb42dbe22f019c87e58dd65c225d6d23a03d9b4bacb44ece26b699d81ccaa3147595eb9c08f2fcf4066d6f062141f19113fbe3c1759cc8b49bbe0d543d48b2941768e527f14783104055e4c3a99efc5f8ebc568c5efc633d4d496157831041dbc98944fc0b6efc514592f06
9d37baf21d78d9a6a628f062d6299f806ddf8b29b25e0c3a6f44ecf728937990190abc987432df8b29b25e0c3a612b263404e148465990bb9aa1c08b49bf1b7d2fe68b42ebc590034edb2dcf153f5e233bbe1de41b61fd7acf8b4927f3bd1839423c375b406b7d5121e5931dff7009b21b200bbc987432df8b2946a6d77ab8
42ca250b0d498c93811713906df6e964be173328b45e8c5e7f7c96a77cb29058f0e1472f86e0c08bc922935eccc7f037cacdeb4fce4916f6620e6434bd6cf4bd18bdd07a31e721b3bdb7c25e0cc181179396df8012447a31c342ebc584c870bb63735386fe1eca46127831e964be1733283493d7914c5fb75b9fa5542a417d
e6918117934ee67b31c55655399620b36f6bdd98654afdb08218847c107831e964be175390ec50eaafdc7623e219571e17c48d440bbc987432df8b29b65eccb1a67ef140edbcbd335426ba0a2bf0623c32e9c5a47c82d8cdf3628aad17430ecfb5f3e4642dcfb0022f867c187831e9f599efc5145c2f86072f9ce9e9c9bc19
19a417e3918117934ee67b31c17a3139330cf1c30be35c6495345dd946f61efcf0e20c648b1afd886f5887c98853a3ef3763398f1a3fbc380b599d99bc7216cbe28717e778ce6a91fd347b0f7e787116b21a8e057f97bd073fbce81bd9a628d949461dc764e2ea639970de5a5a3c78d13732b22e5a539f858c54f73c755a94
aca64e4e66689d26a3e8e8c59833a4b3595ac37e825d9bf2b0179337b72dcfb9e2a2aa46a6a1c3b818f47d97cd9c595a40bcdab87cb2935e8cbf5e4c1fc8c08b99b19b7bbe5c9a831432b6b19de9547a31fe7a318563fd9aaa46363cf66fe44fed85f891e28a417ecb5a0ca517e3af17d36db2c1210f329fff3582aea9da4c
797a201bcdb5f07a31bc0f648f0499f9163dca22c3b6c1a9f462fa4086427dbfcd373020d44c192f8719b6078c482f467a9da7ebb9995409b21b5bb442ef24595a09b29364d28ba11cf5854c4e7e379764e9a5be47065e4cc159e879998bcd5095bb31ecc5a07b8f6c9742a66f804c7a31b4c07a3193b033524fd175e0272e
0fa3c436c31f1f783178e3dd8d699627be9764725c4c81f56266922c6387f2dac921820794d86654612f86de6a9964e8399079e3620aac17d320997f41e40141932140896d2a14948d439243f608c8bc713105f2facddf8dd4c5703e7812687253a1a03e330895f5590699a8cfa41763175c2fa659e974bde14794d8a64241
0c627d40640c924206dfab88414aad17d3ac86646df3234a6c53a1206e5c6844c68da964cf216e945e4c91f562744e18b96de441fbc0fb31c66fedc51125b6a950e0c5cc352c63fd34327e0fb1bef4628aac17236a0f20ab65e3061fedfd30f05bb4202c40896d2a147831abff1b41fb2cf5397365fbccf3620ad4d4ee9e70
41d6446f17ff8224ca1f9d08d971332e93d8811723c8a04d9d4a36936d6acf8be1487a31195f08decd88436e59cd052fa5820bc20c2ddcdd0125b61993a9d7582f26cb57275c9764b5a69f0fce15fcb411df4d0f28b1cd981635d644b8d966b46208a3eb9d20ab655007e7f27f521b73c79888fa992a3663c738a31a5ecc9b
8c9e9bd426eb7f1664290f77290564baf87b39e3034a6c33764c2db2e47aa6475144d6bf68986c2cfe5e7c7840896dc664b64526ee42f28f82ac9655e12b207b8126880f0f0f566c33a63a6b8f209e4126a214f265c36410dc8750629b31797d522b69ea2d7e99a216c80817304794d8665c754a7d9cf54701b297eb46c9a0
2c0ca1c436e3aa33fb1ab13316ae1f2277bb6e960ccac2104a6c33ae3a25888e329f3341b66d946c0875b3333ec4fad1cdb85a1b170364b7ef1b253380c0310e71637433aec8b81813e61d9da776f2a06cc50745c7c50c11deda2d901dc3a9d8665ca17131bafd7dd776d9dc4afb8089b3da0dbc71317286a1cc39ca7420fb
4ed4d47675a240fec74cdcb7ae730c81639b71f964be17737b7bcfe7ea1934e4bef3e9407a31fe7a3159e36228907dd6680c22518ecd96d866e26a47e6c18b614fd1d65ecc79da07cc47f3a13f4799246324635c8c881bb7f67f689eec5b1e213b6ec6151a17035ecc1699372ced036049994178bd98ac713104c866cdc6fa
202effa5299b2185c6c5cce75bb18bf9d44efb80399ad3813747996c5367ce514698beb527cdb6cf405cfe5b800c85bc98f916b26d9fa67ec002cdc9c09ba3ec6b94972dc0ce44923591e1aa45065eccfcd611647f9bfa014f804c7a31f835cacf83fcf7adad379a0791e2f2dfe264d28b61f683204b8f98260cc8c08b2105
c8567fdadab499dc5515b2b017436fedc95d6219b1f00738824c7a3104eab33c2f6623c978e1eb4f5715b2b01743ef6df206a1cfecd44f58cee57a3126d202325efbaa8ba8ce77269fb31b04f35da797fac81064deb89802df5983aaeb53a3c7083d13e5084bfd848120f3c6c5c8e8aaf29596553d32d13e7e0c45be991e83
08323a905e4cc155559a52bd9108a2a6fe9f604518333d6e8425650665d68b694af5c8b8317f46d07b1137a62eac3a3744dc28bd9882ebc534a5181909d6ce526e86147831e63764b311b17e6a2b666989585f7a3105e7496d4af5c866ceec7758b6cf525b9e33689f492fa60f644144eccd51f639b4a953536d3ab4a9a517
13ac17536bfc77715523abb35e4cbd318ec555896c51232b77b3cd9991a1295521234e8dd96a32bd9826558dac46568e3dcb99d3a52955fa983af9c6cb2543bc89f44d019d9e8c9de7392b266f1e9e4a9a62769eb2b1984c6359c38bc9190dd9942ad6d45fd7f062aa1e5a5215a3abd735bc185ef1d092aa4616ac17030dff
c7aefd84a48ca722ee2dfce65317bdf0078d4c61f28693a82299bf5e8cebe8f6bf15806b972913694476bb42ffb300a4eead374759130e521155230bd68b61cb097b8a36b76bb451c6b9046d6c6765bfc16ba2e19732fb7daaeaac2259b05e0c332cfe54ae62ff5439df244137b67563bf416f60ca73d98a39557556b56c0c
ad17f3d71e99f282816cc4d89d247be7ad17536f3e93e2aa38b2ceef05c886e65c5089b3a493196c0353d46bbd204387dc95b65808329ba04f95fb01d900c8de1ec8ea5e7061d5229b336d6e8ad2c321e88d329881126480361a5e73cd5fbda8ee0517561d32974b32973d103785cc1564f85694f87bea9e372b874a8d8b61
82ecd1dab5276bf72e85ecd61ee844d4d233f11fd46767caeb4bafe880a2f3c8e651072f864b3271922d52f78520587c67fa56942ef40e21a8f2cee3c5c0b88af91165064bec657a31f09c3d8233bc4f2393cfd96f05197e731cf1c39a454851f8826029a6d04098d51ebbb965e3fc319ce1692a99281b91ecabf9a6d0b898
0615be20ba71c2643b19e866930d179f7964ea35f6647dd60132d174c24732cc75ba66795e8cf937b08abda8ab3362907faf09a83705e7956b4c61b221b268888c518af3c80cf31990bdcf20b3d83b41269eb3c1f9ea33034d27473262d32fc33767543ed9d2fa46906db648bd2e22903937828caeef9056688eb2c6142533
2264e26a73c85c67f23b22cad435c229ad981b97af7eae89c2492b3a82b50d81077644a1707baac99cc08b7199fe0fe26ff33941ead12e40664f3e1277ea5e43c11c65a926627b4a90213519d9d719176377824c5d8290611d2f86a55adaed29494694649a56678cc5f644ce60584932aaaca9355287ec6927c8746574a591
1ad96f96de0da13d25c99ea8e3465acb8be904993ad6475a2d2fe62c6446848c40ee534536ac4186cf41368d92d94404c44a32a3061939557d168b1b4364226e7c69abc99635c8f473c42063713f86c8986c73a9c878ad71316720036b2bd23e037752418699b7f648352fe62c64913635de3d492123b637c602bc18827c2f
4679bdd28b19075e0c47e0c59c838c46f320ee5e7795113145a3831703ed69f06252c8145ecc39c86045ce10cacc4921d39071f06228f2bc1875d74dcf8b61be17235b9eec1c64d0eb3e84a2b3b4efccd50f5ecc0cf95e8c321a547931e788413ce5e788a91bb43cd970867c2f2695cc6037be17e3af17d3613250906f24c8
f362d471aee7c5dcf85ecc5966ab09a99c174390e7c5a497200374ef7b316799ad26a4725e8c20935e4c6aa90f2e93efc59c362b9754392f8660cf8b514783d28bc15bdf8b29304759abca270b7b31047b5e8cba2c975e0c59fb5e0cb4924ee7c52455fc3b93cf19f6bc98143278cef40f7c2fe6b4fe595225cb46e2391669
64a26c3434cfb1909d77bafd9c8182fa2c9fccb07c32d979a7376403f281e7c5a4938d161f7a5e8c3c536fc80ca2795e4c3a99c5079e17237b6cf6866c29c936a9652378316ce07931c556766b5165c844fbec43cf8b4925138db8ffea7931fa69476925558a8c0199f46252c96c20032fa63f649574256b4357b26aba92d5
578dbe729574fdcedad095ac9aae646de84a564dd752bf0d5dc9aae974641f24deb99255537fef460d991334493f7b7fbf3341b6622b96fa79fd25a368c184523fef746438f14e3d32c8c3ddd8f3d4cfeb6f4d4decfb8e9025558f0cdb1b1bdbe967ef351993a64b8afa7b37e20ddb65ade7d05f32b4b15719731ef6f86e14
64ba9c8039453d267b6f632e571951abc7644f61d2d7f4c106fd2633333a8df598ec675d216bbc15f303988af352c99edb5d78ce1a273330bfe73cf5f37afc9c19c8eb389da23e7f676886d42bcd4af5f83bcb518fe3c61c5dbfb3367425aba62b591bba14b2a6b37279ba7e676da87f647a464629acfe91ad94b39e5d400c
825de588c50b20238e377f55ae7a474619560d118b95fa584e6bb84fd90c69e556530b13b5535b39b17dd595033a44a6abefa00b201b7a6389e28a9115be1b6715c90a563d65548cac01c128b3934e48f3174ff620ca656bf290b2992bea3e18988d806cf680b83f0b160d6e42ecb630554d3132e2da801254eab1cd7c0119
753c32d7e6d445d8c6e2c74eb757eec4dd9caf04d15df604509872335f982163b8f4c918d75d9bd87427c866dc232bfef5175631b2c9da9921cb205cb95940826c6048328b303ea18cd8fa5ec4312b479235b236624cc5c89e208912587bb1cd021264a3814786399f8a3bd11e1b826cb114711ade34b29e654cbaba2e8991
4dd172665b4610aec4360b08c8348f0c712efe9bd8c65090899743d4d00aef3115235b22ebc74ca02c949b85648ce8816c819c956df9640344f0f9c816c8fa510825b65948c688bc3e922d0419f2c80c445b214b518c4cdc763fe202c5526e169231c05f07641cba2b0564e27e3c2399b814cb39a2c4368b881bbabd8b9099
40e62cdb261bc5b69b26fb6e67107b19948d1cc89e7381b374c42d2dc29316ca465ff136ad826c19255b9621237f3682b811ea330e643f1335359f718fac85facc571e99beb7ac105974335f74380cc82006e140b6da0bb209137f260bb71183f88a2f70ab209b46c9a665c8344d3b92d91ed98bb1205b391e591bcbba79f9
c60264e328d9b82a9988f539902d87b2041121e5a29558dfcf37c6938e89e7ccb086e1e72cb299af109938c627a3b2d49764acf2e5a7cbcf37e69039024517284be566be3414235b107b21c8301345a668afb1dccbccdd23213fdf984326ca2f8b866390c866814f410363e2ee0232e714645ebe11c71b9189b8716ad15f87
e2c6c866be089f86c944dc286aeab6c964be117f6bc72e25ba690914b23b04f7b1cd02e2a66cb3208f6c89b888ae3c32f8a715322fdf48be8d1d9968c5ec2dbc3b34c8629b8564902399689f1119eb636eb546e6b53cc9367664bc4d8d250a61cacd420a93cda04d6d8c65a97f6632ddfd838576a13c4864b390c26413c883
4cbc6c816878da2d92d12d8fbe1d23a3ae61a1e5215915db2ca470a94f1f048ebe1364335e8ccc85c23b6b2843523e999cf832a478f67b2f511ed49b851426c33b814320d6d7ed1264a5ee7e9f4cff8fb162ae6b396249467999437cb269c7c9e4b74a7999437cb2cffb40a6978a9b3db2c9e7b1344f37c94a79515eee6aec
c682db4e924d2a904de24dbf4e92cd4ab54f3db299fbcfd1b7bb49f62fe50f9cf5e23b5bfdb2fc81ab3fc76addae9149fdf9cbf2c7acfef73e907df7a55dfa985e90e1ef5eb2d207b9562c5dd031320effe0f7b0184361792b793f58b131981d2393e51b79bfe6258e91632fb120b3236f778c4cb697e8f6b64c78252316d1
449ed991b7bb460648d42d9570d56593aeeb6472f6ca14133355307533d959131679b7636408121365c9f43da453add858e7f39361279c1a8360b8e4dd2893a85490f1c8bbe727430e09adc68de1762476b98f9c7044b94579e4cd0e902da93d3c6e413950968cec106556ac3f4e07c8ac0819b5cb93a1a5a8d42c12bd853b
4036d551c8e385fab62c19dd21ddb670e7c8c6c3905f49aa3c67338e26c88a4dded105b2313e86e9325150920ccac6539081c75f8a4c9f86c864a2bd2419d467b05a5634c5d33c19c43aa5c8a8850e25888c41ca92410c3240f1a5ac1a2793de6339b2dd91ccaba2cb91e95ec32ceea5374e46e07e2a45264aeb23992ddfb1
cb1cef67273b482682ab0399977fca208b75ff87afd88f174f40e6960dfb4264dc3b879dbaaf6260837f7007c9c277a3ff8e9db6af8accd769c878a9237a43c64a1e112ef5fd73d869fbf68b4c9ff6832cd197265743a304d92e75b383668547f000000ec74944415464e3713fc812fd0c73255a31fd2033ca1e20c9e6e177
2e854c660be6e1772e85cc216ce8071fbe2e898cf2f03b17420693225e2699a77978e34a76256b4857b2a8e6e18d2bd965918d2cef9267880d56276dc5b44e36f52ed965174a86ef391be0db8b22fb01f176595c1cd90f3d32645e1cd96379c91459dd260b32355132ca50ca2690ade185864631b217b15377852ca2580fe9
c97153903d5293e1f8a0824e92cd76699b40b6851709329233b2ae01b54d66a691d9d19374926cb54fdb04b2f7f02241463b4a565882ec291ce893857fc5a2a7ee21d96770e045923d8603fdfaacfb64d177b39fb31fc38b440c427b41161b63112b1bbf072f44dc381ff5a10489be9b5deacb893844acbfb0fa57ea4fb262
108f4cb4cf664e2406e9454d4d796433d42513c8bc696166486791b8313e4aa823b17eb49f5b2cd60f6df62f0f4223577c4964da28bc754964834178eb4a76256b48d5f220974b76b12508bad8fa2c1a415c14d9e53e675a78e34ad607b2c1e5925dec73a6458eba24b2cb6dc55c6ecb33aa2bd995ac215d28199539b69293
a1cee441a198b88b64ba672b943b68250f0ab9b11746d6f1efacd2dd9818ad964736430b4d0e753d6d09525ea5c95cb6d4e40485974686eff9521be9e8a46464871cc457e51eb4b264c45efc541bc1bba72c411e2459b979cb4b9321f36fb5114ccc7942b2998b76824cb9f05faa1672ac674839641499cf04193b29d9e73a
db23bed0eddc3d83cfb72559a9568c687f7faa8d103b29d98e48326ae7eee90b7a8b2d4ab63c05d9d3939339983f08b2e253b8522ec94a650b80eceec464e271e17f1464c5671506a7765132c3a391ddcdc9c918e2df96221b3bd5c8de9c980ceec26f6dbe880e27cb92b1f44afdc878c8dcbb71343f3999b886f7ac0cd974
ea91957bce46f36f3a4fb61c7b6465ca462ac89e9db83e836bb8e765c816fa612eede869d49b7e0c62cdffeec43108b1670e2f45e650af077099ac1cb197f31f9c386e94644e093258f90d7a00470bd3dc587f371f9f38d69764cb32648c30208bb2e4b6cfbe9e8f4fdc3e13d7b0e0560932c23007321a3f4dcaa6dfa61ecd
87276e538bfa6cc1a7a2a6e6050f1001a603cf5974787f07f32018c88c123108948c4016a9ce3a49c691c3c725c8c477b504323dd2566d84ac6101995e22d61fcb955bfa40e61087d312edb329c0256666efe0dd885e50495678cd3d0b1eb576c862ebc0d7d5cc5d7052220fb284e271197fb78b77e364bfe0b844eeca91b1
52fcdd0cb2f8c084e35e6d67bf1d495638dfc891bfd67c4e5e9ffa7165365964e6ef86efc692821a3db8d89817139a115a6c4ef6d8e528870cbbacd4da58ad8aa143cff61899cb0faebcd89c3d1420232ea785ef96132a14600914ec3a747fdc7c31294046378e7ebca73f38c5451752948cf0dda1f6169b0ebd65f2758c2c
d4acb344fdb11c1fdbe6e77dcec28a92517b3a1c1e3739f1c9923b0782d9e92ce3f88b2eb84c9e6264c830e8615334e3362cbe33459199be6199e8a9d57db2211a47c8f0d68eef4c6190d37114359019a14aadbb64c310193c78767c678a56fbd0082658001bf5804c940431b27f89ef4cd1ee4968d499240b4ddcdb613214
258b8c9c936498ebf4b84a89247bce8f2769ef524b2a49762c1b25198bed0cabcad3631b5792fdec58c19d898cc87ad797f77024c98ef5199045d67e9464c4a65f1e7349922c34d8f56c6489283d49768c416409c243c7fb64e48b18d98be37cf667230b85f685beb3681a599251f8c98f6711e7599ebd3e237668d9f63432
fdb029c9c25d10023214273b262ecf469658ea5e5136dac1a65c095449162d418c4507c812915f9c6c78a89c05194b233b66c92c34ed05d9180d2d9fcc9471e35b35d9e17bf5e246b30b64d831446df482fc0259cfa17048c48d61324e5e2a4b90e3b328c8c6c8b2ba4046f7826ce3927f46d6cfa0a08c92e922ba3d9289f6
d9cb64a90f144f8243bcf6d9f9637d41a63f0cf5f5da5def91b54a9289f6991f3712576cee278a9a1a7e1fc4fa3347906d1ce3fcf5993d1eeb82ece57aeb204bd6af3132be1b7b779a245b3d28a22b8ac861a13420a32e9f9c3f0681af64f8f1fa25de3264c9fa35962d709d205b0077e36487931131b5c9212026327765eb
1d881bf753faf2df6cbf44ef05d92249865c1664784cf9154667ea0ae2c697767008d4d39fa3d0da4ce78b1b2df2f2dfbc1da2f7b69a6c76182b63c612ab0805648c1e8a42d295deb622d6cf2143a99b081ddb67a183ba422678c8cbd15bddad43b67bd251b2f5e84d2d32e4eef5633baf5364bffe57191c56269b39bd2693
831b78ec783fdfc80e64aba83380ce4936a5824ccf2f4174d5a88d443c9d9ccde77c64226afcd54f29be40b2b18e9d1774bdbd3c32fd419011779d4b06ffe49239e8d8a2f14fd2cc959615044c7bc42dece69620fd2313c113b7d08b4b235328b858dfd63cbc9f4a3671d913a4dbb23be0c591b9f68c5f24d9c6652be702c9
10de6cf8d2f19ce95e92a5d667646d7367e99175a63e53a80219b139b72e918c4a322fc6ef03595ca9b13e1a12fb9ef9a67b67627d85d2c8d2771e928d20fb3157efd2673203bfdf3023365dec41bd2643eead204b7469f5d467320bad3033a64fd4bb748f2c5e36a6ef2c5a0ae26eb452fe247d265bc81204a574c7ee3e59
7a7db690a5beec1083dd1e94fac5c93845cfaf64e75425b205b7169747869947a6a39e90a1a25939412622e2a5b4152f8d8c40cb53d6d49745466c0cd902195d5d1a1992191e39e0f3d2c8202b27d7a3ba2cb2b07a4996ea0cc6d4116750a12b597ce7407f3964e7d3141d47413a985f0c99fb10900dd0e442c90cb4629745
66f8dd670de4cae9002e850c0dc7bec132c5dc59920b223302b23d668b8b221bf9c323c89e30cb927da20fea37997524b32f8b6ca1fba3ba0d4136a59744160c1d33c44519f482a22b1e225bb4417636f16020a32073a003fba5906146d6b67c6520cc6150f8259211764964c4265b5bbe32906eeb174586df7aaf0c11eb53
e372c8283a92bdb834b26fbd5786881fe92f2e890cfdabf7ca10b108f9f5e5900d4364ec52c9604cd66591bd1054438f0c862d5d0a99112273771746661dc9a0a9762593ea30595257b2f8ce81ae64a7d7952cbe73a02bd9e975258bef1ce84a767a5dc9e23b07ea4c8e38a1eb7716df39d095ecf4ba92c5770e74253bbdae
a57e7ce7407f39df5977d4345957e7fd0eeb4ad6555dbfb3f8ce81fe72c8ba3abf7e58d79abaabba50326f389d37e67b151d5917db14f25698890c7df7d69fe791bd5abbd852f22ed61bd8e28d19b4835fc53651b0d87c64e8fbc44d8c9eb95cb28ea885bbf1aab6f580a6c8f2a6419ad93a1ad2c3fd17db14c27bb4448bc8
1c13d4c11cb32ede8ec4b5814c5ebfcb250af77f15db44f09c49b2f01d3ad94bb2940935ce291de61b13640cc999886d81e2fffd639b20f107780164f6f1add50376045978d46047e2c6c9da9921cb80e98429dfeb6c48915f42c4364133ca3f470b4b0ef0f4b59fdcee30e393d0293b42f6044932e8e8aedb5389e28fe18a
6d825e6049165a80123b54928527d4e808d9142d67b6051d02918ec63a1728fe7210b14dd012392b41165ac50d73b2d90bb2c26b529e4e4b64fd98597278d3180d878e40f1d7fb8a6d821cb4f899bdb0bc311a5284e1cd7f1664e108b323dfd902593ff2c90c81b238a2c436411c2d3e8b91d978f3558cac231277e18f6022
354b2e5e3a5c0a143f9c8f6d226f71c2cf98203b2eff20ee42fc7b41e60f6e90ea48dcc8452bc4f1c8c4ff87d3234a6c1379cb8d3ce75132f1eedbdb285947c42f9a6c79241b47c9c609b2859320db6eba49a6ef2dcb2723ee7018228b6e22209bec168b18d9ea7ed35db2e9914c8f92e949b26592ecbeb364e32319fd2242
16da443ed93441c6fe1425eb48568e23c31a06cf191d9210597413c9e7cc5a18f1e7ec9e3defe477e608325d902da10213285f51e4affc12db44b23eb3166341760cff457d76cffe375153b3135f77be16828c0631081de2af42314864130464c3580c22c87ed4c9186489a616fdb51f37ea43fcafa1b831b20972d072a1c7
e3c67bf6efa2641d89412c41467632d61f0a14f47008ee639ba08520a34e24d607b24934d6ef08d914ed2dbcf3da676836449f1fdb67d14dd012ef16c489b4cf38bd677ab47dd6114db024838ba56c2551fcf221b6097a422459f80bdae9922cbc105e474a7dddfd8385767e1ee4ff19a227a13c48641334717fbdc04e2c0f
72cf68340fd291bb91ba868596327785ddb743343e24ab629b20fdc15a202792bb9aedee1989e6ae3a4286f7924cfecd5754a2d8feaf629b426427c9c2183a9764e17c6347c85ad095ac7fba92f54f57b2fee94ad63f5dc9faa72b59ff7425eb9fae64fdd395ac7fba92f54f57b2fee94ad63f5dc9faa72b59ff74253bb726
be81165e49217b87ee9279e32ae6688760e12571e1a3099aed95649abf03418475978c20ca606a409f8c930704ae205cf88aa59041ff1ed88122dde92e19451387829de9935117837b6d203472f96c6f84fa241d0464b083387677d8a18364b39d0eae2e872dcce997f83d9317fe883b161a2796aa4648f65c123b983a9a5a
871d3a4726ae6ea9c3a572d8a25ca7eb0df7c8a0efb092ec73e4914197ffee92cdd0720a139c7b64133e84f5b5e5853f66968586a13e4981307cc540e6a28571d8a17364707530297d848c1be2c29fdad6228d4cee3017c7a2ae93d1897f81dcc06fd1e248a6877a5b1d34f4c9280aedd039328af8d0222f578ccbcd10d91c
593f6354d539f3483647871dba4ae626c9185aac9c2c3246d17bd679b20de77233209bb83643ce6a17aca4101190c10e14fdd139ecd055329b7b9da8c264982f5f04eb0d4474247377871dba4a86926436610b238bcca66837ed1d9981b0addb681caca41091f79c6141e618871dba4bc6e566986c221882f506220a911d77
e813d98b7c32de473222bb4f072b2944e4911179ec6187ce931da22b22820b3e0c66e58fe848363feed04132195da9c818e2e31cb2459fc8e8fa96f3a98134628ba22f8d0c7690c7769a6c6ae84732d9f2745e7864cb17b0de404243247710c75ad3c30e1d24839667880cb205ab3d90b9bbd52e854cee20dbe35d26836cc1
914c6678567f30d04090cd1ce5743b820c76903994c30e1d24830ccf914c66e526864726a2103599dc411c4b5997c9202b7720abaece9135a62b59ff7425eb9fae64fdd395ac7f22ff3fe51efe75910869b10000000049454e44ae426082}
\par
\qj\fi360 A 47nF to 100nF capacitor is recommended between MCLR and ground. this will avoid unvanted resets when noisy loads or power supplies are used.\par
\qj\fi360 No PCB layout is given, you are free to build your PCB design.\par
\qj\fi360 All example in this section have a number starting each line. These numbers are only here for teaching purposes and should not be in your project files.\par
\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsec_Example_0__Blink}1{\*\bkmkend BMsec_Example_0__Blink}  Example 0: Blink a led.\par
}{{\b \qj\sb60 \li512\ri512\fi0 Note}: Line numbers are not included in program but used just for explanations !  \par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23      1  -- This must be in the first line
\par      2  include c16f877
\par      3  
\par      4  
\par      5  
\par      6  
\par      7  -- config fuses
\par      8  pragma target protection off
\par      9  pragma target debug off
\par     10  pragma target cdp off
\par     11  pragma target lvp off
\par     12  pragma target bor off
\par     13  pragma target powerup on
\par     14  pragma target watchdog off
\par     15  pragma target osc xt
\par     16  
\par     17  -- Fosc definition
\par     18  pragma target clock 4_000_000
\par     19  
\par     20  -- PORTB and TRISB definitions
\par     21  var volatile byte PORTB at \{0x06,0x106\}
\par     22  var volatile byte TRISB at \{0x86,0x186\}
\par     23  
\par     24  -- B4 pin definition
\par     25  var volatile bit pin_b4 at PORTB : 4
\par     26  
\par     27  -- Led at pin_b4
\par     28  var volatile bit LED is pin_b4
\par     29  
\par     30  -- 1 second wait procedure
\par     31  procedure wait_1sec is
\par     32     for 5 loop
\par     33        for 6_500 loop  
\par     34           asm nop
\par     35        end loop
\par     36     end loop
\par     37  end procedure
\par     38  
\par     39  
\par     40  -- Reset PORTB
\par     41  PORTB = 0
\par     42  
\par     43  -- PORTB => all bits output
\par     44  TRISB = 0b_0000_0000
\par     45  
\par     46  -- main loop
\par     47  forever loop
\par     48     LED = high  -- LED on
\par     49     wait_1sec
\par     50     LED = low   -- LED off
\par     51     wait_1sec
\par     52  end loop   
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 1.0.0.1  Description\par
} {\qj\sb50 \li300\fi-300 {\b 1\endash 2} The first line must be an {\i include} to a PIC chip definition file{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See section {\field{\*\fldinst{\lang1024 REF BMsub_PIC_chip_definition \\* MERGEFORMAT }}{\fldrslt{3.1.3}}}\~{sub:PIC-chip-definition}}
 . \par
\qj\sb50 \li300\fi-300 {\b 7\endash 15} These configuration fuses must match your specific programmer, etc. Handle with care, a bad configuration will give you a non working PIC. \par
\qj\sb50 \li300\fi-300 {\b 17\endash 18} Declare the crystal value being used. \par
\qj\sb50 \li300\fi-300 {\b 20\endash 25} Declare the PIC port to be used. Both PORTx and TRISx are needed. Those lines may be omited if a {\i register definition file} is included. \par
\qj\sb50 \li300\fi-300 {\b 27\endash 28} Declare an alias, it\rquote s easier to remember. \par
\qj\sb50 \li300\fi-300 {\b 30\endash 37} A procedure to waste some time. These values will give you a crude approach to one second delay; modify them and see the effect of the LED flashing rate. Use just one instruction {\b0\i0\scaps0\f23 FOR 64_910 LOOP} and see the effect. \par
\qj\sb50 \li300\fi-300 {\b 40\endash 44} Initialize and configure the port. This initialization part is usually the first lines of the main code. \par
\qj\sb50 \li300\fi-300 {\b 46\endash 52} Real main code. Here, an endless loop with our magic LED blinking sequence: LED on, wait, LED off, wait. The wait sequence is necessary to see the LED blinking. \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsec_Example_1__Scan}2{\*\bkmkend BMsec_Example_1__Scan}  Example 1: Scan a button.\par
}{{\b \qj\sb60 \li512\ri512\fi0 Note}: Line numbers are not included in program but used just for explanations !  \par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23      1  -- This must be in the first line
\par      2  include c16f877
\par      3  
\par      4  
\par      5  
\par      6  
\par      7  -- config fuses
\par      8  pragma target protection off
\par      9  pragma target debug off
\par     10  pragma target cdp off
\par     11  pragma target lvp off
\par     12  pragma target bor off
\par     13  pragma target powerup on
\par     14  pragma target watchdog off
\par     15  pragma target osc xt
\par     16  
\par     17  -- Fosc definition
\par     18  pragma target clock 4_000_000
\par     19  
\par     20  -- PORTB and TRISB definitions
\par     21  var volatile byte PORTB at \{0x06,0x106\}
\par     22  var volatile byte TRISB at \{0x86,0x186\}
\par     23  
\par     24  -- B0 pin definition
\par     25  var volatile bit pin_b0 at PORTB : 0
\par     26  
\par     27  -- B4 pin definition
\par     28  var volatile bit pin_b4 at PORTB : 4
\par     29  
\par     30  
\par     31  -- Button at pin_b0
\par     32  var volatile bit Button is pin_b0
\par     33  
\par     34  -- Led at pin_b4
\par     35  var volatile bit LED is pin_b4
\par     36  
\par     37  
\par     38  -- Reset PORTB
\par     39  PORTB = 0b_0000_0000
\par     40  
\par     41  -- PORTB => b7 ..b1 = output, b0 = input
\par     42  TRISB = 0b_0000_0001
\par     43  PORTB = 0b_0000_0001
\par     44  
\par     45  -- main loop
\par     46  forever loop
\par            -- pressed button pulls pin low, see schematic
\par     47     if ! Button then   ; Check if Button pressed
\par     48        LED = on
\par     49     else               ; ... if not pressed
\par     50        LED = off
\par     51     end if
\par     52  end loop   
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 2.0.0.1  Description\par
} {\qj\sb50 \li300\fi-300 {\b 1\endash 22} See {\i Example 0} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_0__Blink \\* MERGEFORMAT }}{\fldrslt{4.1}}}\~1{sec:Example-0:-Blink}. \par
\qj\sb50 \li300\fi-300 {\b 24\endash 35} Add declarations of both elements being used: the LED and the Button. \par
\qj\sb50 \li300\fi-300 {\b 38\endash 43} While initializing the port, take care to declare LED pin as {\i output} and Button pin as {\i input}. \par
\qj\sb50 \li300\fi-300 {\b 47} By pressing the Button, the pin will be tied to Ground{\up19\chftn}
{\*\footnote \pard\plain\s246\f5\fs24 {\up19\chftn}See the circuit in section {\field{\*\fldinst{\lang1024 REF BMsec_Examples \\* MERGEFORMAT }}{\fldrslt{4}}}\~{sec:Examples}.}
 . In order to detect it with the IF statement we must apply a logical invert to the bit variable. In this way \endash  on pressing button \endash  the logical expression {\b0\i0\scaps0\f23 IF ! Button THEN ...} of the IF statement will be true. Button contact bouncing is not prevented in this program. \par
\qj\sb50 \li300\fi-300 {\b 47\endash 51} LED will be ON when Button is pressed, and will be OFF when Button is not pressed. \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsec_Example_2__Control}3{\*\bkmkend BMsec_Example_2__Control}  Example 2: Control the blink of a led.\par
}{{\b \qj\sb60 \li512\ri512\fi0 Note}: Line numbers are not included in program but used just for explanations !  \par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23  
\par      1  -- This must be in the first line
\par      2  include c16f877
\par      3  
\par      4  
\par      5  
\par      6  
\par      7  -- config fuses
\par      8  pragma target protection off
\par      9  pragma target debug off
\par     10  pragma target cdp off
\par     11  pragma target lvp off
\par     12  pragma target bor off
\par     13  pragma target powerup on
\par     14  pragma target watchdog off
\par     15  pragma target osc xt
\par     16  
\par     17  -- Fosc definition
\par     18  pragma target clock 4_000_000
\par     19  
\par     20  
\par     21  -- PORTB and TRISB definitions
\par     22  var volatile byte PORTB at \{0x06,0x106\}
\par     23  var volatile byte TRISB at \{0x86,0x186\}
\par     24  
\par     25  -- B0 pin definition
\par     26  var volatile bit pin_b0 at PORTB : 0
\par     27  
\par     28  -- B4 pin definition
\par     29  var volatile bit pin_b4 at PORTB : 4
\par     30  
\par     31  
\par     32  -- Button at pin_b0
\par     33  var volatile bit Button is pin_b0
\par     34  
\par     35  -- Led at pin_b4
\par     36  var volatile bit LED is pin_b4
\par     37  
\par     38  -- 1 second wait procedure
\par     39  procedure wait_1sec is
\par     40     for 5 loop
\par     41        for 6_500 loop  
\par     42           asm nop
\par     43        end loop
\par     44     end loop
\par     45  end procedure
\par     46  
\par     47  procedure delay_miliseconds is
\par     48     for 1000 loop
\par     49        asm nop
\par     50     end loop
\par     51  end procedure
\par     52  
\par     53  -- Reset PORTB
\par     54  PORTB = 0b_0000_0000
\par     55  
\par     56  -- PORTB => output
\par     57  TRISB = 0b_0000_0001
\par     58  PORTB = 0b_0000_0001
\par     59  
\par     60  -- main loop
\par     61  forever loop
\par     62     if ! Button then   ; Check if Button pressed
\par     63        delay_milisecons
\par     64        if ! Button then
\par     65           ; Check again if Button pressed  
\par     66           LED = on
\par     67           wait_1sec
\par     68           LED = off
\par     69           wait_1sec
\par     70         end if
\par     71     end if
\par     72  end loop   
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 3.0.0.1  Description\par
} {\qj\sb50 \li300\fi-300 {\b 1\endash 36} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~1{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 38\endash 45} See {\i Example 0} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_0__Blink \\* MERGEFORMAT }}{\fldrslt{4.1}}}\~{sec:Example-0:-Blink}. \par
\qj\sb50 \li300\fi-300 {\b 53\endash 58} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~1{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 62} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~1{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 62\endash 71} In this example the LED will blink {\i only} when Button is pressed longer than a few miliseconds. \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsec_Example_3__TMR0}4{\*\bkmkend BMsec_Example_3__TMR0}  Example 3: Adding a hardware timer.\par
}{{\b \qj\sb60 \li512\ri512\fi0 Note}: Line numbers are not included in program but used just for explanations !  \par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23      1  -- This must be in first line
\par      2  include c16f877
\par      3  
\par      4  
\par      5  
\par      6  
\par      7  -- config fuses
\par      8  pragma target protection off
\par      9  pragma target debug off
\par     10  pragma target cdp off
\par     11  pragma target lvp off
\par     12  pragma target bor off
\par     13  pragma target powerup on
\par     14  pragma target watchdog off
\par     15  pragma target osc xt
\par     16  
\par     17  -- Fosc definition
\par     18  pragma target clock 4_000_000
\par     19  
\par     20  
\par     21  -- PORTB and TRISB definitions
\par     22  var volatile byte PORTB at \{0x06,0x106\}
\par     23  var volatile byte TRISB at \{0x86,0x186\}
\par     24  
\par     25  -- B0 pin definition
\par     26  var volatile bit pin_b0 at PORTB : 0
\par     27  
\par     28  -- B4 pin definition
\par     29  var volatile bit pin_b4 at PORTB : 4
\par     30  
\par     31  
\par     32  -- Button at pin_b0
\par     33  var volatile bit Button is pin_b0
\par     34  
\par     35  -- Led at pin_b4
\par     36  var volatile bit LED is pin_b4
\par     37  
\par     38  
\par     39  -- 1 millisecond wait procedure
\par     40  -- TMR0_delay=(256-InitTMR0)*4*prescaler/Fosc
\par     41  -- TMR0_delay=(256-6)*4*4/4_000_000= 1 msec.
\par     42  --
\par     43  -- InitTMR0 = 6
\par     44  -- Prescaler = 1:4
\par     45  -- Fosc = 4_000_000
\par     46  --
\par     47  -- Delay = 0.001 secs
\par     48  
\par     49  
\par     50  -- Init TMR0, free run mode, int osc, prescaler 1:4
\par     51  var volatile byte TMR0 at \{0x01,0x101\}
\par     52  var volatile byte OPTION_REG at \{0x81,0x181\}
\par     53  OPTION_REG = 0b_1000_0001
\par     54  
\par     55  -- Disable interrupts, reset TMR0 flag
\par     56  var volatile byte INTCON at \{0x0B,0x8B,0x10B,0x18B\}
\par     57  var volatile bit T0if at INTCON : 2
\par     58  INTCON = 0
\par     59  
\par     60  const byte InitTMR0 = 6
\par     61  
\par     62  procedure wait_1sec is
\par     63     for 1_000 loop  
\par     64        -- Wait for TMR0 1 msec.
\par     65        while ( ! T0if ) loop
\par     66        end loop
\par     67        -- Reset TMR0IF
\par     68        T0if = low
\par     69        -- Add InitTMR0
\par     70        TMR0 = TMR0 + InitTMR0
\par     71     end loop
\par     72  end procedure
\par     73  
\par     74  
\par     75  -- Reset PORTB
\par     76  PORTB = 0b_0000_0000
\par     77  
\par     78  -- PORTB => B0 input, B1..B7 output
\par     79  TRISB = 0b_0000_0001
\par     80  PORTB = 0b_0000_0001
\par     81  
\par     82  
\par     83  -- main loop
\par     84  forever loop 
\par     85     if ! Button then ; Check if Button is 
\par     86                      ; permanently pressed
\par     87        LED = on
\par     88        wait_1sec
\par     89        LED = off
\par     90        wait_1sec
\par     91     end if
\par     92  end loop   
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 4.0.0.1  Description\par
} {\qj\sb50 \li300\fi-300 {\b 1\endash 36} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~1{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 39\endash 47} Inline comments with a brief description how to set TMR0. Take your PIC chip datasheets and read the section entitled {\i TIMER 0}. The goal in this example is to get a TMR0 overflow each millisecond. Using a 4MHz crystal, it\rquote s necessary a prescaler of 1:4 and init TMR0 with a constant value each time it overflows. \par
\qj\sb50 \li300\fi-300 {\b 50\endash 58} Declare and initialize the SFRs related with TMR0. See your PIC chip datasheets, here TMR0 will work in {\i free running mode}. \par
\qj\sb50 \li300\fi-300 {\b 62\endash 72} At this point TMR0 overflows each millisecond and will set a bit called T0IF. The WHILE statement will stop program until T0IF is set (TMR0 overflow), so we {\i must} reset this bit and load TMR0 with the init constant value. Doing these steps 1000 times will give us one second delay. \par
\qj\sb50 \li300\fi-300 {\b 75\endash 80} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~1{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 83\endash 92} In this example the LED will blink {\i only} when Button is kept pressed. \par
}\qj\sb240 \fi0 {\s3\ql\sb240\sa60\keepn\f16\b\fs32 {\*\bkmkstart BMsec_Example_4__Interrupts}5{\*\bkmkend BMsec_Example_4__Interrupts}  Example 4: Using hardware interrupts.\par
}{{\b \qj\sb60 \li512\ri512\fi0 Note}: Line numbers are not included in program but used just for explanations !  \par
}{\qj\sb60 \fi0 \pard\ql\b0\i0\scaps0\f23      1  -- This must be in the first line
\par      2  include c16f877
\par      3  
\par      4  
\par      5  
\par      6  
\par      7  -- config fuses
\par      8  pragma target protection off
\par      9  pragma target debug off
\par     10  pragma target cdp off
\par     11  pragma target lvp off
\par     12  pragma target bor off
\par     13  pragma target powerup on
\par     14  pragma target watchdog off
\par     15  pragma target osc xt
\par     16  
\par     17  -- Fosc definition
\par     18  pragma target clock 4_000_000
\par     19  
\par     20  -- PORTB and TRISB definitions
\par     21  var volatile byte PORTB at \{0x06,0x106\}
\par     22  var volatile byte TRISB at \{0x86,0x186\}
\par     23  
\par     24  -- B0 pin definition
\par     25  var volatile bit pin_b0 at PORTB : 0
\par     26  
\par     27  -- B4 pin definition
\par     28  var volatile bit pin_b4 at PORTB : 4
\par     29  
\par     30  
\par     31  -- Button at pin_b0
\par     32  var volatile bit Button is pin_b0
\par     33  
\par     34  -- Led at pin_b4
\par     35  var volatile bit LED is pin_b4
\par     36  
\par     37  
\par     38  -- 1 millisecond delay
\par     39  -- TMR0_delay=(256-InitTMR0)*4*prescaler/Fosc
\par     40  -- TMR0_delay=(256-6)*4*4/4_000_000= 1 msec.
\par     41  --
\par     42  -- InitTMR0 = 6
\par     43  -- Prescaler = 1:4
\par     44  -- Fosc = 4_000_000
\par     45  --
\par     46  -- Delay = 0.001 secs
\par     47  
\par     48  -- RB0INT falling edge, Init TMR0, free run mode,
\par     49  -- int osc, prescaler 1:4
\par     50  var volatile byte TMR0 at \{0x01,0x101\}
\par     51  var volatile byte OPTION_REG at \{0x81,0x181\}
\par     52  OPTION_REG = 0b_1000_0001
\par     53  
\par     54  -- Enable TMR0 interrupt, RB0INT interrupt, reset flags
\par     55  var volatile byte INTCON at \{0x0B,0x8B,0x10B,0x18B\}
\par     56  var volatile bit T0if at INTCON : 2
\par     57  var volatile bit INTf at INTCON : 1
\par     58  var volatile bit INTE at INTCON : 4
\par     59  var volatile bit T0IE at INTCON : 5
\par     60  INTCON = 0B_1011_0000
\par     61  const byte InitTMR0 = 6
\par     62  var volatile bit Enable_Button is INTE
\par     63  var volatile bit Enable_Timmer is T0IE
\par     64  
\par     65  Enable_Timmer = off
\par     66  Enable_Button = on
\par     67  
\par     68  -- declare vars
\par     69  var word milisec_count
\par     70  var bit Flag_tmr0 = false, Flag_rb0int = false
\par     71  
\par     72  -- TMR0 interrupt
\par     73  procedure TMR0_ISR is
\par     74  pragma interrupt
\par     75     if T0if then
\par     76        -- Reset TMR0IF
\par     77        T0if = low
\par     78        -- Reset InitTMR0
\par     79        TMR0 = InitTMR0
\par     80        -- add one count
\par     81        milisec_count = milisec_count + 1
\par     82        -- Check count 1_000
\par     83        if milisec_count == 1_000 then
\par     84           -- if 1000 msecs. => Activate flag
\par     85           Flag_tmr0 = true
\par     86           -- reset counter
\par     87           milisec_count = 0 
\par     88        end if
\par     89     end if
\par     90  end procedure
\par     91  
\par     92  -- RB0INT interrupt
\par     93  procedure RB0INT_ISR is
\par     94  pragma interrupt
\par     95     if INTf then
\par     96        -- Reset TMR0IF
\par     97        INTf = low
\par     98        -- Activate flag
\par     99        Flag_rb0int = true
\par    100        -- reset counter
\par    101        milisec_count = 0
\par    102        TMR0 = 6
\par    103        -- Enable timmer
\par    104        Enable_Timmer = on
\par    105     end if
\par    106  end procedure
\par    107  
\par    108  
\par    109  -- Reset PORTB
\par    110  PORTB = 0b_0000_0000
\par    111  
\par    112  -- PORTB => B0 input, B1..B7 output
\par    113  TRISB = 0b_0000_0001
\par    114  PORTB = 0b_0000_0001
\par    115  
\par    116  
\par    117  -- main loop
\par    118  forever loop
\par    119     if Flag_rb0int then   ; Check if Button pressed
\par    120        -- Disable Button interrupt
\par    121        Enable_Button = low
\par    122        -- Turn on LED
\par    123        LED = on
\par    124        -- Wait for 1 sec event
\par    125        while ( ! Flag_tmr0 ) loop
\par    126        end loop
\par    127        -- Clear flag
\par    128        Flag_tmr0 = low
\par    129        -- Turn off LED
\par    130        LED = off
\par    131        -- Wait for 1 sec event
\par    132        while ( ! Flag_tmr0 ) loop
\par    133        end loop
\par    134        -- Clear flag
\par    135        Flag_tmr0 = low
\par    136        -- Enable Button interrupt
\par    137        Enable_Button = High
\par    138        -- Disable timmer interrupt
\par    139        Enable_Timmer = low
\par    140        -- Clear flags
\par    141        Flag_rb0int = low
\par    142        Flag_tmr0 = low
\par    143     end if
\par    144  end loop   
\par \par
}\qj\sb120 \fi0 {\s6\ql\sb240\sa60\keepn\f16\b\fs24 5.0.0.1  Description\par
} {\qj\sb50 \li300\fi-300 {\b 1\endash 35} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~1{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 38\endash 46} See {\i Example 3} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_3__TMR0 \\* MERGEFORMAT }}{\fldrslt{4.4}}}\~1{sec:Example-3:-TMR0}. \par
\qj\sb50 \li300\fi-300 {\b 49\endash 52} Declare and initialize the SFRs related with TMR0. See your PIC chip datasheets, here TMR0 will work in {\i free running mode}. Set also RB0INT edge detection to {\i falling edge}. \par
\qj\sb50 \li300\fi-300 {\b 54\endash 60} Declare and configure TMR0 and RB0INT interrupts \par
\qj\sb50 \li300\fi-300 {\b 62\endash 66} Declare some alias, it\rquote s easier to remember. \par
\qj\sb50 \li300\fi-300 {\b 68\endash 70} Declare some variables to be used globally. {\b0\i0\scaps0\f23 Flag_tmr0} and {\b0\i0\scaps0\f23 Flag_rb0in} will be used by main program to know about interrupt events. \par
\qj\sb50 \li300\fi-300 {\b 72\endash 90} TMR0 interrupt procedure. \par
\qj\sb50 \li300\fi-300 {\b 75} Check if is exactly TMR0 interrupt. \par
\qj\sb50 \li300\fi-300 {\b 76\endash 79} Reset flag and init TMR0 again. \par
\qj\sb50 \li300\fi-300 {\b 80\endash 81} Add one count to our {\i 1000 milliseconds} count. \par
\qj\sb50 \li300\fi-300 {\b 82\endash 88} On reaching the 1000 milliseconds count, set {\b0\i0\scaps0\f23 Flag_tmr0} and reset internal count. \par
\qj\sb50 \li300\fi-300 {\b 92\endash 106} RB0INT interrupt procedure. \par
\qj\sb50 \li300\fi-300 {\b 95} Check if is exactly RB0INT interrupt. \par
\qj\sb50 \li300\fi-300 {\b 96\endash 97} Reset flag RB0INT. \par
\qj\sb50 \li300\fi-300 {\b 98\endash 105} Set {\b0\i0\scaps0\f23 Flag_rb0in}, enable TMR0 (will be disabled anywhere) and reset TMR0 count. In this way TMR0 will start counting only when Button is pressed. \par
\qj\sb50 \li300\fi-300 {\b 109\endash 114} See {\i Example 1} in section {\field{\*\fldinst{\lang1024 REF BMsec_Example_1__Scan \\* MERGEFORMAT }}{\fldrslt{4.2}}}\~{sec:Example-1:-Scan}. \par
\qj\sb50 \li300\fi-300 {\b 117-144} Main code. In this example the LED will blink only once each time Button is pressed. \par
\qj\sb50 \li300\fi-300 {\b 119} Scan Button testing {\b0\i0\scaps0\f23 Flag_rb0in} bit. The interrupt procedure will do all hard job. \par
\qj\sb50 \li300\fi-300 {\b 120\endash 123} Disable future Button interrupt events. \par
\qj\sb50 \li300\fi-300 {\b 122\endash 135} The {\i magic sequence} to blink a LED. \par
\qj\sb50 \li300\fi-300 {\b 124\endash 128} Turn on LED and wait for one second by testing {\b0\i0\scaps0\f23 Flag_tmr0}. Clear flag for next use. \par
\qj\sb50 \li300\fi-300 {\b 129\endash 135} Turn off LED and wait for one second by testing {\b0\i0\scaps0\f23 Flag_tmr0}. Clear flag for next use. \par
\qj\sb50 \li300\fi-300 {\b 136\endash 142} Enable Button interrupt events again, disable TMR0 interrupt events (work already done in this loop) and clear both flags. \par
}\page{} \qj\sb72 \fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter 5\par\par
Glossary\par
}{\qj\sb50 \li300\fi-300 {\b ACCESSOR} An accessor method is a method that is usually small, simple and provides the means for the state of an object to be accessed from other parts of a program. An accessor method that changes the state of an object is often called an update method or, sometimes, mutator method. Objects that provide such methods are considered mutable objects. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Accessor. \par
}{\qj\sb50 \li300\fi-300 {\b ANALOG\~DEVICE} An analog device is a component of a electronic circuit that change its properties continuously in both time and amplitude. It differs from digital devices in that small fluctuations in the signal are meaningful in that they are continuously variable rather than digitally quantised. \par
}{\qj\sb50 \li300\fi-300 {\b ATOMIC} A single operation, with single as in {\i non interuptable}. It has to finish before anything else can be done. Which implies that a {\i singe operation} might take more than one machine instruction but they all must finisch before any interupt can interfere with the processor. On most processors {\i atomic} is equivalent to one {\i instruction}. \par
}{\qj\sb50 \li300\fi-300 {\b BANK} see MEMORY BANK. \par
}{\qj\sb50 \li300\fi-300 {\b BINARY\~CONSTANT} Begins with {\b0\i0\scaps0\f23 "0b"} and continues until the first character not in the set \{{\b0\i0\scaps0\f23 "_"}, {\b0\i0\scaps0\f23 "0"}, {\b0\i0\scaps0\f23 "1"}\}. It\rquote s fully evaluated at compile time. \par
}{\qj\sb50 \li300\fi-300 {\b BIT} or {\i binary digit.} Is the smallest unit of data and has a boolean value. \par
}{\qj\sb50 \li300\fi-300 {\b BITMASK} also MASK. Extracts the status of certain bits in a binary string or number. \par
}{\qj\sb50 \li300\fi-300 {\b BITWISE\~OPERATOR} Operates on individual BITs of one or two operands. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Bitwise. \par
}{\qj\sb50 \li300\fi-300 {\b BITWISE\~COMPLEMENT} An operator that changes all BITs of an operand from 1 to 0 or vice versa. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: One\rquote s_complement. \par
}{\qj\sb50 \li300\fi-300 {\b BITWISE\~AND} An operator that takes two bit patterns of equal length, and produces another one of the same length by matching up corresponding bits (the first of each; the second of each; and so on) and performing the logical AND operation on each pair of corresponding bits. In each pair, the result is 1 if the first bit is 1 AND the second bit is 1. Otherwise, the result is zero. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Bitwise. \par
}{\qj\sb50 \li300\fi-300 {\b BITWISE\~OR} An operator that takes two bit patterns of equal length, and produces another one of the same length by matching up corresponding bits (the first of each; the second of each; and so on) and performing the logical OR operation on each pair of corresponding bits. In each pair, the result is 1 if the first bit is 1 OR the second bit is 1. Otherwise, the result is zero. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Bitwise. \par
}{\qj\sb50 \li300\fi-300 {\b BITWISE\~XOR} An operator that takes two bit patterns of equal length, and produces another one of the same length by matching up corresponding bits (the first of each; the second of each; and so on) and performing the logical OR operation on each pair of corresponding bits. In each pair, the result is 1 if the two bits are different, and 0 if they are the same. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Bitwise. \par
}{\qj\sb50 \li300\fi-300 {\b BOOLEAN} Boolean logic is a form of algebra in which all values are reduced to either TRUE or FALSE. In {\i JAL 2.0} this means TRUE or FALSE, also ON or OFF are valid and either 1 and 0. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Boolean. \par
}{\qj\sb50 \li300\fi-300 {\b CONTACT\~BOUNCE} Contact bounce is a common problem with mechanical switches and relays. When the contacts strike together, their momentum and elasticity act together to cause bounce. The result is a rapidly pulsed electrical current instead of a clean transition from zero to full current. If the switch voltage is fed directly to the input of a microprocessor, then the software might become confused by the rapid sequence of high and low logic levels when it is expecting only a single, stable transition between \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}on\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} and \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}off\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Switch. \par
}{\qj\sb50 \li300\fi-300 {\b COMPILER\~DIRECTIVE} Data embedded in source code to tell the compiler some intention about compilation. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Compiler_directive. \par
}{\qj\sb50 \li300\fi-300 {\b CO-OPERATIVE\~MULTITASKING} (or non-preemptive multitasking) is a form of multitasking in which multiple tasks execute by voluntarily ceding control to other tasks at programmer-defined points within each task. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Co-operative_multitasking. \par
}{\qj\sb50 \li300\fi-300 {\b DECIMAL\~CONSTANT} Begins with a digit, and continues until the first character not in the set \{{\b0\i0\scaps0\f23 "_"}, digit\}. It\rquote s fully evaluated at compile time. \par
}{\qj\sb50 \li300\fi-300 {\b DECLARATION} Specifies a variable\rquote s dimensions, identifier, type, and other aspects. \par
}{\qj\sb50 \li300\fi-300 {\b DIGIT} A character in the set \{{\b0\i0\scaps0\f23 "0"}\endash {\b0\i0\scaps0\f23 "9"}\}. \par
}{\qj\sb50 \li300\fi-300 {\b ENDIANNESS} The two main types of endianness are known as big-endian and little-endian. In {\i big-endian}, the most significant byte (MSB) is stored at the memory location with the lowest address. In {\i little-endian}, the least significant byte (LSB) is stored at the memory location with the lowest address. pJAL and PICs uses {\i little-endian} memory management. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Endianness. \par
}{\qj\sb50 \li300\fi-300 {\b EXPRESSION} Anything that evaluates to a value, for example x + 1. \par
}{\qj\sb50 \li300\fi-300 {\b IDENTIFIER} Begins with a member of the set \{{\b0\i0\scaps0\f23 "_"}, {\b0\i0\scaps0\f23 "a"}\endash {\b0\i0\scaps0\f23 "z"}, {\b0\i0\scaps0\f23 "A"}\endash {\b0\i0\scaps0\f23 "Z"}\} and continues until the first character {\i NOT} in the set \{{\b0\i0\scaps0\f23 "_"}, {\b0\i0\scaps0\f23 "a"}\endash {\b0\i0\scaps0\f23 "z"}, {\b0\i0\scaps0\f23 "A"}\endash {\b0\i0\scaps0\f23 "Z"}, digit\}. \par
}{\qj\sb50 \li300\fi-300 {\b INTERRUPT} is an asynchronous signal from hardware (or software) indicating the need for attention. Originated as a way to avoid wasting the processors valuable time in polling loops, waiting for external events. Instead, an interrupt signals the processor when an event occurs, allowing the processor to process other work while the event is pending. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Interrupt. \par
}{\qj\sb50 \li300\fi-300 {\b HEXADECIMAL\~CONSTANT} Begins with {\b0\i0\scaps0\f23 "0x"} and continues until the first character not in the set \{{\b0\i0\scaps0\f23 "_"}, {\b0\i0\scaps0\f23 "0"}\endash {\b0\i0\scaps0\f23 "9"}, {\b0\i0\scaps0\f23 "a"}\endash {\b0\i0\scaps0\f23 "f"}, {\b0\i0\scaps0\f23 "A"}\endash {\b0\i0\scaps0\f23 "F"}\}. It\rquote s fully evaluated at compile time. \par
}{\qj\sb50 \li300\fi-300 {\b LOGICAL\~EXPRESSION} The result is 0 if the expression evaluation is zero, and 1 if the expression evaluation is anything other than 0. \par
}{\qj\sb50 \li300\fi-300 {\b LOGICAL\~NOT} An operator that changes the boolean state from TRUE to FALSE or vice versa. \par
}{\qj\sb50 \li300\fi-300 {\b LSB} It is the byte in that position of a multi-byte number which has the least potential value. If it\rquote s written in lowercase, means the lowest BIT. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Least_significant_byte. \par
}{\qj\sb50 \li300\fi-300 {\b MEMORY\~BANK} PIC architecture typically has more memory registers than can be addressed in a single byte address. A special SFR register is utilized to switch to another bank of memory where the base addresses repeat. Check the specific PIC datasheet to determine the number of banks and their size. \par
}{\qj\sb50 \li300\fi-300 {\b MODULO} The modulo operation finds the remainder of division. \par
}{\qj\sb50 \li300\fi-300 {\b MSB} It is the byte in that position of a multi-byte number which has the greatest potential value. If it\rquote s written in lowercase, means the greatest BIT. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Most_significant_byte. \par
}{\qj\sb50 \li300\fi-300 {\b MULTITASKING} is a method by which multiple tasks, also known as processes, share common processing resources such as a CPU. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Computer_multitasking. \par
}{\qj\sb50 \li300\fi-300 {\b NIBBLE} Half of a an 8 bit byte, a group of 4 bits. Corresponding {\i JAL 2.0} {\i type} is BIT{*}4, eg: you can send data to a HD44780 LCD in nibble (4 bit) mode. \par
}{\qj\sb50 \li300\fi-300 {\b OCTAL\~CONSTANT} Begins with {\b0\i0\scaps0\f23 "0q"} and continues until the first character not in the set \{{\b0\i0\scaps0\f23 "_"}, {\b0\i0\scaps0\f23 "0"}\endash {\b0\i0\scaps0\f23 "7"}\}. It\rquote s fully evaluated at compile time. \par
}{\qj\sb50 \li300\fi-300 {\b OPERATOR} The most basic mathematical or logical functions usually represented by a single character eg: + - {*} \par
}{\qj\sb50 \li300\fi-300 {\b OPERAND} One of the inputs (arguments) of an operator. \par
}{\qj\sb50 \li300\fi-300 {\b PRAGMA} (short for \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}{\i pragmatic information}\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}), see COMPILER DIRECTIVE. \par
}{\qj\sb50 \li300\fi-300 {\b STRING\~CONSTANT} Begins with {\b0\i0\scaps0\f23 '} and continues until the next {\b0\i0\scaps0\f23 '}. Also, begins with {\b0\i0\scaps0\f23 "} and continues until the next {\b0\i0\scaps0\f23 "}. It\rquote s fully evaluated at compile time. \par
}{\qj\sb50 \li300\fi-300 {\b TOKENS} {\i JAL 2.0} syntax is based on tokens. In programming languages, a single element of a programming language. In {\i JAL 2.0} can be an identifier, constant, operator, or any non-space character. See Wikipedia\~
[{\field{\*\fldinst{\lang1024 REF BIB_Wikipedia \\* MERGEFORMAT }}{\fldrslt{5}}}
], keyword: Token. \par
}{\qj\sb50 \li300\fi-300 {\b TRINARY\~OPERATOR} An operator which three operands are associated with the operator. Example: in C programming language the {\b0\i0\scaps0\f23 ?} operator, {\b0\i0\scaps0\f23 c?a:b}. \par
}{\qj\sb50 \li300\fi-300 {\b UNARY\~OPERATOR} Also MONADIC operator. An operator which only takes one operand (argument), eg: -1 (a negative value). \par
}{\qj\sb50 \li300\fi-300 {\b VAR} Variable. \par
}\page{} \qj\sb72 \fi0 {\s2\ql\sb240\sa60\keepn\f16\b\fs40 Chapter {\*\bkmkstart BMsec_GNU_FDL}6{\*\bkmkend BMsec_GNU_FDL}\par\par
GNU Free Documentation License\par
}\qj\sb60 \fi0 GNU Free Documentation License\par
\qj\fi360 Version 1.2, November 2002\par
\qj\fi360 Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.\par
\qj\fi360 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA\par
\qj\fi360 Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\par
\qj\fi360 0. PREAMBLE\par
\qj\fi360 The purpose of this License is to make a manual, textbook, or other functional and useful document \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}free\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.\par
\qj\fi360 This License is a kind of \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}copyleft\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.\par
\qj\fi360 We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\par
\qj\fi360 1. APPLICABILITY AND DEFINITIONS\par
\qj\fi360 This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Document\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}you\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}. You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law.\par
\qj\fi360 A \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Modified Version\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.\par
\qj\fi360 A \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Secondary Section\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document\rquote s overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.\par
\qj\fi360 The \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Invariant Sections\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none.\par
\qj\fi360 The \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Cover Texts\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.\par
\qj\fi360 A \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Transparent\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Transparent\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} is called \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Opaque\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}.\par
\qj\fi360 Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, {\plain L{\up6\fs19 A}T{\dn7 E}X}{} input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only.\par
\qj\fi360 The \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Title Page\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Title Page\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} means the text near the most prominent appearance of the work\rquote s title, preceding the beginning of the body of the text.\par
\qj\fi360 A section \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Entitled XYZ\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Acknowledgements\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Dedications\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Endorsements\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, or \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}History\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}.) To \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Preserve the Title\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} of such a section when you modify the Document means that it remains a section \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Entitled XYZ\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} according to this definition.\par
\qj\fi360 The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.\par
\qj\fi360 2. VERBATIM COPYING\par
\qj\fi360 You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.\par
\qj\fi360 You may also lend copies, under the same conditions stated above, and you may publicly display copies.\par
\qj\fi360 3. COPYING IN QUANTITY\par
\qj\fi360 If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document\rquote s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.\par
\qj\fi360 If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.\par
\qj\fi360 If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.\par
\qj\fi360 It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.\par
\qj\fi360 4. MODIFICATIONS\par
\qj\fi360 You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:\par
{\qj\fi0 \qc [Sorry. Ignored {\plain\f23\\begin\{labeling\} ... \\end\{labeling\}}]\par
}\qj\fi0 If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version\rquote s license notice. These titles must be distinct from any other section titles.\par
\qj\fi360 You may add a section Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Endorsements\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, provided it contains nothing but endorsements of your Modified Version by various parties\endash for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.\par
\qj\fi360 You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.\par
\qj\fi360 The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.\par
\qj\fi360 5. COMBINING DOCUMENTS\par
\qj\fi360 You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers.\par
\qj\fi360 The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.\par
\qj\fi360 In the combination, you must combine any sections Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}History\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} in the various original documents, forming one section Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}History\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}; likewise combine any sections Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Acknowledgements\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, and any sections Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Dedications\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}. You must delete all sections Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Endorsements\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}.\par
\qj\fi360 6. COLLECTIONS OF DOCUMENTS\par
\qj\fi360 You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.\par
\qj\fi360 You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.\par
\qj\fi360 7. AGGREGATION WITH INDEPENDENT WORKS\par
\qj\fi360 A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}aggregate\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} if the copyright resulting from the compilation is not used to limit the legal rights of the compilation\rquote s users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document.\par
\qj\fi360 If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document\rquote s Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.\par
\qj\fi360 8. TRANSLATION\par
\qj\fi360 Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail.\par
\qj\fi360 If a section in the Document is Entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Acknowledgements\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}Dedications\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, or \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}History\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}, the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.\par
\qj\fi360 9. TERMINATION\par
\qj\fi360 You may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.\par
\qj\fi360 10. FUTURE REVISIONS OF THIS LICENSE\par
\qj\fi360 The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. \par
\qj\fi360 See http://www.gnu.org/copyleft.\par
\qj\fi360 Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}or any later version\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }} applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation.\par
\qj\fi360 ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:\par
\qj\fi360 Copyright (c) YEAR YOUR NAME.\par
\qj\fi360 Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}GNU Free Documentation License\lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}.\par
\qj\fi360 If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \lquote {\field{\*\fldinst EQ \\O(,\\S({\f10\'26\'26}))}{\fldrslt }}with ... Texts\rdblquote . line with this:\par
\qj\fi360 with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\par
\qj\fi360 If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation.\par
\qj\fi360 If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.\par
{\qj\sb120 \fi0 {\plain\b\fs32 References}\par
\qj\sb60 \li900\fi-450 [{\v\*\bkmkstart BIB_Microchip_web}1{\*\bkmkend BIB_Microchip_web}]\tab Microchip\rquote s homepage: {\field{\*\fldinst{ HYPERLINK "http://www.microchip.com" }{{}}}{\fldrslt{\ul http://www.microchip.com}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_PICbsc}2{\*\bkmkend BIB_PICbsc}]\tab PICbsc\rquote s homepage: {\field{\*\fldinst{ HYPERLINK "http://www.casadeyork.com/robot/picbsc" }{{}}}{\fldrslt{\ul http://www.casadeyork.com/robot/picbsc}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_pJALdownload}3{\*\bkmkend BIB_pJALdownload}]\tab {\i JAL 2.0} download homepage: {\field{\*\fldinst{ HYPERLINK "http://www.casadeyork.com/pjal" }{{}}}{\fldrslt{\ul http://www.casadeyork.com/pjal}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_Wouter_web}4{\*\bkmkend BIB_Wouter_web}]\tab {\scaps Wouter van Ooijen}\rquote s homesite: {\field{\*\fldinst{ HYPERLINK "http://www.voti.nl/jal" }{{}}}{\fldrslt{\ul http://www.voti.nl/jal}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_Wikipedia}5{\*\bkmkend BIB_Wikipedia}]\tab Wikipedia\rquote s homepage: {\field{\*\fldinst{ HYPERLINK "http://en.wikipedia.org" }{{}}}{\fldrslt{\ul http://en.wikipedia.org}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_JAL_SF_net}6{\*\bkmkend BIB_JAL_SF_net}]\tab GPL JAL homepage: {\field{\*\fldinst{ HYPERLINK "http://jal.sf.net" }{{}}}{\fldrslt{\ul http://jal.sf.net}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_Stef_pJAL}7{\*\bkmkend BIB_Stef_pJAL}]\tab {\scaps Stef Mientki}\rquote s {\i JAL 2.0} homepage: {\field{\*\fldinst{ HYPERLINK "http://pic.flappie.nl" }{{}}}{\fldrslt{\ul http://pic.flappie.nl}}} \par
\qj\li900\fi-450 [{\v\*\bkmkstart BIB_PICList_RMW}8{\*\bkmkend BIB_PICList_RMW}]\tab PICList RMW issue: {\field{\*\fldinst{ HYPERLINK "http://www.piclist.com/techref/readmodwrite.htm" }{{}}}{\fldrslt{\ul http://www.piclist.com/techref/readmodwrite.htm}}} \par
}}}
