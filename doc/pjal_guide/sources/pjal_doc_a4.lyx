#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass scrbook
\begin_preamble
\usepackage{babel}
\usepackage{longtable}
\usepackage{color}
\usepackage{graphicx}
\usepackage{html}
\usepackage{hyperref} 
\newcommand{\pjal}{\emph{JAL 2.0}}
\parskip=0.5em
\widowpenalty=10000
\clubpenalty=10000
\raggedbottom
\end_preamble
\language english
\inputencoding latin1
\fontscheme times
\graphics default
\paperfontsize 12
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 1
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle default

\layout Title


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 manual
\layout Author


\noun on 
Javier Martínez
\noun default 
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
and
\end_inset 

 
\noun on 
Dave Lagzdin 
\noun default 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
and
\end_inset 

 
\noun on 
Vasile Surducan
\layout Lowertitleback


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 


\color black
 Manual
\newline 

\newline 
Copyright 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
copyright  
\end_inset 

2006 
\noun on 
Javier Martínez
\noun default 
, 
\noun on 
Dave Lagzdin 
\noun default 
\SpecialChar ~
and
\noun on 
\SpecialChar ~
Vasile Surducan
\noun default 
.
 
\newline 

\newline 
Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.2 or any later
 version published by the Free Software Foundation; with no Invariant Sections,
 
\color default
with this Front-Cover
\color black
 Texts, and no Back-Cover Texts.
 A copy of the license is included in the section entitled 
\begin_inset Quotes sld
\end_inset 

GNU Free Documentation License
\begin_inset Quotes srd
\end_inset 

.

\color default
 
\layout Comment

Update pJAL name in Preamble!!
\layout Chapter*


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 manual
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 
\begin_inset LatexCommand \cite{pJALdownload}

\end_inset 

 is a high-level language for a number of Microchip 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
texttrademark
\end_inset 

\SpecialChar ~
PIC microcontrollers\SpecialChar ~

\begin_inset LatexCommand \cite{Microchip-web}

\end_inset 

.
\layout Standard

It was created by 
\noun on 
Kyle York
\noun default 
, who also wrote the 
\emph on 
PICbsc
\emph default 
 compiler\SpecialChar ~

\begin_inset LatexCommand \cite{PICbsc}

\end_inset 

.
 
\noun on 
Stef Mientki
\noun default 
 got in touch with 
\noun on 
Kyle York
\noun default 
 and ask him if he could look into rewriting 
\emph on 
JAL
\emph default 
 using the 
\emph on 
PICbsc
\emph default 
 engine, the prospect intrigued him
\emph on 
.
 
\emph default 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 not only shares the same 
\emph on 
JAL\SpecialChar ~

\begin_inset LatexCommand \cite{Wouter-web}

\end_inset 


\emph default 
 syntax, but adds new features (like new types, arrays, etc.) to 
\emph on 
JAL,
\emph default 
 keeping the 
\emph on 
PICbsc
\emph default 
 internal compiler design as well.
 This manual covers all aspects of 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 without any reference to 
\emph on 
JAL
\emph default 
 trying to be useful for all, novices and users with 
\emph on 
JAL
\emph default 
 experience.
 
\layout Standard


\emph on 
JAL
\emph default 
 was developed by 
\noun on 
Wouter van Ooijen
\noun default 

\begin_inset Foot
collapsed true

\layout Standard

Wouter released JAL under GPL (
\begin_inset ERT
status Open

\layout Standard

\backslash 
htmladdnormallink{http://jal.sourceforge.net}{http://jal.sourceforge.net}
\end_inset 

) in January of 2003.
\end_inset 

.
 He created 
\emph on 
JAL
\emph default 
 because he did not like any of the low-cost (or free) languages for these
 chips and implementing a high level language looked like a nice project.
 
\layout Standard

For a quick impression of 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 here's a small example how 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 looks.
 Also, you could read either the summary
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sec:GNU-FDL}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:GNU-FDL}

\end_inset 


\end_inset 

 or the examples
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sec:Examples}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:Examples}

\end_inset 


\end_inset 

 section of this manual.
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   ; microcontroller definition file
\newline 
   include c16F877_10
\newline 

\newline 
   ; set pin a0 direction as output
\newline 
   pin_a0_direction = output 
\newline 

\newline 
   ; do forever the statements inside the loop
\newline 
   forever loop 
\newline 
 
\newline 
     pin_a0 = ! pin_a0  ; complement value of a0
\newline 
     delay_1s(1)        ; wait 1 second
\newline 
 
\newline 
   end loop
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter*
\pagebreak_top 
Revision history
\layout Standard


\begin_inset LatexCommand \label{sec:Revision-history}

\end_inset 


\layout Description

7th\SpecialChar ~
March\SpecialChar ~
2006 First edition, 
\emph on 
pJAL
\emph default 
 version 0.9 (Released on 2006 March 2).
\newline 

\size small 
Written by: 
\noun on 
Javier Martínez, Dave Lagzdin 
\noun default 
and 
\noun on 
Vasile Surducan
\newline 

\noun default 
Thanks to: 
\noun on 
Joep Suijs, Kyle York
\noun default 
, 
\noun on 
Michael Watterson, Stef Mientki
\noun default 
 and 
\noun on 
Wouter van Ooijen.
\layout Description

21th\SpecialChar ~
April\SpecialChar ~
2006 Second edition, 
\emph on 
JAL
\emph default 
 2.0 (Released on 2006 April 20).
\newline 

\size small 
Updated by: 
\noun on 
Javier Martínez, Dave Lagzdin 
\noun default 
and 
\noun on 
Vasile Surducan
\noun default 

\newline 
Modifications: changed compiler name, corrected small 
\emph on 
bugs,
\emph default 
 added some suggestions and updated multi-word configuration bits.
\layout Description

10th\SpecialChar ~
June\SpecialChar ~
2006 Third edition, 
\emph on 
JAL 2.0
\emph default 
 (Released on 2006 June 8).
\newline 

\size small 
Updated by: 
\noun on 
Javier Martínez, Dave Lagzdin 
\noun default 
and 
\noun on 
Vasile Surducan
\noun default 

\newline 
Thanks to: 
\noun on 
Norbert Schlichthaerle, Andree Steenveld.
\noun default 

\newline 
Modifications: corrected small 
\emph on 
bugs,
\emph default 
 added some suggestions and new compiler features.
\layout Chapter
\pagebreak_top 
Language definition
\layout Standard


\begin_inset LatexCommand \label{sec:Language-definition}

\end_inset 


\layout Section

basics
\layout Standard


\begin_inset LatexCommand \label{sub:Language-basics}

\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Format
\layout Standard


\begin_inset LatexCommand \label{sub:Format}

\end_inset 


\layout Standard

The 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 language is free-format (except for comments) and not case-sensitive.
 All characters with an ASCII value below the space (tab, carriage return,
 new line, form feed, etc.) are treated as spaces, except that the end of
 a line terminates a comment.
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 does not use statement separators.
 The only real separators are the comma's between the (formal or actual)
 arguments to a procedure or function 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
verb+"( , )"+
\end_inset 

, or in an array definition 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
verb+"{ , }"+
\end_inset 

.
\layout Comment

The 
\emph on 
pJAL
\emph default 
 syntax is based on tokens.
 Tokens must be separated by separators, hence spaces (or other separators)
 are needed between identifiers, operators etc.
 
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   -- if statement in preferred format
\newline 
   if a > b then
\newline 
      a = b + 1
\newline 
   else
\newline 
      a = b - 1
\newline 
   end if
\newline 
    
\newline 
   -- but this has exactly the same effect
\newline 
   if a > b then a = b + 1 else a = b - 1 end if
\newline 
   
\newline 
   -- comma's between actual arguments
\newline 
   f( a, b, c, d )
\newline 
   var byte msg[5] = "Hello"
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Comments
\layout Standard


\begin_inset LatexCommand \label{sub:Comments}

\end_inset 


\layout Standard

A comment is started by the token 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"--"+
\end_inset 

 or 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+";"+
\end_inset 

 and continues until the end of the line.
\newline 

\newline 

\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- the next line contains a comment 
\newline 
   -- after the assignment
\newline 
   ticks = ticks + 1 ; one more tick
\newline 
    
\newline 
   ; the next line contains the same comment 
\newline 
   ; after the assignment
\newline 
   ticks = ticks + 1 -- one more tick
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Includes 
\layout Standard


\begin_inset LatexCommand \label{sub:Includes}

\end_inset 


\layout Standard

An include causes the content of the included file to be read.
 A subsequent include for the same file name will be ignored.
 This makes it possible for a library file to include all required lower
 libraries.
\layout Standard

Included files are sought first in the current directory, and next in each
 location indicated by the compilers search path.
 All
\emph on 
 
\emph default 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 files have the extension 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+".jal"+
\end_inset 

.
 Be care not to include this extension in the 
\emph on 
include
\emph default 
 statement.
\layout Standard

Includes can be nested to any level.
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   include serial    -- include the serial.jal file
\newline 
   include i2c       -- include the i2c.jal file
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Program
\layout Standard

A 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 program is a sequence of statements.
 Declarations are also considered statements, so declarations can appear
 almost anywhere in a program.
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   -- my first program 
\newline 
   var byte b       -- variable declaration
\newline 
   while b > 0 loop -- start of loop
\newline 
      b = b + 1     -- variable assignment
\newline 
   end loop         -- end of loop
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Scope
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 is a block-structured language, so each declaration is visible from its
 declaration to the end of the block in which the declaration appears (in
 practice this means to the first end at the current nesting level).
\layout Standard

A declaration can hide a declaration of the same name from an enclosing
 block.
 A declaration can not hide a name which was already declared at the same
 nesting level.
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   var byte b
\newline 
   while b > 0 loop
\newline 
      var bit b    -- Overrides the byte b defined
\newline 
                   -- outside the while block.
\newline 
   
\newline 
      b = false    -- The bit b, not the byte
\newline 
   
\newline 
      var byte b   -- Error, "b" already declared
\newline 
                   -- as a bit inside the while block.
\newline 
   end loop
\newline 
   
\newline 
   var word b      -- Error, "b" already declared
\newline 
                   -- as a byte before while block.
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Block
\layout Standard

A block is a sequence of statements.
 Variables, constants, procedures, and functions defined in a block will
 not be visible outside of the block.
\layout Section

basic types
\layout Standard


\begin_inset LatexCommand \label{sub:basic-types}

\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Built-in types
\layout Standard


\begin_inset LatexCommand \label{sub:Built-in-types}

\end_inset 

These are the types of range values that 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 supports.
\layout Description

BIT 1 bit unsigned boolean value (range is 0 or 1)
\begin_inset Foot
collapsed true

\layout Standard

 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 support aditional names for this range: 
\emph on 
0 = FALSE = LOW = OFF
\emph default 
 and 
\emph on 
1=TRUE=HIGH=ON.
\end_inset 

.
\layout Description

BYTE 8 bit unsigned value (range is 0 ..
 255).
\layout Description

SBYTE 8 bit signed value (range is -128 ..
 127).
\layout Description

WORD 16 bit unsigned value (range is 0 ..
 65,535).
\layout Description

SWORD 16 bit signed value (range is -32,768 ..
 32,767).
\layout Description

DWORD 32 bit unsigned value (range is 0 ..
 4,294,967,296).
\layout Description

SDWORD 32 bit signed value (range is -2,147,483,648 ..
 2,147,483,647).
\layout Description


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Extending types
\layout Standard


\begin_inset LatexCommand \label{sub:Extending-types-with}

\end_inset 

Basic types can be extended using the token 
\emph on 
[*cexpr]
\emph default 

\begin_inset Foot
collapsed true

\layout Standard


\emph on 
cexpr
\emph default 
 means a constant expression or a literal value.
\end_inset 

 preceded by token 
\emph on 
type
\emph default 
.
 Being
\emph on 
 type
\emph default 
 one of the following built-in types
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Built-in-types}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Built-in-types}

\end_inset 


\end_inset 

: BIT, BYTE or SBYTE.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Paragraph


\emph on 
BYTE
\emph default 
 and 
\emph on 
SBYTE
\newline 

\layout Standard

For 
\emph on 
BYTE
\emph default 
 and 
\emph on 
SBYTE
\emph default 
, this means the variable will be defined as an integer using 
\emph on 
cexpr
\emph default 
 bytes.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    WORD is simply shorthand for BYTE*2 
\newline 
   DWORD is simply shorthand for BYTE*4 
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Paragraph

BIT
\newline 

\layout Standard

If type is 
\emph on 
BIT
\emph default 
, the definition changes.
 A 
\emph on 
BIT
\emph default 
 variable, as defined in 
\emph on 
JAL
\emph default 
, is really of type boolean.
 When assigned any non-zero value, it takes on the value of 1.
\layout Standard

Using the
\emph on 
 [
\emph default 
*cexpr
\emph on 
]
\emph default 
, the definition changes to be more like a C bit field: assignment is masked.
\layout Standard

We can create a 'nibble-like' grouping of bits with range 0 to (
\begin_inset Formula $2^{cexpr}-1$
\end_inset 

), i.e.: with 2 bits we can count to 3 ( 0b11 ) 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    VAR BIT*2 cc 
\newline 
   
\newline 
   -- when assigning to cc, the internal 
\newline 
   -- compiler assignment is: 
\newline 
   cc = (value & 0x03) -- mask 2 least significative bits
\newline 
                       -- remember 0x03=0b00000011
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Literals
\layout Standard


\begin_inset LatexCommand \label{sub:Literals}

\end_inset 

 Literals are numeric constants with a invariant value, the format is:
\layout Description

12 a decimal numeric constant
\layout Description

0x12 a hexadecimal numeric constant
\layout Description

0b01 a binary numeric constant
\layout Description

0q01 an octal numeric constant
\layout Description

"a" an ASCII char constant
\layout Description

"Hello" a 
\emph on 
string
\emph default 
 constant.
 Following 
\emph on 
escape sequence
\emph default 
 chars can be used inside a string:
\newline 

\newline 

\begin_inset  Tabular
<lyxtabular version="3" rows="14" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Escape sequence char
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
a+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Bell
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
b+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Backspace
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
f+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Form Feed
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
n+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Line Feed
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
r+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Carriage Return
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
t+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Horizontal TAB
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
v+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Vertical TAB
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 

\backslash 
+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\backslash 

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
?+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

?
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
'+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

'
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
"+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes sld
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
0+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Hexadecimal value: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+0x00+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+
\backslash 
x##+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Hexadecimal value: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+0x##+
\end_inset 


\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

Literals other than ASCII constants may also contain a number of underscores
 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

 which are ignored, but are useful for making them more readable.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    0b_0000_1111  -- a binary literal
\newline 
   
\newline 
   -- a fuse definition (14 bit word)
\newline 
   0b_11_0000_1111_0000 
\newline 
   
\newline 
   1_234_567     -- a decimal literal
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

String constants can use C style initialization style, eg:
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte string[] = "abc" "def" "ghi"+
\end_inset 


\layout Standard

is the same as:
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte string[] = "abcdefghi"+
\end_inset 


\layout Section

Constants
\layout Standard


\begin_inset LatexCommand \label{sub:Constants}

\end_inset 

A constant declaration introduces a name which has a constant value throughout
 its scope.
 When the type is omitted the constant has a 
\emph on 
SDWORD
\emph default 
 type.
 A single constant declaration can introduce a number of constants of the
 same type.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   CONST [type[*cexpr]] identifier [ '[' cexpr ']' ]
\newline 

\newline 
   { '=' cexpr | = '{' cexpr1[, cexpr2,...]'}' | = '"' cexpr '"'}
\newline 

\newline 
   [ , identifier2...]
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

CONST denotes the beginning of a constant definition clause.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

type[*cexpr] Defines the type of the constant.
 If none is given, the constant becomes universal type which is 32 bit signed
 (
\emph on 
SDWORD
\emph default 
).
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'['\SpecialChar ~
cexpr\SpecialChar ~
']' Defines a constant table 
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Constant-tables}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Constant-tables}

\end_inset 


\end_inset 

.
\newline 
A constant table will not take any space unless it is indexed at least once
 with a non-constant subscript.
 On the PIC, constant tables consume 
\emph on 
code
\emph default 
 space, not 
\emph on 
data
\emph default 
 space, and are limited to 255 elements.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'='\SpecialChar ~
cexpr For non-table constants this assigns the value to the constant.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'='\SpecialChar ~
'{'\SpecialChar ~
cexpr1[,\SpecialChar ~
cexpr2\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

]\SpecialChar ~
'}' For tables of constants this assigns the value to each element.
 There must be the same number of 
\emph on 
cexprs
\emph default 
 as there are elements defined.
 
\layout Description


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'
\begin_inset Quotes srd
\end_inset 

'\SpecialChar ~
cexpr\SpecialChar ~
'
\begin_inset Quotes srd
\end_inset 

' A 
\emph on 
string 
\emph default 
constant can be assigned to a constant table: 
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+const byte x[] = "hello"+
\end_inset 

.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    const byte cr = 0x0D, lf = 10 -- byte constants
\newline 
   const word cr = 1492          -- word constant
\newline 
   
\newline 
   -- Literal (SDWORD) constant
\newline 
   const seconds_per_day = 60 * 60 * 24
\newline 
   
\newline 
   -- constant table
\newline 
   const byte mytable[5] = {"M","2",24,1,43} 
\newline 
   -- String constant table
\newline 
   const byte zz[] = "Hello"
\newline 
   
\newline 
   -- Extended type constant
\newline 
   const byte*3 my_pointer = 0xFFCC00
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Variables
\layout Standard


\begin_inset LatexCommand \label{sub:Variables}

\end_inset 


\layout Subsection

Declaration
\layout Standard


\begin_inset LatexCommand \label{sub:Variable-Declaration}

\end_inset 


\layout Standard

A variable declaration introduces a name which will be used within the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 program.
 In PIC architecture this name will correspond to a hardware location called
 
\emph on 
register
\emph default 
 located in RAM memory.
 
\layout Standard

These 
\emph on 
registers
\emph default 
 can be of two types: 
\layout Itemize

GPR.
 General Purpose Registers
\layout Itemize

SFR.
 Special Function Registers
\layout Standard

Optionally the name can be bound to a specific location
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Location}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Location}

\end_inset 


\end_inset 

, or to other already declared variable
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Alias}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Alias}

\end_inset 


\end_inset 

, otherwise the compiler allocates a suitable and available GPR location.
 
\layout Standard

In a declaration a value can be assigned to a variable, which has the same
 effect as an equivalent assignment immediately following the declaration.
 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    var byte demo = 0xAF 
\newline 
   
\newline 
   --  ... same as ...
\newline 
   var byte demo
\newline 
   demo = 0xAF
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

The initial value does not need to be a constant expression.
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 will set the correct bank memory while addressing a variable (except in
 inline assembler
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Inline-assembler}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Inline-assembler}

\end_inset 


\end_inset 

).
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    VAR [VOLATILE] type[*cexpr] 
\newline 
      identifier [ '[' cexpr ']' ]
\newline 

\newline 
      [ { AT cexpr [ : bit ] | 
\newline 
             variable [ : bit ] | 
\newline 
            '{' cexpr1[, cexpr2...] '}'
\newline 

\newline 
      | IS variable }
\newline 

\newline 
    [ '=' cexpr | '{' cexpr1, ... '}' | '=' '"' cexpr '"']
\newline 

\newline 
    [, identifier2...]
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

VAR denotes the beginning of a variable definition clause.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

VOLATILE A variable can be declared volatile, which expresses that the variable
 does not possess normal variable semantics
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Volatile}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Volatile}

\end_inset 


\end_inset 

.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

type[*cexpr] The 
\emph on 
type
\emph default 
 of the variable
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Built-in-types}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Built-in-types}

\end_inset 

 and section 
\begin_inset LatexCommand \ref{sub:Extending-types-with}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Extending-types-with}

\end_inset 

.
\end_inset 

.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

Identifier Any valid 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 identifier.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'['\SpecialChar ~
cexpr\SpecialChar ~
']' Defines a table
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Variable-tables}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Variable-tables}

\end_inset 

.
\end_inset 

 of 
\emph on 
cexpr
\begin_inset Foot
collapsed true

\layout Standard


\emph on 
cexpr
\emph default 
 means a constant expression or a literal value.
\end_inset 


\emph default 
 elements.
 The table index starts at 0 and continues through (cexpr - 1).
 cexpr must be >= 1.
 A table 
\emph on 
MUST
\emph default 
 fit entirely within a single PIC data bank.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

AT\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

 denotes the location of the variable
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Location}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Location}

\end_inset 


\end_inset 

.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

IS\SpecialChar ~
variable Tells the compiler that this identifier is simply an alias for
 another
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Alias}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Alias}

\end_inset 


\end_inset 

.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'='\SpecialChar ~
expr Shorthand assignment.
 The variable will be assigned expr.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'='\SpecialChar ~
'{'\SpecialChar ~
expr1\SpecialChar ~
[,\SpecialChar ~
expr2\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

]\SpecialChar ~
'}' For a table variable, the elements will be assigned expr1, expr2, 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

'
\begin_inset Quotes srd
\end_inset 

'\SpecialChar ~
cexpr\SpecialChar ~
'
\begin_inset Quotes srd
\end_inset 

' A 
\emph on 
string 
\emph default 
constant can be assigned to a variable table: 
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte x[5] = "hello"+
\end_inset 

.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

,\SpecialChar ~
identifier2\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

 Allows defining multiple variables with the same attributes: VAR BYTE a,b,c
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}    var byte x, y=3
\newline 
   var word z
\newline 
   var dword i=0
\newline 
   var byte AD_lo, AD_hi
\newline 
   var word AD_result = AD_lo + 256*AD_hi
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Location
\layout Standard


\begin_inset LatexCommand \label{sub:Location}

\end_inset 


\layout Standard

A variable declaration can specify the adress of the variable.
 The address expression must be compile-time constant.
 The compiler takes care of the translation to the banked address.
 
\layout Description

AT\SpecialChar ~
cexpr\SpecialChar ~
[\SpecialChar ~
':'\SpecialChar ~
bit\SpecialChar ~
] Places the new variable at address 
\emph on 
cexpr
\emph default 
.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

AT\SpecialChar ~
variable\SpecialChar ~
[\SpecialChar ~
':'\SpecialChar ~
bit\SpecialChar ~
] Places the new variable at the same address as an existing
 variable.
 Any address uses for explicit placement will not be allocated to another
 variable.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

AT\SpecialChar ~
'{'\SpecialChar ~
cexpr1[,\SpecialChar ~
cexpr2\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

]\SpecialChar ~
'}' Places the new variable at multiple address.
 On the PIC, many of the special purpose registers
\begin_inset Foot
collapsed true

\layout Standard

SFRs in Microchip
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
texttrademark
\end_inset 

's terminology.
\end_inset 

 are mirrored in two or more data banks.
 Telling the compiler which address hold the variable allows it to optimize
 the data access bits.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte volatile porta at 0x06
\newline 
   var volatile byte _status AT {0x0003, 0x0083, 
\newline 
                                 0x0103, 0x0183}
\newline 
   var bit  volatile _z at _status : 2
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Volatile
\layout Standard


\begin_inset LatexCommand \label{sub:Volatile}

\end_inset 


\layout Standard

The 
\emph on 
VOLATILE
\emph default 
 keyword guarantees that a variable that is either used or assigned will
 not be optimized away, and the variable will be only read once when evaluating
 an expression.
 Normally, if a variable is assigned a value that is never used, the assignment
 is removed and the variable will not allocated any space.
\layout Standard

If the assignment is an expression, the expression 
\emph on 
will
\emph default 
 be fully evaluated.
 If a variable is used, but never assigned, all instances of the variable
 
\emph on 
will
\emph default 
 be replaced with the constant 0 (of the appropriate type) and the variable
 
\emph on 
will not
\emph default 
 be allocated any space.
\layout Standard

SFR's should always be declared as 
\emph on 
VOLATILE
\emph default 
, as these are associated with certain hardware functions specific to the
 PIC being used.
 
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var volatile byte FSR at 4 
\newline 
   var volatile byte INDF at 0
\newline 
   var volatile byte count
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Alias
\layout Standard


\begin_inset LatexCommand \label{sub:Alias}

\end_inset 


\layout Standard

A variable can be declared to be an alias for another variable.
 This is used much like a constant declaration to hide the actual identity
 of an identifier from subsequent code.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- fragment of a library file,
\newline 
   -- which defines the pins used by the library
\newline 
   var byte volatile i2c_clock    is pin_a3
\newline 
   var byte volatile i2c_data_in  is pin_a4
\newline 
   var byte volatile i2c_data_out is pin_a4_direction
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Tables
\layout Standard


\begin_inset LatexCommand \label{sub:Tables}

\end_inset 


\layout Subsection

Constant tables
\layout Standard


\begin_inset LatexCommand \label{sub:Constant-tables}

\end_inset 


\layout Standard

Constant tables are stored in program code, they're limited to 255 values.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const byte msg[5] = {"M","2",24,1,43} 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

A constant table will produce no code unless it's used with a variable subscript.
 So, if you use: 
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- Constant index:
\newline 
   -- "msg[3]" will replace by the corresponding
\newline 
   -- literal value, like: a=1
\newline 
   a = msg[3] 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

\SpecialChar ~
the constant value 
\emph on 
1
\emph default 
 will be assigned into variable 
\emph on 
a
\emph default 
.
 And if you use: 
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- Variable index:
\newline 
   -- A special look up table function is built 
\newline 
   x = 3
\newline 
   a = msg[x]
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 


\emph on 
\SpecialChar ~
msg
\emph default 
 will become a lookup table function that will return the desired value.
\layout Standard

If constant table is declared with values assignment, it's not necessary
 to include the table 
\emph on 
index:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const byte msg[] = {"M","2",24,1,43} 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In order to know the amount of values in the table you must use the COUNT
 statement
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:COUNT}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:COUNT}

\end_inset 


\end_inset 

.
\layout Subsection

Variable tables
\layout Standard


\begin_inset LatexCommand \label{sub:Variable-tables}

\end_inset 


\layout Standard

Variable tables are stored in RAM memory and must fit within a single bank.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte msg[5] = {"M","2",24,1,43} 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Enumerate

when 
\emph on 
defining
\emph default 
 a table, the size must be const, so
\newline 
var byte myvar[3] ; this is valid
\newline 
var byte myvar[n] ; this is 
\emph on 
NOT
\emph default 
 valid if 
\emph on 
n
\emph default 
 is a variable
\layout Enumerate

when 
\emph on 
using
\emph default 
 the table, the index can be either const or a variable.
 The table starts at index 0.
 When using a variable, no bounds checking is done.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- Constant index:
\newline 
   -- "msg[3]" will replace by the exact file register
\newline 
   -- with the index 3
\newline 
   a = msg[3] 
\newline 
   
\newline 
   -- Variable index:
\newline 
   -- An INDIRECT MEMORY ACCESS is used to get the value
\newline 
   x = 3
\newline 
   a = msg[x]
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

If variable table is declared with values assignment, it's not necessary
 to include the table 
\emph on 
index:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte msg[] = "Hello" 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In order to know the amount of values in the table you must use the COUNT
 statement
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:COUNT}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:COUNT}

\end_inset 


\end_inset 

.
\layout Section

Expressions
\layout Standard


\begin_inset LatexCommand \label{sub:Expressions}

\end_inset 


\layout Standard

An expression is constructed from literals, identifiers, function calls
 and operators.
 An identifier can identify a constant, a variable or (within a subprogram)
 a formal parameter.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Operators
\layout Standard


\begin_inset LatexCommand \label{sub:Operators}

\end_inset 

The following operators are defined in 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 (ordered by priority):
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Standard
\added_space_top medskip \align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="24" columns="4">
<features islongtable="true" firstHeadTopDL="true" firstHeadBottomDL="true" headTopDL="true" headBottomDL="true" footTopDL="true" footBottomDL="true" lastFootTopDL="true" lastFootBottomDL="true">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="6cm">
<row topline="true" bottomline="true" endfirsthead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Op.
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Priority
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Example
\end_inset 
</cell>
</row>
<row topline="true" endhead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Op.
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Priority
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Example
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+!!+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Logical
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

0 (highest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+!!5 = 1 +
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+!!0 = 0+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Unary negation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

0 (highest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-1 -- negative+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+!+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bitwise complement
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

0 (highest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=0b_0000_1111+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=!a+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-- a=0b_1111_0000 +
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+~+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bitwise complement
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

0 (highest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=0b_0000_1111+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=~a+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-- a=0b_1111_0000 +
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+*+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Multiplication
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 2+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a*3 -- a=6+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+/+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Integer division
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 17+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a/2 -- a=8+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+%+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Modulus division
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 17+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a%2 -- a=1+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

+
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Addition
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 2+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a+
\end_inset 

+
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+3 -- a=5+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Subtraction
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 17+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a-10 -- a=7+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+<<+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Left shift
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 0x81+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a<<1 -- a=0x02+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+>>+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Right shift
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a = 0x82+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a>>1 -- a=0x41+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+<+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Less than
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=12, b=14+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+if a < b then ...+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+<+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+=+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Less or equal than
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=12, b=12+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+if a <= b then ...+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+==+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Equal
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=12, b=12+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+if a == b then ...+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+!+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+=+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Not equal
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=12, b=14+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+if a != b then ...+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+>+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+=+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Greater or equal than
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=14, b=12+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+if a >= b then ...+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+>+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Greater than
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=12, b=12+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+if a >= b then ...+
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+&+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bitwise AND
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

4 (lowest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=0b_1111_1110+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a&0b_0000_0011+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-- a=0b_0000_0010 +
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+|+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bitwise OR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

4 (lowest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=0b_0000_1110+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a|0b_0011_1100+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-- a=0b_0011_1110 +
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+^+
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bitwise XOR
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

4 (lowest)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+var byte a=0b_1111_1110+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+a=a^0b_0000_0011+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+-- a=0b_1111_1101 +
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true" endfoot="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 


\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true" endlastfoot="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

Tips:
\layout Itemize

The 
\emph on 
Logical
\emph default 
 operator 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"!!"+
\end_inset 

 returns 0 if the operand is 0, or 1 if the operand is not 0.
 It's useful in some expressions which need a guarantee that operand is
 either 1 or 0.
\layout Itemize

Right shift is logical for unsigned types, and arithmetic for signed types
 (it's sign preserving).
 
\layout Standard
\added_space_top smallskip \align center 
Logical right shift (for unsigned types):
\layout Standard
\align center 

\begin_inset Graphics
	filename LogicalShiftRight.png
	clip

\end_inset 


\layout Standard
\added_space_top smallskip \align center 
Arithmetic right shift (for signed types):
\layout Standard
\align center 

\begin_inset Graphics
	filename ArithmaticShiftRight.png
	clip

\end_inset 


\layout Itemize

Operands to binary operations 
\emph on 
MUST
\emph default 
 be the same, and return the type of the operand 
\emph on 
EXCEPT
\emph default 
 the relationals (
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+">="+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"<"+
\end_inset 

, etc.), which return a BIT value.
 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- Use of relationals as BIT type selector:
\newline 
  const myclk = 1 * ( SPI_clock == (target_clock / 4)  ) +
\newline 
                2 * ( SPI_clock == (target_clock / 16) ) +
\newline 
                3 * ( SPI_clock == (target_clock / 64) )
\newline 
   -- myclk being assigned 1, 2, 3, or 0.
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Itemize

An exception to the above rule is the universal type : when used in an expressio
n, the universal type will be converted to type of the other operand.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte a = 1 << n
\newline 
   if ( a > b ) | ( c < d ) | ( x != y ) then 
\newline 
      x = ( x & 0b_1100_0011 ) | 0b_0001_0100
\newline 
   end if
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Priority
\layout Standard


\begin_inset LatexCommand \label{sub:Priority}

\end_inset 


\layout Standard

Braces can be used to force the association, otherwise the operator's associate
 with their arguments according to operator's priority.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte x = ! a + b  -- ( ! a ) + b
\newline 
   var y = ! ( a + b )   -- not the same as previous
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Statements
\layout Standard


\begin_inset LatexCommand \label{sub:Statements}

\end_inset 

A statement is any variable, constant, function, or procedure definition,
 assignment, control (IF) or looping (FOR, FOREVER, WHILE).
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Declaration
\layout Standard

Declarations are considered statements, so declarations can appear anywhere
 in a program where a statement is allowed.
 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   a = 5
\newline 
   -- need a few locals here? no problem!
\newline 
   var byte x = 1, y = 0
\newline 
   while x < a loop 
\newline 
      y = y + x
\newline 
      x = x + 1
\newline 
   end loop
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Assignment
\layout Standard

An assignment statement evaluates the expression and assigns its value to
 the variable or formal parameter indicated by the name on the left of the
 assignment.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte a
\newline 
   procedure p( byte out q ) is 
\newline 
      q = 5 -- assign to the (out) parameter q
\newline 
      a = 4 -- assign to the global variable a
\newline 
   end procedure 
\newline 
   a = 5 -- assign to the (now local) variable a
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

IF
\layout Standard

An 
\emph on 
IF
\emph default 
 statement evaluates an expression.
 If the result is true the list of statements following the 
\emph on 
THEN
\emph default 
 token is executed.
\layout Standard

Before the 
\emph on 
ELSE
\emph default 
 token any number of 
\emph on 
ELSIF
\emph default 
 tokens can appear.
 When the 
\emph on 
IF
\emph default 
 condition is false, the first 
\emph on 
ELSIF
\emph default 
 condition is evaluated.
 If it is true the corresponding statements are executed, otherwise execution
 continues with the next 
\emph on 
ELSIF
\emph default 
 part.
\layout Standard

When none of the 
\emph on 
IF
\emph default 
 and 
\emph on 
ELSIF
\emph default 
 conditions evaluate to true the statements in the optional 
\emph on 
ELSE
\emph default 
 part are executed.
 
\layout Standard

The IF statement serves two purposes:
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Paragraph

Conditional execution
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   IF expr THEN 
\newline 
      block 
\newline 
   [ ELSIF expr THEN block ... ] 
\newline 
   [ ELSE block ] 
\newline 
   END IF
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Quotation

Note: any number of ELSIF conditions may be present.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   IF myvar = 13 THEN
\newline 
      -- Case of myvar = 13 ... 
\newline 
   ELSIF myvar = 10 THEN
\newline 
      -- Case of myvar = 10 ... 
\newline 
   ELSE
\newline 
      -- Any other values of myvar
\newline 
   END IF
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Paragraph

Conditional compilation
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   IF cexpr THEN
\newline 
      block 
\newline 
   [ ELSIF cexpr THEN block ...] 
\newline 
   [ ELSE block ] 
\newline 
   END IF
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In this case, a new scope is 
\emph on 
NOT
\emph default 
 opened.
 If 
\emph on 
cexpr
\begin_inset Foot
collapsed true

\layout Standard


\emph on 
cexpr
\emph default 
 means a constant expression or a literal value.
\end_inset 


\emph default 
 is 0, the associated statements are skipped without further processing,
 so it can be used to create a block comment.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   IF target_chip = 16f877 THEN
\newline 
      -- Execution part if PIC16F877 
\newline 
   ELSIF target_chip = 16f876 THEN
\newline 
      -- Execution part if PIC16F876 
\newline 
   ELSE
\newline 
      -- Execution part other chips 
\newline 
   END IF
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

WHILE
\layout Standard

The WHILE statement allows conditional looping.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   WHILE expr LOOP
\newline 
      block 
\newline 
   END LOOP
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

A while statement evaluates the expression (
\emph on 
expr
\emph default 
).
 If the result is false, the while statement has completed its execution.
 Otherwise the statements are executed, after which the expression is evaluated
 again etc.
 The 
\emph on 
block
\emph default 
 statements will be executed as long as 
\emph on 
expr
\emph default 
 is non-0
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   while r > y loop
\newline 
      d = d + 1
\newline 
      r = r - y
\newline 
   end loop
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

FOR
\layout Standard

The FOR statement allows looping a given number of times.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   FOR expr [ USING variable ] LOOP 
\newline 
      block 
\newline 
   END LOOP
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Comment

If the 
\emph on 
IN variable
\emph default 
 clause does not exist, this becomes:
\layout Comment


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   _temp = 0 
\newline 
   WHILE (_temp < expr) LOOP
\newline 
      block
\newline 
      _temp = _temp + 1
\newline 
   END LOOP
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

If the 
\emph on 
USING variable
\emph default 
 clause does not exist, the variable 
\emph on 
_temp
\emph default 
 is used instead of.
 If 
\emph on 
_temp
\emph default 
 is needed, its type will be the same type as 
\emph on 
expr
\emph default 
.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

FOREVER
\layout Standard

The 
\emph on 
FOREVER
\emph default 
 statement simply creates a loop that will never end.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   FOREVER LOOP 
\newline 
      block 
\newline 
   END LOOP
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

COUNT
\layout Standard


\begin_inset LatexCommand \label{sub:COUNT}

\end_inset 

The COUNT statement returns the number of elements of an 
\emph on 
array
\emph default 
, can be used anywhere a constant is expected:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- using constant tables
\newline 
   const byte x[] = "hello"
\newline 
   var byte y
\newline 
   var volatile byte z
\newline 

\newline 
   for count(x) using y loop
\newline 
      z = x[y]
\newline 
   end loop
\newline 

\newline 
   -- using variable tables
\newline 
   var byte m[] = "hello"
\newline 
   var byte n
\newline 
   var volatile byte p
\newline 

\newline 
   for count(m) using n loop
\newline 
      p = m[n]
\newline 
   end loop
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

_usec_delay
\layout Standard

The _USEC_DELAY creates an inline delay.
 
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}  _usec_delay(cexpr)
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset Foot
collapsed true

\layout Standard


\emph on 
cexpr
\emph default 
 means a constant expression or a literal value.
\end_inset 


\layout Standard

For clock speeds 4MHz and higher, the delay is exact assuming interrupts
 are not enabled.
 A previous 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+pragma target clock ... +
\end_inset 

 
\emph on 
pragma statement
\emph default 
 is required, or the error 
\emph on 
target_clock not found
\emph default 
 will be generated.
 The longest delay available is about 35 minutes, but this requires 5K code
 at 20MHz.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   _usec_delay(1000)  -- 1 msec delay with a 4MHz Xtal.
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Procedures and functions
\layout Standard


\begin_inset LatexCommand \label{sub:Procedures-and-functions}

\end_inset 


\layout Standard

A procedure is a named block of statements that may take parameters.
\layout Standard

A function is like a procedure, the difference is it will return a single
 value which can be used in an expression.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   PROCEDURE identifier 
\newline 
         [ '(' [[VOLATILE] {IN | OUT | IN OUT } param
\newline 
               [, ...]] ')' ] 
\newline 
         IS [ BEGIN ]
\newline 
   
\newline 
      block
\newline 
   
\newline 
   END PROCEDURE
\newline 
   
\newline 
   
\newline 
   FUNCTION identifier
\newline 
         [ '(' [[VOLATILE] {IN | OUT | IN OUT } param 
\newline 
               [, ...]] ')' ] 
\newline 
         RETURN type IS [ BEGIN ]
\newline 

\newline 
      block
\newline 
      RETURN expr
\newline 

\newline 
   END FUNCTION
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Quotation

Note : The identifier used to denote a 
\emph on 
PROCEDURE
\emph default 
 or 
\emph on 
FUNCTION
\emph default 
 belongs to the outer block, whereas all parameter names will belong to
 a newly created block Using of 
\emph on 
[BEGIN]
\emph default 
 is optional.
\layout Description

PROCEDURE denotes the beginning of a procedure definition.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

FUNCTION denotes the beginning of a function definition.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

identifier Any legal 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 identifier.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

VOLATILE A volatile parameter must be passed in as a 
\emph on 
pseudo-variable
\emph default 

\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Pseudo-variables}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Pseudo-variables}

\end_inset 


\end_inset 

.
 If the parameter passed in is regular variable, an appropriate p
\emph on 
seudo-variable
\emph default 
 will be created.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

IN On entry, this parameter's value is set by the caller to an expression.
 If this parameters is not VOLATILE, it can be used or modified like any
 other variable, but changes will not be passed back to the caller.
 If this parameter is VOLATILE, its value cannot be written.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}  procedure ex_in( byte in x ) is
\newline 
      x = x + 1
\newline 
   end procedure
\newline 
   
\newline 
   -- running the procedure:
\newline 
   ex_in (0x0A) 
\newline 
   -- will compute inside the block x = 0x0B, 
\newline 
   -- there is no access outside the block to the x value
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

OUT On entry, this parameter's value is not defined.
 The caller 
\emph on 
MUST
\emph default 
 pass a variable (not a constant or expression).
 If this parameter is not VOLATILE, it can be used or modified like any
 other variable.
 If the parameters is VOLATILE, its value cannot be read.
 On exit, the caller's variable will be set to whatever value this has.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}  procedure ex_out( byte out x ) is
\newline 
      x = 0x0A 
\newline 
   end procedure
\newline 
   
\newline 
   -- running the procedure:
\newline 
   var byte a = 0
\newline 
   ex_out(a) 
\newline 
   -- by using the procedure, a = 0x0A
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

IN\SpecialChar ~
OUT This combines properties of IN and OUT.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   procedure ex2_in_out( byte in out x ) is
\newline 
      x = x + 1
\newline 
   end procedure
\newline 
   
\newline 
   -- before running the procedure:
\newline 
   var byte mydata = 0x0A 
\newline 
   
\newline 
   -- after running the procedure:
\newline 
   ex2_in_out (mydata)
\newline 
   -- mydata will be 0x0B
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

param This is defined 
\emph on 
exactly
\emph default 
 like a variable definition above, except the 
\emph on 
VAR
\emph default 
 keyword is not expected and it cannot be assigned a value.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

RETURN\SpecialChar ~
type For functions, this defines the type returned to the caller.
 type can be any standard type, including the width specifier.
 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   function compute_AD_result 
\newline 
                      (byte in AD_hi, 
\newline 
                       byte in AD_lo) return word is
\newline 
   
\newline 
      AD_result = AD_lo + 256*AD_hi 
\newline 
      return AD_result
\newline 
   end function
\newline 
   
\newline 
   compute_AD_result ( 0b_0000_0011, 0b_1111_1111 )
\newline 
   -- will return the value AD_result = 1023
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

RETURN\SpecialChar ~
expr In a function, the 
\emph on 
RETURN expr
\emph default 
 statement is used to set the value returned.
 If no 
\emph on 
RETURN expr
\emph default 
 is used in a function, the return value will be undefined.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

IS\SpecialChar ~
[BEGIN] Starts the statement block.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

block Any group of statements.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

END\SpecialChar ~
{PROCEDURE\SpecialChar ~
|\SpecialChar ~
FUNCTION} Terminates the statement block.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Quotation

Note: PROCEDUREs and FUNCTIONs can be nested.
\layout Comment


\series bold 
Example
\series default 
:
\layout Comment


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   procedure  p( byte in out x, byte in q) is ...
\newline 
   
\newline 
   procedure pp( volatile word in x) is ...
\newline 
   
\newline 
   function  q( dword in b) return dword is 
\newline 
      b = (b + 1000)/3
\newline 
      return b
\newline 
   end function
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Pseudo variables
\layout Standard


\begin_inset LatexCommand \label{sub:Pseudo-variables}

\end_inset 


\layout Standard

Pseudo-variables are procedures and/or functions that are references like
 and act like variables.
 The accessor of a pseudo variable is a function that takes no parameters.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   FUNCTION a'get RETURN type IS
\newline 
      block
\newline 
   END FUNCTION
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Quotation

Now, any reference to 
\emph on 
a
\emph default 
 will be replaced with a call to 
\emph on 
a'get.
\layout Standard

Similarly, to set a pseudo variable, define a procedure that takes one parameter.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   PROCEDURE a'put ( param ) IS
\newline 
      block
\newline 
   END PROCEDURE
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Quotation

Now, any assignment to 
\emph on 
a
\emph default 
 will be replaced with a call to
\emph on 
 a'put
\emph default 
.
\layout Standard

If an appropriate pseudo-variable is not found, an attempt is made to find
 the variable itself (eg, when used in an expression, first a search is
 made on 
\emph on 
a'get()
\emph default 
, failing that a search is made for the variable 
\emph on 
a
\emph default 
.
\layout Standard

If more than one of the variable or accessor functions and/or variable are
 defined, all must be of the same type!
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   procedure hd44780'put( byte in x ) is ...
\newline 
   
\newline 
   -- using the procedure
\newline 
   hd44780 = "H"
\newline 
   hd44780 = "e"
\newline 
   hd44780 = "l"
\newline 
   hd44780 = "l"
\newline 
   hd44780 = "o"
\newline 
   
\newline 
   procedure async'put( byte in x ) is ...
\newline 
   
\newline 
   -- using the procedure
\newline 
   async = "H"
\newline 
   async = "e" 
\newline 
   async = "l" 
\newline 
   async = "l" 
\newline 
   async = "o"
\newline 
   
\newline 
   function async'get return byte is ..
\newline 
   
\newline 
   -- using the function:
\newline 
   x = async 
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Tasks
\layout Standard


\begin_inset LatexCommand \label{sec:Tasks}

\end_inset 

A 
\emph on 
TASK
\emph default 
 is a 
\emph on 
procedure
\emph default 
 that is started and becomes an apparently parallel thread of execution.
 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 implements 
\emph on 
co-operative multitasking
\emph default 
, that each 
\emph on 
Task
\emph default 
 uses a special command to hand back program thread to the scheduler, which
 starts the oldest suspended task from the point it made that command.
 
\layout Standard

A 
\emph on 
Task
\emph default 
 has the same format as a 
\emph on 
PROCEDURE
\emph default 

\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Procedures-and-functions}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Procedures-and-functions}

\end_inset 

.
\end_inset 

 (it can take any number of parameters), the format is:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   TASK name [ (parameters) ] IS
\newline 
   END TASK
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\emph on 
Tasks
\emph default 
 are started with:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   START name[(parameters)]
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

And suspended with:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   SUSPEND
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

If a 
\emph on 
Task
\emph default 
 reaches the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"END TASK"+
\end_inset 

, it is killed.
 
\layout Standard

Limitations:
\layout Itemize

There is currently no way to determine a particular 
\emph on 
Task
\emph default 
's ID, how many 
\emph on 
Tasks
\emph default 
 are running, or if 
\emph on 
Task
\emph default 
 creation fails.
 
\layout Itemize

There's also no way to kill a 
\emph on 
Task
\emph default 
 from another 
\emph on 
Task
\emph default 
.
\layout Itemize


\emph on 
SUSPEND
\emph default 
 is only allowed in the 
\emph on 
Task
\emph default 
 itself (not in anything called by the 
\emph on 
Task
\emph default 
).
\layout Itemize

Each 
\emph on 
Task
\emph default 
 has its own variable storage (just like any other procedure or function).
\layout Itemize

If the main program comes to the end, it still sleeps as before, effectively
 killing all running 
\emph on 
Tasks
\emph default 
.
\layout Itemize

If you have two copies of the same 
\emph on 
Task
\emph default 
 running, bad things happen, so don't do that (actually, nothing really
 bad happens, they simply behave like a single 
\emph on 
Task
\emph default 
 occupying to slots in the task list).
\layout Itemize

You don't know the execution order of 
\emph on 
Tasks
\emph default 
, and you don't know if a 
\emph on 
Task
\emph default 
 will execute immediately after the START or wait until the first SUSPEND.
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard

Three 
\emph on 
Tasks
\emph default 
: 
\layout Itemize

Task1 increments 
\emph on 
counter1.
\layout Itemize

Task2 increments 
\emph on 
counter2
\emph default 
 
\layout Itemize

main task simply loops.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   VAR VOLATILE BYTE counter1
\newline 
   VAR VOLATILE BYTE counter2
\newline 

\newline 
   TASK task1(BYTE in aa) is
\newline 
      counter1 = aa
\newline 
      FOREVER LOOP
\newline 
         counter1 = counter1 + 1
\newline 
         SUSPEND
\newline 
      END LOOP
\newline 
   END TASK
\newline 

\newline 
   TASK task2(BYTE in aa) is
\newline 
      counter2 = aa
\newline 
      FOREVER LOOP
\newline 
         counter2 = counter2 + 1
\newline 
         SUSPEND
\newline 
      END LOOP
\newline 
   END TASK
\newline 

\newline 

\newline 
   START task1(10)
\newline 
   START task2(20)
\newline 
   FOREVER LOOP
\newline 
      SUSPEND
\newline 
   END LOOP
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Inline assembler
\layout Standard


\begin_inset LatexCommand \label{sub:Inline-assembler}

\end_inset 


\layout Standard

There is a full assembler available when needed, it can be accessed using
 two ways.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Single assembler statement 
\layout Standard

A simple assembler statement consists of the token 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"asm"+
\end_inset 

 followed by a single assembler statement.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   asm clrwdt -- single assembler statement 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Assembler block
\layout Standard

A full assembler statement consists of the token 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"assembler"+
\end_inset 

, a sequence of label declarations, labels and assembler statements, and
 is terminated with the token token 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"end assembler"+
\end_inset 

.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   ASSEMBLER
\newline 
   [LOCAL label[, label2...]]
\newline 
   [label:]
\newline 
      [ { BANK | PAGE } ] asm statement
\newline 
      ...
\newline 
   END ASSEMBLER
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Any labels used as the destination of a CALL or GOTO must be defined in
 the LOCAL clause.
\layout Standard

If the assembler statement accesses a file register and the BANK mnemonic
 is used, the appropriate statements will be generated to guarantee the
 correct data bank is accessed
\begin_inset Foot
collapsed true

\layout Standard

See PRAGMA KEEP BANK in section 
\begin_inset LatexCommand \ref{sub:Pragmas}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Pragmas}

\end_inset 


\end_inset 

.
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+asm bank clrf myvar ; will set the correct bank of "myvar"+
\end_inset 


\layout Standard

If the assembler statement jumps to a label and the PAGE mnemonic is used,
 the appropriate statements will be generated to guarantee the correct code
 segment is used
\begin_inset Foot
collapsed true

\layout Standard

See PRAGMA KEEP PAGE in section 
\begin_inset LatexCommand \ref{sub:Pragmas}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Pragmas}

\end_inset 


\end_inset 

.
\layout Standard


\series bold 
Example
\series default 
:
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+asm page goto mylabel ; will set the correct page of "mylabel"+
\end_inset 


\layout Standard

The full list of assembly statements defined in the PIC16F877/88 data sheet
 have been implemented using the syntax found therein.
 
\layout Standard
\added_space_top bigskip \align center 

\series bold 
OPCODE field description
\newline 

\series default 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="10cm">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Register file address (0x00 to 0x7F)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

w
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Working register (accumulator)
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

b
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit address within an 8 bit file register
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

k
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Literal field
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Destination select:
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
newline
\end_inset 

 d=w: store result in 
\emph on 
W
\emph default 
,
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
newline
\end_inset 

 d=f: store result in 
\emph on 
f
\emph default 
,
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
newline
\end_inset 

 default d=f
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard
\added_space_top bigskip \align center 

\series bold 
Assembler statements set summary
\newline 

\series default 

\begin_inset  Tabular
<lyxtabular version="3" rows="49" columns="4">
<features islongtable="true" firstHeadTopDL="true" firstHeadBottomDL="true" headTopDL="true" headBottomDL="true" footTopDL="true" footBottomDL="true" lastFootTopDL="true" lastFootBottomDL="true">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true" endhead="true" endfirsthead="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Mnemonic
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Cycles
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Flags affected
\end_inset 
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Byte-oriented file register operations
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ADDWF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

add 
\emph on 
W
\emph default 
 and 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

C,DC,Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ANDWF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

AND 
\emph on 
W
\emph default 
 and 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

CLRF f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Clear 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

CLRW
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Clear 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

COMF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Complement 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DECF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Decrement 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DECFSZ f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Decrement 
\emph on 
f
\emph default 
, skip if 0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

INCF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Increment 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

INCFSZ f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Increment 
\emph on 
f
\emph default 
, skip if 0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IORWF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Inclusive OR 
\emph on 
W
\emph default 
 with 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MOVF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Move 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MOVWF f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Move 
\emph on 
W
\emph default 
 to 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

NOP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No operation
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RLF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Rotate left 
\emph on 
f
\emph default 
 through 
\emph on 
carry
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

C
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RRF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Rotate right 
\emph on 
f
\emph default 
 through 
\emph on 
carry
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

C
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SUBWF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Subtract 
\emph on 
W
\emph default 
 from 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

C,DC,Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SWAPF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Swap nibbles in 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

XORWF f,d
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Exclusive OR 
\emph on 
W
\emph default 
 with 
\emph on 
f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Bit-oriented file register operations
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

BCF f,b
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bir clear f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

BSF f,b
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit set f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

BTFSC f,b
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit test f, skip if clear
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

BTFSS f,b
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit test f, skip if set
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Literal and control operations
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ADDLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Add 
\emph on 
literal
\emph default 
 and 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

C,DC,Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ANDLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

AND 
\emph on 
literal
\emph default 
 with 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

CALL k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Call subroutine
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

CLRWDT
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Clear watchdog timer
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

!TO,!PD
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

GOTO k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Go to address
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IORLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Inclusive OR 
\emph on 
literal
\emph default 
 with 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MOVLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Move 
\emph on 
literal
\emph default 
 to 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RETFIE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Return from interrupt
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RETLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Return with 
\emph on 
literal
\emph default 
 in 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RETURN
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Return from subroutine
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SLEEP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Go into standby mode
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

!TO,!PD
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SUBLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Subtract 
\emph on 
W
\emph default 
 from 
\emph on 
literal
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

C,DC,Z
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

XORLW k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Exclusive OR 
\emph on 
literal
\emph default 
 with 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Macros and extra mnemonics
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPTION k
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Move 
\emph on 
literal
\emph default 
 to 
\emph on 
OPTION
\emph default 
 register
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

TRIS {5,6,7}
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Move 
\emph on 
W
\emph default 
 to 
\emph on 
TRIS {5,6,7}
\emph default 
 register
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MOVFW f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

A synonym for MOVF 
\emph on 
f
\emph default 
, 
\emph on 
W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SKPC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

A synonym for BTFSS 
\emph on 
_status
\emph default 
, 
\emph on 
_c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SKPNC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

A synonym for BTFSC 
\emph on 
_status
\emph default 
, _
\emph on 
c
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SKPZ
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

A synonym for BTFSS 
\emph on 
_status
\emph default 
, 
\emph on 
_z
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SKPNZ
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

A synonym for BTFSC 
\emph on 
_status
\emph default 
, _
\emph on 
z
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1(2)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" endfoot="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 


\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true" endlastfoot="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Scope 
\layout Standard

An assembly statement can access any variable in scope.
 Only the simple types BIT, BYTE, SBYTE and ARRAY are supported.
 
\layout Standard

If the variable is a table, you must take care of:
\layout Itemize

The elements of a table can only be accessed using a constant subscript:
 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+movf x[3],w+
\end_inset 


\layout Itemize

Constant tables must be treated as 
\emph on 
literals
\emph default 
: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+movlw x[3]+
\end_inset 


\layout Itemize

Variable tables must be treated as 
\emph on 
file registers
\emph default 
: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+movf x[3],w+
\end_inset 


\layout Comment

If the variable is an array, it can only access elements using a constant
 subscript.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var byte x[]="hello"
\newline 
   var bit cc = low
\newline 
   var byte a
\newline 
   assembler
\newline 
   local 10:
\newline 
      movf  x[3],w
\newline 
      movwf a
\newline 
      btfss cc
\newline 
      goto  10
\newline 
      incf  a,f
\newline 
    10:
\newline 
      nop
\newline 
   end assembler
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Section

Pragmas
\layout Standard


\begin_inset LatexCommand \label{sub:Pragmas}

\end_inset 


\layout Standard

The user pragmas -- compiler directives -- are those most likely to be used
 by the average user.
\layout Description

PRAGMA\SpecialChar ~
EEDATA\SpecialChar ~
cexpr1[,\SpecialChar ~
cexpr2...] Defines data to be stored in the EEPROM.
 This data always begins at the first location in the EEPROM.
 Each extra 
\emph on 
expr
\emph default 
 (or PRAGMA EEDATA) bumps the next usable location.
 If the EEPROM over fills, an error is generated
\begin_inset Foot
collapsed true

\layout Standard

See PRAGMA EEPROM in section 
\begin_inset LatexCommand \ref{sub:Chip-Definition-Pragmas}

\end_inset 

 \SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Chip-Definition-Pragmas}

\end_inset 


\end_inset 

.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma eedata "O","K",13,10,25
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
ERROR Generates an error.
 Useful for the conditional compilation with the IF statement.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
INTERRUPT This must only be used inside a PROCEDURE whose execution
 is triggered by the reception of an interrupt.
 This procedure can take no parameters.
\newline 
Using PRAGMA INTERRUPT links this procedure into the interrupt chain.
 Any number of procedures can exist in the interrupt chain, but the order
 in which they are executed is not defined.
\newline 
No extra stack space is required by an interrupt entry point.
 Once a procedure has been marked as an interrupt entry point it cannot
 be directly called by the program.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var word cc, bb
\newline 
   
\newline 
   procedure ISR_TMR0 is 
\newline 
   pragma interrupt       -- This procedure is an 
\newline 
                          -- interrupt service routine
\newline 
      if T0IF then        -- Check if TMR0 int.
\newline 
         T0IF = low
\newline 
         cc = cc + 1
\newline 
      end if
\newline 
   end procedure
\newline 

\newline 
   procedure ISR_TMR1 is 
\newline 
   pragma interrupt       -- ... another one
\layout Standard
      if TMR1IF then      -- Check if TMR1 int.
\newline 
         TMR1IF = low
\newline 
         bb = bb + 1
\newline 
      end if
\newline 
   end procedure
\newline 

\newline 
cc=0
\newline 
bb=0 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
JUMP_TABLE This is obsolete and simply issues a warning.
 It has been replaced by constant arrays.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
KEEP\SpecialChar ~
[BANK]\SpecialChar ~
|\SpecialChar ~
[PAGE] When using inline assembly, or assembly blocks,
 this instructs the compiler to not optimize away any bank or page selectors
 generated.
 Without this, the compiler will normally not generate the selectors if
 the selector state is known to be correct.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
NAME\SpecialChar ~
name Generates an error if the name the file being compiled is
 the same as name (what possible use is this?).
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
TARGET\SpecialChar ~
CHIP\SpecialChar ~
ident ident must be defined in 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+chipdef.jal+
\end_inset 

 (see the list of variables beginning with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+pic_*+
\end_inset 

).
 
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+PRAGMA TARGET CHIP 16f877+
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
TARGET\SpecialChar ~
CPU\SpecialChar ~
ident ident must be defined in 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+chipdef.jal+
\end_inset 

 .
\newline 
This is analogous to: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST target_cpu = cpu_ident+
\end_inset 

.
\newline 

\emph on 
PRAGMA TARGET CPU
\emph default 
 can overwrite the 
\emph on 
CONST TARGET_CPU
\emph default 
 definition.
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST target_chip = pic_14+
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
TARGET\SpecialChar ~
CLOCK\SpecialChar ~
cexpr Set the clock speed to cexpr.
 This is not used internally by the compiler.
\newline 
This is analogous to: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST target_clock = cexpr+
\end_inset 

.
\newline 

\emph on 
PRAGMA TARGET CLOCK
\emph default 
 can overwrite the 
\emph on 
CONST TARGET_CLOCK
\emph default 
 definition.
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST target_clock = 10_000_000+
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
TARGET\SpecialChar ~
FUSES\SpecialChar ~
cexpr1\SpecialChar ~
cexpr2 Set the PIC configuration word register ---denoted
 by the index 
\emph on 
cexpr1
\emph default 
--- with value 
\emph on 
cexpr
\emph default 
2.
 The literal 
\emph on 
cexpr1
\emph default 
 must be in the range denoted by the index defined in pragma 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST WORD _FUSES_BASE+
\end_inset 

.
 
\newline 

\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   PRAGMA TARGET fuses 0 0b_xx_xxxx_xxxx_xxxx
\newline 
   -- will set fuses once according to 
\newline 
   -- first configuration word register
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

CONST\SpecialChar ~
WORD\SpecialChar ~
_FUSES\SpecialChar ~
'['\SpecialChar ~
cexpr1\SpecialChar ~
']'\SpecialChar ~
'='\SpecialChar ~
'{'\SpecialChar ~
cexpr2\SpecialChar ~
','\SpecialChar ~
...\SpecialChar ~
'}' Set the values of a multi-word
 configuration fuses, 
\emph on 
cexpr1
\emph default 
 denotes the ammount of words.
 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const word _fuses[2] = {0x3fff,0x3fff}
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

CONST\SpecialChar ~
WORD\SpecialChar ~
_FUSES_BASE\SpecialChar ~
'['\SpecialChar ~
cexpr1\SpecialChar ~
']'\SpecialChar ~
'='\SpecialChar ~
'{'\SpecialChar ~
cexpr2\SpecialChar ~
','\SpecialChar ~
...\SpecialChar ~
'}' Set the addresses of
 a multi-word configuration fusess, 
\emph on 
cexpr1
\emph default 
 denotes the ammount of words.
 
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const word _fuse_base[2] = {0x2007, 0x2008}
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
TARGET\SpecialChar ~
fusedef\SpecialChar ~
tag This allows one to set a fuse based on chip mnemonics
\begin_inset Foot
collapsed true

\layout Standard

See PRAGMA FUSE_DEF in section 
\begin_inset LatexCommand \ref{sub:Chip-Definition-Pragmas}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Chip-Definition-Pragmas}

\end_inset 


\end_inset 

.
\layout Standard

Available pragma target fuses defined are:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   PRAGMA TARGET PROTECTION {on|off}
\newline 
   -- ON = flash program memory code protected
\newline 
   -- OFF = flash program memory code unprotected
\newline 

\newline 
   PRAGMA TARGET DEBUG {on|off}
\newline 
   -- ON = In Circuit Debugger enabled
\newline 
   -- OFF = ICD disabled
\newline 
 
\newline 
   PRAGMA TARGET CDP {on|off}
\newline 
   -- ON = data eprom code protected
\newline 
   -- OFF = data eprom code unprotected
\newline 

\newline 
   PRAGMA TARGET LVP {on|off}
\newline 
   -- ON =  low voltage ICSP enabled
\newline 
   -- OFF = low voltage ICSP disabled
\newline 
 
\newline 
   PRAGMA TARGET BOR {on|off}
\newline 
   -- ON =  brown out reset enabled
\newline 
   --       (check PIC voltage greater 
\newline 
   --        than BOR defined level)
\newline 
   -- OFF = brown out reset disabled 
\newline 
   --       (PIC may run at less than 
\newline 
   --        BOR defined level)
\newline 

\newline 
   PRAGMA TARGET POWERUP {on|off}
\newline 
   -- ON = powerup delay enabled 
\newline 
   --      ( add about 72mS delay after power+ 
\newline 
   --        up until program start)
\newline 
   -- OFF = powerup delay disabled
\newline 
 
\newline 
   PRAGMA TARGET WATCHDOG {on|off}
\newline 
   -- ON = watchdog enabled 
\newline 
   --      (watchdog delay period must be 
\newline 
   --       programmed in the postscaler reg.)
\newline 
   -- OFF = watchdog disabled
\newline 

\newline 
   PRAGMA TARGET OSC {lp|xt|hs|rc}
\newline 
   -- lp = low power oscillator, 
\newline 
   --      use it with 32.768KHz to 200KHz crystal
\newline 
   -- xt = crystal/resonator 1MHz up to 4MHz
\newline 
   -- hs = high speed crystal/resonator 4MHz-20MHz 
\newline 
   -- rc = resistor/capacitor oscillator 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Chip Definition Pragmas
\layout Standard


\begin_inset LatexCommand \label{sub:Chip-Definition-Pragmas}

\end_inset 


\layout Standard

Internally the compiler doesn't know anything about the various chips.
 Instead, a chip definition file is used which describes code size, stack
 depth, eeprom location, general file register locations, etc.
\layout Standard

Since these are only useful for those defining new chips, they're included
 here.
\layout Description

PRAGMA\SpecialChar ~
CODE\SpecialChar ~
cexpr Defines the maximum code size in words.
 If the total code generated exceeds this size an error is generated.
\newline 
This is analogous to: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST _code_size = cexpr+
\end_inset 

.
\newline 

\emph on 
PRAGMA CODE
\emph default 
 can overwrite the 
\emph on 
CONST _CODE_SIZE
\emph default 
 definition.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   PRAGMA CODE 8192
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
DATA\SpecialChar ~
cexpr[-cexpr1][,\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

] This chip definition defines the data area available for variables (also
 known as the general file register areas).
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma data  0x0020-0x007f, 0x00a0-0x00ff,
\newline 
                0x120-0x16f, 0x1a0-0x1ef
\newline 

\backslash 
end{verbatim}
\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
EEPROM\SpecialChar ~
cexpr1,\SpecialChar ~
cexpr2 This is a chip definition PRAGMA and sets the
 start and size of the EEPROM (
\emph on 
cexpr1
\emph default 
 is the start, 
\emph on 
cexpr2
\emph default 
 is the size).
 If any 
\emph on 
PRAGMA EEDATA
\emph default 
 statements exist, the assembly file will include:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma eeprom 0x2100, 256
\newline 
   
\newline 
   ORG 0x2100
\newline 
   DW a, b, c, ...  ; PRAGMA EEDATA values
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
STACK\SpecialChar ~
cexpr Defines the maximum stack size in levels.
 If the total stack use is determined to be greater than this, an error
 is generated.
\newline 
This is analogous to: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+CONST _stack_size = cexpr+
\end_inset 

.
\newline 

\emph on 
PRAGMA STACK
\emph default 
 can overwrite the 
\emph on 
CONST _STACK_SIZE
\emph default 
 definition.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma stack  8
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA\SpecialChar ~
FUSE_DEF\SpecialChar ~
tag\SpecialChar ~
[':'\SpecialChar ~
cexpr1\SpecialChar ~
]\SpecialChar ~
mask\SpecialChar ~
'{'\SpecialChar ~
tag\SpecialChar ~
'='\SpecialChar ~
cexpr2\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
ldots
\end_inset 

\SpecialChar ~
'}' This defines a fuse mnemonic that can be used to set and clear bits
 based on names rather than numbers.
 The 
\emph on 
cexpr1
\emph default 
 denotes the index of a 
\emph on 
multi-word configuration table
\emph default 
.
\layout Standard


\series bold 
Example
\series default 
: 
\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma fuse_def protection 0b10000000000000 {
\newline 
      on = 0b00000000000000
\newline 
      off = 0b01000000000000
\newline 
   }
\newline 

\newline 
   pragma fuse_def FCMEN:1 0b0_0000_0000_0001 { -- At 2nd conf. word
\newline 
      ENABLED  = 0b0_0000_0000_0001
\newline 
      DISABLED = 0b0_0000_0000_0000
\newline 
}
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\newline 
This defines a target mnemonic that the would be used as follows:
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+PRAGMA TARGET protection on+
\end_inset 


\newline 
or
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+PRAGMA TARGET protection off+
\end_inset 

 
\newline 
Internally, it becomes: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+_fuses = (_fuses & ~mask) | expr+
\end_inset 

 
\layout Comment


\series bold 
Example
\series default 
:
\layout Comment


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim} 
\newline 
   pragma stack  8
\newline 
   pragma fuse_def protection 0b11000000110000 {
\newline 
      on  = 0b00000000000000
\newline 
      off = 0b11000000110000
\newline 
   }
\newline 
   pragma data  0x0020-0x007f, 0x00a0-0x00ff,
\newline 
                0x120-0x16f, 0x1a0-0x1ef
\newline 
   pragma code  8192
\newline 
   pragma eeprom 0x2100, 256
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Chapter

Compiler
\layout Standard


\begin_inset LatexCommand \label{sec:Compiler}

\end_inset 


\layout Section

Basic
\layout Standard


\begin_inset LatexCommand \label{sub:Compiler-basic}

\end_inset 

The 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 compiler is a command-line tool
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:command-line-compiler}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:command-line-compiler}

\end_inset 


\end_inset 

.
 The same compiler is available for the MS Windows command line, and for
 Linux
\begin_inset Foot
collapsed true

\layout Standard

Linux binary requires 
\emph on 
libc.so.6
\emph default 
 library.
\end_inset 

.
 
\layout Standard

After a successful compilation the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 compiler produces two output files, these files will have the same basic
 name as the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 file but the extensions will change to reflect their types.
 The base name (file name without extension) of these two files is the same
 of 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 program requested for compilation.
 The first output file has the extension 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+".hex"+
\end_inset 

 and contains the hex dump of the compiled program.
 This file can be used directly with most programmers.
 The second file has the extension 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+".asm"+
\end_inset 

 and contains the assembler (text) of the compiled program.
 This file can be used to inspect the generated code and to make small modificat
ions.
 The assembler file can be assembled with the standard Microchip
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
texttrademark
\end_inset 


\begin_inset LatexCommand \cite{Microchip-web}

\end_inset 

 assembler.
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard

Let's assume that 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+HOME_PJAL+
\backslash 

\end_inset 

 directory (where 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 compiler is)
\begin_inset Foot
collapsed true

\layout Standard

This example is valid for MS Windows compiler version.
 Linux users -- they're supposed to be used to 
\emph on 
shell
\emph default 
 -- can apply the same concepts.
\end_inset 

:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal
\backslash 
pjal.exe+
\end_inset 


\layout Standard

The required libraries are in the directory: 
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal
\backslash 
chipdef
\backslash 
+
\end_inset 


\layout Standard

On executing 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

, it's suggested to include 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
verb+chipdef+
\end_inset 

 directory in the search path
\begin_inset Foot
collapsed true

\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
pjal
\end_inset 

 compiler will search 
\emph on 
chipdef
\emph default 
 in current directory by default.
\end_inset 

\SpecialChar ~

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
footnotemark[25]
\end_inset 

:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal> pjal.exe -s c:
\backslash 
pjal
\backslash 
chipdef+
\end_inset 


\layout Standard

Optionally, other user libraries can be nested:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal> pjal.exe -s c:
\backslash 
pjal
\backslash 
chipdef;c:
\backslash 
pjal
\backslash 
lib+
\end_inset 


\layout Standard

As well other command line switches
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:command-line-compiler}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:command-line-compiler}

\end_inset 


\end_inset 

:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal> pjal.exe -s c:
\backslash 
pjal
\backslash 
chipdef -long-star+
\end_inset 


\layout Standard

Finally, include the desired 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 user file:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
footnotesize 
\layout Standard

\backslash 
begin{verbatim}   c:
\backslash 
pjal> pjal.exe -s c:
\backslash 
pjal
\backslash 
chipdef;c:
\backslash 
pjal
\backslash 
lib c:
\backslash 
pjal
\backslash 
test.jal
\newline 

\backslash 
end{verbatim}
\layout Standard

\backslash 
normalsize
\end_inset 


\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 compiler will report the success of compilation:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
footnotesize 
\layout Standard

\backslash 
begin{verbatim}   c:
\backslash 
pjal> pjal.exe -s c:
\backslash 
pjal
\backslash 
chipdef;c:
\backslash 
pjal
\backslash 
lib c:
\backslash 
pjal
\backslash 
test.jal
\newline 
   picjal 0.9 (compiled Jan 19 2006)
\newline 
   generating p-code
\newline 
   0 errors, 0 warnings
\newline 
   3615 tokens, 28452 chars; 912 lines; 3 files
\newline 
   cmds removed: 9
\newline 
   generating PIC code pass 1
\newline 
   generating PIC code pass 2
\newline 
   writing result
\newline 
   Code area: 6 of 8192 used
\newline 
   Data area: 6 of 352 used
\newline 
   Software stack available: 96 bytes
\newline 
   Hardware stack depth 0
\newline 
   
\newline 
   c:
\backslash 
pjal
\backslash 
  
\newline 

\backslash 
end{verbatim}
\layout Standard

\backslash 
normalsize
\end_inset 


\layout Standard

And on successful result, two new files will be created: 
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal
\backslash 
test.asm+
\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
verb+c:
\backslash 
pjal
\backslash 
test.hex+
\end_inset 


\layout Section

Command line compiler options
\layout Standard


\begin_inset LatexCommand \label{sub:command-line-compiler}

\end_inset 


\layout Standard

The compiler has a wealth of options to enable various debugging output
\begin_inset Foot
collapsed true

\layout Standard

See 
\emph on 
Revision history 
\emph default 
section for latest 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 version related with this document.
\end_inset 

.
 
\layout Standard

Format: 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+pjal options+
\end_inset 

 
\layout Description

-hex\SpecialChar ~

\emph on 
arg
\emph default 
 overrides the default name of the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+".hex"+
\end_inset 

 file.
\layout Description

-asm\SpecialChar ~

\emph on 
arg
\emph default 
 overrides the default name of the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+".asm"+
\end_inset 

 file.
\layout Description

-rickpic using with 
\noun on 
Rick Farmer
\noun default 
's PIC loader.
 The preamble is:
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+org 3+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+goto xxx+
\end_inset 


\layout Description

-debug show debug information.
\layout Description

-quiet no status updates.
\layout Description

-s\SpecialChar ~

\emph on 
arg
\emph default 
 set the include path, elements separated with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+";"+
\end_inset 


\layout Description

-task\SpecialChar ~

\emph on 
arg
\emph default 
 turn on basic tasking, where 
\emph on 
arg
\emph default 
 is the maximum number of tasks that can run at a time.
 
\emph on 
Arg
\emph default 
 must be >= 2 (since the main program is a task).
\layout Description

-pcode show pcode in the asm file.
\layout Description

-clear clears all user data areas on program entry (note: volatile, user-placed
 variables, and unused data areas are not cleared).
\layout Description

-no-expr-reduction do not perform expression reduction.
\layout Description

-no-cexpr-reduction do not perform constant expression reduction.
\layout Description

-nofuse do not put FUSES into the assembly or hex file.
\layout Description

-long-start force the first instruction to be a long jump.
 It is apparently the common bootloader requirement.
 The preamble is:
\newline 

\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+bcf _pclath, 4+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+bcf _pclath, 3+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+goto xxx+
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
newline
\end_inset 


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+goto nop+
\end_inset 


\layout Description

-Wno-conversion turn off signed/unsigned conversion warning.
\layout Description

-Wno-truncate turn off possible truncation in assignment warning.
\layout Description

-Wno-warn turn off all warnings.
\layout Description

-nocodegen do not generate any assembly code.
\layout Description

-Wdirectives issue a warning when a compiler directive is found.
\layout Description

-warn-stack-overflow changes 
\emph on 
hardware stack overflow
\emph default 
 errors to warnings.
\layout Section

Behaviour
\layout Standard


\begin_inset LatexCommand \label{sub:behaviour}

\end_inset 


\layout Subsection

End of program.
\layout Standard

In 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\end_inset 

, if the execution runs out of statements, the following lines are automatically
 included:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   ASSEMBLER
\newline 
    LOCAL label
\newline 
    label:
\newline 
      sleep
\newline 
      goto label
\newline 
   END ASSEMBLER
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

...
 so one is guaranteed to never fall of the end off a program.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

FOR without USING
\layout Standard

If the token 
\emph on 
USING variable
\emph default 
 does not exist:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   FOR expr LOOP 
\newline 
      block 
\newline 
   END LOOP
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

...
 becomes:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   _temp = 0 
\newline 
   WHILE (_temp < expr) LOOP
\newline 
      block
\newline 
      _temp = _temp + 1
\newline 
   END LOOP
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

If the 
\emph on 
USING variable
\emph default 
 clause does exist, the 
\emph on 
variable
\emph default 
 is used instead of 
\emph on 
_temp
\emph default 
.
 If 
\emph on 
_temp
\emph default 
 is needed, its type will be the same type as 
\emph on 
expr
\emph default 
.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Optimization
\layout Standard

In 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\end_inset 

, two internal counters are kept for each variable:
\layout Itemize

assign_ct: the number of times a variable has been assigned a value
\layout Itemize

use_ct: the number of times a variable's value appears in an expression
\layout Standard

so, given the assignment: x = y
\layout Standard


\emph on 
x
\emph default 
's assign_ct is incremented, and 
\emph on 
y
\emph default 
's use_ct is incremented.
\layout Standard

During the optimizer phase, if a variable's use_ct is zero (the variable
 never occurs on the right-hand side of an assignment, and is never passed
 to a procedure), any assignment to that variable is removed.
\layout Standard

Also, if a variable's assign_ct is zero (the variable never occurs on the
 left-hand side of an assignment, and is not an IN parameter to a procedure),
 that variable is changed to type CONST and is assigned a value of 0.
 
\layout Standard

If a variable is marked VOLATILE, this optimization doesn't occur because
 by definition a VOLATILE variable is both assigned and used (for example,
 a PIC register).
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Debug output
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   cmd=0x004C79D8 op=18
\newline 
   ...4c7988[B---1]:{4c78d8:_btemp0[B---:1]}
\newline 
   cmds removed: 11
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

These are debugging messages only.
 If you don't compile with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"-pcode"+
\end_inset 

 and 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"-debug"+
\end_inset 

 you won't see them
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:command-line-compiler}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:command-line-compiler}

\end_inset 

.
 
\end_inset 

.
\layout Description

cmd=xxxx is the pcode cmd identifier
\layout Description

op=xx means this is an operator pcode (as opposed to a branching one) 
\layout Description

nnnnn:'B---x' translates to: 
\begin_deeper 
\layout Description

nnnnn : value identifier
\layout Description

B boolean
\layout Description

C constant
\layout Description

V volatile
\layout Description

S signed
\layout Description

x width (a number)
\end_deeper 
\layout Standard

The variable is also dumped.
 This information is useless unless you've the source code and a debugger
 available.
\layout Chapter

Libraries
\layout Standard


\begin_inset LatexCommand \label{sec:Libraries}

\end_inset 


\layout Section

PIC definition library structure
\layout Standard


\begin_inset LatexCommand \label{sub:PIC-libary-structure}

\end_inset 

These libraries describes the core of some PIC chips in order to use inside
 a 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 program.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Chip definition file
\layout Standard


\begin_inset LatexCommand \label{sub:chip-def-file}

\end_inset 

The file 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"chipdef.jal"+
\end_inset 

 contains constants needed by 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\end_inset 

.
\layout Standard

The constant values that are assigned by 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 to 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+target_chip+
\end_inset 

 are:
\newline 

\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const pic_16f877 = 1
\newline 
   const pic_16f628 = 2
\newline 
   const pic_16c84 = 3
\newline 
   const pic_16f84 = 4
\newline 
   const pic_12c509a = 5
\newline 
   const pic_12f675 = 6
\newline 
   const pic_18f242 = 7
\newline 
   const pic_18f252 = 8
\newline 
   const pic_18f452 = 9
\newline 
   const pic_SX18 = 10
\newline 
   const pic_SX28 = 11
\newline 
   const pic_SX = 12 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Other constants defining different PICs may be added by the user, as long
 a 
\emph on 
core definition
\emph default 
 file
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Core-definition-file}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Core-definition-file}

\end_inset 


\end_inset 

 and a
\emph on 
 PIC chip definition
\emph default 
 file
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:PIC-chip-definition}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:PIC-chip-definition}

\end_inset 


\end_inset 

 are also generated.
\layout Standard

The constant values that are assigned by 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 to 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+target_cpu+
\end_inset 

\SpecialChar ~
are:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const pic_12 = 1
\newline 
   const pic_14 = 2
\newline 
   const pic_16 = 3
\newline 
   const sx_12  = 4 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Other constants used widely:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const bit  on    = 1
\newline 
   const bit  off   = 0
\newline 
   const byte w     = 0
\newline 
   const byte f     = 1
\newline 
   const bit  true  = 1
\newline 
   const bit  false = 0
\newline 
   const bit  high  = 1
\newline 
   const bit  low   = 0 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 control bit, only useful if you are sharing libraries with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 and JAL:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const bit  PJAL  = 1 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Core definition file
\layout Standard


\begin_inset LatexCommand \label{sub:Core-definition-file}

\end_inset 

 Describes internal hardware structure of a subset of Microchip 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
texttrademark
\end_inset 

\SpecialChar ~
PICs.
 As reference, here is the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"c16f87x.jal"+
\end_inset 

 file structure that covers all PIC16F87x subset.
\layout Standard

In the 
\bar under 
first line
\bar default 
 must be an 
\emph on 
include
\emph default 
 to Core definition file
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:chip-def-file}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:chip-def-file}

\end_inset 


\end_inset 

:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   include chipdef
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Following the type of CPU :
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const target_cpu = pic_14
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Number of Stack levels :
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma stack  8
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\emph on 
Configuration word
\emph default 
 address and default value :
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const word _fuses     = 0x3fff ; default value
\newline 
   const word _fuse_base = 0x2007 ; address 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

For PICs with several 
\emph on 
configuration words
\emph default 
 (ie: PIC16F88):
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const word _fuses_ct             = 2
\newline 
   const word _fuses[_fuses_ct]     = {0x3fff, 0x3fff} ; default value
\newline 
   const word _fuse_base[_fuses_ct] = {0x2007, 0x2008} ; where to put it
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Minimal set of SFRs needed by 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\end_inset 

.
 You are warned not to change names, these must begin with underscore:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var volatile byte _pic_isr_w 
\newline 
       at {0x007f, 0x00ff, 0x017f, 0x01ff }
\newline 
   var volatile byte _ind  
\newline 
       at {0x0000, 0x0080, 0x0100, 0x0180}
\newline 
   var volatile byte _pcl 
\newline 
       at {0x0002, 0x0082, 0x0102, 0x0182}
\newline 
   var volatile byte _status 
\newline 
       at {0x0003, 0x0083, 0x0103, 0x0183}
\newline 
   var volatile byte _fsr    
\newline 
       at {0x0004, 0x0084, 0x0104, 0x0184}
\newline 
   var volatile byte _pclath
\newline 
       at {0x000a, 0x008a, 0x010a, 0x018a}
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Bit position of 
\emph on 
STATUS
\emph default 
 flags :
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const        byte _irp    = 7
\newline 
   const        byte _rp1    = 6
\newline 
   const        byte _rp0    = 5
\newline 
   const        byte _not_to = 4
\newline 
   const        byte _not_pd = 3
\newline 
   const        byte _z      = 2
\newline 
   const        byte _dc     = 1
\newline 
   const        byte _c      = 0
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Details of 
\emph on 
configuration word
\emph default 
 fuses :
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma fuse_def protection 0b11000000110000 {
\newline 
   on  = 0b00000000000000
\newline 
   off = 0b11000000110000
\newline 
   }
\newline 

\newline 
   pragma fuse_def debug      0b00100000000000 {
\newline 
   on  = 0b00000000000000
\newline 
   off = 0b00100000000000
\newline 
   }
\newline 

\newline 
   pragma fuse_def cdp        0b00000100000000 {
\newline 
   on  = 0b00000000000000
\newline 
   off = 0b00000100000000
\newline 
   }
\newline 

\newline 
   pragma fuse_def lvp        0b00000010000000 {
\newline 
   on  = 0b00000010000000
\newline 
   off = 0b00000000000000
\newline 
   }
\newline 

\newline 
   pragma fuse_def bor        0b00000001000000 {
\newline 
   on  = 0b00000001000000
\newline 
   off = 0b00000000000000
\newline 
   }
\newline 

\newline 
   pragma fuse_def powerup    0b00000000001000 {
\newline 
   off = 0b00000000001000
\newline 
   on  = 0b00000000000000
\newline 
   }
\newline 

\newline 
   pragma fuse_def watchdog   0b00000000000100 {
\newline 
   off = 0b00000000000000
\newline 
   on  = 0b00000000000100
\newline 
   }
\newline 

\newline 
   pragma fuse_def osc        0b00000000000011 {
\newline 
   lp  = 0b00000000000000
\newline 
   xt  = 0b00000000000001
\newline 
   hs  = 0b00000000000010
\newline 
   rc  = 0x00000000000011
\newline 
   } 
\newline 
   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

For PICs with several 
\emph on 
configuration words
\emph default 
 (ie: PIC16F88):
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma fuse_def IESO:1 0b0_0000_0000_0010 {
\newline 
      ENABLED  = 0b0_0000_0000_0010
\newline 
      DISABLED = 0b0_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def FCMEN:1 0b0_0000_0000_0001 {
\newline 
      ENABLED  = 0b0_0000_0000_0001
\newline 
      DISABLED = 0b0_0000_0000_0000
\newline 
   }
\newline 

\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

PIC chip definition file
\layout Standard


\begin_inset LatexCommand \label{sub:PIC-chip-definition}

\end_inset 

This file describes an specific PIC chip, distinguishing it from the rest
 of PICs of the subset.
 As reference, here is the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"c16f877.jal"+
\end_inset 

 file structure for PIC16F877 PIC chip.
\layout Standard

In the 
\bar under 
first line
\bar default 
 must be an 
\emph on 
include
\emph default 
 to the 
\emph on 
Core definition
\emph default 
 file
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Core-definition-file}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Core-definition-file}

\end_inset 


\end_inset 

:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   include c16f87x
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Following chip, RAM, ROM and EEPROM memory ranges :
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma target chip 16f877
\newline 
   pragma data  0x0020-0x007f, 0x00a0-0x00ff,
\newline 
                0x120-0x16f, 0x1a0-0x1ef
\newline 
   pragma code  8192
\newline 
   pragma eeprom 0x2100, 256 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Example of usage
\layout Standard


\begin_inset LatexCommand \label{sub:Example-of-usage}

\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- main program
\newline 
   -- This must be in first line
\newline 
   include c16f877
\newline 

\newline 
   -- Clock frequency
\newline 
   const target_clock = 10_000_000
\newline 

\newline 
   -- main program
\newline 
   var volatile byte a
\newline 

\newline 
   a = a + 1 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Note: This small program compiles without errors.
\layout Section

Other libraries
\layout Standard


\begin_inset LatexCommand \label{sub:other-libs}

\end_inset 

 At the time of writing the new 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 compiler there are few tested libraries available for use in your projects
\begin_inset Foot
collapsed true

\layout Standard

See 
\emph on 
Revision history 
\emph default 
section
\emph on 
\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:Revision-history}

\end_inset 

.
\end_inset 

.
 
\layout Standard

To solve this problem, you can:
\layout Itemize

Write your own set of libraries and share those with pjal community -- highly
 recommended --.
\layout Itemize

Wait for someone to write a set of libraries -- not recommended --.
\layout Itemize

Modify earlier JAL
\begin_inset LatexCommand \cite{Wouter-web,JAL-SF-net}

\end_inset 

 libraries to use with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 compiler and share those with pjal community -- highly recommended --.
\layout Itemize

Use 
\noun on 
Stef Mientki
\noun default 
's libraries
\begin_inset LatexCommand \cite{Stef-pJAL}

\end_inset 

.
\layout Standard

It's not the purpose of this manual to describe what should be a full set
 of useful libraries.
 Instead we offer some guidelines on how to code basic operations in a PIC
 and start to create libraries of your own.
 
\layout Comment

Working and tested libraries should be shared with the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 / JAL group in the spirit of open source.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Operating with digital I/O ports
\layout Standard


\begin_inset LatexCommand \label{sub:Operating-with-digital}

\end_inset 

PIC chips -- like PIC16F877 -- have several I/O ports you can handle in
 your code.
 In order to use them in 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 you will need to declare them:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- remember to declare SRFs "volatile"
\newline 
   var volatile byte PORTB at {0x06,0x106}
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Also you will need the TRIS registers:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- remember to declare SRFs "volatile"
\newline 
   var volatile byte _TRISB at {0x86,0x186}
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Now you have a 
\emph on 
basic
\emph default 
 management of PIC ports.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   PORTB = 0             -- Reset PORTB
\newline 
   _TRISB = 0b_0000_0000 -- All PORTB output
\newline 
   PORTB = 0b_0001_0001  -- Set b4 and b0
\newline 
   PORTB = 0b_0000_1001  -- Clear b4, Set b3 and b0
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In order to manage the 
\emph on 
pins
\emph default 
 (the bits) individually, firstly you must declare them:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var volatile byte PORTB at {0x06,0x106}
\newline 
   var volatile bit  pin_b0 at PORTB : 0
\newline 
   var volatile bit  pin_b1 at PORTB : 1
\newline 
   var volatile bit  pin_b2 at PORTB : 2
\newline 
   var volatile bit  pin_b3 at PORTB : 3
\newline 
   var volatile bit  pin_b4 at PORTB : 4
\newline 
   var volatile bit  pin_b5 at PORTB : 5
\newline 
   var volatile bit  pin_b6 at PORTB : 6
\newline 
   var volatile bit  pin_b7 at PORTB : 7
\newline 

\newline 
   const bit input           = on
\newline 
   const bit output          = off
\newline 

\newline 
   var volatile byte _TRISB at {0x86,0x186}
\newline 
   var volatile bit pin_b0_direction at _TRISB : 0
\newline 
   var volatile bit pin_b1_direction at _TRISB : 1
\newline 
   var volatile bit pin_b2_direction at _TRISB : 2
\newline 
   var volatile bit pin_b3_direction at _TRISB : 3
\newline 
   var volatile bit pin_b4_direction at _TRISB : 4
\newline 
   var volatile bit pin_b5_direction at _TRISB : 5
\newline 
   var volatile bit pin_b6_direction at _TRISB : 6
\newline 
   var volatile bit pin_b7_direction at _TRISB : 7 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Now you can manage pins in this way:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var bit mybit             -- declare a variable
\newline 

\newline 
   PORTB = 0                 -- Reset PORTB
\newline 
   _TRISB = 0b_0000_0000     -- All PORTB output
\newline 
   pin_b0 = high             -- Set b0
\newline 
   pin_b4_direction = input  -- b4 I/O input
\newline 
   mybit = pin_b4            -- Read b4 and store in mybit
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

If this was a step you would frequently repeat, you would put it in a procedure:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   function port_do_stuff return bit is
\newline 
      PORTB = 0                 -- Reset PORTB
\newline 
      _TRISB = 0b_0000_0000     -- All PORTB output
\newline 
      pin_b0 = high             -- Set b0
\newline 
      pin_b4_direction = input  -- b4 I/O input
\newline 
      return pin_b4             -- Read b4 exit with value
\newline 
   end function
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Whenever your program needs to execute the above steps just add:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var bit mybit             -- declare a variable
\newline 

\newline 
   mybit = port_do_stuff     -- call the function and 
\newline 
                             -- store b4 in mybit.  
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

at the appropriate places in your code.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Shadowing digital I/O ports
\layout Standard


\begin_inset LatexCommand \label{sub:Shadowing-digital-I/O}

\end_inset 

When you perform any operation with PIC registers, first the register is
 read, then it's modified and finally it is written back to the register.
 This is fine when dealing with normal registers and most SFRs.
 However, you can have problems with I/O ports.
 Why? Because when the PIC reads a port register, it reads the actual state
 of the pins, rather than the output latch.
 This can cause two problems:
\layout Enumerate

If the pin is an input, then the input pin state will be read, the operation
 performed on it, and the result sent to the output latch.
 This may not immediately cause problems, but if that pin is made into an
 output later on, the state of the output latch may have changed from the
 time it was deliberately set by the code.
\layout Enumerate

If the pin is defined as an output, the output latch and the actual pin
 should be in the same state.
 In practice sometimes they aren't.
 If you are driving a capacitive load, the pin will take time to respond
 as it charges and discharges the capacitor.
 A common problem occurs when using the pin is set or clear directly on
 a port.
\layout Standard

In order to avoid this issue, it's common to use a 
\emph on 
shadow register
\emph default 
.
 The 
\emph on 
shadow register
\emph default 
 is simply a ram location you reserve.
 All operations are performed on this register, and when you are finished,
 you copy it to the port register.
 It's a bit more trouble, and it can slow things down a tiny bit, but the
 effort is worth it for reliable operation
\begin_inset Foot
collapsed true

\layout Standard

This is an extract of 
\noun on 
Michael Rigby-Jones
\noun default 
 explanation stored in PICList
\begin_inset LatexCommand \cite{PICList-RMW}

\end_inset 

.
\end_inset 

.
\layout Standard

In order to implement this shadow registers using 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\end_inset 

, first you must declare these 
\emph on 
shadow registers
\emph default 
:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- shadow registers
\newline 
   -- may not be declared as volatile
\newline 
   var byte _port_b_buffer 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Now, write the necessary code to write into these shadow
\emph on 
 registers
\emph default 
:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   procedure portb'put( byte in x) is
\newline 
      _port_b_buffer = x     -- make changes into "shadows"
\newline 
      portb = _port_b_buffer -- send them to real I/O port
\newline 
   end procedure
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Now you have a basic management of digital I/O ports using 
\emph on 
shadow registers
\emph default 
:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   _TRISB = 0b_0000_0000   -- All PORTB output
\newline 
   portb = 0b_1111_0000    -- Set a value in Port B
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In order to manage the 
\emph on 
pins
\emph default 
 individually using these 
\emph on 
shadow registers
\emph default 
:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- To read pins, take them from real I/O ports
\newline 
   -- not from shadow registers
\newline 
   var volatile bit pin_b0 at portb : 0 
\newline 
 
\newline 
   -- Once pin_b0 is declared, override "write assignment"
\newline 
   procedure pin_b0'put( bit in x at _port_b_buffer : 0 ) is
\newline 
      portb = _port_b_buffer
\newline 
   end procedure 
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Now you can manage pins in this way:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var bit mybit             -- declare a variable
\newline 

\newline 
   portb = 0                 -- Reset PORTB
\newline 
   _TRISB = 0b_0000_0000     -- All PORTB output
\newline 
   pin_b0 = high             -- Set b0
\newline 
   pin_b4_direction = input  -- b4 I/O input
\newline 
   mybit = pin_b4            -- Read b4 and store in mybit
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Disabling analog functions
\layout Standard


\begin_inset LatexCommand \label{sub:Disabling-analog-functions}

\end_inset 

All PIC chips that have an analog module have the corresponding pins associated
 with this module ready to work in 
\emph on 
analog mode
\emph default 
 on reseting the device.
 The reason is that if an analog voltage is applied at pin (configured in
 
\emph on 
digital mode
\emph default 
) may cause the input buffer to consume current that is out of device specificat
ions.
\layout Standard

If your application needs to work with these pins in 
\emph on 
digital mode
\emph default 
, you must deactivate 
\emph on 
analog mode
\emph default 
 first.
\layout Standard

To do this, you must locate the desired SFR location (see your PIC chip
 
\emph on 
datasheets
\emph default 
) and declare it:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   var volatile byte ADCON0      at 0x1F
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Next, configure this SFR with the desired value:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   ADCON0 = 0x07
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In order to make a library to be useful with different PIC chips, you can
 extend this for different chips:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   procedure disable_a_d_functions is
\newline 
      if TARGET_CHIP == 16f877 then
\newline 
         var volatile byte _adcon0 at 0x1F
\newline 
         _adcon0 = 0x07
\newline 
      elsif TARGET_CHIP == 16f28 then
\newline 
         var volatile byte _vrcon0 at 0x9F
\newline 
         _vrcon0 = 0x07
\newline 
      end if
\newline 
   end procedure
\newline 

\newline 
   -- call the procedure to disable AD functions
\newline 
   disable_a_d_functions
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

In this case the expression 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"IF ... ELSIF ... END IF"+
\end_inset 

 is a conditional compilation, that is evaluated at compile time.
 For this reason, SFR is declared inside the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"IF ..."+
\end_inset 

.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Configuring the Oscillator
\layout Standard


\begin_inset LatexCommand \label{sub:Configuring-the-Oscillator}

\end_inset 

All PIC chips works thanks to an oscillator.
 In nearly all PICs you must configure this element in the 
\emph on 
configuration word.

\emph default 
 The basic type oscillator is built around an inverter amplifier that drives
 an external component (a crystal or resonator on the amplifier positive
 feedback loop and two capacitors connected between amplifier in/out to
 ground).
 Designing the elements of this oscillator must be done with care, as an
 analog device needs (the combination of the quartz quality factor, capacitor
 values and PCB route lenghts affects the amplitude oscillation, start up
 oscillator delay and oscillator supply current).
 For 
\emph on 
PIC16F877
\emph default 
, configuring the oscillator it's easy:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   -- config oscillator
\newline 
   pragma target osc xt
\newline 
   
\newline 
   -- Fosc value
\newline 
   pragma target clock 4_000_000
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Other PICs gives you several oscillator configurations, like 
\emph on 
PIC16F628:
\layout Standard
\added_space_top medskip \align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="9" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Mode
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

LP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Low-Power Crystal
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

XT
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Crystal/Resonator
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HS
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

High-Speed Crystal/Resonator
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

IO on RA6 and External Clock on RA7
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ER1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

CLKOUT on RA6 and External Resistor on RA7
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ER2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

IO on RA6 and External Resistor on RA7
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

INTRC1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Internal oscillator with CLKOUT on RA6 and IO on RA7
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

INTRC2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Internal oscillator with IO on RA6 and RA7
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

Also, newer PICs have some specific SFRs to change the behaviour of the
 oscillator.
 When using these PICs, like 
\emph on 
PIC16F88
\emph default 
 (
\emph on 
PIC16F819
\emph default 
, 
\emph on 
PIC16F688
\emph default 
, etc), you must take care of the default reset state values of these SFRs
 and initialize them in accordance with your hardware.
 
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard

The OSCON register of 
\emph on 
PIC16F88
\emph default 
.
\layout Standard
\added_space_top medskip \align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="8">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R/W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R/W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R/W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R/W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R/W
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

R/W
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

---
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IRCF2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IRCF1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IRCF0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OSTS
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IOFS
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SCS1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

SCS0
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 7
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 5
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 4
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 3
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Bit 0
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Quotation
\align center 

\series bold 
Note
\series default 
: --- = not used, R/W = read/write, R= read only
\layout Description

IRCF2\SpecialChar ~
:\SpecialChar ~
IRCF1\SpecialChar ~
:\SpecialChar ~
IRCF0 internal RC osc frequency select bits.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   000 = 31.25KHz
\newline 
   001 = 125KHz
\newline 
   010 = 250KHz
\newline 
   011 = 500KHz
\newline 
   100 = 1MHz
\newline 
   101 = 2MHz
\newline 
   110 = 4MHz
\newline 
   111 = 8MHz
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Description

OSTS Oscillator start-up time-out bit.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   1 = running from primary clock (OSC1-OSC2 device)
\newline 
   0 = running from secondary clock (T1OSO-T1OSI device) 
\newline 
       or internal RC oscillator
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Description

IOFS INTOSC frequency stable bit (read only).
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   1 = frequency is stable
\newline 
   0 = frequency is not stable
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Description

SCS1\SpecialChar ~
:\SpecialChar ~
SCS0 Oscillator mode select bits.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   00 = osc mode defined by FOSC<2:0> (configuration word 1)
\newline 
   01 = T1OSC used as system clock
\newline 
   10 = INTRC used as system clock
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard


\series bold 
Example
\series default 
:
\layout Standard

Configuration of the oscillator for 
\emph on 
PIC16F88
\emph default 
 as 4MHz internal RC oscillator and output frequency INTOSC/4 at pin RA6.
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   pragma target osc int_clko
\newline 
   
\newline 
   -- OSCCON
\newline 
   var volatile byte OSCCON at 0x8F
\newline 
   
\newline 
   -- INTRC=4MHz, Running from INTRC as secondary clock, 
\newline 
   -- Stable frequency, Osc. defined by FOSC bits from 
\newline 
   -- the configuration word
\newline 
   OSCCON = 0b_0110_0100
\newline 
   
\newline 
   -- OSCTUNE
\newline 
   var volatile byte OSCTUNE at 0x90
\newline 
   
\newline 
   -- Set default factory calibration
\newline 
   OSCTUNE = 0
\newline 
   
\newline 
   -- Declare the frequency of the configured oscillator
\newline 
   pragma target clock 4_000_000 
\newline 
   
\backslash 
end{verbatim}
\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmlrule
\end_inset 


\layout Subsection

Making 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 to recognize your own PIC device
\layout Standard


\begin_inset LatexCommand \label{sub:Making-pjal-recognice-pic}

\end_inset 

It is possible to add newer PIC devices to 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\end_inset 

, a brief description of related libraries is in previous chapter
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:PIC-libary-structure}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:PIC-libary-structure}

\end_inset 

.
\end_inset 

.
 In order to do this job, you must take into account following notes:
\layout Itemize

Current 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 version
\begin_inset Foot
collapsed true

\layout Standard

See Revision History 
\begin_inset LatexCommand \vpageref{sec:Revision-history}

\end_inset 


\end_inset 

 only supports PIC14 architecture.
 
\layout Itemize

The modified libraries will be overwriten by future 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 libraries.
\layout Itemize

Future 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 versions can make your projects useless, since past changes no longer exist.
\layout Itemize

There is no guarantee that your changes will work with your 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 version.
\layout Itemize

Make a backup of whole 
\family typewriter 
HOME_PJAL
\family default 
 directory prior to do anything.
\layout Standard

In order to add your own favourite PIC device, you must edit 
\family typewriter 
chipdef.jal
\family default 

\begin_inset Foot
collapsed true

\layout Standard

File located in 
\family typewriter 
HOME_PJAL
\backslash 
chipdef
\backslash 
chipdef.jal
\family default 
.
\end_inset 

 and write the necessary lines for your desired new PICs
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:chip-def-file}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:chip-def-file}

\end_inset 

.
\end_inset 

:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   const pic_16f676 = 100
\newline 
   const pic_16f88 = 101
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Allocated numbers should not overrides the old 
\emph on 
target_chip
\emph default 
 constant definitions.
 Save the 
\family typewriter 
chipdef.jal
\family default 
 overwritting the old file.
 
\layout Standard

Create a 
\emph on 
core definition file
\emph default 
 for your favourite PIC microcontroller inspiring yourself from the PIC
 datasheet and the already existing 
\emph on 
core definition files
\emph default 

\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:Core-definition-file}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:Core-definition-file}

\end_inset 

.
\end_inset 

.
 
\layout Standard


\series bold 
Example
\series default 
:
\layout Standard

For the 
\emph on 
PIC16F88
\emph default 
 will look like this one:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   ; <c16f8x.jal> this is the name of the following file
\newline 
   include chipdef
\newline 
   ;
\newline 
   ; chip definition for the 16f87_16F88 series
\newline 
   const target_cpu = pic_14
\newline 
   
\newline 
   var volatile byte _ind AT {0x0000, 0x0080, 0x0100, 0x0180}
\newline 
   var volatile byte _pcl AT {0x0002, 0x0082, 0x0102, 0x0182}
\newline 
   var volatile byte _status AT {0x0003, 0x0083, 0x0103, 0x0183}
\newline 
   var volatile byte _fsr AT {0x0004, 0x0084, 0x0104, 0x0184}
\newline 
   
\newline 
   const byte _irp = 7
\newline 
   const byte _rp1 = 6
\newline 
   const byte _rp0 = 5
\newline 
   const byte _not_to = 4
\newline 
   const byte _not_pd = 3
\newline 
   const byte _z = 2
\newline 
   const byte _dc = 1
\newline 
   const byte _c = 0
\newline 

\newline 
   var volatile byte _pclath AT {0x000a, 0x008a, 0x010a, 0x018a}
\newline 

\newline 
   pragma stack 8
\newline 

\newline 
   -- where to put config_words 
\newline 
   const word _fuses[2] = {0x3fff,0x3fff} ; default value
\newline 
   const word _fuses_base[2] = {0x2007,0x2008} 
\newline 

\newline 
   pragma fuse_def protection 0b10_0000_0000_0000 {
\newline 
      on = 0b00_0000_0000_0000
\newline 
      off = 0b01_0000_0000_0000
\newline 
   } 
\newline 

\newline 
   pragma fuse_def ccp1       0b01_0000_0000_0000 {
\newline 
      rb3 = 0b00_0000_0000_0000
\newline 
      rb0 = 0b01_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def debug      0b00_1000_0000_0000 {
\newline 
      on  = 0b00_0000_0000_0000
\newline 
      off = 0b00_1000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def wrt      0b00_0110_0000_0000 {
\newline 
      off     = 0b00_0110_0000_0000  ; write protection off
\newline 
      on_00ff = 0b00_0100_0000_0000  ; 0000-00ff write protected
\newline 
      on_07ff = 0b00_0010_0000_0000  ; 0000-07ff write protected
\newline 
      on_0fff = 0b00_0000_0000_0000  ; 0000-0fff write protected
\newline 
   }
\newline 

\newline 
   pragma fuse_def cdp        0b00_0001_0000_0000 {
\newline 
      on  = 0b00_0000_0000_0000
\newline 
      off = 0b00_0001_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def lvp        0b00_0000_1000_0000 {
\newline 
      on  = 0b00_0000_1000_0000
\newline 
      off = 0b00_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def bor        0b00_0000_0100_0000 {
\newline 
      on  = 0b00_0000_0100_0000
\newline 
      off = 0b00_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def mclr       0b00_0000_0010_0000 {
\newline 
      on  = 0b00_0000_0010_0000
\newline 
      off = 0b00_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def powerup    0b00_0000_0000_1000 {
\newline 
      off = 0b00_0000_0000_1000
\newline 
      on  = 0b00_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def watchdog   0b00_0000_0000_0100 {
\newline 
      off = 0b00_0000_0000_0000
\newline 
      on  = 0b00_0000_0000_0100
\newline 
   }
\newline 

\newline 
   pragma fuse_def osc        0b00_0000_0001_0011 {
\newline 
      lp       = 0b0000000000_0000
\newline 
      xt       = 0b0000000000_0001
\newline 
      hs       = 0b0000000000_0010
\newline 
      ecio     = 0b0000000000_0011
\newline 
      int_io   = 0b0000000001_0000
\newline 
      int_clko = 0b0000000001_0001
\newline 
      ext_io   = 0b0000000001_0010
\newline 
      ext_clko = 0b0000000001_0011
\newline 
   }
\newline 

\newline 
   ; configuration word2 register, adr0x2008
\newline 
   pragma fuse_def switch     0b00_0000_0000_0010 {
\newline 
      on  = 0b00_0000_0000_0010
\newline 
      off = 0b00_0000_0000_0000
\newline 
   }
\newline 

\newline 
   pragma fuse_def safe_clk   0b00_0000_0000_0001 {
\newline 
     on  = 0b00_0000_0000_0001
\newline 
     off = 0b00_0000_0000_0000
\newline 
}
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Save the file in 
\family typewriter 
HOME_PJAL
\backslash 
chipdef
\family default 
 folder with the name 
\family typewriter 
c16F8x.jal
\family default 
.
 
\layout Standard

You must also write the 
\emph on 
PIC chip definition file
\emph default 

\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:PIC-chip-definition}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:PIC-chip-definition}

\end_inset 

.
\end_inset 

 for the 
\emph on 
PIC16F88
\emph default 
:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   ; <c16f88.jal>  this is the name of the following file
\newline 
   include c16f8x
\newline 

\newline 
   pragma data  0x0020-0x007f, 0x00a0-0x00ef,
\newline 
                0x120-0x16f, 0x1a0-0x1ef
\newline 
   pragma code  4096
\newline 
   pragma eeprom 0x2100, 256
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Save the file in 
\family typewriter 
HOME_PJAL
\backslash 
chipdef
\family default 
 folder with the name 
\family typewriter 
c16f88.jal
\family default 
.
 
\layout Standard

At this moment you are ready to play with your 
\emph on 
PIC16F88
\emph default 
.
 Remember that all SFR's of the 
\emph on 
PIC16F88
\emph default 
 (or any used bit from any SFR) must be defined before using them!
\begin_inset Foot
collapsed true

\layout Standard

You can test a tool called 
\emph on 
inc2jal.exe
\emph default 
 developed by 
\noun on 
Stef Mientki
\noun default 

\begin_inset LatexCommand \cite{Stef-pJAL}

\end_inset 

.
\end_inset 


\layout Standard

This could be done directly in your project files like in the 
\emph on 
Examples section
\emph default 

\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sec:Examples}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:Examples}

\end_inset 

.
\end_inset 

, or by writing a SFR definition file.
 Keep the register name or bit name identical with those from the PIC datasheet,
 in this way your library could be used easily by other people.
 Due to the very large size of SFR definition file, will be presented only
 a small part of it:
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}   ; <pjal_16F88._inc.jal> this is the name of the file
\newline 

\newline 
   -- -------------------------------------------------
\newline 
   -- Special Function Registers in BANK0 of P16F87/88
\newline 
   -- -------------------------------------------------
\newline 
   var volatile byte INDF at {0x00,0x80,0x100,0x180}
\newline 
   var volatile byte TMR0 at {0x01,0x101}
\newline 
 
\newline 
   ; (all bank0 register definitions must be here) 
\newline 

\newline 
   -- -------------------------------------------------
\newline 
   -- Special Function Registers in BANK1 of P16F87/88
\newline 
   -- -------------------------------------------------
\newline 
   var volatile byte OPTION_REG at 0x81
\newline 
   var volatile byte TRISA      at 0x85
\newline 

\newline 
   ; (all bank1 register definitions must be here)
\newline 

\newline 
   -- -------------------------------------------------
\newline 
   -- Special Function Registers in BANK2 of P16F87/88
\newline 
   -- -------------------------------------------------
\newline 
   var volatile byte WDTCON    at 0x105
\newline 
   var volatile byte EEDATA    at 0x10C
\newline 

\newline 
   ; (all bank2 register definitions must be here)
\newline 

\newline 
   -- -------------------------------------------------
\newline 
   -- Special Function Registers in BANK3 of P16F87/88
\newline 
   -- -------------------------------------------------
\newline 
   var volatile byte EECON1   at 0x18C
\newline 
   var volatile byte EECON2   at 0x18D
\newline 

\newline 
   ; (all bank3 register definitions must be here)
\newline 

\newline 
   -- -------------------------------------------------
\newline 
   -- OPTION_REG associated bits
\newline 
   -- -------------------------------------------------
\newline 
   ; this is an example of a complete SFR bit definition 
\newline 
   var volatile bit  NOT_RBPU at OPTION_REG : 7
\newline 
   var volatile bit  INTEDG   at OPTION_REG : 6
\newline 
   var volatile bit  T0CS     at OPTION_REG : 5
\newline 
   var volatile bit  T0SE     at OPTION_REG : 4
\newline 
   var volatile bit  PSA      at OPTION_REG : 3
\newline 
   var volatile bit  PS2      at OPTION_REG : 2
\newline 
   var volatile bit  PS1      at OPTION_REG : 1
\newline 
   var volatile bit  PS0      at OPTION_REG : 0
\newline 

\newline 
   ; (all other SFR bits definitions must be here)
\newline 
 
\newline 
   -- ------------------------------------------------
\newline 
   -- PORTA pins
\newline 
   -- ------------------------------------------------
\newline 
   var volatile bit  pin_a0 at PORTA : 0
\newline 

\newline 
   ; (all port_a bit definitions must be here)
\newline 

\newline 
   -- ------------------------------------------------
\newline 
   -- PORTB pins
\newline 
   -- ------------------------------------------------
\newline 
   var volatile bit  pin_b0 at PORTB : 0
\newline 

\newline 
   ; (all port_b bit definitions must be here)
\newline 

\newline 
   -- ------------------------------------------------
\newline 
   -- Port and pin directions
\newline 
   -- ------------------------------------------------
\newline 
   ;  only port_a is exemplified but port_b should be also defined
\newline 
   const bit input           = on
\newline 
   const bit output          = off
\newline 
   const byte all_input      = 0b_1111_1111
\newline 
   const byte all_output     = 0b_0000_0000
\newline 

\newline 
   var volatile byte port_a_direction at _TRISA
\newline 
   var volatile bit pin_a0_direction at _TRISA : 0
\newline 

\newline 
   ; (volatile bit directions for all pins of port_a should be here)
\newline 

\newline 
   ; IO port shadow registers may not be declared as volatile
\newline 
   var byte _port_a_buffer
\newline 

\newline 
   procedure pin_a0'put( bit in x at _port_a_buffer : 0 ) is
\newline 
      porta = _port_a_buffer
\newline 
   end procedure
\newline 

\newline 
   procedure port_a'put( byte in x ) is
\newline 
      _port_a_buffer = x
\newline 
      porta = _port_a_buffer
\newline 
   end procedure
\newline 

\newline 
   procedure port_a_low'put( byte in x ) is
\newline 
      _port_a_buffer = ( _port_a_buffer  & 0xF0 ) | ( x & 0x0F )
\newline 
      porta = _port_a_buffer
\newline 
   end procedure
\newline 

\newline 
   procedure port_a_high'put( byte in x ) is
\newline 
      _port_a_buffer = ( _port_a_buffer  & 0x0F ) | ( x << 4 )
\newline 
      porta = _port_a_buffer
\newline 
   end procedure
\newline 

\newline 
   function port_a_low'get return byte is
\newline 
      return porta & 0x0F
\newline 
   end function
\newline 

\newline 
   function port_a_high'get return byte is
\newline 
      return (porta >> 4)
\newline 
   end function
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Standard

Save the file in 
\family typewriter 
HOME_PJAL
\backslash 
chipdef
\family default 
 folder with the name 
\family typewriter 
pjal_16F88_inc.jal
\family default 
 in your own library folder or better in your project folder.
 For a future succesfull compilation, save all your work (including project
 file, libraries, all PIC definition files, and the 
\series bold 
compiler executable file
\series default 
) every time you're finished a project and it works in the real world.
\layout Chapter

Examples
\layout Standard


\begin_inset LatexCommand \label{sec:Examples}

\end_inset 

The examples of this section have been tested in a real PIC.
 The circuit for all examples is:
\layout Standard


\begin_inset Graphics
	filename esquema.png
	lyxscale 50
	width 15cm
	keepAspectRatio
	clip

\end_inset 


\layout Standard

A 47nF to 100nF capacitor is recommended between MCLR and ground.
 this will avoid unvanted resets when noisy loads or power supplies are
 used.
\layout Standard

No PCB layout is given, you are free to build your PCB design.
\layout Standard

All example in this section have a number starting each line.
 These numbers are only here for teaching purposes and should not be in
 your project files.
\layout Section

Example 0: Blink a led.
\layout Standard


\begin_inset LatexCommand \label{sec:Example-0:-Blink}

\end_inset 


\layout Quotation


\series bold 
Note
\series default 
: Line numbers are not included in program but used just for explanations
 !
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}     1  -- This must be in the first line
\newline 
     2  include c16f877
\newline 
     3  
\newline 
     4  
\newline 
     5  
\newline 
     6  
\newline 
     7  -- config fuses
\newline 
     8  pragma target protection off
\newline 
     9  pragma target debug off
\newline 
    10  pragma target cdp off
\newline 
    11  pragma target lvp off
\newline 
    12  pragma target bor off
\newline 
    13  pragma target powerup on
\newline 
    14  pragma target watchdog off
\newline 
    15  pragma target osc xt
\newline 
    16  
\newline 
    17  -- Fosc definition
\newline 
    18  pragma target clock 4_000_000
\newline 
    19  
\newline 
    20  -- PORTB and TRISB definitions
\newline 
    21  var volatile byte PORTB at {0x06,0x106}
\newline 
    22  var volatile byte TRISB at {0x86,0x186}
\newline 
    23  
\newline 
    24  -- B4 pin definition
\newline 
    25  var volatile bit pin_b4 at PORTB : 4
\newline 
    26  
\newline 
    27  -- Led at pin_b4
\newline 
    28  var volatile bit LED is pin_b4
\newline 
    29  
\newline 
    30  -- 1 second wait procedure
\newline 
    31  procedure wait_1sec is
\newline 
    32     for 5 loop
\newline 
    33        for 6_500 loop  
\newline 
    34           asm nop
\newline 
    35        end loop
\newline 
    36     end loop
\newline 
    37  end procedure
\newline 
    38  
\newline 
    39  
\newline 
    40  -- Reset PORTB
\newline 
    41  PORTB = 0
\newline 
    42  
\newline 
    43  -- PORTB => all bits output
\newline 
    44  TRISB = 0b_0000_0000
\newline 
    45  
\newline 
    46  -- main loop
\newline 
    47  forever loop
\newline 
    48     LED = high  -- LED on
\newline 
    49     wait_1sec
\newline 
    50     LED = low   -- LED off
\newline 
    51     wait_1sec
\newline 
    52  end loop   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Paragraph

Description
\layout Description

1--2 The first line must be an 
\emph on 
include
\emph default 
 to a PIC chip definition file
\begin_inset Foot
collapsed true

\layout Standard

See section 
\begin_inset LatexCommand \ref{sub:PIC-chip-definition}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sub:PIC-chip-definition}

\end_inset 


\end_inset 

.
\layout Description

7--15 These configuration fuses must match your specific programmer, etc.
 Handle with care, a bad configuration will give you a non working PIC.
\layout Description

17--18 Declare the crystal value being used.
\layout Description

20--25 Declare the PIC port to be used.
 Both PORTx and TRISx are needed.
 Those lines may be omited if a 
\emph on 
register definition file
\emph default 
 is included.
\layout Description

27--28 Declare an alias, it's easier to remember.
\layout Description

30--37 A procedure to waste some time.
 These values will give you a crude approach to one second delay; modify
 them and see the effect of the LED flashing rate.
 Use just one instruction 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+FOR 64_910 LOOP+
\end_inset 

 and see the effect.
\layout Description

40--44 Initialize and configure the port.
 This initialization part is usually the first lines of the main code.
\layout Description

46--52 Real main code.
 Here, an endless loop with our magic LED blinking sequence: LED on, wait,
 LED off, wait.
 The wait sequence is necessary to see the LED blinking.
\layout Section

Example 1: Scan a button.
\layout Standard


\begin_inset LatexCommand \label{sec:Example-1:-Scan}

\end_inset 


\layout Quotation


\series bold 
Note
\series default 
: Line numbers are not included in program but used just for explanations
 !
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}     1  -- This must be in the first line
\newline 
     2  include c16f877
\newline 
     3  
\newline 
     4  
\newline 
     5  
\newline 
     6  
\newline 
     7  -- config fuses
\newline 
     8  pragma target protection off
\newline 
     9  pragma target debug off
\newline 
    10  pragma target cdp off
\newline 
    11  pragma target lvp off
\newline 
    12  pragma target bor off
\newline 
    13  pragma target powerup on
\newline 
    14  pragma target watchdog off
\newline 
    15  pragma target osc xt
\newline 
    16  
\newline 
    17  -- Fosc definition
\newline 
    18  pragma target clock 4_000_000
\newline 
    19  
\newline 
    20  -- PORTB and TRISB definitions
\newline 
    21  var volatile byte PORTB at {0x06,0x106}
\newline 
    22  var volatile byte TRISB at {0x86,0x186}
\newline 
    23  
\newline 
    24  -- B0 pin definition
\newline 
    25  var volatile bit pin_b0 at PORTB : 0
\newline 
    26  
\newline 
    27  -- B4 pin definition
\newline 
    28  var volatile bit pin_b4 at PORTB : 4
\newline 
    29  
\newline 
    30  
\newline 
    31  -- Button at pin_b0
\newline 
    32  var volatile bit Button is pin_b0
\newline 
    33  
\newline 
    34  -- Led at pin_b4
\newline 
    35  var volatile bit LED is pin_b4
\newline 
    36  
\newline 
    37  
\newline 
    38  -- Reset PORTB
\newline 
    39  PORTB = 0b_0000_0000
\newline 
    40  
\newline 
    41  -- PORTB => b7 ..b1 = output, b0 = input
\newline 
    42  TRISB = 0b_0000_0001
\newline 
    43  PORTB = 0b_0000_0001
\newline 
    44  
\newline 
    45  -- main loop
\newline 
    46  forever loop
\newline 
           -- pressed button pulls pin low, see schematic
\newline 
    47     if ! Button then   ; Check if Button pressed
\newline 
    48        LED = on
\newline 
    49     else               ; ... if not pressed
\newline 
    50        LED = off
\newline 
    51     end if
\newline 
    52  end loop   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Paragraph

Description
\layout Description

1--22 See 
\emph on 
Example 0
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-0:-Blink}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-0:-Blink}

\end_inset 

.
\layout Description

24--35 Add declarations of both elements being used: the LED and the Button.
\layout Description

38--43 While initializing the port, take care to declare LED pin as 
\emph on 
output
\emph default 
 and Button pin as 
\emph on 
input
\emph default 
.
\layout Description

47 By pressing the Button, the pin will be tied to Ground
\begin_inset Foot
collapsed true

\layout Standard

See the circuit in section 
\begin_inset LatexCommand \ref{sec:Examples}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:Examples}

\end_inset 

.
\end_inset 

.
 In order to detect it with the IF statement we must apply a logical invert
 to the bit variable.
 In this way -- on pressing button -- the logical expression 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+IF ! Button THEN ...+
\end_inset 

 of the IF statement will be true.
 Button contact bouncing is not prevented in this program.
\layout Description

47--51 LED will be ON when Button is pressed, and will be OFF when Button
 is not pressed.
\layout Section

Example 2: Control the blink of a led.
\layout Standard


\begin_inset LatexCommand \label{sec:Example-2:-Control}

\end_inset 


\layout Quotation


\series bold 
Note
\series default 
: Line numbers are not included in program but used just for explanations
 !
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim} 
\newline 
     1  -- This must be in the first line
\newline 
     2  include c16f877
\newline 
     3  
\newline 
     4  
\newline 
     5  
\newline 
     6  
\newline 
     7  -- config fuses
\newline 
     8  pragma target protection off
\newline 
     9  pragma target debug off
\newline 
    10  pragma target cdp off
\newline 
    11  pragma target lvp off
\newline 
    12  pragma target bor off
\newline 
    13  pragma target powerup on
\newline 
    14  pragma target watchdog off
\newline 
    15  pragma target osc xt
\newline 
    16  
\newline 
    17  -- Fosc definition
\newline 
    18  pragma target clock 4_000_000
\newline 
    19  
\newline 
    20  
\newline 
    21  -- PORTB and TRISB definitions
\newline 
    22  var volatile byte PORTB at {0x06,0x106}
\newline 
    23  var volatile byte TRISB at {0x86,0x186}
\newline 
    24  
\newline 
    25  -- B0 pin definition
\newline 
    26  var volatile bit pin_b0 at PORTB : 0
\newline 
    27  
\newline 
    28  -- B4 pin definition
\newline 
    29  var volatile bit pin_b4 at PORTB : 4
\newline 
    30  
\newline 
    31  
\newline 
    32  -- Button at pin_b0
\newline 
    33  var volatile bit Button is pin_b0
\newline 
    34  
\newline 
    35  -- Led at pin_b4
\newline 
    36  var volatile bit LED is pin_b4
\newline 
    37  
\newline 
    38  -- 1 second wait procedure
\newline 
    39  procedure wait_1sec is
\newline 
    40     for 5 loop
\newline 
    41        for 6_500 loop  
\newline 
    42           asm nop
\newline 
    43        end loop
\newline 
    44     end loop
\newline 
    45  end procedure
\newline 
    46  
\newline 
    47  procedure delay_miliseconds is
\newline 
    48     for 1000 loop
\newline 
    49        asm nop
\newline 
    50     end loop
\newline 
    51  end procedure
\newline 
    52  
\newline 
    53  -- Reset PORTB
\newline 
    54  PORTB = 0b_0000_0000
\newline 
    55  
\newline 
    56  -- PORTB => output
\newline 
    57  TRISB = 0b_0000_0001
\newline 
    58  PORTB = 0b_0000_0001
\newline 
    59  
\newline 
    60  -- main loop
\newline 
    61  forever loop
\newline 
    62     if ! Button then   ; Check if Button pressed
\newline 
    63        delay_milisecons
\newline 
    64        if ! Button then
\newline 
    65           ; Check again if Button pressed  
\newline 
    66           LED = on
\newline 
    67           wait_1sec
\newline 
    68           LED = off
\newline 
    69           wait_1sec
\newline 
    70         end if
\newline 
    71     end if
\newline 
    72  end loop   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Paragraph

Description
\layout Description

1--36 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

38--45 See 
\emph on 
Example 0
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-0:-Blink}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:Example-0:-Blink}

\end_inset 

.
\layout Description

53--58 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

62 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

62--71 In this example the LED will blink 
\emph on 
only
\emph default 
 when Button is pressed longer than a few miliseconds.
\layout Section

Example 3: Adding a hardware timer.
\layout Standard


\begin_inset LatexCommand \label{sec:Example-3:-TMR0}

\end_inset 


\layout Quotation


\series bold 
Note
\series default 
: Line numbers are not included in program but used just for explanations
 !
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}     1  -- This must be in first line
\newline 
     2  include c16f877
\newline 
     3  
\newline 
     4  
\newline 
     5  
\newline 
     6  
\newline 
     7  -- config fuses
\newline 
     8  pragma target protection off
\newline 
     9  pragma target debug off
\newline 
    10  pragma target cdp off
\newline 
    11  pragma target lvp off
\newline 
    12  pragma target bor off
\newline 
    13  pragma target powerup on
\newline 
    14  pragma target watchdog off
\newline 
    15  pragma target osc xt
\newline 
    16  
\newline 
    17  -- Fosc definition
\newline 
    18  pragma target clock 4_000_000
\newline 
    19  
\newline 
    20  
\newline 
    21  -- PORTB and TRISB definitions
\newline 
    22  var volatile byte PORTB at {0x06,0x106}
\newline 
    23  var volatile byte TRISB at {0x86,0x186}
\newline 
    24  
\newline 
    25  -- B0 pin definition
\newline 
    26  var volatile bit pin_b0 at PORTB : 0
\newline 
    27  
\newline 
    28  -- B4 pin definition
\newline 
    29  var volatile bit pin_b4 at PORTB : 4
\newline 
    30  
\newline 
    31  
\newline 
    32  -- Button at pin_b0
\newline 
    33  var volatile bit Button is pin_b0
\newline 
    34  
\newline 
    35  -- Led at pin_b4
\newline 
    36  var volatile bit LED is pin_b4
\newline 
    37  
\newline 
    38  
\newline 
    39  -- 1 millisecond wait procedure
\newline 
    40  -- TMR0_delay=(256-InitTMR0)*4*prescaler/Fosc
\newline 
    41  -- TMR0_delay=(256-6)*4*4/4_000_000= 1 msec.
\newline 
    42  --
\newline 
    43  -- InitTMR0 = 6
\newline 
    44  -- Prescaler = 1:4
\newline 
    45  -- Fosc = 4_000_000
\newline 
    46  --
\newline 
    47  -- Delay = 0.001 secs
\newline 
    48  
\newline 
    49  
\newline 
    50  -- Init TMR0, free run mode, int osc, prescaler 1:4
\newline 
    51  var volatile byte TMR0 at {0x01,0x101}
\newline 
    52  var volatile byte OPTION_REG at {0x81,0x181}
\newline 
    53  OPTION_REG = 0b_1000_0001
\newline 
    54  
\newline 
    55  -- Disable interrupts, reset TMR0 flag
\newline 
    56  var volatile byte INTCON at {0x0B,0x8B,0x10B,0x18B}
\newline 
    57  var volatile bit T0if at INTCON : 2
\newline 
    58  INTCON = 0
\newline 
    59  
\newline 
    60  const byte InitTMR0 = 6
\newline 
    61  
\newline 
    62  procedure wait_1sec is
\newline 
    63     for 1_000 loop  
\newline 
    64        -- Wait for TMR0 1 msec.
\newline 
    65        while ( ! T0if ) loop
\newline 
    66        end loop
\newline 
    67        -- Reset TMR0IF
\newline 
    68        T0if = low
\newline 
    69        -- Add InitTMR0
\newline 
    70        TMR0 = TMR0 + InitTMR0
\newline 
    71     end loop
\newline 
    72  end procedure
\newline 
    73  
\newline 
    74  
\newline 
    75  -- Reset PORTB
\newline 
    76  PORTB = 0b_0000_0000
\newline 
    77  
\newline 
    78  -- PORTB => B0 input, B1..B7 output
\newline 
    79  TRISB = 0b_0000_0001
\newline 
    80  PORTB = 0b_0000_0001
\newline 
    81  
\newline 
    82  
\newline 
    83  -- main loop
\newline 
    84  forever loop 
\newline 
    85     if ! Button then ; Check if Button is 
\newline 
    86                      ; permanently pressed
\newline 
    87        LED = on
\newline 
    88        wait_1sec
\newline 
    89        LED = off
\newline 
    90        wait_1sec
\newline 
    91     end if
\newline 
    92  end loop   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Paragraph

Description
\layout Description

1--36 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

39--47 Inline comments with a brief description how to set TMR0.
 Take your PIC chip datasheets and read the section entitled 
\emph on 
TIMER 0
\emph default 
.
 The goal in this example is to get a TMR0 overflow each millisecond.
 Using a 4MHz crystal, it's necessary a prescaler of 1:4 and init TMR0 with
 a constant value each time it overflows.
\layout Description

50--58 Declare and initialize the SFRs related with TMR0.
 See your PIC chip datasheets, here TMR0 will work in 
\emph on 
free running mode
\emph default 
.
\layout Description

62--72 At this point TMR0 overflows each millisecond and will set a bit
 called T0IF.
 The WHILE statement will stop program until T0IF is set (TMR0 overflow),
 so we 
\emph on 
must
\emph default 
 reset this bit and load TMR0 with the init constant value.
 Doing these steps 1000 times will give us one second delay.
\layout Description

75--80 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

83--92 In this example the LED will blink 
\emph on 
only
\emph default 
 when Button is kept pressed.
\layout Section

Example 4: Using hardware interrupts.
\layout Standard


\begin_inset LatexCommand \label{sec:Example-4:-Interrupts}

\end_inset 


\layout Quotation


\series bold 
Note
\series default 
: Line numbers are not included in program but used just for explanations
 !
\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{verbatim}     1  -- This must be in the first line
\newline 
     2  include c16f877
\newline 
     3  
\newline 
     4  
\newline 
     5  
\newline 
     6  
\newline 
     7  -- config fuses
\newline 
     8  pragma target protection off
\newline 
     9  pragma target debug off
\newline 
    10  pragma target cdp off
\newline 
    11  pragma target lvp off
\newline 
    12  pragma target bor off
\newline 
    13  pragma target powerup on
\newline 
    14  pragma target watchdog off
\newline 
    15  pragma target osc xt
\newline 
    16  
\newline 
    17  -- Fosc definition
\newline 
    18  pragma target clock 4_000_000
\newline 
    19  
\newline 
    20  -- PORTB and TRISB definitions
\newline 
    21  var volatile byte PORTB at {0x06,0x106}
\newline 
    22  var volatile byte TRISB at {0x86,0x186}
\newline 
    23  
\newline 
    24  -- B0 pin definition
\newline 
    25  var volatile bit pin_b0 at PORTB : 0
\newline 
    26  
\newline 
    27  -- B4 pin definition
\newline 
    28  var volatile bit pin_b4 at PORTB : 4
\newline 
    29  
\newline 
    30  
\newline 
    31  -- Button at pin_b0
\newline 
    32  var volatile bit Button is pin_b0
\newline 
    33  
\newline 
    34  -- Led at pin_b4
\newline 
    35  var volatile bit LED is pin_b4
\newline 
    36  
\newline 
    37  
\newline 
    38  -- 1 millisecond delay
\newline 
    39  -- TMR0_delay=(256-InitTMR0)*4*prescaler/Fosc
\newline 
    40  -- TMR0_delay=(256-6)*4*4/4_000_000= 1 msec.
\newline 
    41  --
\newline 
    42  -- InitTMR0 = 6
\newline 
    43  -- Prescaler = 1:4
\newline 
    44  -- Fosc = 4_000_000
\newline 
    45  --
\newline 
    46  -- Delay = 0.001 secs
\newline 
    47  
\newline 
    48  -- RB0INT falling edge, Init TMR0, free run mode,
\newline 
    49  -- int osc, prescaler 1:4
\newline 
    50  var volatile byte TMR0 at {0x01,0x101}
\newline 
    51  var volatile byte OPTION_REG at {0x81,0x181}
\newline 
    52  OPTION_REG = 0b_1000_0001
\newline 
    53  
\newline 
    54  -- Enable TMR0 interrupt, RB0INT interrupt, reset flags
\newline 
    55  var volatile byte INTCON at {0x0B,0x8B,0x10B,0x18B}
\newline 
    56  var volatile bit T0if at INTCON : 2
\newline 
    57  var volatile bit INTf at INTCON : 1
\newline 
    58  var volatile bit INTE at INTCON : 4
\newline 
    59  var volatile bit T0IE at INTCON : 5
\newline 
    60  INTCON = 0B_1011_0000
\newline 
    61  const byte InitTMR0 = 6
\newline 
    62  var volatile bit Enable_Button is INTE
\newline 
    63  var volatile bit Enable_Timmer is T0IE
\newline 
    64  
\newline 
    65  Enable_Timmer = off
\newline 
    66  Enable_Button = on
\newline 
    67  
\newline 
    68  -- declare vars
\newline 
    69  var word milisec_count
\newline 
    70  var bit Flag_tmr0 = false, Flag_rb0int = false
\newline 
    71  
\newline 
    72  -- TMR0 interrupt
\newline 
    73  procedure TMR0_ISR is
\newline 
    74  pragma interrupt
\newline 
    75     if T0if then
\newline 
    76        -- Reset TMR0IF
\newline 
    77        T0if = low
\newline 
    78        -- Reset InitTMR0
\newline 
    79        TMR0 = InitTMR0
\newline 
    80        -- add one count
\newline 
    81        milisec_count = milisec_count + 1
\newline 
    82        -- Check count 1_000
\newline 
    83        if milisec_count == 1_000 then
\newline 
    84           -- if 1000 msecs. => Activate flag
\newline 
    85           Flag_tmr0 = true
\newline 
    86           -- reset counter
\newline 
    87           milisec_count = 0 
\newline 
    88        end if
\newline 
    89     end if
\newline 
    90  end procedure
\newline 
    91  
\newline 
    92  -- RB0INT interrupt
\newline 
    93  procedure RB0INT_ISR is
\newline 
    94  pragma interrupt
\newline 
    95     if INTf then
\newline 
    96        -- Reset TMR0IF
\newline 
    97        INTf = low
\newline 
    98        -- Activate flag
\newline 
    99        Flag_rb0int = true
\newline 
   100        -- reset counter
\newline 
   101        milisec_count = 0
\newline 
   102        TMR0 = 6
\newline 
   103        -- Enable timmer
\newline 
   104        Enable_Timmer = on
\newline 
   105     end if
\newline 
   106  end procedure
\newline 
   107  
\newline 
   108  
\newline 
   109  -- Reset PORTB
\newline 
   110  PORTB = 0b_0000_0000
\newline 
   111  
\newline 
   112  -- PORTB => B0 input, B1..B7 output
\newline 
   113  TRISB = 0b_0000_0001
\newline 
   114  PORTB = 0b_0000_0001
\newline 
   115  
\newline 
   116  
\newline 
   117  -- main loop
\newline 
   118  forever loop
\newline 
   119     if Flag_rb0int then   ; Check if Button pressed
\newline 
   120        -- Disable Button interrupt
\newline 
   121        Enable_Button = low
\newline 
   122        -- Turn on LED
\newline 
   123        LED = on
\newline 
   124        -- Wait for 1 sec event
\newline 
   125        while ( ! Flag_tmr0 ) loop
\newline 
   126        end loop
\newline 
   127        -- Clear flag
\newline 
   128        Flag_tmr0 = low
\newline 
   129        -- Turn off LED
\newline 
   130        LED = off
\newline 
   131        -- Wait for 1 sec event
\newline 
   132        while ( ! Flag_tmr0 ) loop
\newline 
   133        end loop
\newline 
   134        -- Clear flag
\newline 
   135        Flag_tmr0 = low
\newline 
   136        -- Enable Button interrupt
\newline 
   137        Enable_Button = High
\newline 
   138        -- Disable timmer interrupt
\newline 
   139        Enable_Timmer = low
\newline 
   140        -- Clear flags
\newline 
   141        Flag_rb0int = low
\newline 
   142        Flag_tmr0 = low
\newline 
   143     end if
\newline 
   144  end loop   
\newline 

\backslash 
end{verbatim}
\end_inset 


\layout Paragraph

Description
\layout Description

1--35 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

38--46 See 
\emph on 
Example 3
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-3:-TMR0}

\end_inset 

\SpecialChar ~
1
\begin_inset LatexCommand \vpageref{sec:Example-3:-TMR0}

\end_inset 

.
\layout Description

49--52 Declare and initialize the SFRs related with TMR0.
 See your PIC chip datasheets, here TMR0 will work in 
\emph on 
free running mode
\emph default 
.
 Set also RB0INT edge detection to 
\emph on 
falling edge
\emph default 
.
\layout Description

54--60 Declare and configure TMR0 and RB0INT interrupts
\layout Description

62--66 Declare some alias, it's easier to remember.
\layout Description

68--70 Declare some variables to be used globally.
 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_tmr0+
\end_inset 

 and 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_rb0in+
\end_inset 

 will be used by main program to know about interrupt events.
\layout Description

72--90 TMR0 interrupt procedure.
\layout Description

75 Check if is exactly TMR0 interrupt.
\layout Description

76--79 Reset flag and init TMR0 again.
\layout Description

80--81 Add one count to our 
\emph on 
1000 milliseconds
\emph default 
 count.
\layout Description

82--88 On reaching the 1000 milliseconds count, set 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_tmr0+
\end_inset 

 and reset internal count.
\layout Description

92--106 RB0INT interrupt procedure.
\layout Description

95 Check if is exactly RB0INT interrupt.
\layout Description

96--97 Reset flag RB0INT.
\layout Description

98--105 Set 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_rb0in+
\end_inset 

, enable TMR0 (will be disabled anywhere) and reset TMR0 count.
 In this way TMR0 will start counting only when Button is pressed.
\layout Description

109--114 See 
\emph on 
Example 1
\emph default 
 in section 
\begin_inset LatexCommand \ref{sec:Example-1:-Scan}

\end_inset 

\SpecialChar ~

\begin_inset LatexCommand \vpageref{sec:Example-1:-Scan}

\end_inset 

.
\layout Description

117-144 Main code.
 In this example the LED will blink only once each time Button is pressed.
 
\layout Description

119 Scan Button testing 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_rb0in+
\end_inset 

 bit.
 The interrupt procedure will do all hard job.
\layout Description

120--123 Disable future Button interrupt events.
\layout Description

122--135 The 
\emph on 
magic sequence 
\emph default 
to blink a LED.
\layout Description

124--128 Turn on LED and wait for one second by testing 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_tmr0+
\end_inset 

.
 Clear flag for next use.
\layout Description

129--135 Turn off LED and wait for one second by testing 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+Flag_tmr0+
\end_inset 

.
 Clear flag for next use.
\layout Description

136--142 Enable Button interrupt events again, disable TMR0 interrupt events
 (work already done in this loop) and clear both flags.
 
\layout Chapter

Glossary
\layout Description

ACCESSOR An accessor method is a method that is usually small, simple and
 provides the means for the state of an object to be accessed from other
 parts of a program.
 An accessor method that changes the state of an object is often called
 an update method or, sometimes, mutator method.
 Objects that provide such methods are considered mutable objects.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Accessor.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

ANALOG\SpecialChar ~
DEVICE An analog device is a component of a electronic circuit that
 change its properties continuously in both time and amplitude.
 It differs from digital devices in that small fluctuations in the signal
 are meaningful in that they are continuously variable rather than digitally
 quantised.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

ATOMIC A single operation, with single as in 
\emph on 
non interuptable
\emph default 
.
 It has to finish before anything else can be done.
 Which implies that a 
\emph on 
singe operation
\emph default 
 might take more than one machine instruction but they all must finisch
 before any interupt can interfere with the processor.
 On most processors 
\emph on 
atomic
\emph default 
 is equivalent to one 
\emph on 
instruction
\emph default 
.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BANK see MEMORY BANK.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BINARY\SpecialChar ~
CONSTANT Begins with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0b"+
\end_inset 

 and continues until the first character not in the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"1"+
\end_inset 

}.
 It's fully evaluated at compile time.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BIT or 
\emph on 
binary digit.

\emph default 
 Is the smallest unit of data and has a boolean value.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BITMASK also MASK.
 Extracts the status of certain bits in a binary string or number.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BITWISE\SpecialChar ~
OPERATOR Operates on individual BITs of one or two operands.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Bitwise.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BITWISE\SpecialChar ~
COMPLEMENT An operator that changes all BITs of an operand from 1
 to 0 or vice versa.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: One's_complement.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BITWISE\SpecialChar ~
AND An operator that takes two bit patterns of equal length, and
 produces another one of the same length by matching up corresponding bits
 (the first of each; the second of each; and so on) and performing the logical
 AND operation on each pair of corresponding bits.
 In each pair, the result is 1 if the first bit is 1 AND the second bit
 is 1.
 Otherwise, the result is zero.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Bitwise.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BITWISE\SpecialChar ~
OR An operator that takes two bit patterns of equal length, and produces
 another one of the same length by matching up corresponding bits (the first
 of each; the second of each; and so on) and performing the logical OR operation
 on each pair of corresponding bits.
 In each pair, the result is 1 if the first bit is 1 OR the second bit is
 1.
 Otherwise, the result is zero.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Bitwise.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BITWISE\SpecialChar ~
XOR An operator that takes two bit patterns of equal length, and
 produces another one of the same length by matching up corresponding bits
 (the first of each; the second of each; and so on) and performing the logical
 OR operation on each pair of corresponding bits.
 In each pair, the result is 1 if the two bits are different, and 0 if they
 are the same.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Bitwise.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

BOOLEAN Boolean logic is a form of algebra in which all values are reduced
 to either TRUE or FALSE.
 In 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 this means TRUE or FALSE, also ON or OFF are valid and either 1 and 0.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Boolean.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

CONTACT\SpecialChar ~
BOUNCE Contact bounce is a common problem with mechanical switches
 and relays.
 When the contacts strike together, their momentum and elasticity act together
 to cause bounce.
 The result is a rapidly pulsed electrical current instead of a clean transition
 from zero to full current.
 If the switch voltage is fed directly to the input of a microprocessor,
 then the software might become confused by the rapid sequence of high and
 low logic levels when it is expecting only a single, stable transition
 between "on" and "off".
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Switch.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

COMPILER\SpecialChar ~
DIRECTIVE Data embedded in source code to tell the compiler some
 intention about compilation.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Compiler_directive.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

CO-OPERATIVE\SpecialChar ~
MULTITASKING (or non-preemptive multitasking) is a form of multitask
ing in which multiple tasks execute by voluntarily ceding control to other
 tasks at programmer-defined points within each task.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Co-operative_multitasking.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

DECIMAL\SpecialChar ~
CONSTANT Begins with a digit, and continues until the first character
 not in the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

, digit}.
 It's fully evaluated at compile time.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

DECLARATION Specifies a variable's dimensions, identifier, type, and other
 aspects.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

DIGIT A character in the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"9"+
\end_inset 

}.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

ENDIANNESS The two main types of endianness are known as big-endian and
 little-endian.
 In 
\emph on 
big-endian
\emph default 
, the most significant byte (MSB) is stored at the memory location with
 the lowest address.
 In 
\emph on 
little-endian
\emph default 
, the least significant byte (LSB) is stored at the memory location with
 the lowest address.
 pJAL and PICs uses 
\emph on 
little-endian 
\emph default 
memory management.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Endianness.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

EXPRESSION Anything that evaluates to a value, for example x + 1.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

IDENTIFIER Begins with a member of the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"a"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"z"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"A"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"Z"+
\end_inset 

} and continues until the first character 
\emph on 
NOT
\emph default 
 in the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"a"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"z"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"A"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"Z"+
\end_inset 

, digit}.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

INTERRUPT is an asynchronous signal from hardware (or software) indicating
 the need for attention.
 Originated as a way to avoid wasting the processors valuable time in polling
 loops, waiting for external events.
 Instead, an interrupt signals the processor when an event occurs, allowing
 the processor to process other work while the event is pending.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Interrupt.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

HEXADECIMAL\SpecialChar ~
CONSTANT Begins with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0x"+
\end_inset 

 and continues until the first character not in the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"9"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"a"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"f"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"A"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"F"+
\end_inset 

}.
 It's fully evaluated at compile time.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

LOGICAL\SpecialChar ~
EXPRESSION The result is 0 if the expression evaluation is zero,
 and 1 if the expression evaluation is anything other than 0.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

LOGICAL\SpecialChar ~
NOT An operator that changes the boolean state from TRUE to FALSE
 or vice versa.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

LSB It is the byte in that position of a multi-byte number which has the
 least potential value.
 If it's written in lowercase, means the lowest BIT.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Least_significant_byte.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

MEMORY\SpecialChar ~
BANK PIC architecture typically has more memory registers than can
 be addressed in a single byte address.
 A special SFR register is utilized to switch to another bank of memory
 where the base addresses repeat.
 Check the specific PIC datasheet to determine the number of banks and their
 size.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

MODULO The modulo operation finds the remainder of division.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

MSB It is the byte in that position of a multi-byte number which has the
 greatest potential value.
 If it's written in lowercase, means the greatest BIT.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Most_significant_byte.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

MULTITASKING is a method by which multiple tasks, also known as processes,
 share common processing resources such as a CPU.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Computer_multitasking.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

NIBBLE Half of a an 8 bit byte, a group of 4 bits.
 Corresponding 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 
\emph on 
type
\emph default 
 is BIT*4, eg: you can send data to a HD44780 LCD in nibble (4 bit) mode.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

OCTAL\SpecialChar ~
CONSTANT Begins with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0q"+
\end_inset 

 and continues until the first character not in the set {
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"_"+
\end_inset 

, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"0"+
\end_inset 

--
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"7"+
\end_inset 

}.
 It's fully evaluated at compile time.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

OPERATOR The most basic mathematical or logical functions usually represented
 by a single character eg: + - * 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

OPERAND One of the inputs (arguments) of an operator.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

PRAGMA (short for "
\emph on 
pragmatic information
\emph default 
"), see COMPILER DIRECTIVE.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

STRING\SpecialChar ~
CONSTANT Begins with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+'+
\end_inset 

 and continues until the next 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+'+
\end_inset 

.
 Also, begins with 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"+
\end_inset 

 and continues until the next 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+"+
\end_inset 

.
 It's fully evaluated at compile time.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

TOKENS 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 syntax is based on tokens.
 In programming languages, a single element of a programming language.
 In 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 can be an identifier, constant, operator, or any non-space character.
 See Wikipedia\SpecialChar ~

\begin_inset LatexCommand \cite{Wikipedia}

\end_inset 

, keyword: Token.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

TRINARY\SpecialChar ~
OPERATOR An operator which three operands are associated with the
 operator.
 Example: in C programming language the 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+?+
\end_inset 

 operator, 
\begin_inset ERT
status Inlined

\layout Standard

\backslash 
verb+c?a:b+
\end_inset 

.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

UNARY\SpecialChar ~
OPERATOR Also MONADIC operator.
 An operator which only takes one operand (argument), eg: -1 (a negative
 value).
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Description

VAR Variable.
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
html{
\backslash 

\backslash 
}
\end_inset 


\layout Chapter

GNU Free Documentation License
\layout Standard


\begin_inset LatexCommand \label{sec:GNU-FDL}

\end_inset 


\layout Standard

GNU Free Documentation License
\layout Standard

Version 1.2, November 2002
\layout Standard

Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
\layout Standard

51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
\layout Standard

Everyone is permitted to copy and distribute verbatim copies of this license
 document, but changing it is not allowed.
\layout Standard

0.
 PREAMBLE
\layout Standard

The purpose of this License is to make a manual, textbook, or other functional
 and useful document "free" in the sense of freedom: to assure everyone
 the effective freedom to copy and redistribute it, with or without modifying
 it, either commercially or noncommercially.
 Secondarily, this License preserves for the author and publisher a way
 to get credit for their work, while not being considered responsible for
 modifications made by others.
\layout Standard

This License is a kind of "copyleft", which means that derivative works
 of the document must themselves be free in the same sense.
 It complements the GNU General Public License, which is a copyleft license
 designed for free software.
\layout Standard

We have designed this License in order to use it for manuals for free software,
 because free software needs free documentation: a free program should come
 with manuals providing the same freedoms that the software does.
 But this License is not limited to software manuals; it can be used for
 any textual work, regardless of subject matter or whether it is published
 as a printed book.
 We recommend this License principally for works whose purpose is instruction
 or reference.
\layout Standard

1.
 APPLICABILITY AND DEFINITIONS
\layout Standard

This License applies to any manual or other work, in any medium, that contains
 a notice placed by the copyright holder saying it can be distributed under
 the terms of this License.
 Such a notice grants a world-wide, royalty-free license, unlimited in duration,
 to use that work under the conditions stated herein.
 The "Document", below, refers to any such manual or work.
 Any member of the public is a licensee, and is addressed as "you".
 You accept the license if you copy, modify or distribute the work in a
 way requiring permission under copyright law.
\layout Standard

A "Modified Version" of the Document means any work containing the Document
 or a portion of it, either copied verbatim, or with modifications and/or
 translated into another language.
\layout Standard

A "Secondary Section" is a named appendix or a front-matter section of the
 Document that deals exclusively with the relationship of the publishers
 or authors of the Document to the Document's overall subject (or to related
 matters) and contains nothing that could fall directly within that overall
 subject.
 (Thus, if the Document is in part a textbook of mathematics, a Secondary
 Section may not explain any mathematics.) The relationship could be a matter
 of historical connection with the subject or with related matters, or of
 legal, commercial, philosophical, ethical or political position regarding
 them.
\layout Standard

The "Invariant Sections" are certain Secondary Sections whose titles are
 designated, as being those of Invariant Sections, in the notice that says
 that the Document is released under this License.
 If a section does not fit the above definition of Secondary then it is
 not allowed to be designated as Invariant.
 The Document may contain zero Invariant Sections.
 If the Document does not identify any Invariant Sections then there are
 none.
\layout Standard

The "Cover Texts" are certain short passages of text that are listed, as
 Front-Cover Texts or Back-Cover Texts, in the notice that says that the
 Document is released under this License.
 A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be
 at most 25 words.
\layout Standard

A "Transparent" copy of the Document means a machine-readable copy, represented
 in a format whose specification is available to the general public, that
 is suitable for revising the document straightforwardly with generic text
 editors or (for images composed of pixels) generic paint programs or (for
 drawings) some widely available drawing editor, and that is suitable for
 input to text formatters or for automatic translation to a variety of formats
 suitable for input to text formatters.
 A copy made in an otherwise Transparent file format whose markup, or absence
 of markup, has been arranged to thwart or discourage subsequent modification
 by readers is not Transparent.
 An image format is not Transparent if used for any substantial amount of
 text.
 A copy that is not "Transparent" is called "Opaque".
\layout Standard

Examples of suitable formats for Transparent copies include plain ASCII
 without markup, Texinfo input format, LaTeX input format, SGML or XML using
 a publicly available DTD, and standard-conforming simple HTML, PostScript
 or PDF designed for human modification.
 Examples of transparent image formats include PNG, XCF and JPG.
 Opaque formats include proprietary formats that can be read and edited
 only by proprietary word processors, SGML or XML for which the DTD and/or
 processing tools are not generally available, and the machine-generated
 HTML, PostScript or PDF produced by some word processors for output purposes
 only.
\layout Standard

The "Title Page" means, for a printed book, the title page itself, plus
 such following pages as are needed to hold, legibly, the material this
 License requires to appear in the title page.
 For works in formats which do not have any title page as such, "Title Page"
 means the text near the most prominent appearance of the work's title,
 preceding the beginning of the body of the text.
\layout Standard

A section "Entitled XYZ" means a named subunit of the Document whose title
 either is precisely XYZ or contains XYZ in parentheses following text that
 translates XYZ in another language.
 (Here XYZ stands for a specific section name mentioned below, such as "Acknowle
dgements", "Dedications", "Endorsements", or "History".) To "Preserve the
 Title" of such a section when you modify the Document means that it remains
 a section "Entitled XYZ" according to this definition.
\layout Standard

The Document may include Warranty Disclaimers next to the notice which states
 that this License applies to the Document.
 These Warranty Disclaimers are considered to be included by reference in
 this License, but only as regards disclaiming warranties: any other implication
 that these Warranty Disclaimers may have is void and has no effect on the
 meaning of this License.
\layout Standard

2.
 VERBATIM COPYING
\layout Standard

You may copy and distribute the Document in any medium, either commercially
 or noncommercially, provided that this License, the copyright notices,
 and the license notice saying this License applies to the Document are
 reproduced in all copies, and that you add no other conditions whatsoever
 to those of this License.
 You may not use technical measures to obstruct or control the reading or
 further copying of the copies you make or distribute.
 However, you may accept compensation in exchange for copies.
 If you distribute a large enough number of copies you must also follow
 the conditions in section 3.
\layout Standard

You may also lend copies, under the same conditions stated above, and you
 may publicly display copies.
\layout Standard

3.
 COPYING IN QUANTITY
\layout Standard

If you publish printed copies (or copies in media that commonly have printed
 covers) of the Document, numbering more than 100, and the Document's license
 notice requires Cover Texts, you must enclose the copies in covers that
 carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on
 the front cover, and Back-Cover Texts on the back cover.
 Both covers must also clearly and legibly identify you as the publisher
 of these copies.
 The front cover must present the full title with all words of the title
 equally prominent and visible.
 You may add other material on the covers in addition.
 Copying with changes limited to the covers, as long as they preserve the
 title of the Document and satisfy these conditions, can be treated as verbatim
 copying in other respects.
\layout Standard

If the required texts for either cover are too voluminous to fit legibly,
 you should put the first ones listed (as many as fit reasonably) on the
 actual cover, and continue the rest onto adjacent pages.
\layout Standard

If you publish or distribute Opaque copies of the Document numbering more
 than 100, you must either include a machine-readable Transparent copy along
 with each Opaque copy, or state in or with each Opaque copy a computer-network
 location from which the general network-using public has access to download
 using public-standard network protocols a complete Transparent copy of
 the Document, free of added material.
 If you use the latter option, you must take reasonably prudent steps, when
 you begin distribution of Opaque copies in quantity, to ensure that this
 Transparent copy will remain thus accessible at the stated location until
 at least one year after the last time you distribute an Opaque copy (directly
 or through your agents or retailers) of that edition to the public.
\layout Standard

It is requested, but not required, that you contact the authors of the Document
 well before redistributing any large number of copies, to give them a chance
 to provide you with an updated version of the Document.
\layout Standard

4.
 MODIFICATIONS
\layout Standard

You may copy and distribute a Modified Version of the Document under the
 conditions of sections 2 and 3 above, provided that you release the Modified
 Version under precisely this License, with the Modified Version filling
 the role of the Document, thus licensing distribution and modification
 of the Modified Version to whoever possesses a copy of it.
 In addition, you must do these things in the Modified Version:
\layout Labeling
\labelwidthstring 00.00.0000

A.
 Use in the Title Page (and on the covers, if any) a title distinct from
 that of the Document, and from those of previous versions (which should,
 if there were any, be listed in the History section of the Document).
 You may use the same title as a previous version if the original publisher
 of that version gives permission.
\layout Labeling
\labelwidthstring 00.00.0000

B.
 List on the Title Page, as authors, one or more persons or entities responsible
 for authorship of the modifications in the Modified Version, together with
 at least five of the principal authors of the Document (all of its principal
 authors, if it has fewer than five), unless they release you from this
 requirement.
\layout Labeling
\labelwidthstring 00.00.0000

C.
 State on the Title page the name of the publisher of the Modified Version,
 as the publisher.
\layout Labeling
\labelwidthstring 00.00.0000

D.
 Preserve all the copyright notices of the Document.
\layout Labeling
\labelwidthstring 00.00.0000

E.
 Add an appropriate copyright notice for your modifications adjacent to
 the other copyright notices.
\layout Labeling
\labelwidthstring 00.00.0000

F.
 Include, immediately after the copyright notices, a license notice giving
 the public permission to use the Modified Version under the terms of this
 License, in the form shown in the Addendum below.
\layout Labeling
\labelwidthstring 00.00.0000

G.
 Preserve in that license notice the full lists of Invariant Sections and
 required Cover Texts given in the Document's license notice.
\layout Labeling
\labelwidthstring 00.00.0000

H.
 Include an unaltered copy of this License.
\layout Labeling
\labelwidthstring 00.00.0000

I.
 Preserve the section Entitled "History", Preserve its Title, and add to
 it an item stating at least the title, year, new authors, and publisher
 of the Modified Version as given on the Title Page.
 If there is no section Entitled "History" in the Document, create one stating
 the title, year, authors, and publisher of the Document as given on its
 Title Page, then add an item describing the Modified Version as stated
 in the previous sentence.
\layout Labeling
\labelwidthstring 00.00.0000

J.
 Preserve the network location, if any, given in the Document for public
 access to a Transparent copy of the Document, and likewise the network
 locations given in the Document for previous versions it was based on.
 These may be placed in the "History" section.
 You may omit a network location for a work that was published at least
 four years before the Document itself, or if the original publisher of
 the version it refers to gives permission.
\layout Labeling
\labelwidthstring 00.00.0000

K.
 For any section Entitled "Acknowledgements" or "Dedications", Preserve
 the Title of the section, and preserve in the section all the substance
 and tone of each of the contributor acknowledgements and/or dedications
 given therein.
\layout Labeling
\labelwidthstring 00.00.0000

L.
 Preserve all the Invariant Sections of the Document, unaltered in their
 text and in their titles.
 Section numbers or the equivalent are not considered part of the section
 titles.
\layout Labeling
\labelwidthstring 00.00.0000

M.
 Delete any section Entitled "Endorsements".
 Such a section may not be included in the Modified Version.
\layout Labeling
\labelwidthstring 00.00.0000

N.
 Do not retitle any existing section to be Entitled "Endorsements" or to
 conflict in title with any Invariant Section.
\layout Labeling
\labelwidthstring 00.00.0000

O.
 Preserve any Warranty Disclaimers.
\layout Standard

If the Modified Version includes new front-matter sections or appendices
 that qualify as Secondary Sections and contain no material copied from
 the Document, you may at your option designate some or all of these sections
 as invariant.
 To do this, add their titles to the list of Invariant Sections in the Modified
 Version's license notice.
 These titles must be distinct from any other section titles.
\layout Standard

You may add a section Entitled "Endorsements", provided it contains nothing
 but endorsements of your Modified Version by various parties--for example,
 statements of peer review or that the text has been approved by an organization
 as the authoritative definition of a standard.
\layout Standard

You may add a passage of up to five words as a Front-Cover Text, and a passage
 of up to 25 words as a Back-Cover Text, to the end of the list of Cover
 Texts in the Modified Version.
 Only one passage of Front-Cover Text and one of Back-Cover Text may be
 added by (or through arrangements made by) any one entity.
 If the Document already includes a cover text for the same cover, previously
 added by you or by arrangement made by the same entity you are acting on
 behalf of, you may not add another; but you may replace the old one, on
 explicit permission from the previous publisher that added the old one.
\layout Standard

The author(s) and publisher(s) of the Document do not by this License give
 permission to use their names for publicity for or to assert or imply endorseme
nt of any Modified Version.
\layout Standard

5.
 COMBINING DOCUMENTS
\layout Standard

You may combine the Document with other documents released under this License,
 under the terms defined in section 4 above for modified versions, provided
 that you include in the combination all of the Invariant Sections of all
 of the original documents, unmodified, and list them all as Invariant Sections
 of your combined work in its license notice, and that you preserve all
 their Warranty Disclaimers.
\layout Standard

The combined work need only contain one copy of this License, and multiple
 identical Invariant Sections may be replaced with a single copy.
 If there are multiple Invariant Sections with the same name but different
 contents, make the title of each such section unique by adding at the end
 of it, in parentheses, the name of the original author or publisher of
 that section if known, or else a unique number.
 Make the same adjustment to the section titles in the list of Invariant
 Sections in the license notice of the combined work.
\layout Standard

In the combination, you must combine any sections Entitled "History" in
 the various original documents, forming one section Entitled "History";
 likewise combine any sections Entitled "Acknowledgements", and any sections
 Entitled "Dedications".
 You must delete all sections Entitled "Endorsements".
\layout Standard

6.
 COLLECTIONS OF DOCUMENTS
\layout Standard

You may make a collection consisting of the Document and other documents
 released under this License, and replace the individual copies of this
 License in the various documents with a single copy that is included in
 the collection, provided that you follow the rules of this License for
 verbatim copying of each of the documents in all other respects.
\layout Standard

You may extract a single document from such a collection, and distribute
 it individually under this License, provided you insert a copy of this
 License into the extracted document, and follow this License in all other
 respects regarding verbatim copying of that document.
\layout Standard

7.
 AGGREGATION WITH INDEPENDENT WORKS
\layout Standard

A compilation of the Document or its derivatives with other separate and
 independent documents or works, in or on a volume of a storage or distribution
 medium, is called an "aggregate" if the copyright resulting from the compilatio
n is not used to limit the legal rights of the compilation's users beyond
 what the individual works permit.
 When the Document is included in an aggregate, this License does not apply
 to the other works in the aggregate which are not themselves derivative
 works of the Document.
\layout Standard

If the Cover Text requirement of section 3 is applicable to these copies
 of the Document, then if the Document is less than one half of the entire
 aggregate, the Document's Cover Texts may be placed on covers that bracket
 the Document within the aggregate, or the electronic equivalent of covers
 if the Document is in electronic form.
 Otherwise they must appear on printed covers that bracket the whole aggregate.
\layout Standard

8.
 TRANSLATION
\layout Standard

Translation is considered a kind of modification, so you may distribute
 translations of the Document under the terms of section 4.
 Replacing Invariant Sections with translations requires special permission
 from their copyright holders, but you may include translations of some
 or all Invariant Sections in addition to the original versions of these
 Invariant Sections.
 You may include a translation of this License, and all the license notices
 in the Document, and any Warranty Disclaimers, provided that you also include
 the original English version of this License and the original versions
 of those notices and disclaimers.
 In case of a disagreement between the translation and the original version
 of this License or a notice or disclaimer, the original version will prevail.
\layout Standard

If a section in the Document is Entitled "Acknowledgements", "Dedications",
 or "History", the requirement (section 4) to Preserve its Title (section
 1) will typically require changing the actual title.
\layout Standard

9.
 TERMINATION
\layout Standard

You may not copy, modify, sublicense, or distribute the Document except
 as expressly provided for under this License.
 Any other attempt to copy, modify, sublicense or distribute the Document
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
\layout Standard

10.
 FUTURE REVISIONS OF THIS LICENSE
\layout Standard

The Free Software Foundation may publish new, revised versions of the GNU
 Free Documentation License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
 
\layout Standard

See http://www.gnu.org/copyleft.
\layout Standard

Each version of the License is given a distinguishing version number.
 If the Document specifies that a particular numbered version of this License
 "or any later version" applies to it, you have the option of following
 the terms and conditions either of that specified version or of any later
 version that has been published (not as a draft) by the Free Software Foundatio
n.
 If the Document does not specify a version number of this License, you
 may choose any version ever published (not as a draft) by the Free Software
 Foundation.
\layout Standard

ADDENDUM: How to use this License for your documents To use this License
 in a document you have written, include a copy of the License in the document
 and put the following copyright and license notices just after the title
 page:
\layout Standard

Copyright (c) YEAR YOUR NAME.
\layout Standard

Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.2 or any later
 version published by the Free Software Foundation; with no Invariant Sections,
 no Front-Cover Texts, and no Back-Cover Texts.
 A copy of the license is included in the section entitled "GNU Free Documentati
on License".
\layout Standard

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
 replace the "with ...
 Texts
\begin_inset Quotes srd
\end_inset 

.
 line with this:
\layout Standard

with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover
 Texts being LIST, and with the Back-Cover Texts being LIST.
\layout Standard

If you have Invariant Sections without Cover Texts, or some other combination
 of the three, merge those two alternatives to suit the situation.
\layout Standard

If your document contains nontrivial examples of program code, we recommend
 releasing these examples in parallel under your choice of free software
 license, such as the GNU General Public License, to permit their use in
 free software.
\layout Standard


\begin_inset ERT
status Inlined

\layout Standard

\backslash 
renewcommand{
\backslash 
bibname}{References}
\end_inset 


\layout Bibliography
\bibitem {Microchip-web}

Microchip's homepage: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://www.microchip.com}{http://www.microchip.com}
\end_inset 

 
\layout Bibliography
\bibitem {PICbsc}

PICbsc's homepage: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://www.casadeyork.com/robot/picbsc}{http://www.casadeyork.com/robot/picbsc}
\end_inset 


\layout Bibliography
\bibitem {pJALdownload}


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 download homepage: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://www.casadeyork.com/pjal}{http://www.casadeyork.com/pjal}
\end_inset 


\layout Bibliography
\bibitem {Wouter-web}


\noun on 
Wouter van Ooijen
\noun default 
's homesite: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://www.voti.nl/jal}{http://www.voti.nl/jal}
\end_inset 


\layout Bibliography
\bibitem {Wikipedia}

Wikipedia's homepage: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://en.wikipedia.org}{http://en.wikipedia.org}
\end_inset 


\layout Bibliography
\bibitem {JAL-SF-net}

GPL JAL homepage: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://jal.sf.net}{http://jal.sf.net}
\end_inset 


\layout Bibliography
\bibitem {Stef-pJAL}


\noun on 
Stef Mientki
\noun default 
's 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
pjal
\backslash 

\end_inset 

 homepage: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://pic.flappie.nl}{http://pic.flappie.nl}
\end_inset 


\layout Bibliography
\bibitem {PICList-RMW}

PICList RMW issue: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
htmladdnormallink{http://www.piclist.com/techref/readmodwrite.htm}{http://www.piclist.com/techref/readmodwrite.htm}
\end_inset 


\the_end
