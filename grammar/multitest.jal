; multitest.jal
;
; This file keeps the test cases related to the current developement 
; and at the bottom of this file, there is a todo-list.
; Once a part is finished, the code is put into a test-file in the 
; test directory, so they become part of the regression test set.
;
;

include pic_target

procedure TestFromValue(byte in c) is
   callby_code(c)
   callby_reference(c)
   print_var(c)
end procedure

procedure TestFromReference(byte in out b) is
   callby_code(b)
   callby_reference(b)
   print_var(b)
end procedure

procedure TestFromCode(volatile byte in out b) is
   callby_code(b)
;   callby_reference(b)
   print_var(b)
end procedure


procedure callby_reference(byte in out v) is
   v = v + 2
end procedure


procedure callby_code(volatile byte in out v) is
   v = v + 1
end procedure


;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
; test group:
;  call *by* code, reference and value X call *from* code, reference, value
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

var byte a

;------------------------------------------------------------------------------
; test call by code, reference and value from *value*
test_header(9)

a = 1
TestFromValue(a)
print_var(a)

;------------------------------------------------------------------------------
; test call by code, reference and value from *reference*
test_header(10)                                          

a = 1
TestFromReference(a)
print_var(a)

;------------------------------------------------------------------------------
; test call by code, reference and value from *code*
test_header(11)

a = 1
TestFromCode(a)
print_var(a)         












;------------------------------------------------------------------------------
; ahead (roughly ordered from close to far):                                                                  
;                                                     
; - create printf replacement that takes 'verbose' class of print 
;   statement as first parameter, write output to a file and provides
;   a single place to enable/disable code output.
;   
;
;
;  - rework parsing so procedure defs are always encountered in pass one.
;  currently, a procedure def within if, loop etc is not recoginised.
;  (guess more rework is required to support conditional compile...)  
;
;  - support reference-parameter as input for call-by-code
;  Probably requires analysis of procedure call and write wrapping-code before 
;  actuall printing code as the program does now.         
;  => such a scan is pretty complex, since it has to determine where it can safely put
;  the code. A procedure/ function call can be part of an if-statment, an assign,
;  within loop etc. 
;  (It is tempting to place the wrapper immediately after the var is defined, but that
;  kills the requisted volatile behaviour - it should be as close before and after
;  the actual use)
;
;  - test all relevant combinations of in/out with call by value/reference/code
;
;  - test proper casting on procedure parameters.
;
;  - support use of pseudo vars as parameters (value/reference/code)
;  
;  - add alias
;  
;  - check if all 'pragma' keywords (like data) are valid identifiers at any point.
;
;  - use C 'volatile' keyword when relevant.
;    
;  - find a sollution for (expr == true)
;  C has no bit vars, so any value that is not false is considered true. Of course we 
;  could just replace this particular compare, but that would not catch similar statements
;  like (true == expr),( expr == on) where on equals to true etc. It would be nice if
;  there was a sollution without replacing all expression evaluation of C,
;  
;  - support bit variables, both single bit as multibit and at offset of a byte
;  (for now, I intend to limit to bits into one byte or maybe other vars)
;
;  - support of 'at', at least for bit variables.
;
;  - support for 'variable prototypes' (equivalent to 'extern' in C).
;  with this, both size and reference type (pointer = in/out) or value definition should be supported  
;
;  - support of arrays (have not thought of this yet, passing of arrays may require quite a lot of rework)
;    
;  - better parser error support - try leaving out 'is' from a valid procedure definition and you know
;  what I mean.  
;    
;  Later, maybe never:  
;  - support of odd-sized vars, like byte*3 (below 32 bits)
;  
;  - support of long vars, like byte*8 (beyond 32 bits).
;  
;  - conditional compile (if an expression of an if-statement contains constants only, irrelevant code is
;     not compiled. Code does not need to be valid (e.g. can contain vars that does not exist), but when
;     we leave it out of C, we get the same effect.
;   
   


