/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : jal.g
 *     -                            On : 2010-04-14 23:42:14
 *     -                for the parser : jalParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser jalParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pjalParser, which is returned from a call to jalParserNew().
 *
 * The methods in pjalParser are  as follows:
 *
 *  - jalParser_program_return      pjalParser->program(pjalParser)
 *  - jalParser_statement_return      pjalParser->statement(pjalParser)
 *  - jalParser_asm_stmt_return      pjalParser->asm_stmt(pjalParser)
 *  - jalParser_cexpr_return      pjalParser->cexpr(pjalParser)
 *  - jalParser_cexpr_list_return      pjalParser->cexpr_list(pjalParser)
 *  - jalParser_for_stmt_return      pjalParser->for_stmt(pjalParser)
 *  - jalParser_forever_stmt_return      pjalParser->forever_stmt(pjalParser)
 *  - jalParser_while_stmt_return      pjalParser->while_stmt(pjalParser)
 *  - jalParser_repeat_stmt_return      pjalParser->repeat_stmt(pjalParser)
 *  - jalParser_if_stmt_return      pjalParser->if_stmt(pjalParser)
 *  - jalParser_case_stmt_return      pjalParser->case_stmt(pjalParser)
 *  - jalParser_block_stmt_return      pjalParser->block_stmt(pjalParser)
 *  - jalParser_proc_params_return      pjalParser->proc_params(pjalParser)
 *  - jalParser_proc_parm_return      pjalParser->proc_parm(pjalParser)
 *  - jalParser_proc_def_return      pjalParser->proc_def(pjalParser)
 *  - jalParser_func_def_return      pjalParser->func_def(pjalParser)
 *  - jalParser_pseudo_proc_def_return      pjalParser->pseudo_proc_def(pjalParser)
 *  - jalParser_pseudo_func_def_return      pjalParser->pseudo_func_def(pjalParser)
 *  - jalParser_alias_def_return      pjalParser->alias_def(pjalParser)
 *  - jalParser_const_def_return      pjalParser->const_def(pjalParser)
 *  - jalParser_var_def_return      pjalParser->var_def(pjalParser)
 *  - jalParser_var_with_init_return      pjalParser->var_with_init(pjalParser)
 *  - jalParser_var_decl2_return      pjalParser->var_decl2(pjalParser)
 *  - jalParser_vtype_return      pjalParser->vtype(pjalParser)
 *  - jalParser_at_decl_return      pjalParser->at_decl(pjalParser)
 *  - jalParser_is_decl_return      pjalParser->is_decl(pjalParser)
 *  - jalParser_bitloc_return      pjalParser->bitloc(pjalParser)
 *  - jalParser_proc_func_call_return      pjalParser->proc_func_call(pjalParser)
 *  - jalParser_var_init_return      pjalParser->var_init(pjalParser)
 *  - jalParser_type_return      pjalParser->type(pjalParser)
 *  - jalParser_pragma_return      pjalParser->pragma(pjalParser)
 *  - jalParser_pragma_target_return      pjalParser->pragma_target(pjalParser)
 *  - jalParser_pragma_fusedef_return      pjalParser->pragma_fusedef(pjalParser)
 *  - jalParser_expr_return      pjalParser->expr(pjalParser)
 *  - jalParser_or_expr_return      pjalParser->or_expr(pjalParser)
 *  - jalParser_xor_expr_return      pjalParser->xor_expr(pjalParser)
 *  - jalParser_and_expr_return      pjalParser->and_expr(pjalParser)
 *  - jalParser_qualitly_expr_return      pjalParser->qualitly_expr(pjalParser)
 *  - jalParser_relational_expr_return      pjalParser->relational_expr(pjalParser)
 *  - jalParser_arith_expr_return      pjalParser->arith_expr(pjalParser)
 *  - jalParser_term_return      pjalParser->term(pjalParser)
 *  - jalParser_pling_return      pjalParser->pling(pjalParser)
 *  - jalParser_factor_return      pjalParser->factor(pjalParser)
 *  - jalParser_atom_return      pjalParser->atom(pjalParser)
 *  - jalParser_constant_return      pjalParser->constant(pjalParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_jalParser_H
#define _jalParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct jalParser_Ctx_struct jalParser, * pjalParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct jalParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_program_return;

typedef struct jalParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_statement_return;

typedef struct jalParser_asm_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_asm_stmt_return;

typedef struct jalParser_cexpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_cexpr_return;

typedef struct jalParser_cexpr_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_cexpr_list_return;

typedef struct jalParser_for_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_for_stmt_return;

typedef struct jalParser_forever_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_forever_stmt_return;

typedef struct jalParser_while_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_while_stmt_return;

typedef struct jalParser_repeat_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_repeat_stmt_return;

typedef struct jalParser_if_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_if_stmt_return;

typedef struct jalParser_case_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_case_stmt_return;

typedef struct jalParser_block_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_block_stmt_return;

typedef struct jalParser_proc_params_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_proc_params_return;

typedef struct jalParser_proc_parm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_proc_parm_return;

typedef struct jalParser_proc_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_proc_def_return;

typedef struct jalParser_func_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_func_def_return;

typedef struct jalParser_pseudo_proc_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_pseudo_proc_def_return;

typedef struct jalParser_pseudo_func_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_pseudo_func_def_return;

typedef struct jalParser_alias_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_alias_def_return;

typedef struct jalParser_const_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_const_def_return;

typedef struct jalParser_var_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_var_def_return;

typedef struct jalParser_var_with_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_var_with_init_return;

typedef struct jalParser_var_decl2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_var_decl2_return;

typedef struct jalParser_vtype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_vtype_return;

typedef struct jalParser_at_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_at_decl_return;

typedef struct jalParser_is_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_is_decl_return;

typedef struct jalParser_bitloc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_bitloc_return;

typedef struct jalParser_proc_func_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_proc_func_call_return;

typedef struct jalParser_var_init_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_var_init_return;

typedef struct jalParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_type_return;

typedef struct jalParser_pragma_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_pragma_return;

typedef struct jalParser_pragma_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_pragma_target_return;

typedef struct jalParser_pragma_fusedef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_pragma_fusedef_return;

typedef struct jalParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_expr_return;

typedef struct jalParser_or_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_or_expr_return;

typedef struct jalParser_xor_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_xor_expr_return;

typedef struct jalParser_and_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_and_expr_return;

typedef struct jalParser_qualitly_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_qualitly_expr_return;

typedef struct jalParser_relational_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_relational_expr_return;

typedef struct jalParser_arith_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_arith_expr_return;

typedef struct jalParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_term_return;

typedef struct jalParser_pling_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_pling_return;

typedef struct jalParser_factor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_factor_return;

typedef struct jalParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_atom_return;

typedef struct jalParser_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    jalParser_constant_return;



/** Context tracking structure for jalParser
 */
struct jalParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     jalParser_program_return (*program)	(struct jalParser_Ctx_struct * ctx);
     jalParser_statement_return (*statement)	(struct jalParser_Ctx_struct * ctx);
     jalParser_asm_stmt_return (*asm_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_cexpr_return (*cexpr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_cexpr_list_return (*cexpr_list)	(struct jalParser_Ctx_struct * ctx);
     jalParser_for_stmt_return (*for_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_forever_stmt_return (*forever_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_while_stmt_return (*while_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_repeat_stmt_return (*repeat_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_if_stmt_return (*if_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_case_stmt_return (*case_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_block_stmt_return (*block_stmt)	(struct jalParser_Ctx_struct * ctx);
     jalParser_proc_params_return (*proc_params)	(struct jalParser_Ctx_struct * ctx);
     jalParser_proc_parm_return (*proc_parm)	(struct jalParser_Ctx_struct * ctx);
     jalParser_proc_def_return (*proc_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_func_def_return (*func_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_pseudo_proc_def_return (*pseudo_proc_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_pseudo_func_def_return (*pseudo_func_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_alias_def_return (*alias_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_const_def_return (*const_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_var_def_return (*var_def)	(struct jalParser_Ctx_struct * ctx);
     jalParser_var_with_init_return (*var_with_init)	(struct jalParser_Ctx_struct * ctx);
     jalParser_var_decl2_return (*var_decl2)	(struct jalParser_Ctx_struct * ctx);
     jalParser_vtype_return (*vtype)	(struct jalParser_Ctx_struct * ctx);
     jalParser_at_decl_return (*at_decl)	(struct jalParser_Ctx_struct * ctx);
     jalParser_is_decl_return (*is_decl)	(struct jalParser_Ctx_struct * ctx);
     jalParser_bitloc_return (*bitloc)	(struct jalParser_Ctx_struct * ctx);
     jalParser_proc_func_call_return (*proc_func_call)	(struct jalParser_Ctx_struct * ctx);
     jalParser_var_init_return (*var_init)	(struct jalParser_Ctx_struct * ctx);
     jalParser_type_return (*type)	(struct jalParser_Ctx_struct * ctx);
     jalParser_pragma_return (*pragma)	(struct jalParser_Ctx_struct * ctx);
     jalParser_pragma_target_return (*pragma_target)	(struct jalParser_Ctx_struct * ctx);
     jalParser_pragma_fusedef_return (*pragma_fusedef)	(struct jalParser_Ctx_struct * ctx);
     jalParser_expr_return (*expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_or_expr_return (*or_expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_xor_expr_return (*xor_expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_and_expr_return (*and_expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_qualitly_expr_return (*qualitly_expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_relational_expr_return (*relational_expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_arith_expr_return (*arith_expr)	(struct jalParser_Ctx_struct * ctx);
     jalParser_term_return (*term)	(struct jalParser_Ctx_struct * ctx);
     jalParser_pling_return (*pling)	(struct jalParser_Ctx_struct * ctx);
     jalParser_factor_return (*factor)	(struct jalParser_Ctx_struct * ctx);
     jalParser_atom_return (*atom)	(struct jalParser_Ctx_struct * ctx);
     jalParser_constant_return (*constant)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred19_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred20_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred30_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred65_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred67_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred78_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred80_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred83_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred84_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred85_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred88_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred120_jal)	(struct jalParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred132_jal)	(struct jalParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct jalParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pjalParser jalParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pjalParser jalParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define T__25      25
#define T__24      24
#define T__23      23
#define LETTER      7
#define T__22      22
#define T__21      21
#define T__20      20
#define EOF      -1
#define T__93      93
#define T__19      19
#define T__94      94
#define T__91      91
#define T__92      92
#define STRING_LITERAL      5
#define T__90      90
#define T__18      18
#define T__17      17
#define BIN_LITERAL      8
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      16
#define CHARACTER_LITERAL      6
#define OCTAL_ESCAPE      14
#define T__85      85
#define T__84      84
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define WS      15
#define T__71      71
#define T__72      72
#define T__70      70
#define T__76      76
#define T__75      75
#define T__74      74
#define DECIMAL_LITERAL      11
#define T__73      73
#define T__79      79
#define T__78      78
#define T__77      77
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define T__61      61
#define T__60      60
#define T__55      55
#define ESCAPE_SEQUENCE      13
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define IDENTIFIER      4
#define T__59      59
#define HEX_LITERAL      9
#define T__50      50
#define T__42      42
#define T__43      43
#define T__40      40
#define T__41      41
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define OCTAL_LITERAL      10
#define HEX_DIGIT      12
#define T__100      100
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for jalParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
