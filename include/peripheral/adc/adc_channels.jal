-- Title: ADC channel configuration.
-- Author: SÃ©bastien Lelong, Copyright (C) 2009, all rights reserved. 
-- Adapted-by: 
-- Compiler: >=2.4k
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library acts as a wrapper. When included, it'll define ways to
-- configure the number ADC channels. There are 3 different cases:
--    1. the number of channels is specified setting/clearing PCFG bits
--       => a combination of PCFG bits selects a given number of ADC channels.
--          It is not possible to independently select which pins as ADC pins.
--          If available, Vref+ and Vref- are part of these combinations.
--          PCFG bits are in ADCON1, as ADCON1_PCFG
--    2. the number of channels is specified clearing PCFG bits (case only found in 18F, I think)
--       => pins can be configured independently (you can decide which pin will act as
--          an analog pin, and define your own combination
--          Vref+/Vref- are configured using VCFG bits.
--          PCFG bits are in ADCON0 and ADCON1, and are numbered (eg. ADCON_PCFG5)
--    3. the number of channels is set using ANS bits (18F and non-18F)
--       => same as case 2., channels can be configured independently
--          Vref+/Vref- are configured using VCFG bits.
--
--
-- Notes: this file is generated, don't modify it directly...
--


include adc_pindef


if target_chip == PIC_18F6585 | target_chip == PIC_18F6680 | target_chip == PIC_18F8585 | target_chip == PIC_18F8680 | target_chip == PIC_16F870 | target_chip == PIC_16F871 | target_chip == PIC_16F73 | target_chip == PIC_16F74 | target_chip == PIC_16F76 | target_chip == PIC_16F77 | target_chip == PIC_16F737 | target_chip == PIC_16F747 | target_chip == PIC_16F767 | target_chip == PIC_16F777 | target_chip == PIC_16F72 | target_chip == PIC_16F873A | target_chip == PIC_16F874A | target_chip == PIC_16F876A | target_chip == PIC_16F877A | target_chip == PIC_16F716 | target_chip == PIC_18F2439 | target_chip == PIC_18F2539 | target_chip == PIC_18F4439 | target_chip == PIC_18F4539 | target_chip == PIC_16F873 | target_chip == PIC_16F874 | target_chip == PIC_16F876 | target_chip == PIC_16F877 | target_chip == PIC_16F872 | target_chip == PIC_16F818 | target_chip == PIC_16F819 then

   -- Datasheet: 30491C
   if target_chip == PIC_18F6585 | target_chip == PIC_18F6680 | target_chip == PIC_18F8585 | target_chip == PIC_18F8680 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_9ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_8ANA_0REF = 0b_0111
         const bit*4 ADC_PCFG_16ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_14ANA_0REF = 0b_0001
         const bit*4 ADC_PCFG_12ANA_0REF = 0b_0011
         const bit*4 ADC_PCFG_13ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_10ANA_0REF = 0b_0101
         const bit*4 ADC_PCFG_11ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_0REF = 0b_1101
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_1010
         const bit*4 ADC_PCFG_4ANA_0REF = 0b_1011
         const bit*4 ADC_PCFG_6ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_7ANA_0REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [48] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0001, 0b_0, 0b_0, 0b_0000, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 2 then
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN2_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN2_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 6 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 7 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 9 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 10 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 11 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 12 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 13 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN12_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 14 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN13_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN12_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN6_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 16 then
            adc_pin_AN2_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN13_direction = input
            adc_pin_AN14_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN8_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN12_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN15_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN6_direction = input
         end if

   end if


   -- Datasheet: 30569B
   if target_chip == PIC_16F870 | target_chip == PIC_16F871 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_8ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_7ANA_1REF = 0b_0001
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_2ANA_1REF = 0b_0101
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_1ANA_2REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_2REF = 0b_1101
         const bit*4 ADC_PCFG_5ANA_1REF = 0b_1010
         const bit*4 ADC_PCFG_4ANA_2REF = 0b_1011
         const bit*4 ADC_PCFG_6ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_6ANA_2REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [21] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 6 then
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN7_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 30325B
   if target_chip == PIC_16F73 | target_chip == PIC_16F74 | target_chip == PIC_16F76 | target_chip == PIC_16F77 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*3 ADC_PCFG_5ANA_0REF = 0b_010
         const bit*3 ADC_PCFG_4ANA_1REF = 0b_011
         const bit*3 ADC_PCFG_7ANA_1REF = 0b_001
         const bit*3 ADC_PCFG_8ANA_0REF = 0b_000
         const bit*3 ADC_PCFG_3ANA_0REF = 0b_100
         const bit*3 ADC_PCFG_2ANA_1REF = 0b_101
         const bit*3 ADC_PCFG_0ANA_0REF = 0b_110

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [12] = {0b_110, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_010, 0b_011, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN7_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
         end if

   end if


   -- Datasheet: 30498C
   if target_chip == PIC_16F737 | target_chip == PIC_16F747 | target_chip == PIC_16F767 | target_chip == PIC_16F777 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_9ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_8ANA_0REF = 0b_0111
         const bit*4 ADC_PCFG_14ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_14ANA_0REF = 0b_0001
         const bit*4 ADC_PCFG_12ANA_0REF = 0b_0011
         const bit*4 ADC_PCFG_13ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_10ANA_0REF = 0b_0101
         const bit*4 ADC_PCFG_11ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_0REF = 0b_1101
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_1010
         const bit*4 ADC_PCFG_4ANA_0REF = 0b_1011
         const bit*4 ADC_PCFG_6ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_7ANA_0REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [45] = {0b_1111, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0, 0b_0, 0b_1100, 0b_0, 0b_0, 0b_1011, 0b_0, 0b_0, 0b_1010, 0b_0, 0b_0, 0b_1001, 0b_0, 0b_0, 0b_1000, 0b_0, 0b_0, 0b_0111, 0b_0, 0b_0, 0b_0110, 0b_0, 0b_0, 0b_0101, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_0, 0b_0011, 0b_0, 0b_0, 0b_0010, 0b_0, 0b_0, 0b_0001, 0b_0, 0b_0}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 2 then
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN2_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN2_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 6 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 7 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 9 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN8_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 10 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN8_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 11 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN8_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 12 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN8_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 13 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN12_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN8_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 14 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN10_direction = input
            adc_pin_AN11_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN13_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN12_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN9_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN8_direction = input
         end if

   end if


   -- Datasheet: 39597C
   if target_chip == PIC_16F72 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*3 ADC_PCFG_4ANA_1REF = 0b_010
         const bit*3 ADC_PCFG_4ANA_1REF = 0b_011
         const bit*3 ADC_PCFG_4ANA_1REF = 0b_001
         const bit*3 ADC_PCFG_5ANA_0REF = 0b_000
         const bit*3 ADC_PCFG_0ANA_0REF = 0b_111
         const bit*3 ADC_PCFG_3ANA_0REF = 0b_100
         const bit*3 ADC_PCFG_2ANA_1REF = 0b_101

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [9] = {0b_111, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
         end if

   end if


   -- Datasheet: 39582B
   if target_chip == PIC_16F873A | target_chip == PIC_16F874A | target_chip == PIC_16F876A | target_chip == PIC_16F877A then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_8ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_7ANA_1REF = 0b_0001
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_3ANA_1REF = 0b_0101
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_1ANA_2REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_2REF = 0b_1101
         const bit*4 ADC_PCFG_5ANA_1REF = 0b_1010
         const bit*4 ADC_PCFG_4ANA_2REF = 0b_1011
         const bit*4 ADC_PCFG_6ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_6ANA_2REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [21] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0100, 0b_0, 0b_1111, 0b_0, 0b_0101, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 6 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 41206B
   if target_chip == PIC_16F716 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*3 ADC_PCFG_3ANA_1REF = 0b_001
         const bit*3 ADC_PCFG_4ANA_0REF = 0b_000
         const bit*3 ADC_PCFG_3ANA_0REF = 0b_100
         const bit*3 ADC_PCFG_2ANA_1REF = 0b_101
         const bit*3 ADC_PCFG_0ANA_0REF = 0b_110

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [9] = {0b_110, 0b_0, 0b_0, 0b_100, 0b_101, 0b_0, 0b_000, 0b_001, 0b_0}
         var bit*3 no_vref = 0
         var bit*3 one_vref = 0
         var bit*3 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
         end if

   end if


   -- Datasheet: 30292C
   if target_chip == PIC_16F873 | target_chip == PIC_16F874 | target_chip == PIC_16F876 | target_chip == PIC_16F877 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_8ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_7ANA_1REF = 0b_0001
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_2ANA_1REF = 0b_0101
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_1ANA_2REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_2REF = 0b_1101
         const bit*4 ADC_PCFG_5ANA_1REF = 0b_1010
         const bit*4 ADC_PCFG_4ANA_2REF = 0b_1011
         const bit*4 ADC_PCFG_6ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_6ANA_2REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [21] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 6 then
            adc_pin_AN5_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN7_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 30485A
   if target_chip == PIC_18F2439 | target_chip == PIC_18F2539 | target_chip == PIC_18F4439 | target_chip == PIC_18F4539 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_8ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_7ANA_1REF = 0b_0001
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_2ANA_1REF = 0b_0101
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_1ANA_2REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_2REF = 0b_1101
         const bit*4 ADC_PCFG_5ANA_1REF = 0b_1010
         const bit*4 ADC_PCFG_4ANA_2REF = 0b_1011
         const bit*4 ADC_PCFG_6ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_6ANA_2REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [18] = {0b_0110, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1110, 0b_0, 0b_0, 0b_1101, 0b_0010, 0b_0011, 0b_1100, 0b_1001, 0b_1010, 0b_1011, 0b_0000, 0b_0001, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 6 then
            adc_pin_AN2_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN3_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 8 then
            adc_pin_AN4_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN7_direction = input
            adc_pin_AN6_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN5_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 30221C
   if target_chip == PIC_16F872 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0001
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_2ANA_1REF = 0b_0101
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_1ANA_2REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_2REF = 0b_1101
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_1010
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [15] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN4_direction = input
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         end if

   end if


   -- Datasheet: 39598E
   if target_chip == PIC_16F818 | target_chip == PIC_16F819 then

         -- These are some constants similar to what can be found in MCC18 adc.h header file
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0000
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0001
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_0011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_0010
         const bit*4 ADC_PCFG_0ANA_0REF = 0b_0110
         const bit*4 ADC_PCFG_2ANA_1REF = 0b_0101
         const bit*4 ADC_PCFG_3ANA_0REF = 0b_0100
         const bit*4 ADC_PCFG_1ANA_2REF = 0b_1111
         const bit*4 ADC_PCFG_1ANA_0REF = 0b_1110
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1100
         const bit*4 ADC_PCFG_2ANA_2REF = 0b_1101
         const bit*4 ADC_PCFG_4ANA_1REF = 0b_1010
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1011
         const bit*4 ADC_PCFG_5ANA_0REF = 0b_1001
         const bit*4 ADC_PCFG_3ANA_2REF = 0b_1000

         -- This array stores PCFG config bits, 3 by 3, for each number of 
         -- ADC channels, from 1 to the max:
         -- For each 3-tuple: (no vref, 1 vref, 2 vref)
         const byte ADC_PCFG_MAP [15] = {0b_0110, 0b_0, 0b_0, 0b_1110, 0b_0, 0b_0, 0b_0100, 0b_0101, 0b_1111, 0b_0, 0b_0, 0b_1101, 0b_1001, 0b_1010, 0b_1000}
         var bit*4 no_vref = 0
         var bit*4 one_vref = 0
         var bit*4 two_vref = 0

         if (ADC_NCHANNEL + ADC_NVREF) == 0 then
         elsif (ADC_NCHANNEL + ADC_NVREF) == 1 then
            adc_pin_AN0_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 3 then
            adc_pin_AN0_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 4 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         elsif (ADC_NCHANNEL + ADC_NVREF) == 5 then
            adc_pin_AN0_direction = input
            adc_pin_AN1_direction = input
            adc_pin_AN4_direction = input
            adc_pin_AN2_direction = input
            adc_pin_AN3_direction = input
         end if

   end if


   -- Retrieve config bits according to selected number of ADC channels
   const byte idx = (ADC_NCHANNEL - 1) * 3
   if ADC_NVREF == 0 then
      no_vref = ADC_PCFG_MAP[idx]
      ADCON1_PCFG = no_vref
   elsif ADC_NVREF == 1 then
      one_vref = ADC_PCFG_MAP[idx + 1]
      ADCON1_PCFG = one_vref
   elsif ADC_NVREF == 2 then
      two_vref = ADC_PCFG_MAP[idx + 2]
      ADCON1_PCFG = two_vref
   else
      _error "You can't have more than 2 VRef..."
   end if




elsif target_cpu == PIC_16 & (defined(ANCON0_PCFG0) | defined(ANCON0_PCFG1) | defined(ANCON0_PCFG2) | defined(ANCON0_PCFG3) | defined(ANCON0_PCFG4) | defined(ANCON0_PCFG5) | defined(ANCON0_PCFG6) | defined(ANCON0_PCFG7) | defined(ANCON1_PCFG10) | defined(ANCON1_PCFG11) | defined(ANCON1_PCFG12) | defined(ANCON1_PCFG8) | defined(ANCON1_PCFG9)) then

   -- Selecting the number of ADC channels is done using PCFG bits
   -- User can optionally specify ADC channels number
   if defined(ADC_NCHANNEL) == true then
      if ADC_NCHANNEL > ADC_NTOTAL_CHANNEL then
         _error "More ADC channels than available, adjust ADC_NCHANNEL"
      end if
      -- Max 13 ADC channels
      -- At least 1 channel
      if ADC_NCHANNEL > 0 then
         ANCON0_PCFG0 = false
         adc_pin_AN0_direction = input
      end if
      -- At least 2 channels
      if ADC_NCHANNEL > 1 then
         ANCON0_PCFG1 = false
         adc_pin_AN1_direction = input
      end if
      -- At least 3 channels
      if ADC_NCHANNEL > 2 then
          ANCON0_PCFG2 = false
         adc_pin_AN2_direction = input
      end if
      -- At least 4 channels
      if ADC_NCHANNEL > 3 then
         ANCON0_PCFG3 = false
         adc_pin_AN3_direction = input
      end if
      -- At least 5 channels
      if ADC_NCHANNEL > 4 then
         ANCON0_PCFG4 = false
         adc_pin_AN4_direction = input
      end if
      -- At least 6 channels
      if ADC_NCHANNEL > 5 then
         ANCON0_PCFG5 = false
         adc_pin_AN5_direction = input
      end if
      -- At least 7 channels
      if ADC_NCHANNEL > 6 then
         ANCON0_PCFG6 = false
         adc_pin_AN6_direction = input
      end if
      -- At least 8 channels
      if ADC_NCHANNEL > 7 then
         ANCON0_PCFG7 = false
         adc_pin_AN7_direction = input
      end if
      -- At least 9 channels
      if ADC_NCHANNEL > 8 then
         ANCON1_PCFG8 = false
         adc_pin_AN8_direction = input
      end if
      -- At least 10 channels
      if ADC_NCHANNEL > 9 then
         ANCON1_PCFG9 = false
         adc_pin_AN9_direction = input
      end if
      -- At least 11 channels
      if ADC_NCHANNEL > 10 then
         ANCON1_PCFG10 = false
         adc_pin_AN10_direction = input
      end if
      -- At least 12 channels
      if ADC_NCHANNEL > 11 then
         ANCON1_PCFG11 = false
         adc_pin_AN11_direction = input
      end if
      -- At least 13 channels
      if ADC_NCHANNEL > 12 then
         ANCON1_PCFG12 = false
         adc_pin_AN12_direction = input
      end if


   -- Or specify manually which pin should act as ADC
   -- Provide procedure for this (eg. for pin AN7 to be analog, set_analog_pin(7))
   else

      -- Configure a pin to act as an analog pin.
      -- an_pin_num references the 'x' in ANx notation.
      -- Say you want to activate pin AN7, which is pin #12, also named RA4 in digital mode:
      --     - set_analog_pin(7) will set this pin as analog
      --     - set_analog_pin(12) won't set this pin as analog, but the equivalent
      --       one named AN12, if any
      --     - set_analog_pin(4) will do the same for AN4
      procedure set_analog_pin(byte in an_pin_num) is
         -- There's a mininum of 5 channels, so ANCON0_PCFG0, ANCON0_PCFG1,
         -- ANCON0_PCFG2, ANCON0_PCFG3 and ANCON0_PCFG4 are always defined
         if an_pin_num == 0 then
            ANCON0_PCFG0 = false
            adc_pin_AN0_direction = input
         end if
         if an_pin_num == 1 then
            ANCON0_PCFG1 = false
            adc_pin_AN1_direction = input
         end if
         if an_pin_num == 2 then
            ANCON0_PCFG2 = false
            adc_pin_AN2_direction = input
         end if
         if an_pin_num == 3 then
            ANCON0_PCFG3 = false
            adc_pin_AN3_direction = input
         end if
         if an_pin_num == 4 then
            ANCON0_PCFG4 = false
            adc_pin_AN4_direction = input
         end if

         -- Sometimes, there are gaps in PCFG bits
         -- 18lf24j50 has PCFG0 to PCFG12 bits, but without PCFG5, PCFG6 and PCFG7
         -- (this is because these bits only exist in the 44-pins version, according to DS)
         -- This shouldn't be a problem because numbering between PCFG bits and
         -- analog pins is respected: there's no AN5, AN6 and AN7 as well)

         -- PCFG5, PCFG6 and PCFG7 are always found together
         if defined(ANCON0_PCFG5) == true & defined(ANCON0_PCFG6) == true & defined(ANCON0_PCFG7) == true then
            if an_pin_num == 5 then
               ANCON0_PCFG5 = false
               adc_pin_AN5_direction = input
            end if
            if an_pin_num == 6 then
               ANCON0_PCFG6 = false
               adc_pin_AN6_direction = input
            end if
            if an_pin_num == 7 then
               ANCON0_PCFG7 = false
               adc_pin_AN7_direction = input
            end if
         end if

         -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
         if defined(ANCON1_PCFG8) == true & defined(ANCON1_PCFG9) == true & defined(ANCON1_PCFG10) == true & defined(ANCON1_PCFG11) == true & defined(ANCON1_PCFG12) == true then
            if an_pin_num == 8 then
               ANCON1_PCFG8 = false
               adc_pin_AN8_direction = input
            end if
            if an_pin_num == 9 then
               ANCON1_PCFG9 = false
               adc_pin_AN9_direction = input
            end if
            if an_pin_num == 10 then
               ANCON1_PCFG10 = false
               adc_pin_AN10_direction = input
            end if
            if an_pin_num == 11 then
               ANCON1_PCFG11 = false
               adc_pin_AN11_direction = input
            end if
            if an_pin_num == 12 then
               ANCON1_PCFG12 = false
               adc_pin_AN12_direction = input
            end if
         end if
      end procedure

      -- Configure a pin to act as an digital pin.
      -- Because setting a pin to act as digital makes only sens for
      -- pins which can also be configured as analog,
      -- an_pin_num references the 'x' in ANx notation.
      -- Say you want to deactivate pin AN7, which is pin #12, also named RA4 in digital mode:
      --     - set_digital_pin(7) will set this pin as digital
      --     - set_analog_pin(12) won't set this pin as digital, but the equivalent
      --       one named AN12, if any
      --     - set_analog_pin(4) will do the same for AN4
      -- 
      -- Note: the pin direction is not modified
      procedure set_digital_pin(byte in an_pin_num) is
         if an_pin_num == 0 then
            ANCON0_PCFG0 = true
            adc_pin_AN0_direction = input
         end if
         if an_pin_num == 1 then
            ANCON0_PCFG1 = true
            adc_pin_AN1_direction = input
         end if
         if an_pin_num == 2 then
            ANCON0_PCFG2 = true
            adc_pin_AN2_direction = input
         end if
         if an_pin_num == 3 then
            ANCON0_PCFG3 = true
            adc_pin_AN3_direction = input
         end if
         if an_pin_num == 4 then
            ANCON0_PCFG4 = true
            adc_pin_AN4_direction = input
         end if

         -- PCFG5, PCFG6 and PCFG7 are always found together
         if defined(ANCON0_PCFG5) == true & defined(ANCON0_PCFG6) == true & defined(ANCON0_PCFG7) == true then
            if an_pin_num == 5 then
               ANCON0_PCFG5 = true
               adc_pin_AN5_direction = input
            end if
            if an_pin_num == 6 then
               ANCON0_PCFG6 = true
               adc_pin_AN6_direction = input
            end if
            if an_pin_num == 7 then
               ANCON0_PCFG7 = true
               adc_pin_AN7_direction = input
            end if
         end if

         -- PCFG8, PCFG9, PCFG10, PCFG11 and PCFG12 are always found together
         if defined(ANCON1_PCFG8) == true & defined(ANCON1_PCFG9) == true & defined(ANCON1_PCFG10) == true & defined(ANCON1_PCFG11) == true & defined(ANCON1_PCFG12) == true then
            if an_pin_num == 8 then
               ANCON1_PCFG8 = true
               adc_pin_AN8_direction = input
            end if
            if an_pin_num == 9 then
               ANCON1_PCFG9 = true
               adc_pin_AN9_direction = input
            end if
            if an_pin_num == 10 then
               ANCON1_PCFG10 = true
               adc_pin_AN10_direction = input
            end if
            if an_pin_num == 11 then
               ANCON1_PCFG11 = true
               adc_pin_AN11_direction = input
            end if
            if an_pin_num == 12 then
               ANCON1_PCFG12 = true
               adc_pin_AN12_direction = input
            end if
         end if
      end procedure
   end if



else
   -- Selecting the number of ADC channels is done using ANS bits
   asm nop


end if

