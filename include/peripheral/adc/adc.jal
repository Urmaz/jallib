-- Title: ADC hardware, built-in PIC ADC module
-- Author: Stef Mientki, Copyright (c) 2002..2008, all rights reserved.
-- Adapted-by: Sebastien Lelong.
-- Compiler: >=2.4k
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: library to handle ADC peripheral.
--   - support both low and high resolution mode
--   - support a large number of PICs (see adc_pindef.jal for more):
--       - ADC pin configuration
--       - channel selection
--       - clock selection
--   - support Vref
-- 
-- Notes: this is a heavy refactoring/rewriting of original library from Stef Mientki.
-- The main changes are about ADC configuration, which are essentially handled in 
-- adc_channels.jal, adc_pindef.jal and adc_clock.jal
-- --
-- The original library can be found:
--    - Stef's: http://mientki.ruhosting.nl/pic-tools/jal/libs2/adc_hardware.jal
--    - jallib issue tracker: http://code.google.com/p/jallib/issues/detail?id=7
--
-- -- -----------------------------------------------------------------------------

include delay

-- including this will configure many (many) things
-- specific to the selected chip
include adc_channels

-- include clock selection bits specific procedures
include adc_clock


-- By default Rsource is max
if defined(ADC_RSOURCE) == false then
   const word ADC_RSOURCE = 10_000
end if

-- standard value: 25°C
if defined(ADC_TEMP) == false then
   const byte ADC_TEMP = 25
end if

-- sanity check
if ADC_HIGH_RESOLUTION & ! defined(ADRESH) then
   _warn "This PIC does not seem to handle 10-bits ADC"
end if

-- local variables

var volatile byte _adcon0_shadow = 0
var byte adc_conversion_delay


-- Does an AD conversion with low resolution (8 bit) on the selected channel
procedure _adc_read_low_res(byte in adc_chan, byte out adc_byte) is
   
   if target_chip == PIC_12F675 then
      ADCON0 = _adcon0_shadow | ((adc_chan & 0x03) << 2) -- setup multiplexer
   else 
      ADCON0 = _adcon0_shadow | ((adc_chan & 0x07) << 3) -- setup multiplexer
   end if
   delay_10us(adc_conversion_delay)  -- wait acquisition time
   ADCON0_GO = true                          -- start conversion
   while ADCON0_GO loop end loop             -- wait till conversion finished
   -- 2 cases:
   --   - PIC has 10-bits ADC: since low resoltion if left
   --     justified, need to read ADRESH
   --   - PIC has only a 8-bits ADC: don't bother consider
   --     justification, there's only one ADC register
   if defined(ADRESH) == true then
      adc_byte = ADRESH                  -- read high byte 
      --   (low resolution is left justified !!
   else
      adc_byte = ADRES
   end if
   if target_clock <= (5_000_000 / 16)  then                            
      delay_10us(1)                    -- to satisfy 2*Tad for next conversion
   end if
   -- Seb: but what if target_clock is, say 8MHz ? There's no 2*Tad delay. Is it because
   -- was "too" generous when computing _adc_acquisition_time ?
end procedure


-- Does an AD conversion on the selected channel
-- returns the result as a 10-bits word
-- It doesn't matter if ADC is set to low or high resolution
function adc_read(byte in adc_chan) return word is
   var word ad_value
   var byte ax[2] at ad_value
   
   if ADC_HIGH_RESOLUTION then
      _adc_read_low_res (adc_chan,ax[1])   -- do conversion and get high byte  
      ax[0] = ADRESL                       -- get low byte
   else
      _adc_read_low_res (adc_chan,ax[0])   -- do conversion and get low byte  
      ax[1] = 0                            -- clear high byte
      -- shift 2 highest order bits form low byte to high byte,
      -- to get a 10-bit result
      ad_value = ad_value <<  2
   end if
   
   return ad_value
end function


-- Does an AD conversion on the selected channel
-- returns the 10-bit result as 2 byte parameters
-- It doesn't matter if ADC is set to low or high resolution
procedure adc_read_bytes(byte in adc_chan, byte out adc_hbyte, byte out adc_lbyte) is
   var word ad_value
   var byte ax[2] at ad_value
   ad_value = adc_read (adc_chan)
   adc_hbyte = ax[1]
   adc_lbyte = ax[0]
end procedure


-- Returns Low Resolution ADC-value as the RESULT
-- It doesn't matter if ADC is set to low or high resolution
function adc_read_low_res(byte in adc_chan) return byte is
   var byte adc_value
   var byte adc_hbyte
   if ! ADC_HIGH_RESOLUTION then
      _adc_read_low_res(adc_chan,adc_value)
   else
      _adc_read_low_res(adc_chan,adc_hbyte)
      adc_value = ADRESL
      -- shift the 2 highest order bits form high byte to low byte
      asm  rrf   adc_hbyte,f
      asm  rrf   adc_value,f
      asm  rrf   adc_hbyte,f
      asm  rrf   adc_value,f
   end if
   return adc_value
end function


procedure _adc_init_justify() is
   -- Seb: justification is done through ADFM bits
   -- They can be found in:
   --   - ADCON0_ADFM
   --   - ADCON1_ADFM
   --   - ADCON2_ADFM
   --
   -- When true (1), it's right justified: the 6 MSb of ADRESH are read as '0'
   -- When false (0), it's left justified: the 6 LSb of ADRESL are read as '0'
   -- 
   -- The choice here is kept from Stef's logic:
   --   - if high resolution, right justified, read H + L
   --   - if low  resolution, left  justified, only read H

   -- first normalize ADFM bit
   if defined(ADCON0_ADFM) == true then
	  var volatile bit JALLIB_ADFM is ADCON0_ADFM
   elsif defined(ADCON1_ADFM) == true then
	  var volatile bit JALLIB_ADFM is ADCON1_ADFM
   elsif defined(ADCON2_ADFM) == true then
	  var volatile bit JALLIB_ADFM is ADCON2_ADFM
   else
      _err "Couldn't found ADFM bits, report this error !"
   end if

   if ADC_HIGH_RESOLUTION == true then
	  JALLIB_ADFM = 1
   else
	  JALLIB_ADFM = 0
   end if
   
end procedure


procedure _adc_init_acquisition_delay() is

   -- Seb: holy datasheet says:
   --    Tc = Chold * (Ric + Rss + Rs) * ln(0.0004885)
   -- I don't know Ric and Rss are, but Rs is the impedance for analog sources
   -- For some PICs, this impedance is max. 10K (16f877), for others it's 2.5K (16f88)
   -- Interestingly, 16f88 has 2.5K as max impedance, but the formula is still the same
   -- and uses 10K. Anyway...
   -- Using this 10K as max, Tc = 16.47usecs
   -- 
   -- Stef says he adds 10usecs just in case, and consider a 15usecs delays, and also consider Rs !
   -- Old code: 
   --       -- calculate AD-conversion time in 10 usec units
   --       -- an extra 10 usec is added to ensure the minimum acquistion time
   --       const adc_conversion_delay = (10 + 15 + (adc_hardware_rsource / 1_000  )) / 10
   --       _adc_acquisition_time = adc_conversion_delay
   --
   -- I think there's too much here, right ? 
   --   * either you consider 15usecs + 10usecs as "16.47usecs + some more just in case"
   --   * or you don't consider the max Rs, but the actual specified value and add some "10usecs just in case"
   -- Mmmh... Don't know what to do :)
   -- 
   -- Tacq        = Tamp + Tc + Tcoff
   -- Tc(secs)    = Chold * (Ric + Rss + Rs) * ln(0.0004885)
   -- Tc(usecs)   = (-120 * (1 + 7 + Rs) * -7.63) / 1000
   -- Tc(usecs)   = (915 * (8 + Rs)) / 1000
   -- Tacq(usecs) = 2 + Tc(usecs) + (0.05usecs * T)
   -- So Tc, expressed in usecs is:
   const byte adc_tc = ((915 * (8 + (ADC_RSOURCE/1000))) / 1000) + 1    -- Add 1 so we have value at ceil
   const byte adc_tcoff = ((ADC_TEMP * 5) / 100) + 1    -- Let's be generous... This is very, very approximative...
                                                   -- Even if ADC_TEMP = 0, it should be ok at 25°C to 30°C
                                                   -- It'll give 1usec insteand of 1.25 to 1.5usecs, but since there
                                                   -- (I even wonder if it makes sens to compute this...)
   adc_conversion_delay = 2 + adc_tc + adc_tcoff   -- Tamp seems to be a constant: 2usecs
   -- since we'll use delay_10us, need to divide and adjust
   -- adc_conversion_delay = adc_conversion_delay / 10

end procedure



-- Initializes the PIC AD-converter,
-- by calling the correct routine according to the number of external references
-- Settings are done according to the special ADC constants
-- Sets all the analog pins to input
-- Calculates aquisition time and determines if right or 
-- left justification is optimal
procedure adc_init() is
   -- calculate aquisition delay and optimize justify
   _adc_init_justify()
   _adc_init_clock()
   _adc_init_acquisition_delay()
end procedure


