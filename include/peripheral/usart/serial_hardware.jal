-- Title: USART hardware control
-- Author: Stef Mientki, Copyright (c) 2002..2006, all rights reserved.
-- Adapted-by: Sebastien Lelong, Rob Hamerling
-- Compiler: 2.4o
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: USART hardware control.
-- Routines for sending and receiving through the PIC-usart,
-- both asynchronous and synchronous are supported.
-- Baudrate can simply be set through a human constant,
-- because the baudrate depending registers are calculated by this unit.
-- Baudrate is calculated, starting at the high baudrate flag,
-- which will ensure the highest possible accuracy.
-- .
-- TODO: should this be configurable ?
-- Transmission parameters are 8 databits, 1 stopbit, no parity, no handshake.
--
-- Notes: - Pin selection is automatic: pin_TX and pin_RX.
--        - Pin direction setting is taken care of by this library.
--        - When a PIC has mappable/selectible configurations for pin_TX and pin_RX the
--          device file will probably contain names like pin_TX_RB2 and pin_RX_RB1.
--          In that case the user program must contain aliases declarations like:
--              alias  pin_TX            is  pin_TX_RB2
--              alias  pin_RX            is  pin_RX_RB1
--              alias  pin_TX_direction  is  pin_TX_RB2_direction
--              alias  pin_RX_direction  is  pin_RX_RB1_direction
--

include usart_common


-- -----------------------------------------------------------------------
-- Title:     Initialize the serial port, prepare baudrate registers.
-- Arguments: (none)
-- Returns:   (nothing)
-- -----------------------------------------------------------------------
procedure serial_hw_init() is

   -- Calculate and Load baudrate generator
   _calculate_and_set_baudrate()

   -- disable USART interrupts
   PIE1_RCIE = FALSE
   PIE1_TXIE = FALSE

   pin_RX_direction = INPUT                        -- make receive pin input
   pin_TX_direction = INPUT                        -- make transmit pin input!
                                                   -- (required by some older ..
                                                   --  .. PICs like 16f628)

   -- Enable transmitter : TXSTA_TXEN=1 (preserve TXSTA_BRGH)
   TXSTA_TXEN = TRUE                               -- (makes transmit pin output)

   -- Enable serial port : RCSTA_SPEN=1
   -- Enable receiving   : RCSTA_CREN=1
   RCSTA = 0x90                                    -- SYNC bit 0: async mode
                                                   -- TX9 bit 0: 8 databits
end procedure


-- -----------------------------------------------------------------------
-- Title:     Disable USART
-- Arguments: (none)
-- Returns:   (nothing)
-- Notes:     Allows pins to be used (temporary) for other purposes.
--            USART can be enabled again by calling serial_hw_enable()
-- -----------------------------------------------------------------------
procedure serial_hw_disable() is
   while !TXSTA_TRMT loop  end loop                -- wait while transmission pending
   RCSTA_SPEN = FALSE                              -- disable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Enable USART
-- Arguments: (none)
-- Returns:   (nothing)
-- Notes:     Re-enable USART after use of serial_hw_disable()
-- -----------------------------------------------------------------------
procedure serial_hw_enable() is
   RCSTA_SPEN = TRUE                               -- enable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit character
-- Arguments: Data (byte) to transmit
-- Returns:   (nothing)
-- Notes:     Hardware transmit buffer must be empty, wait if necessary
-- -----------------------------------------------------------------------
procedure serial_hw_write(byte in data) is
   while !PIR1_TXIF loop  end loop                 -- wait while transmission pending
   TXREG = data                                    -- transfer data
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit word
-- Arguments: Data (word) to transmit
-- Returns:   (nothing)
-- Notes:     Send word as 2 bytes, Most Significant Byte first.
--            See also serial_hw_write()
-- -----------------------------------------------------------------------
procedure serial_hw_write_word(word in data) is
   var byte dx[2] at data                          -- overlay
   while !PIR1_TXIF loop  end loop                 -- wait while transmission pending
   TXREG = dx[1]
   asm nop                  -- necessary for good optimized compilers, loading
                            -- of TXREG doesn't immediately set PIR1_TXIF
   while !PIR1_TXIF loop  end loop                 -- wait while transmission pending
   TXREG = dx[0]
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- Notes:     Using this inline function for serial_hw_data'get saves a stack level
--            With overrun error the USART is reset (error(?)byte is returned!)
-- -----------------------------------------------------------------------
function _serial_hw_read(byte out data) return bit is
   pragma inline

   if PIR1_RCIF then                               -- check if data available
      data = RCREG                                 -- pass received byte to caller
      PIR1_RCIF = FALSE                            -- eur@fiwhex.nl 12-sept-08
   else
      return FALSE                                 -- no data available
   end if

   if RCSTA_OERR then                              -- reset USART after overrrun
      RCSTA_CREN = FALSE
      RCSTA_CREN = TRUE
   end if

   return TRUE
end function


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- -----------------------------------------------------------------------
function serial_hw_read(byte out data) return bit is
   return _serial_hw_read(data)
end function


-- Here Serial read and write are defined as pseudo variables
-- so you use them as normal variables, like
--  * wait for character being received,
--  * then return the inverted character
-- {{{
-- serial_hw_data = ! serial_hw_data
-- }}}
--
-- these procedures will wait till they can perform their action
-- therefore it's better to use to following construct
-- {{{
-- -- if character received, echo the inverted character
-- if  serial_hw_data_available then
--     serial_hw_data = !serial_hw_data
-- end if
-- -- do other things
-- }}}


-- -----------------------------------------------------------------------
-- Title:     Transmit byte
-- Arguments: Data (byte) to be transmitted
-- Returns:   (nothing)
-- -----------------------------------------------------------------------
procedure serial_hw_data'put(byte in data) is
   serial_hw_write(data)
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   Data (byte) received
-- -----------------------------------------------------------------------
function serial_hw_data'get() return byte is
   var byte data
   while !_serial_hw_read(data) loop  end loop
   return data
end function


-- -----------------------------------------------------------------------
-- raw interface
-- -----------------------------------------------------------------------

-- generic (pic-independent) variable to check if a byte is received
alias serial_hw_data_available is PIR1_RCIF

-- generic (pic-independent) variable to check if transmit buffer is empty
alias serial_hw_data_ready     is PIR1_TXIF

-- These are real raw procedures, declared as pseudo variables
-- the user is totally responsible for testing the transmit/receive
-- flag before using these functions
procedure serial_hw_data_raw'put(byte in data) is
   TXREG = data
end procedure

function serial_hw_data_raw'get() return byte is
   return RCREG
end function

