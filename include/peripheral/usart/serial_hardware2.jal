-- Title: USART2 hardware control
-- Author: Stef Mientki, Copyright (c) 2002..2006, all rights reserved.
-- Adapted-by: Sebastien Lelong.
-- Compiler: 2.4o
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: USART2 hardware control.
-- Routines for sending and receiving through the second [E]USART2
--
-- Notes: - See also the notes in serial_hardware library.
--        - When a PIC has mappable/selectible configurations for pin_TX2 and pin_RX2 the
--          device file will probably contain names like pin_TX2_RC2 and pin_RX2_RC1.
--          In that case the user program must contain aliases declarations like:
--              alias  pin_TX2            is  pin_TX2_RC2
--              alias  pin_RX2            is  pin_RX2_RC1
--              alias  pin_TX2_direction  is  pin_TX2_RC2_direction
--              alias  pin_RX2_direction  is  pin_RX2_RC1_direction
--

include usart2_common

-- -----------------------------------------------------------------------
-- Title:     Initialize the second serial port, prepare baudrate registers.
-- Arguments: (none)
-- Returns:   (nothing)
-- -----------------------------------------------------------------------
procedure serial_hw2_init() is

   -- Calculate and Load baudrate generator
   _calculate_and_set_baudrate2()

   -- disable all USART interrupts
   PIE3_RC2IE = FALSE
   PIE3_TX2IE = FALSE

   pin_RX2_direction = INPUT                       -- make receive pin input
   pin_TX2_direction = INPUT                       -- make transmit pin input!

   -- Enable transmitter : TXSTA2_TXEN=1 (preserve TXSTA_BRGH)
   TXSTA2_TXEN = TRUE                              -- makes transmit pin output

   -- Enable serial port : RCSTA2_SPEN=1
   -- Enable receiving   : RCSTA2_CREN=1
   RCSTA2 = 0x90                                   -- SYNC bit 0: async mode
                                                   -- TX9 bit 0: 8 databits

end procedure



-- -----------------------------------------------------------------------
-- Title:     Disable USART2
-- Arguments: (none)
-- Returns:   (nothing)
-- Notes:     Allows pins to be used (temporary) for other purposes.
--            USART can be enabled again by calling serial_hw2_enable()
-- -----------------------------------------------------------------------
procedure serial_hw2_disable() is
   while !TXSTA_TRMT loop end loop                 -- wait while transmission pending
   RCSTA2_SPEN = FALSE                             -- disable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Enable  USART
-- Arguments: (none)
-- Returns:   (nothing)
-- Title:     Re-enable USART after use of serial_hw2_disable()
-- -----------------------------------------------------------------------
procedure serial_hw2_enable() is
   RCSTA2_SPEN = TRUE                              -- enable serial port
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit character
-- Arguments: Data (byte) to transmit
-- Returns:   (nothing)
-- Notes:     Hardware transmit buffer must be empty, wait if necessary
-- -----------------------------------------------------------------------
procedure serial_hw2_write(byte in data) is
   while !PIR3_TX2IF loop end loop                 -- wait while transmission pending
   TXREG2 = data                                   -- transfer data
end procedure


-- -----------------------------------------------------------------------
-- Title:     Transmit word
-- Arguments: Data (word) to transmit
-- Returns:   (nothing)
-- Notes:     Send word as 2 bytes, Most Significant Byte first.
--            See also serial_hw_write()
-- -----------------------------------------------------------------------
procedure serial_hw2_write_word(word in data) is
   var byte dx[2] at data                          -- overlay
   while !PIR3_TX2IF loop end loop                 -- wait while transmission pending
   TXREG2 = dx[1]
   asm nop                  -- this is necessary for damned good optimized compilers
                            -- loading of the TXREG2 doesn't immediatly set PIR3_TX2IF!!!
   while !PIR3_TX2IF loop end loop                 -- wait while transmission pending
   TXREG2 = dx[0]
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- Notes:     Using this inline function for serial_hw_data'get saves a stack level
--            With overrun error the USART is reset (error(?)byte is returned!)
-- -----------------------------------------------------------------------
function _serial_hw2_read(byte out data) return bit is
   pragma inline

   if PIR3_RC2IF then                              -- check if data available
      data = RCREG2                                -- pass received byte to caller
      PIR3_RC2IF  = FALSE                          -- eur@fiwhex.nl 12-sept-08
   else
      return FALSE                                 -- no data available
   end if

   if RCSTA2_OERR then                             -- reset USART after error
      RCSTA2_CREN = FALSE
      RCSTA2_CREN = TRUE
   end if

   return TRUE
end function


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   bit:
--            -  TRUE data available
--            -  FALSE no data available
-- -----------------------------------------------------------------------
function serial_hw2_read(byte out data) return bit is
   return _serial_hw2_read(data)
end function


-- Here Serial read and write are defined as pseudo variables
-- so you use them as normal vars, like
--  * wait for character being received,
--  * then return the inverted character
-- {{{
-- serial_hw2_data = !serial_hw2_data
-- }}}
-- .
-- these procedures will wait till they can perform their action
-- therefore it's better to use to following construct
-- {{{
-- -- if character received, echo the inverted character
-- if  serial_hw2_data_available then
--     serial_hw2_data = !serial_hw2_data
-- end if
-- -- do other things
-- }}}


-- -----------------------------------------------------------------------
-- Title:     Transmit byte
-- Arguments: Data (byte) to be transmitted
-- Returns:   (nothing)
-- -----------------------------------------------------------------------
procedure serial_hw2_data'put(byte in data) is
   serial_hw2_write(data)
end procedure


-- -----------------------------------------------------------------------
-- Title:     Receive byte
-- Arguments: (none)
-- Returns:   Data (byte) received
-- -----------------------------------------------------------------------
function serial_hw2_data'get() return byte is
   var byte data
   while !_serial_hw2_read(data) loop  end loop
   return data
end function


-- -----------------------------------------------------------------------
-- raw interface
-- -----------------------------------------------------------------------

-- generic (pic-independent) variable to check if a byte is received
alias serial_hw2_data_available is PIR3_RC2IF

-- generic (pic-independent) variable to check if transmit buffer is empty
alias serial_hw2_data_ready     is PIR3_TX2IF

-- These are real raw procedures, declared as pseudo variables
-- the user is totally responsible for testing the transmit/receive
-- flag before using these functions
procedure serial_hw2_data_raw'put(byte in data) is
   TXREG2 = data
end procedure

function serial_hw2_data_raw'get() return byte is
   return RCREG2
end function

