-- ----------------------------------------------------------------------
-- Title: Support for builtin RealTimeClockCalendar modules of 18FxxJxx.
-- Author: Rob Hamerling, Copyright (c) 2010..2010, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4n
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- RealTimeClock support:
--   - routines for control of realtime clock and alarm
-- .
-- This library supports:
--   - RTCC modules like in 18fxxj11, 18fxxj50 and several other PICs.
-- .
-- Available procedures and functions for application programs:
--   - rtc_init()                  -- initialize rtc module and library
--   - rtc_calibrate()             -- clock ('tick') calibration
--   - rtc_pin_signal()            -- RTCC output pin signal control
--   - rtc_get_hhmm_bcd()          -- obtain hours,minute (bcd format)
--   - rtc_get_hhmmss_bcd()        -- obtain hours,minutes,seconds (bcd format)
--   - rtc_set_hhmmss_bcd()        -- set new hours,minutes,seconds (bcd format)
--   - rtc_get_yymmdd_bcd()        -- get year,month,day (bcd format)
--   - rtc_set_yymmdd_bcd()        -- set new year,month,day (bcd format)
--   - rtc_get_weekday()           -- get day of week number (binary)
--   - rtc_get_alarm_hhmmss_bcd()  -- get alarm time (bcd format)
--   - rtc_set_alarm_hhmmss_bcd()  -- set alarm time (bcd format)
--   - rtc_set_alarm_period()      -- set alarm period
--   - rtc_set_alarm_repeat()      -- enable/disable alarm repeat function
--   - rtc_set_alarm()             -- enable/disable alarm
-- .
-- Additional general purpose functions and procedures:
--   - bcd2bin()                   -- convert byte from bcd to binary
-- .
-- Several procedures and functions use multi-byte variables to pass
-- arguments in bcd-notation. This is done in high-to-low sequence.
-- To access the individual bytes of such a 'composite' variable you
-- could the data overlay facility of the compiler.
-- For example for the date in years, months and days you could
-- declare a variable as:
-- .
--    var  byte*3  yymmdd_bcd                 -- time of day in bcd
-- .
-- and in addition:
-- .
--    var  byte    yymmdd[3] at  yymmdd_bcd   -- overlay as array
--    var  byte    yy        at  yymmdd[0]    -- )
--    var  byte    mm        at  yymmdd[1]    -- ) overlay as bytes
--    var  byte    dd        at  yymmdd[2]    -- )
-- .
-- Now you can access the year-byte of 'yymmdd_bcd' simply with 'yy'
-- (contents still in bcd notation!), and month and day similarly.
-- .
-- PICs use little endian notation (store multi-byte variables with
-- low order byte first)! So when you want to set the date to 10:07:28
-- you must specify:
--    yymmdd_bcd = 0x280710                   -- reversed sequence
-- .
-- Bytes in bcd-notation can easily be displayed with print_byte_hex()
-- of the Jallib print library.
--
--
-- NOTES: - This library assumes that a 32768 Hz crystal is connected to
--          the T1OSI/T1OSO pins. Therefore the application should specify
--          the RTCC oscillator source configuration bits as:
--              pragma target RTCOSC T1OSC
--
--
-- ----------------------------------------------------------------------
-- Global variables internally used by rtc and alarm functions and procedures.
-- Not to be accessed by application programs!
-- ----------------------------------------------------------------------
--
var  byte  _rtc_year      = 0x00                -- year
var  byte  _rtc_month     = 0x01                -- month
var  byte  _rtc_monthday  = 0x01                -- day of month
var  byte  _rtc_hour      = 0x12                -- hour
var  byte  _rtc_min       = 0x00                -- minute
var  byte  _rtc_sec       = 0x00                -- second
var  byte  _rtc_weekday   = 0x00                -- day of week
--
var  byte  _alrm_month    = 0x01                -- month
var  byte  _alrm_monthday = 0x00                -- day of month
var  byte  _alrm_hour     = 0x00                -- hour
var  byte  _alrm_min      = 0x00                -- minute
var  byte  _alrm_sec      = 0x00                -- second
var  byte  _alrm_weekday  = 0x00                -- day of week
--
--
-- Prototypes of functions and procedure called ahead of their definition.

function bcd2bin(byte in bcd) return byte       -- convert bcd to bin

--
--
-- ----------------------------------------------------------------------
-- Read the realtime clock.
-- input:  none
-- output: none
-- returns: nothing
-- notes: copy RTC registers to local variables
-- ---------------------------------------------------------------------
procedure _rtc_read() is

   while (RTCCFG_RTCSYNC == true) loop          -- wait for safe read
   end loop

   RTCCFG_RTCPTR1 = 1                           -- ) init RTCVAL pointer
   RTCCFG_RTCPTR0 = 1                           -- )
   _rtc_year  = RTCVALL                         -- read year
   RTCCFG_RTCPTR0 = 0                           -- decrement pointer
   _rtc_monthday  = RTCVALL                     -- read day of month
   _rtc_month     = RTCVALH                     -- read month (and decr. pointer)
   _rtc_hour      = RTCVALL                     -- read hour
   _rtc_weekday   = RTCVALH                     -- read day of week (and decr. pointer)
   _rtc_sec       = RTCVALL                     -- read second
   _rtc_min       = RTCVALH                     -- read minute

end procedure


-- ----------------------------------------------------------------------
-- Enable or disable RTCC register writes.
-- input: bit (enable / disable)
-- output: none
-- returns: nothing
-- notes:  (Re)setting the RTCWREN bit in RTCCFG requires a strict
--         sequence, see datasheets for details.
--         JalV2 2.4n generates the correct sequences with the code below.
-- ----------------------------------------------------------------------
procedure _rtc_write_control(bit in control) is

   if (control == enabled) then
      asm bank RTCCFG                           -- set bank of RTCCFG
      EECON2 = 0x55                             -- ) write ..
      EECON2 = 0xAA                             -- ) .. enable
      RTCCFG_RTCWREN = enabled                  -- allow writes
   else
      asm bank RTCCFG                           -- set bank of RTCCFG
      EECON2 = 0x55                             -- ) write ..
      EECON2 = 0xAA                             -- ) .. enable
      RTCCFG_RTCWREN = disabled                 -- deny writes
   end if

end procedure


-- ----------------------------------------------------------------------
-- Write the realtime clock.
-- input:  none
-- output: none
-- returns: nothing
-- notes: - enable writing to RTC registers
--        - update RTC
--        - disable writes
-- ----------------------------------------------------------------------
procedure _rtc_write() is

   _rtc_write_control(enabled)                  -- enable writing RTC registers

   while (RTCCFG_RTCSYNC == true) loop          -- wait for safe write
   end loop

   RTCCFG_RTCEN = false                         -- disable rtc (temporary)

   RTCCFG_RTCPTR1 = 1                           -- ) init RTCVAL pointer
   RTCCFG_RTCPTR0 = 1                           -- )
   RTCVALL = _rtc_year                          -- write year
   RTCCFG_RTCPTR0 = 0                           -- decrement pointer
   RTCVALL = _rtc_monthday                      -- write day of month
   RTCVALH = _rtc_month                         -- write month (and decr. ptr)
   RTCVALL = _rtc_hour                          -- write hour
   RTCVALH = _rtc_weekday                       -- write day of week (and decr. ptr)
   RTCVALL = _rtc_sec                           -- write second
   RTCVALH = _rtc_min                           -- write minute

   RTCCFG_RTCEN = true                          -- re-enable rtc

   _rtc_write_control(disabled)                 -- disable RTC writes

end procedure


-- ----------------------------------------------------------------------
-- Read the alarm setting.
-- input:  none
-- output: none
-- returns: nothing
-- notes: copy RTC alarm registers to local variables
-- ----------------------------------------------------------------------
procedure _rtc_alrm_read() is

   ALRMCFG_ALRMPTR1 = 1                         -- init ALRMVAL pointer
   ALRMCFG_ALRMPTR0 = 0

   _alrm_monthday = ALRMVALL                    -- read day of month
   _alrm_month    = ALRMVALH                    -- read month (and decr. pointer)
   _alrm_hour     = ALRMVALL                    -- read hour
   _alrm_weekday  = ALRMVALH                    -- read day of week (and decr. pointer)
   _alrm_sec      = ALRMVALL                    -- read second
   _alrm_min      = ALRMVALH                    -- read minute

end procedure


-- ----------------------------------------------------------------------
-- Set the realtime clock alarm.
-- input:  none
-- output: none
-- returns: nothing
-- notes: - disable alarm
--        - copy RTC alarm registers to local variables
--        - restore alarm state
-- ----------------------------------------------------------------------
procedure _rtc_alrm_write() is

   var   bit  old_alarm_state                   -- to preserve current state
   old_alarm_state = ALRMCFG_ALRMEN             -- save old alarm state
   ALRMCFG_ALRMEN  = disabled                   -- disable alarm

   ALRMCFG_ALRMPTR1 = 1                         -- ) set ALRMVAL pointer
   ALRMCFG_ALRMPTR0 = 0                         -- )

   ALRMVALL = _alrm_monthday                    -- write day of month
   ALRMVALH = _alrm_month                       -- write month (and decr. ptr)
   ALRMVALL = _alrm_hour                        -- write hour
   ALRMVALH = _alrm_weekday                     -- write day of week (and decr ptr)
   ALRMVALL = _alrm_sec                         -- write second
   ALRMVALH = _alrm_min                         -- write minute

   ALRMCFG_ALRMEN = old_alarm_state             -- restore alarm state

end procedure


-- ======================================================================
--  RTC CONSTANTS, FUNCTIONS and PROCEDURES for use by application
-- ======================================================================

-- RTCC pin selection masks

   const  bit*2  RTC_PIN_ALARM        =  0b00
   const  bit*2  RTC_PIN_SECONDS      =  0b01
   const  bit*2  RTC_PIN_SOURCE_CLOCK =  0b10
   const  bit*2  RTC_PIN_NONE         =  0b11     -- (disable RTCC pin)

-- RTCC alarm repetition period masks

   const  byte  RTC_ALARM_PERIOD_HALF_SECOND = 0b0000
   const  byte  RTC_ALARM_PERIOD_SECOND      = 0b0001
   const  byte  RTC_ALARM_PERIOD_10_SECONDS  = 0b0010
   const  byte  RTC_ALARM_PERIOD_MINUTE      = 0b0011
   const  byte  RTC_ALARM_PERIOD_10_MINUTES  = 0b0100
   const  byte  RTC_ALARM_PERIOD_HOUR        = 0b0101
   const  byte  RTC_ALARM_PERIOD_DAY         = 0b0110
   const  byte  RTC_ALARM_PERIOD_WEEK        = 0b0111
   const  byte  RTC_ALARM_PERIOD_MONTH       = 0b1000
   const  byte  RTC_ALARM_PERIOD_YEAR        = 0b1001


-- ----------------------------------------------------------------------
-- Convert 1 byte packed bcd to 1 byte binary.
-- input:   byte with bcd data
-- output:  none
-- returns: byte with binary value of bcd byte
-- notes: - A byte in bcd notation contains ((16 * tens) + ones).
--          To convert it to a binary value: subtract (6 * tens)
--          Algorithm is modeled after an assembler version of
--          Scott Dattalo at PicList (but slightly less efficient!).
-- ----------------------------------------------------------------------
function bcd2bin(byte in bcd) return byte is

   var byte  t                                  -- intermediate value

   t = (bcd >> 1) & 0b0111_1000                 -- 8*tens
   return (bcd - t + (t >> 2))                  -- (16*tens + ones) - 8*tens + 2*tens

end function



-- ----------------------------------------------------------------------
-- Select the RTCC output pin signal functionality.
-- input: 2-bits mask: one of the RTC_PIN_xxxx constants (see above)
-- output: none
-- returns: nothing
-- notes: - With 'NONE' pin_RTCC is released and available for I/O
--        - See the datasheet for the meaning of the different masks.
-- ----------------------------------------------------------------------
procedure rtc_pin_signal(bit*2 in pin_signal_selection_mask) is

   if (pin_signal_selection_mask == RTC_PIN_NONE) then
      RTCCFG_RTCOE = false                      -- free the RTCC pin
   else
      RTCCFG_RTCOE = true                       -- enable RTCC output
   end if
   PADCFG1_RTSECSEL = pin_signal_selection_mask  -- select pin signal

end procedure


-- ----------------------------------------------------------------------
-- Calibrate the RTCC module.
-- input: calibration value
-- output: none
-- returns: nothing
-- note: Calibration value is declared as (unsigned) byte because
--       the RTCCAL register in the device file is delared as unsigned byte,
--       but both are used as signed value (-128..+127), see datasheet.
-- ----------------------------------------------------------------------
procedure rtc_calibrate(byte in calibration) is

   _rtc_write_control(enabled)                  -- allow writing RTC registers

   RTCCFG_RTCEN = disabled                      -- disable RTCC
   RTCCAL = calibration                         -- set calibration amount
   RTCCFG_RTCEN = enabled                       -- re-enable RTCC

   _rtc_write_control(disabled)                 -- ignore writes to RTC registers

end procedure



-- ----------------------------------------------------------------------
-- Initialize the RTCC module.
-- input: none
-- output: none
-- returns: nothing
-- notes:
-- ----------------------------------------------------------------------
procedure rtc_init() is

   var  bit  old_gie                            -- GIE bit state of caller

   old_gie = INTCON_GIE                         -- save interrupt state
   T1CON_T1OSCEN = true                         -- enable Timer1 oscillator
   INTCON_GIE = disabled                        -- disable interrupts

   _rtc_write_control(enabled)                  -- allow writing RTC registers

   RTCCAL = 0                                   -- default: no adjustments
   PADCFG1_RTSECSEL = RTC_PIN_NONE              -- default: RTC-pin not used
   RTCCFG_RTCEN = enabled                       -- enable RTCC

   _rtc_write_control(disabled)                 -- deny writing RTC registers

   INTCON_GIE = old_gie                         -- restore interrupt state

end procedure


-- ----------------------------------------------------------------------
-- Get time of day (hhmm) in BCD format.
-- input: none
-- output: none
-- returns: hhmm in bcd format (word)
-- ----------------------------------------------------------------------
function rtc_get_hhmm_bcd() return byte*2 is

   var  byte*2  hhmm_bcd
   var  byte    hhmm[2] at hhmm_bcd

   _rtc_read()                                  -- read rtc

   hhmm[0] = _rtc_hour                          -- copy ( hour
   hhmm[1] = _rtc_min                           --        min

   return hhmm_bcd                              -- return to caller

end function


-- ----------------------------------------------------------------------
-- Get time of day (hhmmss) in BCD format.
-- input: none
-- output: none
-- returns: hhmmss in bcd format (byte*3)
-- ----------------------------------------------------------------------
function rtc_get_hhmmss_bcd() return byte*3 is

   var  byte*3  hhmmss_bcd
   var  byte    hhmmss[3] at hhmmss_bcd

   _rtc_read()                                  -- read all of rtc

   hhmmss[0] = _rtc_hour                        --      ( hour
   hhmmss[1] = _rtc_min                         -- copy ( minute
   hhmmss[2] = _rtc_sec                         --      ( second

   return hhmmss_bcd                            -- hhmmss

end function


-- ----------------------------------------------------------------------
-- Set time of day (hhmmss) in BCD format.
-- input: year,month,day-of-month in bcd format (byte*3)
-- output: none
-- returns: nothing
-- ----------------------------------------------------------------------
procedure rtc_set_hhmmss_bcd(byte*3 in hhmmss_bcd) is

   var  byte  hhmmss[3] at hhmmss_bcd

   _rtc_read()                                  -- read all of rtc

   _rtc_hour = hhmmss[0]                        --        ( hour
   _rtc_min  = hhmmss[1]                        -- modify ( minute
   _rtc_sec  = hhmmss[2]                        --        ( second

   _rtc_write()                                 -- write to rtc hardware

end procedure


-- ----------------------------------------------------------------------
-- Get date (yymmdd) in BCD format.
-- input: none
-- output: none
-- returns: yymmdd in bcd format
-- ----------------------------------------------------------------------
function rtc_get_yymmdd_bcd() return byte*3 is

   var  byte*3  yymmdd_bcd
   var  byte    yymmdd[3] at yymmdd_bcd

   _rtc_read()                                  -- read all of rtc

   yymmdd[0] = _rtc_year                        -- year
   yymmdd[1] = _rtc_month                       -- month
   yymmdd[2] = _rtc_monthday                    -- day of month

   return yymmdd_bcd                            -- yymmdd

end function


-- ----------------------------------------------------------------------
-- Get weekday number in binary format.
-- input: none
-- output: none
-- returns: day of week number (0..6)
-- ----------------------------------------------------------------------
function rtc_get_weekday() return byte is

   _rtc_read()                                  -- read all of rtc

   return _rtc_weekday                          -- day of week

end function


-- ----------------------------------------------------------------------
-- Set date (yymmdd) in BCD format.
-- input:   year,month,day-of-month in bcd format (byte*3)
-- output:  none
-- returns: nothing
-- notes: - Expected range: yy 0..99, mm 1..12, dd 1..31 in bcd notation
--        - RTC hardware does not calculate weekday from date, so we have
--          to do it here.  We use the algorithm by Tomohiko Sakamoto of Sony,
--          slightly squeezed to support 21st century only (2000..2099).
-- ----------------------------------------------------------------------
procedure rtc_set_yymmdd_bcd(byte*3 in yymmdd_bcd) is

   var  byte  yymmdd[3]  at  yymmdd_bcd         -- overlay

   const byte  tbl[] = {0,3,2,5,0,3,5,1,4,6,2,4}   -- weekday offsets

   var byte t_year  = bcd2bin(yymmdd[0])        -- year decimal
   var byte t_month = bcd2bin(yymmdd[1])        -- month decimal
   var byte t_day   = bcd2bin(yymmdd[2])        -- day decimal
   if (t_month < 3) then                        -- before doomsday
      if (t_year > 0) then
         t_year = t_year - 1                    -- previous year
      else
         t_year = 4                             -- for Jan/Feb 2000
      end if
   end if

   _rtc_read()                                  -- read all of rtc

   _rtc_year     = yymmdd[0]                    --        ( year
   _rtc_month    = yymmdd[1]                    -- modify ( month
   _rtc_monthday = yymmdd[2]                    --        ( day of month
   _rtc_weekday  = (t_year + t_year / 4 + tbl[t_month-1] + t_day) % 7

   _rtc_write()                                 -- write to rtc hardware

end procedure


-- ======================================================================
--  ALARM functionality
-- ======================================================================

-- ----------------------------------------------------------------------
-- Get alarm time of day in BCD format.
-- input: none
-- output: none
-- returns: alarm time setting (hhmmss) in bcd format
-- ----------------------------------------------------------------------
function rtc_get_alarm_hhmmss_bcd() return byte*3 is

   var  byte*3  hhmmss_bcd
   var  byte    hhmmss[3] at hhmmss_bcd

   _rtc_alrm_read()                             -- read all alarm values

   hhmmss[0] = _alrm_hour                       -- hour
   hhmmss[1] = _alrm_min                        -- minute
   hhmmss[2] = _alrm_sec                        -- second

   return hhmmss_bcd                            -- return value

end function


-- ----------------------------------------------------------------------
-- Set alarm time in bcd format.
-- input: hour-minute-second in bcd format
-- output: none
-- returns: nothing
-- ----------------------------------------------------------------------
procedure rtc_set_alarm_hhmmss_bcd(byte*3 in hhmmss_bcd) is

   var  byte  hhmmss[3] at hhmmss_bcd

   _rtc_alrm_read()                             -- read current settings

   _alrm_hour = hhmmss[0]                       --        ( hour
   _alrm_min  = hhmmss[1]                       -- modify ( minute
   _alrm_sec  = hhmmss[2]                       --        ( seconds

   _rtc_alrm_write()                            -- write to rtc hardware

end procedure


-- ----------------------------------------------------------------------
-- Enable or disable alarm.
-- input: alarm_state (bit): true  - alarm active
--                           false - alarm not active
-- output: none
-- returns: nothing
-- ----------------------------------------------------------------------
procedure rtc_set_alarm(bit in alarm_state) is

   while (RTCCFG_RTCSYNC == true) loop          -- wait for safe write
   end loop

   ALRMCFG_ALRMEN = alarm_state                 -- enable/disable alarm

end procedure


-- ----------------------------------------------------------------------
-- Set alarm signal.
-- input: alarm_signal (bit): true  - alarm signal activated
--                            false - alarm signal deactivated
-- output: none
-- returns: nothing
-- ----------------------------------------------------------------------
procedure rtc_set_alarm_signal(bit in alarm_signal) is

   while (RTCCFG_RTCSYNC == true) loop          -- wait for safe write
   end loop

   ALRMCFG_CHIME = alarm_signal                 -- enable/disable alarm signal

end procedure


-- ----------------------------------------------------------------------
-- Set alarm repetition factor.
-- input: alarm_repeat (byte): number of times to repeat alarm signal
-- output: none
-- returns: nothing
-- ----------------------------------------------------------------------
procedure rtc_set_alarm_repeat(byte in alarm_repeat) is

   while (RTCCFG_RTCSYNC == true) loop          -- wait for safe write
   end loop

   ALRMRPT = alarm_repeat                       -- set alarm repeat value

end procedure


-- ----------------------------------------------------------------------
-- Set alarm period.
-- input: alarm_period with a RTC_ALARM_PERIOD_xxxx mask
--        (see the defined RTC_ALARM_PERIOD_xxxx masks above)
-- output: none
-- returns: nothing
-- ---------------------------------------------------------------------
procedure rtc_set_alarm_period(byte in alarm_period) is

   if (alarm_period <= RTC_ALARM_PERIOD_YEAR) then

      while (RTCCFG_RTCSYNC == true) loop       -- wait for safe write
      end loop

      ALRMCFG_AMASK = alarm_period              -- set alarm period

   end if

end procedure


