-- Title: USB Communication Device Class Descriptor constants
-- Author: Albert Faber, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: -
-- Compiler: >=2.4j
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: Constants for configurting the USB interface
-- --
-- 
-- Sources: http://www.usb.org for USB specifications
-- 
-- Notes: 
--
-- ------------------------------------------------------
-- ------------------------------------------------------
--
--
const bit USB_CALLBACK_ON_CLASS_CTRL = true
const bit USB_CALLBACK_ON_DEVICE_CONFIGURED = false
const bit USB_CALLBACK_ON_VENDOR_CTRL = false
const bit USB_EP_DATA_CALLBACK = true
const bit USB_CALLBACK_ON_SOF = true

const bit USB_EP0 = 1
const byte USB_EP0_OUT_SIZE = 8
const word USB_EP0_OUT_ADDR = 0x0500
const byte USB_EP0_IN_SIZE  = 8
const word USB_EP0_IN_ADDR  = 0x0508

const bit USB_EP1 = 1
const byte USB_EP1_OUT_SIZE = 8
const word USB_EP1_OUT_ADDR = 0x0510
const byte USB_EP1_IN_SIZE  = 8
const word USB_EP1_IN_ADDR  = 0x0518
var volatile byte  usb_ep1in_buf[ 8 ]

const bit USB_EP2 = 1
const byte USB_EP2_OUT_SIZE = 8
const word USB_EP2_OUT_ADDR = 0x0520
const byte USB_EP2_IN_SIZE  = 8
const word USB_EP2_IN_ADDR  = 0x0528

const bit USB_EP3 = 1
const byte USB_EP3_OUT_SIZE = 8
const word USB_EP3_OUT_ADDR = 0x0530
const byte USB_EP3_IN_SIZE = 8
const word USB_EP3_IN_ADDR  = 0x0680

const byte USB_CDC_TX_BUFFER_SIZE = 0x80
const byte USB_CDC_RX_BUFFER_SIZE = 0x80
const byte USB_CDC_DATA_ENDPOINT = 3



-- Functional Descriptors
-- Type Values for the bDscType Field 
const byte USB_CS_INTERFACE                = 0x24
const byte USB_CS_ENDPOINT                 = 0x25
const byte USB_DCS_INTERFACE               = 0x04

const byte USB_CDC_DATA_INTF = 0x0A
const byte USB_CDC_NO_PROTOCOL = 0x00    -- No class specific protocol required

-- bDscSubType in Functional Descriptors
const byte USB_DSC_FN_HEADER               = 0x00
const byte USB_DSC_FN_CALL_MGT             = 0x01
const byte USB_DSC_FN_ACM                  = 0x02    -- ACM - Abstract Control Management
const byte USB_DSC_FN_DLM                  = 0x03    -- DLM - Direct Line Managment
const byte USB_DSC_FN_TELEPHONE_RINGER     = 0x04
const byte USB_DSC_FN_RPT_CAPABILITIES     = 0x05
const byte USB_DSC_FN_UNION                = 0x06
const byte USB_DSC_FN_COUNTRY_SELECTION    = 0x07
const byte USB_DSC_FN_TEL_OP_MODES         = 0x08
const byte USB_DSC_FN_USB_TERMINAL         = 0x09
-- more.... see Table 25 in USB CDC Specification 1.1

const byte USB_CDC_COMM_INTF_ID = 0x00
-- #define CDC_COMM_UEP            UEP2
-- #define CDC_INT_BD_IN           ep2Bi
const byte USB_CDC_INT_EP_SIZE = 8

const byte USB_CDC_DATA_INTF_ID = 0x01


const byte USB_CDC_BULK_OUT_EP_SIZE = USB_EP3_OUT_SIZE
-- #define CDC_BULK_BD_IN          ep3Bi
const byte CDC_BULK_IN_EP_SIZE      = USB_EP3_IN_SIZE


const byte USB_DEVICE_DESCRIPTOR[USB_DEVICE_DESCRIPTOR_SIZE] = {
	USB_DEVICE_DESCRIPTOR_SIZE, 	-- 18 bytes long
	USB_DT_DEVICE, 	-- DEVICE 01h
	0x00,
	0x02,		-- usb version 2.00
	USB_CDC_DEVICE,		-- class
	0x00,		-- subclass
	0x00,		-- protocol
	0x08,		-- max packet size for end point 0
	0xd8,
	0x04,		-- Microchip's vendor
	0x0A, 		-- 
	0x00,		-- Product ID: CDC RS-232 Emulation Demo
	0x01,
	0x00,		-- Device release number in BCD format
	0x01,		-- string 1 for manufacturer
	0x02,		-- string 2 for product
	0x00,		-- string 3 for serial number
	0x01		-- number of configurations
}

const USB_CONFIGURATION_DESCRIPTOR_SIZE = 0x09 + 0x09 + 0x05 + 0x04 + 0x05 + 0x05 + 0x07 + 0x09 + 0x07 + 0x07


const byte USB_CONFIGURATION_DESCRIPTOR[ USB_CONFIGURATION_DESCRIPTOR_SIZE ]=
{	
	-- configuration descriptor - - - - - - - - - - 0x09 bytes
	0x09,	-- length,
	USB_DT_CONFIGURATION,	-- descriptor_type

	USB_CONFIGURATION_DESCRIPTOR_SIZE,
	0x00,	-- total_length;
	
	0x02,	-- num_interfaces,
	0x01,	-- configuration_value,
	0x00,	-- configuration_string_id,
	0b10000000, -- attributes (bus powered, no remote wake up)
	50,		-- max_power; (2x ma)

	-- interface descriptor - - - - - - - - - - - - 0x09 bytes
	0x09,	-- length,
	USB_DT_INTERFACE,	-- descriptor_type,
	0x00,	-- interface_number, (starts at zero)
	0x00,	-- alternate_setting, (no alternatives)
	0x01,	-- num_endpoints,
	USB_COMM_INTF,	-- interface_class, (CDC)
	USB_ABSTRACT_CONTROL_MODEL,	-- interface_subclass, (COMM interface)
	USB_V25TER,	-- interface_protocol, (hayes type modem)
	0x00,	-- interface_string_id;

	-- Functional Descriptor Structure - See CDC Specification 1.1 for details
	-- functional descriptor - - - - - - - - - - - - 0x05 bytes
	0X05, -- length
	USB_CS_INTERFACE, -- DSC Type
	USB_DSC_FN_HEADER, -- DSC Sub Type
	0x10,
	0x01, -- CDC (bcd)

	-- functional descriptor - - - - - - - - - - - - 0x04 bytes
	0X04, -- length
	USB_CS_INTERFACE, 						-- DSC Type
	USB_DSC_FN_ACM, 						-- DSC Sub Type
	0x02, 									-- Capabilities

	-- functional descriptor - - - - - - - - - - - - 0x05 bytes
	0X05, -- length
	USB_CS_INTERFACE, 						-- DSC Type
	USB_DSC_FN_UNION, 						-- DSC Sub Type
	USB_CDC_COMM_INTF_ID,					-- MasterIntf
	USB_CDC_DATA_INTF_ID,					-- SaveIntf0
											
	-- functional descriptor - - - - - - - - - - - - 0x05 bytes
	0X05, -- length
	USB_CS_INTERFACE, 						-- DSC Type
	USB_DSC_FN_CALL_MGT, 					-- DSC Sub Type
	0x00, 									-- Capabilities
	USB_CDC_DATA_INTF_ID,					-- DataInterface


	-- end point descriptor - - - - - - - - - - - - - - - - 0x07 bytes
	0x07,					-- length,
	USB_DT_ENDPOINT,		-- descriptor_type,
	0b10000010,				-- endpoint_address, (Endpoint 2, IN)
	USB_EPT_INT,			-- attributes
	USB_CDC_INT_EP_SIZE,	-- 			
	0x00,					-- max_packet_size
	0x02	,				-- interval

	-- interface descriptor - - - - - - - - - - - - 0x09 bytes
	0x09,					-- length,
	USB_DCS_INTERFACE,		-- descriptor_type,
	0x01,					-- interface_number, (starts at zero)
	0x00,					-- alternate_setting, (no alternatives)
	0x02,					-- num_endpoints
	USB_CDC_DATA_INTF,		-- interface_class
	0x00,					-- interface_subclass
	USB_CDC_NO_PROTOCOL,	-- interface_protocol
	0x00,					-- interface_string_id;
	
	-- end point descriptor - - - - - - - - - - - - - - - - 0x07 bytes
	0x07,					-- length,
	USB_DT_ENDPOINT,		-- descriptor_type,
	0b00000011,				-- endpoint_address, (Endpoint 3, OUT)
	USB_EPT_BULK,			-- attributes
	USB_CDC_BULK_OUT_EP_SIZE,				
	0x00,					-- max_packet_size
	0x00,					-- interval

	-- end point descriptor - - - - - - - - - - - - - - - - 0x07 bytes
	0x07,					-- length,
	USB_DT_ENDPOINT,		-- descriptor_type,
	0b10000011,				-- endpoint_address, (Endpoint 3, IN)
	USB_EPT_BULK,			-- attributes
	USB_CDC_BULK_OUT_EP_SIZE,				
	0x00,					-- max_packet_size
	0x00					-- interval
}

const byte USB_STRING0[] = 
{
	0x04,	-- bLength
	USB_DT_STRING,	-- bDescriptorType
	0x09,	-- wLANGID[0] (low byte)
	0x04	-- wLANGID[0] (high byte)
}

const byte USB_STRING1[] = 
{
	0x36,	-- bLength
	USB_DT_STRING,	-- bDescriptorType
	"M", 0x00, 
	"i", 0x00, 
	"c", 0x00, 
	"r", 0x00, 
	"o", 0x00, 
	"c", 0x00, 
	"h", 0x00, 
	"i", 0x00, 
	"p", 0x00, 
	" ", 0x00,
	"T", 0x00, 
	"e", 0x00, 
	"c", 0x00, 
	"h", 0x00, 
	"n", 0x00, 
	"o", 0x00, 
	"l", 0x00, 
	"o", 0x00, 
	"g", 0x00, 
	"y", 0x00, 
	",", 0x00, 
	" ", 0x00,
	"I", 0x00, 
	"n", 0x00, 
	"c", 0x00, 
	".", 0x00
}

const byte USB_STRING2[52] = 
{
	52,	-- bLength
	USB_DT_STRING,	-- bDescriptorType
	"C", 0x00, 
	"D", 0x00, 
	"C", 0x00, 
	" ", 0x00, 
	"R", 0x00, 
	"S", 0x00, 
	"-", 0x00, 
	"2", 0x00, 
	"3", 0x00, 
	"2", 0x00,
	" ", 0x00,
	"E", 0x00, 
	"m", 0x00, 
	"u", 0x00, 
	"l", 0x00, 
	"a", 0x00, 
	"t", 0x00, 
	"i", 0x00, 
	"o", 0x00, 
	"n", 0x00, 
	" ", 0x00,
	"D", 0x00, 
	"e", 0x00, 
	"m", 0x00, 
	"o", 0x00
}


