-- Title: SPI Master  (spi_master_hw.jal)
-- Author: William Welch Copyright (c) 2009, all rights reserved.
-- Compiler: 2.4l
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: SPI Master hardware control.
-- Routines for sending and receiving through the SPI in master mode
--
-- Sources: good overview of SPI at http://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus
-- also at: http://elm-chan.org/docs/spi_e.html
--
-- TODO: only tested in Master mode 00, and 11
--

-- FIXME. This probably should be handled in the device files themselves.
-- But until then, we will attempt to provide a 'legacy' mode such that this
-- library may be used with 18F parts.
--
-- Credits: This 'aliasing' approach has been 'borrowed' from i2c_hardware_aliases.jal
--

-- Use these when calling the spi_init() routine below ( SPI master mode, see sources above )
const SPI_MODE_00 = 0
const SPI_MODE_01 = 1
const SPI_MODE_10 = 2
const SPI_MODE_11 = 3

-- Use these when calling the spi_init() routine below ( SPI clock frequency )
const SPI_RATE_FOSC_4 = 0
const SPI_RATE_FOSC_16 = 1
const SPI_RATE_FOSC_64 = 2
const SPI_RATE_TMR = 3

if ( target_cpu == PIC_16 ) then
   
   if defined( SSPCON ) == false then
      alias SSPCON is SSP1CON
      alias SSPCON_WCOL is SSP1CON_WCOL
      alias SSPCON_SSPOV is SSP1CON_SSPOV
      alias SSPCON_SSPEN is SSP1CON_SSPEN
      alias SSPCON_CKP is SSP1CON_CKP
      alias SSPCON_SSPM is SSP1CON_SSPM			
   end if
   
   if defined( SSPSTAT ) == false then
      alias SSPSTAT is SSP1STAT
      alias SSPSTAT_SMP is SSP1STAT_SMP
      alias SSPSTAT_CKE is SSP1STAT_CKE
      alias SSPSTAT_D is SSP1STAT_D
      alias SSPSTAT_NA is SSP1STAT_NA
      alias SSPSTAT_P is SSP1STAT_P
      alias SSPSTAT_S is SSP1STAT_S
      alias SSPSTAT_R is SSP1STAT_R
      alias SSPSTAT_NW is SSP1STAT_NW
      alias SSPSTAT_UA is SSP1STAT_UA
      alias SSPSTAT_BF is SSP1STAT_BF
   end if
   
   if defined( SSPBUF ) == false then
      alias SSPBUF is SSP1BUF
   end if
   
end if

-- SPI is full-duplex, so we exchange master and slave data byte
function spi_master_hw_exchange(byte in m_data) return byte is
   
   SSPBUF = m_data
   
   if ( SSPCON_WCOL != 0 ) then
      -- FIXME how to report error???
      return 0xFF
   end if
   
   while ( SSPSTAT_BF == 0 ) loop end loop
   
   -- return slave data
   return SSPBUF
end function

-- half-duplex convenience function. send data to slave, discard reply
procedure spi_master_hw'put(byte in data) is
   var byte dummy
   dummy = spi_master_hw_exchange(data)
end procedure

-- half-duplex convenience function. send 0xFF, get slave data
function spi_master_hw'get() return byte is
   var byte data
   data = spi_master_hw_exchange(0xFF)
   return data
end function

-- Initialize the SPI registers.
-- Note: check your datasheet -- TRIS settings, any SPI errata?
procedure spi_init(byte in spi_mode, byte in spi_rate) is
   SSPCON = 0
   SSPSTAT_SMP = 0
   
   if spi_mode == SPI_MODE_00 then
      SSPCON_CKP = 0
      SSPSTAT_CKE = 1
   elsif spi_mode == SPI_MODE_01 then
      SSPCON_CKP = 0
      SSPSTAT_CKE = 0
   elsif spi_mode == SPI_MODE_10 then
      SSPCON_CKP = 1
      SSPSTAT_CKE = 1
   else
      SSPCON_CKP = 1
      SSPSTAT_CKE = 0
   end if
   
   SSPCON_SSPM = spi_rate
   SSPCON_SSPEN = 1
end procedure

