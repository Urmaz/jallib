-- Title: SPI Master Software
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Compiler: 2.4o
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: SPI Master software control.
-- Routines for sending and receiving through SPI software in master mode
--
-- Sources:
-- Jallib spi_master_hw library - Written by William Welch
-- http://www.justanotherlanguage.org/content/jallib/tutorials/tutorial_spi_introduction
-- http://ww1.microchip.com/downloads/en/devicedoc/spi.pdf
--
-- Notes:
-- alias spi_master_sw_sdi              is pin_sdi
-- alias spi_master_sw_sdi_direction    is pin_sdi_direction
-- alias spi_master_sw_sdo              is pin_sdo
-- alias spi_master_sw_sdo_direction    is pin_sdo_direction
-- alias spi_master_sw_sck              is pin_sck
-- alias spi_master_sw_sck_direction    is pin_sck_direction
-- -- define spi inputs/outputs
-- spi_master_sw_sdi_direction = input    -- spi input
-- spi_master_sw_sdo_direction = output   -- spi output
-- spi_master_sw_sck_direction = output   -- spi clock
-- --
-- include spi_master_sw
-- spi_init(SPI_MODE_11) -- init spi, choose mode
--

-- Use these when calling the spi_init() routine below ( SPI master mode, see sources above )
const SPI_MODE_00 = 0
const SPI_MODE_01 = 1
const SPI_MODE_10 = 2
const SPI_MODE_11 = 3

var byte spi_mode

--------------------------------------------------------------------------------
-- init spi
--------------------------------------------------------------------------------
procedure spi_init(byte in mode) is
   spi_mode = mode
   if spi_mode == SPI_MODE_00 then
      spi_master_sw_sck = LOW
   elsif spi_mode == SPI_MODE_01 then
      spi_master_sw_sck = LOW
   elsif spi_mode == SPI_MODE_10 then
      spi_master_sw_sck = HIGH
   else ;spi_mode == SPI_MODE_11 then
      spi_master_sw_sck = HIGH
   end if
end procedure

--------------------------------------------------------------------------------
-- TODO
--------------------------------------------------------------------------------
;function spi_master_hw_exchange(byte in m_data) return byte is
;end function

--------------------------------------------------------------------------------
-- put one byte of data onto the spi bus (pseudo variable)
--------------------------------------------------------------------------------
procedure spi_master_sw'put(byte in data) is
   var bit level at data : 7
   if (spi_mode == SPI_MODE_00) | (spi_mode == SPI_MODE_01) then
      for 8 loop
         spi_master_sw_sdo = level
         spi_master_sw_sck = high
         spi_master_sw_sck = low
         data = data << 1
      end loop
   else ;(spi_mode == SPI_MODE_11 then) | (spi_mode == SPI_MODE_10) then
      for 8 loop
         spi_master_sw_sdo = level
         spi_master_sw_sck = low
         spi_master_sw_sck = high
         data = data << 1
      end loop
   end if
end procedure

--------------------------------------------------------------------------------
-- read one byte of data from the spi bus (pseudo variable)
--------------------------------------------------------------------------------
function spi_master_sw'get() return byte is
   var byte data

   var bit level at data : 0
   if (spi_mode == SPI_MODE_00) | (spi_mode == SPI_MODE_01) then
      for 8 loop
         level = spi_master_sw_sdi
         spi_master_sw_sck = high
         spi_master_sw_sck = low
         data = data << 1
      end loop
   else ;(spi_mode == SPI_MODE_11 then) | (spi_mode == SPI_MODE_10) then
      for 8 loop
         level = spi_master_sw_sdi
         spi_master_sw_sck = low
         spi_master_sw_sck = high
         data = data << 1
      end loop
   end if
   return data
end function
