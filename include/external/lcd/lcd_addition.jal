-- ------------------------------------------------------
-- Title: Addition procedures for hd44780 and st7036 lcd display's
--
-- Author: Richard Zengerink,  Copyright (c) 2009, all rights reserved
-- Adapted-by:
-- Compiler: =2.4
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: If you include this file after the lcd basic file like hd44780_4.jal
--              or st7036.jal, all procedures used in thes file works in the included
--              lcd
--
-- Sources:
--
-- Notes:
--
--
--
-- delay's necessary for initialisation and some commands
-- delay in 10 usec units
const LCD_SHORT_DELAY     = 5
-- delay in 10 usec units
const LCD_LONG_DELAY      = 18



-- some constants to control the lcd

const LCD_CLEAR_DISPLAY       = 0b_0000_0001
const LCD_RETURN_HOME         = 0b_0000_0010

const LCD_DISPLAY_ONOFF       = 0b_0000_1000

const LCD_CURSOR_SHIFT_R_VAL  = 0b_0001_0100
const LCD_CURSOR_SHIFT_L_VAL  = 0b_0001_0000
const LCD_DISPLAY_SHIFT_RIGHT = 0b_0001_1100
const LCD_DISPLAY_SHIFT_LEFT  = 0b_0001_1000

const LCD_SET_DDRAM_ADRESS   = 0b_1000_0000


var byte lcd_maxdigit
var byte lcd_nodigit


-- sends command byte in value to lcd
-- for slow commands an extra delay should be added
-- (this routine is only used inside this file)
procedure _lcd_write_command( byte in value ) is
   lcd_rs = LOW                  -- select instruction
   _lcd_write( value )                 -- output byte
   delay_10us(LCD_SHORT_DELAY )      -- required delay
   lcd_rs = HIGH
end procedure



-- shifts the complete display one position to the left
procedure lcd_shift_left(byte in value) is
  -- set lcd back to normal operation
  if value != 0 then
      for value loop
          _lcd_write_command( LCD_DISPLAY_SHIFT_LEFT )
          delay_10us( LCD_SHORT_DELAY )
      end loop
  end if
end procedure


-- shifts the complete display one position to the right
procedure lcd_shift_right(byte in value) is
  if value != 0 then
      for value loop
          _lcd_write_command( LCD_DISPLAY_SHIFT_RIGHT )
          delay_10us( LCD_SHORT_DELAY )
      end loop
  end if
end procedure


-- shifts cursor one position to the left
procedure lcd_cursor_shift_left(byte in value) is
  if value != 0 then
      for value loop
          _lcd_write_command( LCD_CURSOR_SHIFT_L_VAL )
          delay_10us( LCD_SHORT_DELAY )
      end loop
  end if
end procedure


-- shifts cursor one position to the right
procedure lcd_cursor_shift_right(byte in value) is
  if value != 0 then
      for value loop
          _lcd_write_command( LCD_CURSOR_SHIFT_R_VAL )
          delay_10us( LCD_SHORT_DELAY )
      end loop
  end if
end procedure




-- sets or resets cursor blink and puts display on or off
procedure lcd_cursor_blink_display(bit in cursor,bit in blink,bit in display) is
  var byte register

  register = LCD_DISPLAY_ONOFF
  if display then register = register + 4 end if
  if cursor  then register = register + 2 end if
  if blink   then register = register + 1 end if
  _lcd_write_command( register )
end procedure


-- cursor returns home(line 1, position 1)
procedure lcd_home()  is
  _lcd_write_command( LCD_RETURN_HOME )
  delay_10us( LCD_LONG_DELAY )
end procedure


-- clears the line "line" of the lcd
procedure lcd_clear_line( byte in line ) is
  -- set lcd-cursor at start of line
  if lcd_number_of_display_lines == 1 then    ; 1 line display
     lcd_pos = 0
     _lcd_restore_cursor()
     for 80 loop
         lcd_write_data( " " )
     end loop
  elsif lcd_number_of_display_lines == 2 then ; 2 line display
     if line == 1 then lcd_pos = 0 end if
     if line == 2 then lcd_pos = 0x40 end if
     _lcd_restore_cursor()
     for 40 loop
         lcd_write_data( " " )
     end loop

  else -- 3 lines
     if     line == 1 then lcd_pos = 0        ; 3 line display
     elsif line == 2 then lcd_pos = 0x10
     else  line == 3 then lcd_pos = 0x20
     end if
     _lcd_restore_cursor()
     for 16 loop
         lcd_write_data( " " )
     end loop
  end if
  _lcd_restore_cursor()    ;set cursor at begin of deleted line
end procedure


-- Displays a progress bar
procedure lcd_progress(byte in line, byte in amount, byte in pattern) is
  if lcd_number_of_display_lines == 1 then    ; 1 line display
     lcd_pos = pos
  elsif lcd_number_of_display_lines == 2 then ; 2 line display
     if line == 1 then lcd_pos = 0 end if
     if line == 2 then lcd_pos = 0x40 end if
  else -- 3 lines
     if     line == 1 then lcd_pos = 0        ; 3 line display
     elsif line == 2 then lcd_pos = 0x10
     else  line == 3 then lcd_pos = 0x20
     end if
  end if
  _lcd_restore_cursor()
  for amount loop
      lcd_write_data( pattern )
  end loop

  for ( lcd_number_of_display_characters - amount) loop
        lcd_write_data( " " )
  end loop

end procedure


-- Displays a value (byte), white or without Decimal Point, on specified line
-- and position , non leading zero ,with or without left alignment, signed
-- or not signed.
procedure lcd_bvalue_dp_line_pos_left_sign( byte in value, byte in dp, byte in line, byte in poskar, bit in left, bit in sign ) is
   var byte digit0 = 0
   var byte digit1 = 0
   var byte digit2 = 0
   var bit negative = false

   if sign then
      if value >= 128   then
         negative = true
         value = 128 - (value - 128)
      end if
   end if

   while value >= 100 loop
      digit2 = digit2 + 1
      value = value - 100
   end loop

   while value >= 10 loop
      digit1 = digit1 + 1
      value = value - 10
   end loop

   digit0 = value

   if digit2 == 0 & dp < 2 then
      digit2 = 32
   else
      digit2 = digit2 + 48
   end if

   if digit1 == 0 & digit2 == 32 & dp < 1 then
      digit1 = 32
   else
      digit1 = digit1 + 48
   end if

   digit0 = digit0 + 48


   lcd_new_line_cursor_position(line, poskar)

   var bit decp = false
   var byte counter = 0
   lcd_nodigit = 0

         for 5 loop

          if negative then
             lcd_write_data("-")
             negative = false
             lcd_nodigit = lcd_nodigit + 1
          end if

          if dp > 2 & !decp  then
             lcd_write_data(".")
             decp = true
             lcd_nodigit = lcd_nodigit + 1
          else
             if counter == 1 then
                if !left | digit2 != 32 then
                   lcd_write_data(digit2)
                   lcd_nodigit = lcd_nodigit + 1
                end if
             end if
             if counter == 2 then
                if !left | digit1 != 32 then
                   lcd_write_data(digit1)
                   lcd_nodigit = lcd_nodigit + 1
                end if
             end if
             if counter == 3 then
                if !left | digit0 != 32 then
                   lcd_write_data(digit0)
                   lcd_nodigit = lcd_nodigit + 1
                end if
             end if
             counter = counter + 1
          end if

          if dp != 0 then
             dp = dp + 1
          end if

       end loop

       if lcd_nodigit > lcd_maxdigit then
          lcd_maxdigit = lcd_nodigit
       else
          while lcd_maxdigit > lcd_nodigit  loop
                lcd_write_data(32)
                lcd_maxdigit = lcd_maxdigit - 1
          end loop
       end if

end procedure


-- Displays a value (word), white or without Decimal Point, on specified line
-- and position,  non leading zero ,with or without left alignment, signed
-- or not signed
procedure lcd_wvalue_dp_line_pos_left_sign( word in value, byte in dp, byte in line, byte in poskar, bit in left, bit in sign ) is
   var byte digit0 = 0   ;l
   var byte digit1 = 0   ;10
   var byte digit2 = 0   ;100
   var byte digit3 = 0   ;1000
   var byte digit4 = 0   ;10000
   var bit negative = false

   if sign then
     if value >= 32768   then
        negative = true
        value = 32768 - (value - 32768)
     end if
   end if

   while value >= 10000 loop
        digit4 = digit4 + 1
        value = value - 10000
   end loop

   while value >= 1000 loop
        digit3 = digit3 + 1
        value = value - 1000
   end loop

   while value >= 100 loop
        digit2 = digit2 + 1
        value = value - 100
   end loop

   while value >= 10 loop
        digit1 = digit1 + 1
        value = value - 10
   end loop

   digit0 = value

   if digit4 == 0 & dp < 4 then
     digit4 = 32
   else
     digit4 = digit4 + 48
   end if

   if digit3 == 0 & digit4 == 32 & dp < 3 then
     digit3 = 32
   else
     digit3 = digit3 + 48
   end if

   if digit2 == 0 & digit3 == 32 & digit4 == 32 & dp < 2 then
     digit2 = 32
   else
     digit2 = digit2 + 48
   end if

   if digit1 == 0 & digit2 == 32 & digit3 == 32 & digit4 == 32 & dp < 1 then
     digit1 = 32
   else
     digit1 = digit1 + 48
   end if

   digit0 = digit0 + 48

   lcd_new_line_cursor_position(line, poskar)

   var bit decp = false
   var byte counter = 0
   lcd_nodigit = 0

   for 7 loop

      if negative then
         lcd_write_data("-")
         negative = false
         lcd_nodigit = lcd_nodigit + 1
      end if

      if dp > 5 & !decp  then
         lcd_write_data(".")
         decp = true
         lcd_nodigit = lcd_nodigit + 1
      else
         if counter == 1 then
            if !left | digit4 != 32 then
               lcd_write_data(digit4)
               lcd_nodigit = lcd_nodigit + 1
            end if
         end if
         if counter == 2 then
            if !left | digit3 != 32 then
               lcd_write_data(digit3)
               lcd_nodigit = lcd_nodigit + 1
            end if
         end if
         if counter == 3 then
            if !left | digit2 != 32 then
              lcd_write_data(digit2)
               lcd_nodigit = lcd_nodigit + 1
            end if
         end if
         if counter == 4 then
            if !left | digit1 != 32 then
               lcd_write_data(digit1)
               lcd_nodigit = lcd_nodigit + 1
            end if
         end if
         if counter == 5 then
            lcd_write_data(digit0)
            lcd_nodigit = lcd_nodigit + 1
         end if
         counter = counter + 1
      end if

      if dp != 0 then
         dp = dp + 1
      end if

   end loop

   if lcd_nodigit > lcd_maxdigit then
      lcd_maxdigit = lcd_nodigit
   else
      while lcd_maxdigit > lcd_nodigit  loop
         lcd_write_data(32)
         lcd_maxdigit = lcd_maxdigit - 1
      end loop
   end if

end procedure

-- Displays a time (byte),
procedure lcd_time( byte in hrs, byte in minut, byte in second, byte in seperator ) is
   var byte hrs_digit0 = 0   ;l
   var byte hrs_digit1 = 0   ;10
   var byte minut_digit0 = 0   ;1
   var byte minut_digit1 = 0   ;10
   var byte second_digit0 = 0   ;1
   var byte second_digit1 = 0   ;10

   while hrs >= 10 loop
      hrs_digit1 = hrs_digit1 + 1
      hrs = hrs - 10
   end loop
   hrs_digit0 = hrs + 48
   hrs_digit1 = hrs_digit1 + 48
   while minut >= 10 loop
      minut_digit1 = minut_digit1 + 1
      minut = minut - 10
   end loop
   minut_digit0 = minut +48
   minut_digit1 = minut_digit1 + 48
   while second >= 10 loop
      second_digit1 = second_digit1 + 1
      second = second - 10
   end loop
   second_digit0 = second + 48
   second_digit1 = second_digit1 + 48

   lcd_write_data(hrs_digit1  )
   lcd_write_data(hrs_digit0)
   lcd_write_data(seperator)
   lcd_write_data(minut_digit1)
   lcd_write_data(minut_digit0)
   lcd_write_data(seperator)
   lcd_write_data(second_digit1)
   lcd_write_data(second_digit0)

end procedure


-- Displays a date (byte),
procedure lcd_date( byte in day, byte in mounth, word in year, byte in seperator, bit in day_mounth_notation ) is
   var byte day_digit0 = 0   ;l
   var byte day_digit1 = 0   ;10
   var byte mounth_digit0 = 0   ;1
   var byte mounth_digit1 = 0   ;10
   var byte year_digit0 = 0   ;1
   var byte year_digit1 = 0   ;10
   var byte year_digit2 = 0   ;100
   var byte year_digit3 = 0   ;1000
   var word year_mem = year


   while day >= 10 loop
         day_digit1 = day_digit1 + 1
         day = day - 10
   end loop
   day_digit0 = day + 48
   day_digit1 = day_digit1 + 48
   while mounth >= 10 loop
         mounth_digit1 = mounth_digit1 + 1
         mounth = mounth - 10
   end loop
   mounth_digit0 = mounth +48
   mounth_digit1 = mounth_digit1 + 48

   while year >= 1000 loop
         year_digit3 = year_digit3 + 1
         year = year - 1000
   end loop

   while year >= 100 loop
         year_digit2 = year_digit2 + 1
         year = year - 100
   end loop

   while year >= 10 loop
         year_digit1 = year_digit1 + 1
         year = year - 10
   end loop
   year_digit3 = year_digit3 + 48
   year_digit2 = year_digit2 + 48
   year_digit1 = year_digit1 + 48
   year_digit0 = year + 48

   if !day_mounth_notation then
      lcd_write_data(mounth_digit1)
      lcd_write_data(mounth_digit0)
      lcd_write_data(seperator)
      lcd_write_data(day_digit1  )
      lcd_write_data(day_digit0)
      lcd_write_data(seperator)
   else
      lcd_write_data(day_digit1  )
      lcd_write_data(day_digit0)
      lcd_write_data(seperator)
      lcd_write_data(mounth_digit1)
      lcd_write_data(mounth_digit0)
      lcd_write_data(seperator)
   end if

   if year_mem > 100 then
      lcd_write_data(year_digit3)
      lcd_write_data(year_digit2)
   else
      lcd_write_data("'")
   end if

   lcd_write_data(year_digit1)
   lcd_write_data(year_digit0)

end procedure

-- -----------------------------------------------------------------------------
-- Displays a byte value in Hex,
-- -----------------------------------------------------------------------------
procedure lcd_bvalue_hex ( byte in value) is
  var byte temp
   lcd_write_data ("0")
   lcd_write_data ("x")
   temp = value >> 4
   if temp < 10 then
      lcd_write_data (temp + 48)
   else
      lcd_write_data (temp + 55)
   end if
   value = value & 0b00001111
   if value < 10 then
      lcd_write_data (value + 48)
   else
      lcd_write_data (value + 55)
   end if

end procedure

-- ----------------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- Displays a word value in Hex,
-- -----------------------------------------------------------------------------
procedure lcd_wvalue_hex ( word in value) is
  var word temp
   lcd_write_data ("0")
   lcd_write_data ("x")
   temp = value >> 12
   if temp < 10 then
      lcd_write_data (temp + 48)
   else
      lcd_write_data (temp + 55)
   end if
   temp = value >> 8
   temp = temp & 0b00001111
   if temp < 10 then
      lcd_write_data (temp + 48)
   else
      lcd_write_data (temp + 55)
   end if
   temp = value >> 4
   temp = temp & 0b00001111
   if temp < 10 then
      lcd_write_data (temp + 48)
   else
      lcd_write_data (temp + 55)
   end if
   value = value & 0b0000000000001111
   if value < 10 then
      lcd_write_data (value + 48)
   else
      lcd_write_data (value + 55)
   end if

end procedure

-- ----------------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- Displays a byte value in binairy,
-- -----------------------------------------------------------------------------
procedure lcd_bvalue_bin ( byte in value) is
   var bit bit7 at value : 7
   lcd_write_data ("0")
   lcd_write_data ("b")
   for 8 loop
       if bit7 then
          lcd_write_data ("1")
       else
          lcd_write_data ("0")
       end if
       value = value << 1
   end loop

end procedure

-- ----------------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- Displays a string
-- -----------------------------------------------------------------------------

procedure lcd_string( byte in string[]) is
   var word length = count(string)
   var byte counter

   for length using counter loop
      lcd_write_data (string[counter])
   end loop

end procedure


-- ----------------------------------------------------------------------------

