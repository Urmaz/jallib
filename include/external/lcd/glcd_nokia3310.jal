-- -----------------------------------------------------------------------------
-- Title: library for GLCD with pcd8544 controller used in Nokia 3310
-- Author: Andre Miller Copyright (c) 2008..2010, all rights reserved.
-- Adapted-by: Richard Zengerink
-- Compiler:  >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources: http://www.amontec.com/lcd_nokia_3310.shtml
--
-- Description: library for Nokia 3310 display with pcd8544 controller
--
-- --------- nokia display initialisatie in your main program---------------
--
-- alias nok_sclk       is pin_b6    --  assign nokia clock
-- alias nok_sda        is pin_b4    --  assign nokia serial data in
-- alias nok_cs         is pin_c1    --  assign nokia chip enable
-- alias nok_res        is pin_c0    --  assign nokia reset
-- alias nok_dc         is pin_c2    --  assign nokia data/commant

-- pin_b6_direction = output
-- pin_b4_direction = output
-- pin_c2_direction = output
-- pin_c1_direction = output
-- pin_c0_direction = output

-- include lcd_6x8_font_nokia
-- include lcd_nokia3310

-- lcd_Init()
--
-----------------------------------------------------------------------------------
--
-- Dependencies: delay.jal, if using characters then one of the glcd_*x*_font_nokia (see note)
--
--
-- note:  if you want to use characters like in print_char or print_char_i
--        or with print library be shore to include one of the font library like:
--        glcd_5x7_font_nokia or glcd_6x8_font_nokia before this library
--        so in your main program:
--
--        include glcd_5x7_font_nokia
--        include glcd_nokia3310
--

include delay




procedure _lcd_write(byte in value) is
-- Clock in 8 bits of data
  for 8 loop
     nok_sclk = low
     if ( (value & 0x80) == 0 )then
        nok_sda = low
     else
        nok_sda = high
     end if
     nok_sclk = high
     value = value << 1
     delay_1us            -- max dataspeed is 4Mhz so delay for safety
  end loop
end procedure


-- Write a data byte to the LCD
procedure _lcd_write_data(byte in value) is
   nok_dc = high     -- d/c line high for data
   _lcd_write (value)
end procedure



-- Write a command byte to the LCD
procedure _lcd_write_command(byte in value) is
   nok_dc = low     -- d/c line low for command
   _lcd_write (value)
   nok_dc = high   -- set d/c to data
end procedure




-- Set the current position for data (x = 0->83, y = 0->5)
procedure lcd_gotoxy(byte in xnokia, byte in ynokia) is
   _lcd_write_command ( 0x40 | ( ynokia & 0x07 ))
   _lcd_write_command ( 0x80 | ( xnokia & 0x7f ))
end procedure




--Clear the LCD data memory
procedure lcd_clear_screen() is
   nok_sda = low ;; Data bit is low
   nok_dc = high ;; Data mode
   nok_cs = low
   for 6 loop  -- 6 rows
      for 84 loop  -- 84 columns or 'pages'
         for 8 loop --Clock for the 8 bits of the 'page'
            nok_sclk = low
            nok_sclk = high
         end loop
      end loop
   end loop
end procedure

-- Send LCD Initialization
procedure lcd_init() is
-- Set initial status of LCD pins
   nok_sclk = low
   nok_sda = low
   nok_dc = low
   nok_cs = low
   nok_res = low
-- Toggle LCD Reset
   delay_1ms (10)
   nok_res = low
   delay_1ms (250)
   nok_res = high
-- nok_cs = high
   _lcd_write_command (0x21) -- Extended commands
   _lcd_write_command (0xc5) -- LCD Vop
   _lcd_write_command (0x06) -- Temp coef
   _lcd_write_command (0x13) -- LCD Bias 1:48
   _lcd_write_command (0x20) -- Standard commands
   _lcd_write_command (0x0c) -- Normal Mode
-- Clear and position at top of LCD
   lcd_clear_screen()
   lcd_gotoxy (0,0);
end procedure



-- Writes a character to the display
procedure print_char(byte in letter) is
   var word index = 0
   var byte offset
   var byte x

   offset = letter - 32 ;; Fix for ascii value

   for offset loop
      index = index + var_nmb
   end loop

   for var_nmb loop
      x = fontlookup[index]
      _lcd_write_data (x)
      index = index + 1
   end loop

  _lcd_write_data (0) ; Add blank space between characters
end procedure




-- Writes an inverted character to the display
procedure print_char_i(byte in letter) is
   var word index = 0
   var byte offset
   var byte x

   offset = letter - 32 ;; Fix for ascii value

   for offset loop
      index = index + var_nmb
   end loop

   for var_nmb loop
      x = fontlookup[index]
      x = x ^ 0xFF
      _lcd_write_data (x)
      index = index + 1
   end loop

   _lcd_write_data(0xFF) ; Add blank space between characters
end procedure


-- print string to lcd
-- same idea as print_string in print.jal library only this one works
-- and with print.jal unfortunately not

procedure char_string_to_nokia( byte in str[]) is
   var word len = count(str)
   var byte i

   for len using i loop
      print_char (str[i])
   end loop

end procedure

-- prints any bitmap graphics (for instance created with fastLCD
-- http://www.amontec.com/lcd_nokia_3310.shtml) to lcd
-- just create: const byte graphic[] = { graphic max 504 bytes} and call
-- graphic_to_nokia( graphic)

procedure graphic_to_nokia( byte in graph[]) is
   var word len = count(graph)
   var word i

   for len using i loop
      _lcd_write_data(graph[i])
   end loop

end procedure

-- ----------------------------------------------------------------------------
-- lcd'put - write one char to screen (pseudo var, enables streams)
-- ----------------------------------------------------------------------------
procedure lcd'put(byte in data) is
;   pragma inline -- disabled due to complier bug with inline + pseudovar/arrays.
   print_char (data)
end procedure
