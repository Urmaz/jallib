-- ----------------------------------------------------------------------------
-- Title: lcd_backlight.jal 
-- Author: Joep Suijs, Copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Provides standard interface to backlight of (directly connected) lcd.
--
-- Sources:
--
-- Notes: 
-- 
-- ----------------------------------------------------------------------------
      
-- define default
if (defined(lcd_bl_inverted) == false) then
   const bit lcd_bl_inverted = false
end if


-- setup 
if (defined(lcd_backlight_pwm) == true) then
   -- backlight pwm
   include hardware_pwm
   
   if (lcd_backlight_pwm == 1) then
      
      -- ----------------------------------------------------------------------
      -- pwm on ccp1        
      pin_ccp1_direction = output
      pwm_max_resolution(1)
      pwm1_on() 
      
      -- ----------------------------------------------------------------------------
      -- lcd_backlight_variable - set backlight level
      -- ----------------------------------------------------------------------------
      procedure lcd_backlight_variable(byte in value) is
         pragma inline    
         if (lcd_bl_inverted == false) then
            pwm1_set_dutycycle(value)
         else
            pwm1_set_dutycycle(255 - value)
         end if            
      end procedure
      -- ----------------------------------------------------------------------

   elsif (lcd_backlight_pwm == 2) then

      -- ----------------------------------------------------------------------
      -- pwm on ccp2
      pin_ccp2_direction = output
      pwm_max_resolution(1)
      pwm2_on() 

      procedure lcd_backlight_variable(byte in value) is
         pragma inline    
         if (lcd_bl_inverted == false) then
            pwm2_set_dutycycle(value)
         else
            pwm2_set_dutycycle(255 - value)
         end if            
      end procedure
      -- ----------------------------------------------------------------------

   elsif (lcd_backlight_pwm == 3) then

      -- ----------------------------------------------------------------------
      -- pwm on ccp3
      pin_ccp3_direction = output
      pwm_max_resolution(1)
      pwm3_on() 

      procedure lcd_backlight_variable(byte in value) is
         pragma inline    
         if (lcd_bl_inverted == false) then
            pwm3_set_dutycycle(value)
         else
            pwm3_set_dutycycle(255 - value)
         end if            
      end procedure
      -- ----------------------------------------------------------------------

   elsif (lcd_backlight_pwm == 4) then

      -- ----------------------------------------------------------------------
      -- pwm on ccp4
      pin_ccp4_direction = output
      pwm_max_resolution(1)
      pwm4_on() 

      procedure lcd_backlight_variable(byte in value) is
         pragma inline    
         if (lcd_bl_inverted == false) then
            pwm4_set_dutycycle(value)
         else
            pwm4_set_dutycycle(255 - value)
         end if            
      end procedure
      -- ----------------------------------------------------------------------

   elsif (lcd_backlight_pwm == 5) then

      -- ----------------------------------------------------------------------
      -- pwm on ccp5
      pin_ccp5_direction = output
      pwm_max_resolution(1)
      pwm5_on() 

      procedure lcd_backlight_variable(byte in value) is
         pragma inline    
         if (lcd_bl_inverted == false) then
            pwm5_set_dutycycle(value)
         else
            pwm5_set_dutycycle(255 - value)
         end if            
      end procedure
      -- ----------------------------------------------------------------------
   else
      pragma error "invalid value of lcd_backlight_pwm (no such cpp)"
   end if
   
end if


;procedure lcd_backlight_variable(byte in value) is
;end procedure

-- ----------------------------------------------------------------------------
-- lcd_backlight - turn backlite on/off
-- ----------------------------------------------------------------------------
procedure lcd_backlight(bit in onoff) is    
   if(defined(lcd_backlight_variable) == true) then  
      -- lcd_backlight_variable exists
      if (onoff) then
         lcd_backlight_variable(255)
      else
         lcd_backlight_variable(0)
      end if   
      return
   end if
   
   if(defined(lcd_bl) == true) then
      -- backlight pin exists
      if (lcd_bl_inverted == true) then
         -- lcd_bl_inverted exists & is true
         lcd_bl = ! onoff
         return
      end if
      lcd_bl = onoff
   end if
end procedure
