-- -----------------------------------------------------------------------------
-- Title: LCD library for HD44780 compatible LCDs, with 8 bits wide datatransfer
-- Author: Rob Hamerling, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by: Eur van Andel, Joep Suijs (refactoring)
-- Compiler:  >=2.4g
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description:
--    Port interface for HD44780 compatible alphanumeric LCD screens.
--    Uses 8 bit wide datapath + 2 handshake lines (total 10 PIC pins).
--    Expects: - 2 pins for handshake: 'lcd_rs' and 'lcd_en'
--             - 1 complete port for data: 'lcd_dataport'
--    or
--             - 2 pins for handshake: 'lcd_rs' and 'lcd_en'
--             - 8 lines for data: 'lcd_d0' .. 'lcd_d7'
--    note:    a 'port nibble' - the lower or higher 4 bits of a port - give
--             faster and more compact code then random selected data lines.
-- --
--    Directions for use of this library in application programs
--    (in this sequence):
--    1. Declare the following constants:
--          const byte LCD_ROWS     = 2              -- 1, 2 or 4 lines
--          const byte LCD_CHARS    = 16             -- 8, 16 or 20 chars per line
--       and variables (aliases):
--          var   bit  lcd_rs        is  pin_D2      -- cmd/data select
--          var   bit  lcd_en        is  pin_D3      -- trigger
--       and variables (aliases):
--          var   byte lcd_dataport  is  portF       -- 8 data pins
--        or
--          var   byte lcd_dataport_low  is portD_high  -- 4 low order data pins
--          var   byte lcd_dataport_high is portC_high  -- 4 high order data pins
--        or
--          var   bit  lcd_d0        is  pin_D0      -- databit d0 pin
--          var   bit  lcd_d1        is  pin_D1      -- databit d1 pin
--          var   bit  lcd_d2        is  pin_C6      -- databit d2 pin
--          var   bit  lcd_d3        is  pin_C7      -- databit d3 pin
--          var   bit  lcd_d4        is  pin_B0      -- databit d4 pin
--          var   bit  lcd_d5        is  pin_B1      -- databit d5 pin
--          var   bit  lcd_d6        is  pin_C0      -- databit d6 pin
--          var   bit  lcd_d7        is  pin_C2      -- databit d7 pin
-- --
--    2. Set the chosen LCD handshake pins to output:
--          pin_D2_direction     = output
--          pin_D3_direction     = output
--      and the data port to output:
--          portF_direction      = ALL_OUTPUT
--      or 2 half data ports to output:
--          portD_high_direction = ALL_OUTPUT
--          portC_high_direction = ALL_OUTPUT
--      or 8 individual pins to outout
--          pin_D0_direction     = output -- set data pin as output
--          pin_D1_direction     = output -- set data pin as output
--          pin_C6_direction     = output -- set data pin as output
--          pin_C7_direction     = output -- set data pin as output
--          pin_B0_direction     = output -- set data pin as output
--          pin_B1_direction     = output -- set data pin as output
--          pin_C0_direction     = output -- set data pin as output
--          pin_C2_direction     = output -- set data pin as output
-- --
--    3. Include this library.
-- --
--    4. Call lcd_init() to initialize the lcd controller.
-- --
--    Above is an example for a 2x16 LCD.
-- --
--    See hd_44780_common for the LCD API.
--
-- Dependencies: delay.jal
--
-- -----------------------------------------------------------------------------
--

include delay

-- ----------------------------------------------------------------------------
-- sends byte from value to register of the LCD
-- (this procedure is only used inside this file)
--
-- ----------------------------------------------------------------------------
procedure __lcd_write( byte in value ) is
   if (defined(lcd_dataport) == TRUE) then
      lcd_dataport = value                      -- copy data to dataport
   elsif (defined(lcd_dataport_low) == TRUE) then
      lcd_dataport_low  = (value & 0x0F)        -- copy low nibble
      lcd_dataport_high = (value >> 4)          -- copy high nibble
   else
      var bit bit0 at value : 0
      var bit bit1 at value : 1
      var bit bit2 at value : 2
      var bit bit3 at value : 3
      var bit bit4 at value : 4
      var bit bit5 at value : 5
      var bit bit6 at value : 6
      var bit bit7 at value : 7

       -- setup databits
      lcd_d0 = bit0
      lcd_d1 = bit1
      lcd_d2 = bit2
      lcd_d3 = bit3
      lcd_d4 = bit4
      lcd_d5 = bit5
      lcd_d6 = bit6
      lcd_d7 = bit7
   end if

   lcd_en = HIGH                                -- trigger on
   _usec_delay(1)                               -- delay (> 400 ns)
   lcd_en = LOW                                 -- trigger off
   delay_10us(4)                                -- > 37 us
end procedure
-- ----------------------------------------------------------------------------


-- ----------------------------------------------------------------------------
-- sends data byte in value to LCD
-- for slow commands an extra delay should be added
--
-- ----------------------------------------------------------------------------
procedure _lcd_write_data(byte in value) is
   lcd_rs = high                                -- select instruction
   __lcd_write( value )                         -- output byte
end procedure
-- ----------------------------------------------------------------------------


-- ----------------------------------------------------------------------------
-- sends command byte in value to LCD
-- for slow commands an extra delay should be added
--
-- ----------------------------------------------------------------------------
procedure _lcd_write_command(byte in value) is
;   pragma inline
   lcd_rs = low                              -- select instruction
   __lcd_write( value )                      -- output byte
end procedure
-- ----------------------------------------------------------------------------


-- now we defined the interface, add the API
include lcd_hd44780_common

-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure lcd_init() is

   -- first, init the interface
   lcd_rs = LOW                                 -- set to control char mode
   delay_1ms(25)                                -- power-up delay (> 15 ms)
   _lcd_write_command(0b0011_0000)              -- function set
   delay_1ms(5)                                 -- > 4.1 milliseconds
   _lcd_write_command(0b0011_0000)              -- function set
   delay_10us(10)                               -- > 100 us
   _lcd_write_command(0b0011_0000)              -- function set
   delay_10us(4)                                -- > 37 us
   _lcd_write_command(0b0011_1000)              -- to 8-bit mode
   delay_10us(4)                                -- > 37 us

    -- init the API
    _hd44780_init()

end procedure
