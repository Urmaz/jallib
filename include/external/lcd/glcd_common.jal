-- Title: glcd_common - generic routines for graphic lcd
-- Author: Stef Mientki, Serkan Ayyýldýz Copyright (c) 2006..2009, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.2
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources: 
-- 
-- Description: Generic routines for graphic lcd.
-- glcd_box
-- glcd_line
-- --
-- And mapping to char based lcd:
-- lcd_put
-- lcd_...
--
-- Notes: 
--

-- set width of pixel x,y variables
if !defined(GLCD_X_PIXELS) then
   const GLCD_X_SIZE = 1
else
   if GLCD_X_PIXELS < 256 then
      const GLCD_X_SIZE = 1
   else
      const GLCD_X_SIZE = 2
   end if
end if
--
if !defined(GLCD_Y_PIXELS) then
   const GLCD_Y_SIZE = 1
else
   if GLCD_Y_PIXELS < 256 then
      const GLCD_Y_SIZE = 1
   else
      const GLCD_Y_SIZE = 2
   end if
end if

-- set width of color variables
if !defined(GLCD_COLOR_BITS) then  -- 1 bit
   const GLCD_COLOR_SIZE = 1
else
   if GLCD_COLOR_BITS == 1 then    -- 1 bit
      const GLCD_COLOR_SIZE = 1
   elsif GLCD_COLOR_BITS == 16 then   -- 16 bit
      const GLCD_COLOR_SIZE = 2
   else
      pragma error "GLCD_COLOR_BITS VALUE NOT SUPPORTED"
   end if
end if

-- define foreground and background colors, if not defined already
if !defined(LCD_BACK_COLOR) then
   const LCD_BACK_COLOR = 0
end if
if !defined(LCD_PEN_COLOR) then
   const LCD_PEN_COLOR = 1
end if

-- define a write char procedeure, if not defined already
-- otherwise we will get an error on proc lcd'put
if !defined(lcd_write_char) then
   procedure lcd_write_char(byte in x, byte in y, byte in ch) is
   end procedure
end if

-- ----------------------------------------------------------
-- ----------------------------------------------------------
procedure lcd_line(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0, byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is

 var byte*GLCD_X_SIZE xi, xfark
 var byte*GLCD_Y_SIZE yi, yfark

 if (GLCD_X_SIZE == 2) | (GLCD_Y_SIZE == 2) then
    var word fark , xx
 else
    var byte fark , xx
 end if

   xi = x0
   yi = y0
   if x1 >= x0  then  xfark = x1 - x0 else  xfark = x0 - x1 end if
   if y1 >= y0  then  yfark = y1 - y0 else  yfark = y0 - y1 end if

   if xfark >= yfark then fark = xfark else fark = yfark end if
   xx = 0
   for fark loop
      lcd_write_pixel ( xi, yi ,LCD_PEN_COLOR)
      if xx < xfark then
          if x1 >= x0 then xi = xi + 1 else xi = xi - 1 end if
      end if
      if xx < yfark then
          if y1 >= y0 then yi = yi + 1 else yi = yi - 1 end if
      end if
      xx = xx + 1
   end loop
end procedure

-- ----------------------------------------------------------
-- ----------------------------------------------------------
procedure lcd_box(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0, byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is
   pragma inline 
   
   lcd_line ( x0,y0, x1,y0 )
   lcd_line ( x1,y0, x1,y1 )
   lcd_line ( x1,y1, x0,y1 )
   lcd_line ( x0,y1, x0,y0 )
end procedure


var byte glcd_char_x_pos = 0;
var byte glcd_char_y_pos = 0;


-- ----------------------------------------------------------
-- Pseudo variable 'lcd' as alternative for lcd_writechar(<byte>)
-- ----------------------------------------------------------
procedure lcd'put(byte in char) is
    lcd_write_char(glcd_char_x_pos, glcd_char_y_pos, char)
    glcd_char_x_pos = glcd_char_x_pos + 5
end procedure

;-- ----------------------------------------------------------
;-- Send byte to the LCD and automatically set the cursor one 
;-- position right.
;-- There is no check on line overflow.
;-- ----------------------------------------------------------
;procedure  lcd_writechar(byte in c) is    
;   _warn "lcd_writechar() is deprecated - please use lcd_write_char()" 
;   lcd = c
;end procedure

-- ------------------------------------------------------------
-- Clear screen
-- (and set the cursor to the upper left corner: row 0, column 0)
-- ------------------------------------------------------------
procedure  lcd_clearscreen() is
   lcd_fill(LCD_BACK_COLOR)           -- Clear the display
   glcd_char_x_pos = 0;
   glcd_char_y_pos = 0;   
end procedure                                 

-- ------------------------------------------------------------
-- Set cursor position
-- Specify row and column in base-0 notation (first line is 0).
-- ------------------------------------------------------------
procedure  lcd_setcursor(byte in row, byte in col)  is
   glcd_char_y_pos = row * 8 -- up to 8 rows
   glcd_char_x_pos = col * 5 -- up to 25 cols
end procedure

-- ----------------------------------------------------------------------------
-- cursor returns home(line 1, position 1)
-- ----------------------------------------------------------------------------
procedure lcd_home()  is  
   glcd_char_y_pos = 0
   glcd_char_x_pos = 0
end procedure
-- ----------------------------------------------------------------------------
