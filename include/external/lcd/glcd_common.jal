-- Title: glcd_common - generic routines for graphic lcd
-- Author: Stef Mientki, Serkan Ayyýldýz Copyright (c) 2006..2009, all rights reserved.
-- Adapted-by: Joep Suijs
-- Compiler: >=2.2
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description: Generic routines for graphic lcd.
-- glcd_box
-- glcd_line
-- --
-- And mapping to char based lcd:
-- lcd_put
-- lcd_...
--
-- Notes:
--

-- set width of pixel x,y variables
if !defined(GLCD_X_PIXELS) then
   const GLCD_X_SIZE = 1
else
   if GLCD_X_PIXELS < 256 then
      const GLCD_X_SIZE = 1
   else
      const GLCD_X_SIZE = 2
   end if
end if
--
if !defined(GLCD_Y_PIXELS) then
   const GLCD_Y_SIZE = 1
else
   if GLCD_Y_PIXELS < 256 then
      const GLCD_Y_SIZE = 1
   else
      const GLCD_Y_SIZE = 2
   end if
end if

-- set width of color variables
if !defined(GLCD_COLOR_BITS) then  -- 1 bit
   const GLCD_COLOR_SIZE = 1
else
   if GLCD_COLOR_BITS == 1 then    -- 1 bit
      const GLCD_COLOR_SIZE = 1
   elsif GLCD_COLOR_BITS == 16 then   -- 16 bit
      const GLCD_COLOR_SIZE = 2
   else
      pragma error "GLCD_COLOR_BITS VALUE NOT SUPPORTED"
   end if
end if

-- define foreground and background colors, if not defined already
if !defined(LCD_BACK_COLOR) then
   const LCD_BACK_COLOR = 0
end if
if !defined(LCD_PEN_COLOR) then
   const LCD_PEN_COLOR = 1
end if

-- variables for text positioning
var byte*GLCD_X_SIZE glcd_char_x_pos = 0;
var byte*GLCD_Y_SIZE glcd_char_y_pos = 0;

include glcd_font

;   --------------------------------------------------------------------------------
;   -- Draw a line (x0,y0,x1,y1). First set LCD_BACK_COLOR & LCD_PEN_COLOR.
;   --------------------------------------------------------------------------------
;   procedure lcd_line(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0, byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is
;
;    var byte*GLCD_X_SIZE xi, xfark
;    var byte*GLCD_Y_SIZE yi, yfark
;
;    if (GLCD_X_SIZE == 2) | (GLCD_Y_SIZE == 2) then
;       var word fark , xx
;    else
;       var byte fark , xx
;    end if
;
;      xi = x0
;      yi = y0
;
;      if x1 >= x0  then
;         xfark = x1 - x0
;      else
;         xfark = x0 - x1
;      end if
;
;      if y1 >= y0  then
;         yfark = y1 - y0
;      else
;         yfark = y0 - y1
;      end if
;
;      if xfark >= yfark then
;         fark = xfark
;      else
;         fark = yfark
;      end if
;
;      xx = 0
;      for fark loop
;         lcd_write_pixel ( xi, yi ,LCD_PEN_COLOR)
;         if xx < xfark then
;             if x1 >= x0 then
;                xi = xi + 1
;             else
;                xi = xi - 1
;             end if
;         end if
;         if xx < yfark then
;             if y1 >= y0 then
;                yi = yi + 1
;             else
;                yi = yi - 1
;             end if
;         end if
;         xx = xx + 1
;      end loop
;   end procedure

--------------------------------------------------------------------------------
-- Pseudo variable 'lcd' as alternative for lcd_writechar(<byte>)
--------------------------------------------------------------------------------
--

if defined(lcd_write_char) then
   -- if there is no font defined
   if !defined(font_1) then
      procedure lcd'put(byte in char) is
          lcd_write_char(glcd_char_x_pos, glcd_char_y_pos, char)
          glcd_char_x_pos = glcd_char_x_pos + FONT_WIDTH
      end procedure
   else -- if there is a font defined as font_x[]
      procedure lcd'put(byte in char) is
         if defined(FONT_AUTO_WRAP) then
            if FONT_AUTO_WRAP == TRUE then
               if glcd_char_x_pos > (GLCD_X_PIXELS - font_width) then
                  glcd_char_y_pos = glcd_char_y_pos + FONT_HEIGHT
                  glcd_char_x_pos = 0
               end if
            end if
         end if

         if font_number == 1 then
            lcd_write_char(FONT_1, glcd_char_x_pos, glcd_char_y_pos, char)
         elsif font_number == 2 then
            if defined(FONT_2) then
               lcd_write_char(FONT_2, glcd_char_x_pos, glcd_char_y_pos, char)
            end if
         elsif font_number == 3 then
            if defined(FONT_3) then
               lcd_write_char(FONT_3, glcd_char_x_pos, glcd_char_y_pos, char)
            end if
         elsif font_number == 4 then
            if defined(FONT_4) then
               lcd_write_char(FONT_4, glcd_char_x_pos, glcd_char_y_pos, char)
            end if
         elsif font_number == 5 then
            if defined(FONT_5) then
               lcd_write_char(FONT_5, glcd_char_x_pos, glcd_char_y_pos, char)
            end if
         elsif font_number == 6 then
            if defined(FONT_6) then
               lcd_write_char(FONT_6, glcd_char_x_pos, glcd_char_y_pos, char)
            end if
         end if

         -- move the cursor
         glcd_char_x_pos = glcd_char_x_pos + FONT_WIDTH
      end procedure
   end if
end if

;--------------------------------------------------------------------------------
;-- Send byte to the LCD and automatically set the cursor one
;-- position right.
;-- There is no check on line overflow.
;--------------------------------------------------------------------------------
;procedure  lcd_writechar(byte in c) is
;   _warn "lcd_writechar() is deprecated - please use lcd_write_char()"
;   lcd = c
;end procedure

--------------------------------------------------------------------------------
-- Clear screen
-- (and set the cursor to the upper left corner: row 0, column 0)
--------------------------------------------------------------------------------
procedure  lcd_clear_screen() is
   lcd_fill(LCD_BACK_COLOR)           -- Clear the display
   glcd_char_x_pos = 0;
   glcd_char_y_pos = 0;
end procedure
alias lcd_clearscreen is lcd_clear_screen  -- name changed for JSG compilent

--------------------------------------------------------------------------------
-- Set cursor position
-- Specify row and column in base-0 notation (first line is 0).
--------------------------------------------------------------------------------
procedure lcd_set_cursor(byte in row, byte in col)  is
   glcd_char_y_pos = row * FONT_HEIGHT -- up to 8 rows
   glcd_char_x_pos = col * FONT_WIDTH  -- up to 25 cols
end procedure
alias lcd_setcursor is lcd_set_cursor -- name changed for JSG compilent

--------------------------------------------------------------------------------
-- cursor returns home (line 1, position 1)
--------------------------------------------------------------------------------
procedure lcd_home()  is
   glcd_char_y_pos = 0
   glcd_char_x_pos = 0
end procedure

------------------------------------------------------------------------------
-- name        : lcd_ellipse( cx, cy, xradius, yradius, mode )
-- description : Bresenham ellipse plot
-- argument(s) : cx, cy -> 	center of the ellipse
--				       xradius, yradius -> x & y radius of the ellipse
--               mode -> off(erase), on or xor
-- return value: none
-- notes       : Would be nice to draw filled ellipses to.. :-)
-- Author      : Paul D'haene
------------------------------------------------------------------------------
procedure lcd_ellipse(byte*GLCD_X_SIZE in cx,byte*GLCD_Y_SIZE in cy, byte in xradius,byte in yradius) is
  var sword xr = sword(xradius), yr = sword(yradius)
  var sword x = xr, y = 0
  var sword two_a_square = 2 * xr * xr
  var sword two_b_square = 2 * yr * yr
  var sword x_change = yr * yr * (1 - 2 * xr)
  var sword y_change = xr * xr
  var sword ellipse_error = 0
  var sword stopping_x = two_b_square * xr
  var sword stopping_y = 0

  while stopping_x >= stopping_y loop -- 1st set of points, Y' > -1
    lcd_write_pixel(byte(cx + x), byte(cy + y), LCD_PEN_COLOR)
    lcd_write_pixel(byte(cx - x), byte(cy + y), LCD_PEN_COLOR)
    lcd_write_pixel(byte(cx - x), byte(cy - y), LCD_PEN_COLOR)
    lcd_write_pixel(byte(cx + x), byte(cy - y), LCD_PEN_COLOR)

    y = y + 1
    stopping_y = stopping_y + two_a_square
    ellipse_error = ellipse_error + y_change
    y_change = y_change + two_a_square

    if (ellipse_error + ellipse_error + x_change) > 0 then
      x = x - 1
      stopping_x = stopping_x - two_b_square
      ellipse_error = ellipse_error + x_change
      x_change = x_change + two_b_square
    end if
  end loop
  -- 1st set done. start 2nd set of points
  x = 0
  y = yr
  x_change = yr * yr
  y_change = xr * xr * (1 - 2 * yr)
  ellipse_error = 0
  stopping_x = 0
  stopping_y = two_a_square * yr

  while stopping_x <= stopping_y loop -- 2st set of points, Y' < -1
    lcd_write_pixel(byte(cx + x), byte(cy + y), LCD_PEN_COLOR)
    lcd_write_pixel(byte(cx - x), byte(cy + y), LCD_PEN_COLOR)
    lcd_write_pixel(byte(cx - x), byte(cy - y), LCD_PEN_COLOR)
    lcd_write_pixel(byte(cx + x), byte(cy - y), LCD_PEN_COLOR)

    x = x + 1
    stopping_x = stopping_x + two_b_square
    ellipse_error = ellipse_error + x_change
    x_change = x_change + two_b_square

    if (ellipse_error + ellipse_error + y_change) > 0 then
      y = y - 1
      stopping_y = stopping_y - two_a_square
      ellipse_error = ellipse_error + y_change
      y_change = y_change + two_a_square
    end if
  end loop
end procedure

------------------------------------------------------------------------------
-- name        : lcd_circle( cx, cy, radius, LCD_PEN_COLOR )
-- description : Bresenham circle draw
-- argument(s) : cx, cy -> 	center of the circle
--				       radius -> radius of the circle
--               LCD_PEN_COLOR -> off(erase), on or xor
-- return value: none
-- notes       : the circle code does not give a round circle on
--               the lcd.
-- Author      : Paul D'haene
------------------------------------------------------------------------------
procedure lcd_circle(byte*GLCD_X_SIZE in cx, byte*GLCD_Y_SIZE in cy, byte in radius) is
    lcd_ellipse(cx, cy, radius, radius) -- approx scaled y radius
end procedure

-- ----------------------------------------------------------------------------
-- name        : lcd_line( x0, y0, x1, y1, LCD_PEN_COLOR )
-- description : fast integer only line draw
-- argument(s) : x0 -> start x  0 >= x < 84
--               y0 -> start y  0 >= y < 48
--               x1 -> end x
--               y1 -> end y
--               LCD_PEN_COLOR -> draw, erase or xor
-- Author      : Paul D'haene
-- ----------------------------------------------------------------------------
procedure  lcd_line(byte*GLCD_X_SIZE in x0,byte*GLCD_Y_SIZE in y0, byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is
  var sword dx = sword(x1) - sword(x0)
  var sword dy = sword(y1) - sword(y0)
  var sword two_ds = dx + dx
  var sword two_dy = dy + dy
  var sword currentx = sword(x0), currenty = sword(y0)
  var sword xinc = 1, yinc = 1
  var sword two_ds_accumulated_error, two_dy_accumulated_error

  if dx < 0 then
    xinc = -1
    dx = -dx
    two_ds = -two_ds
  end if
  if dy < 0 then
    yinc = -1
    dy = -dy
    two_dy = -two_dy
  end if
  lcd_write_pixel(x0,y0,LCD_PEN_COLOR) -- first point is special case

  if (dx != 0) | (dy != 0) then -- are there other points on the line?
    if dy <= dx then -- is the slope <= 1 ?
      two_ds_accumulated_error = 0 -- initialize error
      while currentx != x1 loop
        currentx = currentx + xinc -- consider x's from x0 to x1
        two_ds_accumulated_error = two_ds_accumulated_error + two_dy
        if two_ds_accumulated_error > dx then
          currenty = currenty + yinc
          two_ds_accumulated_error = two_ds_accumulated_error - two_ds
        end if
        lcd_write_pixel(byte(currentx), byte(currenty), LCD_PEN_COLOR)
      end loop
    else -- the slope is large: reverse roles of X & Y
      two_dy_accumulated_error = 0 -- initialize error
      while currenty != y1 loop
        currenty = currenty + yinc -- consider y's from y0 to y1
        two_dy_accumulated_error = two_dy_accumulated_error + two_ds
        if two_dy_accumulated_error > dy then
          currentx = currentx + xinc
          two_dy_accumulated_error = two_dy_accumulated_error - two_dy
        end if
        lcd_write_pixel(byte(currentx), byte(currenty), LCD_PEN_COLOR)
      end loop
    end if
  end if
end procedure


--------------------------------------------------------------------------------
-- Draw a box (x0,y0,x1,y1). First set LCD_BACK_COLOR & LCD_PEN_COLOR.
--------------------------------------------------------------------------------
procedure lcd_box(byte*GLCD_X_SIZE in x0, byte*GLCD_Y_SIZE in y0, byte*GLCD_X_SIZE in x1, byte*GLCD_Y_SIZE in y1) is
   pragma inline

   lcd_line ( x0,y0, x1,y0 )
   lcd_line ( x1,y0, x1,y1 )
   lcd_line ( x1,y1, x0,y1 )
   lcd_line ( x0,y1, x0,y0 )
end procedure

