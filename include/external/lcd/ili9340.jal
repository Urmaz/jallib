 -- Title: library for ILI9340 controller
-- Author: Urmas Joeleht Copyright (c) 2015..2016, all rights reserved.
-- Adapted-by:
-- Compiler:  >=2.4q3
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources: ILI9340 driver datasheet
-- https://github.com/adafruit/Adafruit_ILI9340/blob/master/Adafruit_ILI9340.cpp
--
-- Description: library for 2.2" display with ILI9340 controller
--
-- Notes:
-- User must take care of:
-- set up SPI: SPI_MODE_10 and SPI_RATE max 1M
--
-- declare 3 glcd pins:
-- alias ili9340_cs is pin_a0
-- alias ili9340_reset is pin_a2
-- alias ili9340_dc is pin_a1
--
-- pin_a0_direction = output
-- pin_a1_direction = output
-- pin_a2_direction = output
--
-- include glcd_font   (glcd font library)
-- include ili9340   -- include library
-- ili9340_init()    -- initialize glcd
--
-- Usable procedures in this library:
-- ili9340_init()
-- ili9340_hw_reset()
-- ili9340_fill_screen()
--
-- For vertically oriented display:
-- ili9340_draw_pixel()
-- ili9340_draw_v_line()
-- ili9340_draw_h_line()
-- ili9340_fill_rectangle()
-- ili9340_cursor_position()
--
-- For horizontally oriented (rotated) display:
-- ili9340_rot_draw_pixel()
-- ili9340_rot_draw_v_line()
-- ili9340_rot_draw_h_line()
-- ili9340_rot_fill_rectangle()
-- ili9340_rot_cursor_position()
--
-- Pseudo variables for printing:
-- ili9340'put
-- ili9340_rot'put - write to rotated display
--
-- Example file:
-- 18f26k22_ili9340.jal
-- ToDo:
-- Draw bitmap
--
-- Variables:
-- ili9340_autowrap        - if end of line, go to next line (1) or not (0)
-- ili9340_pen_color       - color of font
-- ili9340_backround_color - color of font backround
-- ili9340_x_position      - x position of character left top corner
-- ili9340_y_position      - y position of character left top corner
-- ili9340_rot_x_position  - x position of character left top corner when using rotated display
-- ili9340_rot_y_position  - y position of character left top corner when using rotated display
--
-- -------------------------------------------------------------------------
-- GLCD variables
-- -------------------------------------------------------------------------
var word ili9340_x_position      = 0
var word ili9340_y_position      = 0
var word ili9340_rot_x_position  = 0
var word ili9340_rot_y_position  = 0
var word ili9340_pen_color       = 0x0000
var word ili9340_backround_color = 0xFFFF
var bit ili9340_autowrap         = 0

-- -------------------------------------------------------------------------
-- GLCD x, y parameters
-- -------------------------------------------------------------------------
const byte ILI9340_TFTWIDTH      = 240
const word ILI9340_TFTHEIGHT     = 320
const word ILI9340_ROT_TFTWIDTH  = 320  --rotated (horizontal) display width
const byte ILI9340_ROT_TFTHEIGHT = 240  --rotated display height

-- -------------------------------------------------------------------------
--Color definitions
-- -------------------------------------------------------------------------
const word ILI9340_BLACK   = 0x0000
const word ILI9340_BLUE    = 0xF800
const word ILI9340_RED     = 0x001F
const word ILI9340_GREEN   = 0x07E0
const word ILI9340_CYAN    = 0xFFE0
const word ILI9340_MAGENTA = 0xF81F
const word ILI9340_YELLOW  = 0x07FF
const word ILI9340_WHITE   = 0xFFFF

-- -------------------------------------------------------------------------
-- GLCD commands
-- -------------------------------------------------------------------------

const byte ILI9340_NOP        = 0x00
const byte ILI9340_SWRESET    = 0x01
const byte ILI9340_RDDID      = 0x04
const byte ILI9340_RDDST      = 0x09

const byte ILI9340_SLPIN      = 0x10
const byte ILI9340_SLPOUT     = 0x11
const byte ILI9340_PTLON      = 0x12
const byte ILI9340_NORON      = 0x13

const byte ILI9340_RDMODE     = 0x0A
const byte ILI9340_RDMADCTL   = 0x0B
const byte ILI9340_RDPIXFMT   = 0x0C
const byte ILI9340_RDIMGFMT   = 0x0A
const byte ILI9340_RDSELFDIAG = 0x0F

const byte ILI9340_INVOFF     = 0x20
const byte ILI9340_INVON      = 0x21
const byte ILI9340_GAMMASET   = 0x26
const byte ILI9340_DISPOFF    = 0x28
const byte ILI9340_DISPON     = 0x29

const byte ILI9340_CASET      = 0x2A
const byte ILI9340_PASET      = 0x2B
const byte ILI9340_RAMWR      = 0x2C
const byte ILI9340_RAMRD      = 0x2E

const byte ILI9340_PTLAR      = 0x30
const byte ILI9340_MADCTL     = 0x36

const byte ILI9340_MADCTL_MY  = 0x80
const byte ILI9340_MADCTL_MX  = 0x40
const byte ILI9340_MADCTL_MV  = 0x20
const byte ILI9340_MADCTL_ML  = 0x10
const byte ILI9340_MADCTL_RGB = 0x00
const byte ILI9340_MADCTL_BGR = 0x08
const byte ILI9340_MADCTL_MH  = 0x04

const byte ILI9340_PIXFMT     = 0x3A

const byte ILI9340_FRMCTR1    = 0xB1
const byte ILI9340_FRMCTR2    = 0xB2
const byte ILI9340_FRMCTR3    = 0xB3
const byte ILI9340_INVCTR     = 0xB4
const byte ILI9340_DFUNCTR    = 0xB6

const byte ILI9340_PWCTR1     = 0xC0
const byte ILI9340_PWCTR2     = 0xC1
const byte ILI9340_PWCTR3     = 0xC2
const byte ILI9340_PWCTR4     = 0xC3
const byte ILI9340_PWCTR5     = 0xC4
const byte ILI9340_VMCTR1     = 0xC5
const byte ILI9340_VMCTR2     = 0xC7

const byte ILI9340_RDID1      = 0xDA
const byte ILI9340_RDID2      = 0xDB
const byte ILI9340_RDID3      = 0xDC
const byte ILI9340_RDID4      = 0xDD

const byte ILI9340_GMCTRP1    = 0xE0
const byte ILI9340_GMCTRN1    = 0xE1

const byte ILI9340_PWCTR6     = 0xFC

-- -------------------------------------------------------------------------
-- write command to LCD
-- -------------------------------------------------------------------------
procedure ili9340_wr_command(byte in data) is
   ili9340_dc = 0
   ili9340_cs = 0
   spi_master = data
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- write data to LCD
-- -------------------------------------------------------------------------
procedure ili9340_wr_data(byte in data) is
   ili9340_dc = 1
   ili9340_cs = 0
   spi_master = data
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- LCD hardware reset
-- -------------------------------------------------------------------------
procedure ili9340_hw_reset() is
   ili9340_reset = 1
   delay_1ms(5)
   ili9340_reset = 0
   delay_1ms(20)
   ili9340_reset = 1
   delay_1ms(150)
end procedure

-- -------------------------------------------------------------------------
-- LCD initialization
-- -------------------------------------------------------------------------
procedure ili9340_init() is
   ili9340_wr_command (0xEF)
   ili9340_wr_data (0x03)
   ili9340_wr_data (0x80)
   ili9340_wr_data (0x02)

   ili9340_wr_command (0xCF)
   ili9340_wr_data (0x00)
   ili9340_wr_data (0xC1)
   ili9340_wr_data (0x30)

   ili9340_wr_command (0xED)
   ili9340_wr_data (0x64)
   ili9340_wr_data (0x03)
   ili9340_wr_data (0x12)
   ili9340_wr_data (0x81)

   ili9340_wr_command (0xE8)
   ili9340_wr_data (0x85)
   ili9340_wr_data (0x00)
   ili9340_wr_data (0x78)

   ili9340_wr_command (0xCB)
   ili9340_wr_data (0x39)
   ili9340_wr_data (0x2C)
   ili9340_wr_data (0x00)
   ili9340_wr_data (0x34)
   ili9340_wr_data (0x02)

   ili9340_wr_command (0xF7)
   ili9340_wr_data (0x20)

   ili9340_wr_command (0xEA)
   ili9340_wr_data (0x00)
   ili9340_wr_data (0x00)

   ili9340_wr_command (ILI9340_PWCTR1)
   ili9340_wr_data (0x23)

   ili9340_wr_command (ILI9340_PWCTR2)
   ili9340_wr_data (0x10)

   ili9340_wr_command (ILI9340_VMCTR1)
   ili9340_wr_data (0x3e)
   ili9340_wr_data (0x28)

   ili9340_wr_command (ILI9340_VMCTR2)
   ili9340_wr_data (0x86)

   ili9340_wr_command (ILI9340_MADCTL)
   ili9340_wr_data (ILI9340_MADCTL_MX)

   ili9340_wr_command (ILI9340_PIXFMT)
   ili9340_wr_data (0x55)

   ili9340_wr_command (ILI9340_FRMCTR1)
   ili9340_wr_data (0x00)
   ili9340_wr_data (0x18)

   ili9340_wr_command (ILI9340_DFUNCTR)
   ili9340_wr_data (0x08)
   ili9340_wr_data (0x82)
   ili9340_wr_data (0x27)

   ili9340_wr_command (0xF2)
   ili9340_wr_data (0x00)

   ili9340_wr_command (ILI9340_GAMMASET)
   ili9340_wr_data (0x01)

   ili9340_wr_command (ILI9340_GMCTRP1)
   ili9340_wr_data (0x0F)
   ili9340_wr_data (0x31)
   ili9340_wr_data (0x2B)
   ili9340_wr_data (0x0C)
   ili9340_wr_data (0x0E)
   ili9340_wr_data (0x08)
   ili9340_wr_data (0x4E)
   ili9340_wr_data (0xF1)
   ili9340_wr_data (0x37)
   ili9340_wr_data (0x07)
   ili9340_wr_data (0x10)
   ili9340_wr_data (0x03)
   ili9340_wr_data (0x0E)
   ili9340_wr_data (0x09)
   ili9340_wr_data (0x00)

   ili9340_wr_command (ILI9340_GMCTRN1)
   ili9340_wr_data (0x00)
   ili9340_wr_data (0x0E)
   ili9340_wr_data (0x14)
   ili9340_wr_data (0x03)
   ili9340_wr_data (0x11)
   ili9340_wr_data (0x07)
   ili9340_wr_data (0x31)
   ili9340_wr_data (0xC1)
   ili9340_wr_data (0x48)
   ili9340_wr_data (0x08)
   ili9340_wr_data (0x0F)
   ili9340_wr_data (0x0C)
   ili9340_wr_data (0x31)
   ili9340_wr_data (0x36)
   ili9340_wr_data (0x0F)

   ili9340_wr_command (ILI9340_SLPOUT)
   delay_1ms(120)
   ili9340_wr_command (ILI9340_DISPON)
end procedure

-- -------------------------------------------------------------------------
-- Set address window which will be filled with color info (16 bit per pixel)
-- -------------------------------------------------------------------------
procedure ili9340_addr_window(word in x0, word in y0, word in x1, word in y1)  is
   -- andmete kontroll
   if ((x0 >= ILI9340_TFTWIDTH) | (y0 >= ILI9340_TFTHEIGHT) | (x1 >= ILI9340_TFTWIDTH) | (y1 >= ILI9340_TFTHEIGHT)) then
      return
   end if
   ili9340_wr_command(ILI9340_CASET)
   ili9340_wr_data(byte(x0 >> 8))
   ili9340_wr_data(byte(x0 & 0xFF))
   ili9340_wr_data(byte(x1 >> 8))
   ili9340_wr_data(byte(x1 & 0xFF))
   ili9340_wr_command(ILI9340_PASET)
   ili9340_wr_data(byte(y0 >> 8))
   ili9340_wr_data(byte(y0))
   ili9340_wr_data(byte(y1 >> 8))
   ili9340_wr_data(byte(y1))
   ili9340_wr_command(ILI9340_RAMWR)
end procedure

-- -------------------------------------------------------------------------
-- Set address window of rotated display (x - 320 pixels, y - 240 pixels)
-- -------------------------------------------------------------------------
procedure ili9340_rot_addr_window(word in x0, word in y0, word in x1, word in y1)  is
   -- control, if area is on screen
   if ((x0 >= ILI9340_ROT_TFTWIDTH) | (y0 >= ILI9340_ROT_TFTHEIGHT) | (x1 >= ILI9340_ROT_TFTWIDTH) | (y1 >= ILI9340_ROT_TFTHEIGHT)) then
      return
   end if
   ili9340_wr_command(ILI9340_CASET)
   ili9340_wr_data(byte(ILI9340_ROT_TFTHEIGHT - y1 - 1 >> 8))
   ili9340_wr_data(byte(ILI9340_ROT_TFTHEIGHT - y1 - 1 & 0xFF))
   ili9340_wr_data(byte(ILI9340_ROT_TFTHEIGHT - y0 - 1 >> 8))
   ili9340_wr_data(byte(ILI9340_ROT_TFTHEIGHT - y0 - 1 & 0xFF))
   ili9340_wr_command(ILI9340_PASET)
   ili9340_wr_data(byte((x0) >> 8))
   ili9340_wr_data(byte(x0))
   ili9340_wr_data(byte((x1) >> 8))
   ili9340_wr_data(byte(x1))
   ili9340_wr_command(ILI9340_RAMWR)
end procedure

-- -------------------------------------------------------------------------
-- Draw pixel in x, y coordinates
-- -------------------------------------------------------------------------
procedure ili9340_draw_pixel(word in x, word in y, word in color) is
   -- control, if pixel is on screen
   if ((x >= ILI9340_TFTWIDTH) | (y >= ILI9340_TFTHEIGHT)) then
      return
   end if
   
   --set address window and fill with color
   ili9340_addr_window(x, y, x, y)
   ili9340_dc = 1
   ili9340_cs = 0
   spi_master = color >> 8
   spi_master = color
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Draw pixel in rotated x, y coordinates (x - 320 pixels, y - 240 pixels)
-- -------------------------------------------------------------------------
procedure ili9340_rot_draw_pixel(word in x, word in y, word in color) is
   -- control, if pixel is on screen
   if ((x >= ILI9340_ROT_TFTWIDTH) | (y >= ILI9340_ROT_TFTHEIGHT)) then
      return
   end if
   
   --set address window and fill with color
   ili9340_rot_addr_window(x, y, x, y)
   ili9340_dc = 1
   ili9340_cs = 0
   spi_master_hw = color >> 8
   spi_master_hw = color
   ili9340_cs = 1
 end procedure
 
-- -------------------------------------------------------------------------
--Draw horizontal line
-- -------------------------------------------------------------------------
procedure ili9340_draw_h_line(word in x, word in y, word in w, word in color) is
   -- control, if pixels are on screen:
   if ((x >= ILI9340_TFTWIDTH) | (y >= ILI9340_TFTHEIGHT) ) then
      return
   end if
   
   -- if line goes out of border, make it shorter
   if (x + w) >= ILI9340_TFTWIDTH then
      w = ILI9340_TFTWIDTH - x
   end if
   
   --set address window and fill with color
   ili9340_addr_window(x, y, x + w - 1, y)
   ili9340_dc = 1
   ili9340_cs = 0
   for w loop
      spi_master = color >> 8
      spi_master = color
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Draw horizontal line on rotated (x - 320 pixels, y - 240 pixels) display
-- -------------------------------------------------------------------------
procedure ili9340_rot_draw_h_line(word in x, word in y, word in w, word in color) is
   -- if beginning of line is out of screen, do nothing
   if ((x >= ILI9340_ROT_TFTWIDTH) | (y >= ILI9340_ROT_TFTHEIGHT) ) then
      return
   end if
   
   -- if line goes out of border, make it shorter
   if (x + w) >= ILI9340_ROT_TFTWIDTH then
      w = ILI9340_ROT_TFTWIDTH - x
   end if
   
   --set address window and fill with color
   ili9340_rot_addr_window(x, y , x + w - 1, y)
   ili9340_dc = 1
   ili9340_cs = 0
   for w loop
      spi_master_hw = color >> 8
      spi_master_hw = color
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Draw vertical line
-- -------------------------------------------------------------------------
procedure ili9340_draw_v_line(word in x, word in y, word in h, word in color) is
   -- if beginning of line is out of screen, do nothing
   if ((x >= ILI9340_TFTWIDTH) | (y >= ILI9340_TFTHEIGHT) ) then
      return
   end if
   
   -- if line goes out of border, make it shorter
   if ((y + h) >= ILI9340_TFTHEIGHT) then
      h = ILI9340_TFTHEIGHT - y
   end if
   
   --set address window and fill with color
   ili9340_addr_window(x, y, x, y + h - 1)
   ili9340_dc = 1
   ili9340_cs = 0
   for h loop
      spi_master = color >> 8
      spi_master = color
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Draw vertical line on rotated (x - 320 pixels, y - 240 pixels) display
-- -------------------------------------------------------------------------
procedure ili9340_rot_draw_v_line(word in x, word in y, word in h, word in color) is
   -- if beginning of line is out of screen, do nothing
   if ((x >= ILI9340_ROT_TFTWIDTH) | (y >= ILI9340_ROT_TFTHEIGHT) ) then
      return
   end if
   
   -- if line goes out of border, make it shorter
   if (y + h) >= ILI9340_ROT_TFTHEIGHT then
      h = ILI9340_ROT_TFTHEIGHT - y
   end if
   
   --set address window and fill with color
   ili9340_rot_addr_window(x, y, x, y + h - 1)
   ili9340_dc = 1
   ili9340_cs = 0
   for h loop
      spi_master_hw = color >> 8
      spi_master_hw = color
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Draw filled rectangle (x, y, width, height, color)
-- -------------------------------------------------------------------------
procedure ili9340_fill_rectangle(word in x, word in y, word in w, word in h, word in color) is
   -- if beginning of line is out of screen, do nothing
   if ((x >= ILI9340_TFTWIDTH) | (y >= ILI9340_TFTHEIGHT) ) then
      return
   end if
   
   -- if rectangle don't fit to screen, cut it smaller
   if (y + h >= ILI9340_TFTHEIGHT) then
      h = ILI9340_TFTHEIGHT - y
   end if
   if (x + w >= ILI9340_TFTWIDTH) then
      w = ILI9340_TFTWIDTH - x
   end if
   
   --set address window and fill with color
   ili9340_addr_window(x, y, x + w - 1 , y + h - 1)
   ili9340_dc = 1
   ili9340_cs = 0
   for w loop
      for h loop
         spi_master = color >> 8
         spi_master = color
      end loop
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Draw filled rectangle on rotated (x - 320 pixels, y - 240 pixels) display  (x, y, width, height, color)
-- -------------------------------------------------------------------------
procedure ili9340_rot_fill_rectangle(word in x, word in y, word in w, word in h, word in color) is
-- if beginning is out of screen, do nothing
   if ((x >= ILI9340_ROT_TFTWIDTH) | (y >= ILI9340_ROT_TFTHEIGHT) ) then
      return
   end if
   
   -- if rectangle don't fit to screen, cut it smaller
   if ((y + h) >= ILI9340_ROT_TFTHEIGHT) then
      h = ILI9340_ROT_TFTHEIGHT - y
   end if
   if ((x + w) >= ILI9340_ROT_TFTWIDTH) then
      w = ILI9340_ROT_TFTWIDTH - x
   end if
   
   --set address window and fill with color
   ili9340_rot_addr_window(x, y, x + w - 1, y + h - 1)
   ili9340_dc = 1
   ili9340_cs = 0
   for w loop
      for h loop
         spi_master_hw = color >> 8
         spi_master_hw = color
      end loop
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Fill screen with one color
-- -------------------------------------------------------------------------
procedure ili9340_fill_screen(word in color) is
   ili9340_fill_rectangle(0,0,ILI9340_TFTWIDTH,ILI9340_TFTHEIGHT,color)
end procedure

-- -------------------------------------------------------------------------
-- For FONT_TOP_LEFT_HORIZONTAL fonts.
-- Writes one character. Before usage must be set ili9340_pen_color,
-- ili9340_backlight_color, ili9340_cursor_position() and choose font by glcd_font_use()
-- Procedure is filling character area from left to right, from top to bottom with
-- pen and backround color. Faster than pixel-by pixel method for FONT_TOP_LEFT_HORIZONTAL fonts
-- becouse x and y coordinates will be sent to LCD only once per character.
-- -------------------------------------------------------------------------
procedure ili9340_write_char_rectangle(word in x, word in y, byte in character) is
   var word i = 0  -- row, which is written
   var word j = 0  -- how many pixels are in actual row
   var byte k = 0  -- actual byte of row
   var byte m = 0  -- how many bytes are in one row
   var byte mask = 1
   var byte char_byte = 0
   var byte bytes_per_width = glcd_font_current_width_ / 8
   var byte pixels_per_width_rem = glcd_font_current_width_ % 8
   
   if ((x + glcd_font_current_width_>= ILI9340_TFTWIDTH) | (y + glcd_font_current_height_ >= ILI9340_TFTHEIGHT) ) then  --kontroll, kas alguspunkt on ekraanil ja kas täht mahub ära
      return
   end if
   
   --replace unsupported character with space
   if (character < 32) | (character > 122) then
      character = " "
   end if

   -- if font width is not eights multiples, we need somewhere extra bytes
   if pixels_per_width_rem > 0 then
      m = bytes_per_width + 1
   else
      m = bytes_per_width
   end if
   
   --set address window of character and fill with data from font array
   ili9340_addr_window(x, y, x + glcd_font_current_width_ - 1, y + glcd_font_current_height_ - 1)
   ili9340_dc = 1
   ili9340_cs = 0
   for glcd_font_current_height_ using i loop -- do it font height times
      for m using k loop                      -- do it bytes_per_row times (incomplete bytes includes)
         char_byte = glcd_font_lookup(word(character - 32) * glcd_font_current_byte_per_char_ + i * m + m - 1 - k)
         -- do 8 or so many times, as left over from full bytes
         if k == bytes_per_width then
            j = pixels_per_width_rem
         else
            j = 8
         end if
         mask = 0b10000000
         -- if "1" in font pixel, then write pen color, else backround color
         for j loop
            if (mask & char_byte) == mask then
               spi_master = ili9340_pen_color >> 8  -- MSB of color
               spi_master = ili9340_pen_color          -- LSB of color
            else
               spi_master = ili9340_backround_color >> 8
               spi_master = ili9340_backround_color
            end if
            mask = mask >> 1
         end loop
      end loop
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Write character column by column. For FONT_BOTTOM_LEFT_VERTICAL fonts
-- Write one character. Before usage must be set ili9340_pen_color,
-- ili9340_backlight_color, ili9340_cursor_position() and choose font by glcd_font_use()
-- Procedure is filling character area with lines from top to bottom, from left to right with
-- pen and backround color. Faster than pixel-by pixel method for FONT_BOTTOM_LEFT_VERTICAL fonts,
-- becouse x and y coordinates will be sent to LCD only once by every column of font.
-- -------------------------------------------------------------------------
procedure ili9340_write_char_cbc(word in x, word in y, byte in character) is
   var word i,j = 0
   var byte k, m = 0
   var byte mask = 1
   var byte char_byte = 0
   var byte bytes_per_height = glcd_font_current_height_ / 8
   var byte pixels_per_height_rem = glcd_font_current_height_ % 8
   
   if ((x + glcd_font_current_width_ >= ILI9340_TFTWIDTH) | (y + glcd_font_current_height_ >= ILI9340_TFTHEIGHT) ) then  --kontroll, kas alguspunkt on ekraanil ja kas täht mahub ära
      return
   end if
   
   --replace unsupported character with space
   if (character < 32) | (character > 122) then
      character = " "
   end if

   -- if font height is not eights multiples, we need somewhere extra bytes
   if pixels_per_height_rem > 0 then
      m = bytes_per_height + 1
   else
      m = bytes_per_height
   end if
   
   --set address window for every column of character and fill it with data from font array
   for glcd_font_current_width_ using i loop -- do it font width pixel times
      ili9340_addr_window(x + i, y, x + i, y + glcd_font_current_height_ - 1 )
      ili9340_dc = 1
      ili9340_cs = 0
      for m using k loop  -- do it bytes_per_row times (incomplete bytes includes)
         char_byte = glcd_font_lookup(word(character - 32) * glcd_font_current_byte_per_char_ + i * m + k)
         -- do 8 or so many times, as left over from full bytes
         if (k == 0 & m!= bytes_per_height) then
            j = pixels_per_height_rem
            mask = 0b1 << (8 - pixels_per_height_rem)
         else
            j = 8
            mask = 0b1
         end if
         for j loop
            if (mask & char_byte) == mask then
               spi_master_hw = ili9340_pen_color >> 8
               spi_master_hw = ili9340_pen_color
             else
               spi_master_hw = ili9340_backround_color >> 8
               spi_master_hw = ili9340_backround_color
            end if
            mask = mask << 1
         end loop
      end loop
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- For rotated (horizontal) display (x - 320 pixels, y - 240 pixels)
-- For FONT_BOTTOM_LEFT_VERTICAL fonts
-- Write one character. Before usage must be set ili9340_pen_color,
-- ili9340_backlight_color, ili9340_cursor_position() and choose font by glcd_font_use()
-- Procedure is filling character area with lines from top to bottom, from left to right with
-- pen and backround color. Faster than pixel-by pixel method for FONT_BOTTOM_LEFT_VERTICAL fonts,
-- becouse x and y coordinates will be sent to LCD only once by every row of font.
-- -------------------------------------------------------------------------
procedure ili9340_rot_write_char_rectangle(word in x, word in y, byte in character) is
   var word step = 0
   var word i = 0  -- actual column of actual character. From left starting at 0
   var word j = 0  -- how many pixels are in actual row
   var byte k = 0  -- number of actual byte in row
   var byte m = 0
   var byte mask = 1
   var byte char_byte = 0
   var byte bytes_per_height = glcd_font_current_height_ / 8
   var byte pixels_per_height_rem = glcd_font_current_height_ % 8
   
   if ((x + glcd_font_current_width_ >= ILI9340_ROT_TFTWIDTH) | (y + glcd_font_current_height_ >= ILI9340_ROT_TFTHEIGHT) ) then  --kontroll, kas alguspunkt on ekraanil ja kas täht mahub ära
      return
   end if
   
   --replace unsupported character with space
   if (character < 32) | (character > 122) then
      character = " "
   end if

   -- if font height is not eights multiples, we need somewhere extra bytes
   if pixels_per_height_rem > 0 then
      m = bytes_per_height + 1
   else
      m = bytes_per_height
   end if
   
   --set address window of character and fill with data from font array
   ili9340_rot_addr_window(x, y, x + glcd_font_current_width_ - 1,y + glcd_font_current_height_ - 1)
   ili9340_dc = 1
   ili9340_cs = 0
   for glcd_font_current_width_ using i loop
      for m using k loop  -- do it bytes_per_row times
         char_byte = glcd_font_lookup(word(character - 32) * glcd_font_current_byte_per_char_ + i * m + (m - (k + 1)))
         if k == bytes_per_height then
            j = pixels_per_height_rem
         else
            j = 8
         end if
         mask = 0b10000000
         for j loop
            if (mask & char_byte) == mask then
               spi_master_hw = ili9340_pen_color >> 8
               spi_master_hw = ili9340_pen_color
            else
               spi_master_hw = ili9340_backround_color >> 8
               spi_master_hw = ili9340_backround_color
            end if
            mask = mask >> 1
         end loop
      end loop
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Writing FONT_TOP_LEFT_HORIZONTAL fonts for rotated (x - 320, y - 240 pixels) display
-- Writes one character. Before usage must be set ili9340_pen_color,
-- ili9340_backlight_color, ili9340_cursor_position() and choose font by glcd_font_use()
-- Procedure is filling character area line by line from left to right, from top to bottom with
-- pen and backround color. Faster than pixel-by pixel method for FONT_TOP_LEFT_HORIZONTAL fonts
-- becouse x and y coordinates will be sent to LCD only once per character.
-- -------------------------------------------------------------------------
procedure ili9340_rot_write_char_lbl(word in x, word in y, byte in character) is
   var word i = 0  -- actual row. From top starting at 0
   var byte j = 0  -- how many pixels are in actual byte
   var byte k = 0  -- byte number of actual row
   var byte m = 0  -- how many full and incomplete bytes are in one row
   var byte mask = 1
   var byte char_byte = 0
   var byte bytes_per_width = glcd_font_current_width_ / 8
   var byte pixels_per_width_rem = glcd_font_current_width_ % 8
   
   if ((x + glcd_font_current_width_ >= ILI9340_ROT_TFTWIDTH) | (y + glcd_font_current_height_ >= ILI9340_ROT_TFTHEIGHT) ) then  --kontroll, kas alguspunkt on ekraanil ja kas täht mahub ära
      return
   end if
   
   --replace unsupported character with space
   if (character < 32) | (character > 122) then
      character = " "
   end if

   -- if font width is not eights multiples, we need somewhere extra bytes
   if pixels_per_width_rem > 0 then
      m = bytes_per_width + 1
   else
      m = bytes_per_width
   end if
   
   --set address window for every row of character and fill with data from font array
   for glcd_font_current_height_ using i loop
      ili9340_rot_addr_window(x, y + i, x + glcd_font_current_width_ - 1, y + i)
      ili9340_dc = 1
      ili9340_cs = 0
      for m using k loop
         char_byte = glcd_font_lookup(word(character - 32) * glcd_font_current_byte_per_char_ + i * m + m - k - 1)
         if k == bytes_per_width then
            j = pixels_per_width_rem
         else
            j = 8
         end if
         mask = 0b10000000
         for j loop
            if (mask & char_byte) == mask then
               spi_master_hw = ili9340_pen_color >> 8
               spi_master_hw = ili9340_pen_color
            else
               spi_master_hw = ili9340_backround_color >> 8
               spi_master_hw = ili9340_backround_color
            end if
            mask = mask >> 1
         end loop
      end loop
   end loop
   ili9340_cs = 1
end procedure

-- -------------------------------------------------------------------------
-- Set cursor position (x - 0...240, y - 0...320)
-- -------------------------------------------------------------------------
procedure ili9340_cursor_position(word in x, word in y) is
   ili9340_x_position = x
   ili9340_y_position = y
end procedure

-- -------------------------------------------------------------------------
-- pseudo variable
-- chooses write function by glcd font orientation
-- writes characters to LCD
-- if ili9340_autowrap is 1, then goes to next line
-- -------------------------------------------------------------------------
procedure ili9340'put(byte in character) is
   if glcd_font_current_bit_direction_ == FONT_BOTTOM_LEFT_VERTICAL then
      ili9340_write_char_cbc(ili9340_x_position,ili9340_y_position,character)
   else
      ili9340_write_char_rectangle(ili9340_x_position,ili9340_y_position,character)
   end if
   ili9340_x_position = ili9340_x_position + glcd_font_current_width_
   
   -- do autowrap, if enabled
   if (ili9340_x_position + glcd_font_current_width_) > (ILI9340_TFTWIDTH - 1) & (ili9340_autowrap == 1) then
      ili9340_x_position = 0
      ili9340_y_position = ili9340_y_position + glcd_font_current_height_
   end if
end procedure

-- -------------------------------------------------------------------------
-- Set cursor position of rotated display (x - 0...320, y - 0...240)
-- -------------------------------------------------------------------------
procedure ili9340_rot_cursor_position(word in x, word in y) is
      ili9340_rot_x_position = x
      ili9340_rot_y_position = y
end procedure

-- -------------------------------------------------------------------------
-- pseudo variable for rotated display
-- chooses write function by glcd font orientation
-- writes characters to LCD
-- if ili9340_autowrap is 1, then goes to next line
-- -------------------------------------------------------------------------
procedure ili9340_rot'put(byte in character) is
   if glcd_font_current_bit_direction_ == FONT_BOTTOM_LEFT_VERTICAL then
      ili9340_rot_write_char_rectangle(ili9340_rot_x_position,ili9340_rot_y_position,character)
   else
      ili9340_rot_write_char_lbl(ili9340_rot_x_position,ili9340_rot_y_position,character)
   end if
   ili9340_rot_x_position = ili9340_rot_x_position + glcd_font_current_width_
   
   -- do autowrap, if enabled
   if (ili9340_rot_x_position + glcd_font_current_width_) > (ILI9340_ROT_TFTWIDTH - 1) & ili9340_autowrap == 1 then
      ili9340_rot_x_position = 0
      ili9340_rot_y_position = ili9340_rot_y_position + glcd_font_current_height_
   end if
end procedure
