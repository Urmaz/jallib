-- ------------------------------------------------------
-- Title: control for ST7036 based LCD
--
-- Author: Richard Zengerink,  Copyright (c) 2008, all rights reserved
-- Adapted-by:
-- Compiler: =2.4
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library for the control of ST7036 LCD's in spi mode
--
-- in your MAIN file you first need to assign the pins of the PIC how
-- they are connected to the lcd
-- then assign the number of rows (lines) and off course the number of characters
-- after this you need to include the lcd_st7036.jal file
-- see below a complete example.
--
--
-- var volatile bit lcd_data  is pin_d0
-- var volatile bit lcd_data_dir  is pin_d0_direction
-- var volatile bit lcd_clock  is pin_d1
-- var volatile bit lcd_rs is pin_d2   -- data/command select
-- var volatile bit lcd_csb  is pin_d3
--
--
-- const lcd_number_of_display_lines      = 2  ; 1,2,3
-- const lcd_number_of_display_characters = 16 ;
--
--
-- include lcd_st7036
--
--
--
--
-- Sources:
--
-- Notes:
--
-- this type can be attached to your microcontroller serial with only 4 lines in total
--
-- example type name: EA DOG-M   http://www.lcd-module.com/products/dog.html
--
--
-- A pseudo byte variable 'lcd' is declared as alternative for lcd_writechar(<byte>)
-- copied from lcd_HD44780_4.jal and lcd_HD44780_8.jal from Rob Hamerling to make
-- this librarie compatible
-- So also here you an use "lcd = <byte>" in stead of "lcd_writechar(<byte>)"
--
-- And you may also use 'lcd' as destination in functions of other
-- libraries, like print().

include delay                    --  include standard delay lib

--
--
-- sends byte from value to the lcd
-- (this procedure is only used inside this file)
procedure _lcd_write( byte in value ) is
   pragma inline
   lcd_csb = LOW
      for 8 loop
          var bit bit7 at value : 7
          lcd_data = bit7
          lcd_clk = HIGH
          delay_10us( 4 )
          lcd_clk = LOW
          value = value << 1
      end loop
    lcd_csb = HIGH
end procedure
--
--
-- sends data byte in value to lcd
procedure lcd_writechar( byte in value ) is
   _lcd_write( value )                 -- output byte
   delay_10us( 5 )      -- required delay
end procedure
--
--
-- ----------------------------------------------------------
-- Pseudo variable 'lcd' as alternative for lcd_writechar(<byte>)
-- copy from lcd_hd44780_x lib to make it compatible
-- ----------------------------------------------------------
procedure  lcd'put(byte in value) is
   lcd_writechar(value)
end procedure
--
--
-- clears the lcd
procedure lcd_clearscreen()  is
   lcd_rs = LOW                   -- select instruction
   lcd_writechar(0b0000_0001)
   delay_10us( 18 )
   lcd_rs = HIGH
end procedure


-- sets the cursor of the lcd on "pos" position in line "line" in the shadow register
-- starting with line 0 position 0
procedure lcd_setcursor(byte in line, byte in pos) is
 var volatile byte lcd_pos
 if lcd_number_of_display_lines == 1 then
     lcd_pos = pos

  elsif lcd_number_of_display_lines == 2 then
        if line == 1 then
           lcd_pos = pos
        else
           lcd_pos = pos + 0x40
        end if
  else -- 3 lines
        if    line == 0 then lcd_pos = pos
        elsif line == 1 then lcd_pos = pos + 0x10
        else  line == 2 then lcd_pos = pos + 0x20
        end if
  end if
   lcd_rs = LOW
   lcd_writechar(0b_1000_0000 | lcd_pos)
   lcd_rs = HIGH
end procedure


-- Initialize display in 1, 2 or 3 line, display on, no cursor shown an cursor
-- moves to right
-- (this routine is only used inside this file)
procedure lcd_init() is
   pragma inline
   delay_1ms( 45 )                   --  delay for 45mS
   if lcd_number_of_display_lines == 1 then
      _lcd_write_command( 0b_0011_0000 ) -- function set lcd port
      delay_10us( 3 )                       -- extra delay
      _lcd_write_command( 0b_0011_0001 ) -- function set lcd port
      delay_10us( 3 )                      -- extra delay
      _lcd_write_command( 0b_0001_0100 ) -- BIAS
      delay_10us( 3 )                      -- extra delay
    end if

    if lcd_number_of_display_lines == 2 then
       _lcd_write_command( 0b_0011_1000 ) -- function set lcd port
       delay_10us( 3 )                       -- extra delay
       _lcd_write_command( 0b_0011_1001 ) -- function set lcd port
       delay_10us( 3 )                      -- extra delay
       _lcd_write_command( 0b_0001_0100 ) -- BIAS
       delay_10us( 3 )                      -- extra delay
    end if

    if lcd_number_of_display_lines == 3 then
       _lcd_write_command( 0b_0011_1000 ) -- function set lcd port
       delay_10us( 3 )                       -- extra delay
       _lcd_write_command( 0b_0011_1001 ) -- function set lcd port
       delay_10us( 3 )                      -- extra delay
       _lcd_write_command( 0b_0001_0101 ) -- BIAS
       delay_10us( 3 )                      -- extra delay
    end if

    _lcd_write_command( 0b_0111_0000 ) -- contrast set
    delay_10us( 3)                    -- extra delay
    _lcd_write_command( 0b_0101_1110 ) -- power/ICON/contrast control
    delay_10us( 3 )
    _lcd_write_command( 0b_0110_1010 ) -- follower control
    delay_1ms( 210 )
    _lcd_write_command( 0b_0011_1000 ) -- function set lcd port
    delay_10us( 3 )                      -- extra delay
    _lcd_write_command( 0b_0000_1100 )-- display on/off control
  	delay_10us( 3 )
    _lcd_write_command( 0b_0000_0001 )-- clear display
  	delay_10us( 40 )
    _lcd_write_command( 0b_0000_0110 )-- entry mode set, cursor moves to right
  	delay_10us( 40 )

end procedure


lcd_init()                  ; init the lcd

