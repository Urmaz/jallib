-- -----------------------------------------------------------------------------
-- Title: Library to support a chain of WS2812B chips via USART interface
--
-- Author: Rob Hamerling, Copyright (c) 2014..2014, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4q2
--
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Sources:
--
-- Description: Library to control a chain of WS2812Bs
-- This library uses the USART module with master SYNC protocol.
-- - A PIC with Fosc of at least 32 MHz is required.
-- - A high speed USART is required (BRG16 bit in BAUDCON).
-- - The first or only USART interface is used and initialized automatically.
-- - The DIN wire of the WS2812B must be connected to pin_RX/DT of the PIC,
--   and this pin must be configured for digital I/O.
--   Notes: - The pin_RX/DT may have to be configured with Peripheral Pin Select (PPS)
--            or Alternate Pin Function (APFCON_RXDTSEL).
--          -- The clock pin is not used.
-- - AN EXTERNAL SIGNAL INVERTER CIRCUIT IS REQUIRED!
-- - The number of WS2812Bs in the chain must be defined with a constant:
--      const WS2812B_NUM = 30               -- for 30 chained WS2812Bs
-- - The user program should contain 3 byte arrays of WS2812B_NUM bytes each,
--   one for green, one for red, one for blue, e.g.:
--      var byte agreen[WS2812B_NUM]
--      var byte ared[WS2812B_NUM]
--      var byte ablue[WS2812B_NUM]
-- - Procedure ws2812b_refresh() is used to pass the current color settings
--   to the WS2812B LEDs.
-- - Procedure ws2812b_all_white() can be used to give all LEDs the same
--   intensitiy white (or clear all leds with intensity 0) while keeping
--   the color settings in the arrays unchanged.
--
-- Dependencies: ws2812b_common.jal
--
-- Notes: - Warnings are temporary(?) commented out.
--
-- -----------------------------------------------------------------------------

-- ========= 'private' procedures =====================

-- ----------------------------------------------------------------------------
-- Title:   Transmit a byte (with 3 WS2812B 'bits')
-- Input:   Byte with 3 WS2812B bits in the form of 9 USART bits.
--          The 9th bit is fixed 1, so only 8 bits need be passed.
-- Notes: - We do not wait for completion immediately after a write, but
--          wait for completion of the previous write before the next write!
--          This allows to execute instructions during the transfer time to
--          prepare for the transmission of the next byte.
-- ----------------------------------------------------------------------------
procedure _transfer_byte(byte in data) is
   pragma inline
   while (PIR1_TXIF == FALSE) loop end loop   -- await completion of previous transfer
   TXREG = data                               -- send to USART
end procedure


-- ----------------------------------------------------------------------------
-- Title:  Transfer 3 color bytes to the WS2812B chain
-- Input:  Color intensities of green, red and blue (3 bytes)
-- Notes:  - Each WS2812B bit is represented by 3 USART bits:
--           (WS2812B '0' = 0b100, WS2812B '1' = 0b110)
--         - The USART transfers least significant bit first.
--         - USART data polarity is negative (0-bit = high, 1-bit = low)
--           An external circuit should invert the polarity.
-- ----------------------------------------------------------------------------
procedure _ws2812b_write_pixel(byte in green, byte in red, byte in blue) is

   var bit  b00   at green : 7
   var bit  b01   at green : 6
   var bit  b02   at green : 5
   var bit  b03   at green : 4
   var bit  b04   at green : 3
   var bit  b05   at green : 2
   var bit  b06   at green : 1
   var bit  b07   at green : 0
   var bit  b08   at red   : 7
   var bit  b09   at red   : 6
   var bit  b10   at red   : 5
   var bit  b11   at red   : 4
   var bit  b12   at red   : 3
   var bit  b13   at red   : 2
   var bit  b14   at red   : 1
   var bit  b15   at red   : 0
   var bit  b16   at blue  : 7
   var bit  b17   at blue  : 6
   var bit  b18   at blue  : 5
   var bit  b19   at blue  : 4
   var bit  b20   at blue  : 3
   var bit  b21   at blue  : 2
   var bit  b22   at blue  : 1
   var bit  b23   at blue  : 0

   var byte data                                -- byte to transfer
   var bit  dbit1 at data  : 1                  -- )
   var bit  dbit4 at data  : 4                  -- )
   var bit  dbit7 at data  : 7                  -- )

   const byte DATA000 = 0b10_110_110            -- 3 WS2812B zero bits ('000')
                                                -- LSb first, inverted polarity, 9th bit fixed 1
   data = DATA000                               -- '000'
   if (b00) then dbit1 = 0 end if               -- '001'
   if (b01) then dbit4 = 0 end if               -- '01x'
   if (b02) then dbit7 = 0 end if               -- '1xx'
   _transfer_byte(data)

   data = DATA000
   if (b03) then dbit1 = 0 end if
   if (b04) then dbit4 = 0 end if
   if (b05) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b06) then dbit1 = 0 end if
   if (b07) then dbit4 = 0 end if
   if (b08) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b09) then dbit1 = 0 end if
   if (b10) then dbit4 = 0 end if
   if (b11) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b12) then dbit1 = 0 end if
   if (b13) then dbit4 = 0 end if
   if (b14) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b15) then dbit1 = 0 end if
   if (b16) then dbit4 = 0 end if
   if (b17) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b18) then dbit1 = 0 end if
   if (b19) then dbit4 = 0 end if
   if (b20) then dbit7 = 0 end if
   _transfer_byte(data)

   data = DATA000
   if (b21) then dbit1 = 0 end if
   if (b22) then dbit4 = 0 end if
   if (b23) then dbit7 = 0 end if
   _transfer_byte(data)

end procedure


-- --- USART setup: synchronous master mode transmit ---------------------------

if (defined(BAUDCON_BRG16)) then
   BAUDCON_BRG16 = 1                         -- high speed
else
   _error "PIC must have a high speed capable USART (16 bits SPBRG)"
end if

;  _warn "An external device is required to invert the polarity of the control signal!"

const WS2812B_BITMUX = 3                     -- 3 USART bits per WS2812 bit
const WS2812B_BAUDRATE = 800000              -- bitrate of WS2812B is 800 Kbps
SPBRGH = 0
SPBRGL = byte(target_clock / 4 / WS2812B_BAUDRATE / WS2812B_BITMUX - 1)  -- baudrate
TXSTA_SYNC    = 1                            -- synchronous mode
TXSTA_CSRC    = 1                            -- master mode (clock source)
TXSTA_TXEN    = 1                            -- transmit mode
TXSTA_TX9     = 1                            -- using 9-bits data
TXSTA_TX9D    = 1                            -- 9th data bit is always zero!
RCSTA_SREN    = 0                            -- no single receive
RCSTA_CREN    = 0                            -- no continuous receive
RCSTA_SPEN    = 1                            -- enable serial port

include ws2812b_common                       -- common procedures

