-- Title: Library for use with a dedicated RC servo PIC
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library controls an external PIC that works as a slave device
-- and is a dedicated PIC to servo movements.
--
-- Notes:
-- Also see servo_rc_master library, this is not the main servo library.
--
-- Master clock/oscillator should be equal or less then slave clock/osc
-- otherwise you may need to run a slower I2C bus.
--
-- Sources:
-- http://www.horrorseek.com/home/halloween/wolfstone/Motors/svoint_RCServos.html
--

-- servo commands that may be used in the procedure
const byte SERVO_RC_COMMAND_MOVE = 0            -- move command
const byte SERVO_RC_COMMAND_REVERSE = 32        -- reverse servo command
const byte SERVO_RC_COMMAND_ON_OFF = 64         -- turn servo on/off
const byte SERVO_RC_COMMAND_MIN = 96            -- set servo min movement
const byte SERVO_RC_COMMAND_MAX = 128           -- set servo max movement

procedure servo_rc_send_command_i2c(byte in servo_ic_address, byte in command, byte in command_data, byte in servo_num) is
   var byte ack_ok

   var byte pic_i2c_servo_return_data
   var bit error at pic_i2c_servo_return_data : 7
   var bit ready at pic_i2c_servo_return_data : 6
   var bit error2 at pic_i2c_servo_return_data : 5
   var bit ready2 at pic_i2c_servo_return_data : 4
   var bit error3 at pic_i2c_servo_return_data : 3
   var bit ready3 at pic_i2c_servo_return_data : 2
   var bit error4 at pic_i2c_servo_return_data : 1
   var bit ready4 at pic_i2c_servo_return_data : 0

   error = TRUE
   ready = FALSE

   while error == TRUE loop -- send data till dedicated servo pic recieved data ok
      -- send servo command_data and servo number to slave
      i2c_start()                                     -- send start bit
      ack_ok = i2c_transmit_byte(servo_ic_address)    -- transmit data & wait for ack

      -- send servo number and command
      ack_ok = i2c_transmit_byte(command + servo_num) -- transmit command + servo number
      ack_ok = i2c_transmit_byte(command_data)        -- transmit transmit servo command_data or command
      ack_ok = i2c_transmit_byte( (command + servo_num) ^ command_data )  -- transmit error check data
      
      i2c_stop()                                      -- send stop bit

      var bit data_recieved_ok = FALSE
      while data_recieved_ok == FALSE loop  -- wait till data has been recieved and error checking is ok
         -- get the data
         i2c_start()                                      -- send start bit
         ack_ok = i2c_transmit_byte(servo_ic_address + 1) -- transmit data & wait for ack
         pic_i2c_servo_return_data = i2c_receive_byte(0)  -- nack (no ack)
         i2c_stop()                                       -- send stop bit
         
         -- do some error checking on recieved data
         if (error == error) & (error2 == !error3) & (error3 == error4) then
            data_recieved_ok = TRUE
         end if
      end loop
   end loop
   
   -- wait till dedicated servo pic is ready for next command
   while ready == FALSE loop
      -- get the data
      i2c_start()                                      -- send start bit
      ack_ok = i2c_transmit_byte(servo_ic_address + 1) -- transmit data & wait for ack
      pic_i2c_servo_return_data = i2c_receive_byte(0)  -- nack (no ack)
      i2c_stop()                                       -- send stop bit

      -- do some error checking on recieved data
      if !((ready == ready2) & (ready2 == !ready3) & (ready3 == ready4)) then
         ready = FALSE
      end if
   end loop
end procedure
