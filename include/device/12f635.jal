-- ===================================================
-- Title: JalV2 device include file for PIC 12F635
--
-- Author: Rob Hamerling, Copyright (c) 2008..2012, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic12f635, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab883/mplab ide/device/pic12f635.dev
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.1.29
--  - File creation date/time: 28 Jan 2012 19:44
--
-- ===================================================
--
const word DEVICE_ID   = 0x0FA0
const byte PICTYPE[]   = "12F635"
const byte DATASHEET[] = "41232D"
const byte PGMSPEC[]   = "41204H"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks=4)
pragma  target  chip  12f635
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    1024
pragma  eeprom  0x2100,128
pragma  ID      0x2000,4
pragma  data    0x40-0x7D
pragma  shared  0x7E-0x7F
--
var volatile byte _pic_accum shared at 0x7E      -- (compiler)
var volatile byte _pic_isr_w shared at 0x7F      -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0011_1111_1111_1111
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _irp                      =  7
const        byte   _rp1                      =  6
const        byte   _rp0                      =  5
const        byte   _not_to                   =  4
const        byte   _not_pd                   =  3
const        byte   _z                        =  2
const        byte   _dc                       =  1
const        byte   _c                        =  0
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   _GPIO                     at { 0x5,0x105 }
alias               _PORTA                    is _GPIO
--
var          byte   PORTA                     at _PORTA
var          byte   _PORTA_shadow            
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   pragma inline
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   pragma inline
   return (PORTA >> 4)
end function
--
var volatile bit    GPIO_GP5                  at _GPIO : 5
alias               pin_A5                    is GPIO_GP5
alias               pin_GP5                   is pin_A5
alias               pin_T1CKI                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP4                  at _GPIO : 4
alias               pin_A4                    is GPIO_GP4
alias               pin_GP4                   is pin_A4
alias               pin_T1G                   is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP3                  at _GPIO : 3
alias               pin_A3                    is GPIO_GP3
alias               pin_GP3                   is pin_A3
alias               pin_MCLR                  is pin_A3
alias               pin_VPP                   is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP2                  at _GPIO : 2
alias               pin_A2                    is GPIO_GP2
alias               pin_GP2                   is pin_A2
alias               pin_T0CKI                 is pin_A2
alias               pin_C1OUT                 is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP1                  at _GPIO : 1
alias               pin_A1                    is GPIO_GP1
alias               pin_GP1                   is pin_A1
alias               pin_C1IN_NEG              is pin_A1
alias               pin_ICSPCLK               is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP0                  at _GPIO : 0
alias               pin_A0                    is GPIO_GP0
alias               pin_GP0                   is pin_A0
alias               pin_C1IN_POS              is pin_A0
alias               pin_ICSPDAT               is pin_A0
alias               pin_ULPWU                 is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x10A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x10A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_RAIE               at INTCON : 3
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_RAIF               at INTCON : 0
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_EEIF                 at PIR1 : 7
var volatile bit    PIR1_LVDIF                at PIR1 : 6
var volatile bit    PIR1_CRIF                 at PIR1 : 5
var volatile bit    PIR1_C1IF                 at PIR1 : 3
var volatile bit    PIR1_OSFIF                at PIR1 : 2
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_TMR1ON              at T1CON : 0
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0x18 }
var volatile bit*4  WDTCON_WDTPS              at WDTCON : 1
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
-- ------------------------------------------------
var volatile byte   CMCON0                    at { 0x19 }
var volatile bit    CMCON0_COUT               at CMCON0 : 6
var volatile bit    CMCON0_CINV               at CMCON0 : 4
var volatile bit    CMCON0_CIS                at CMCON0 : 3
var volatile bit*3  CMCON0_CM                 at CMCON0 : 0
-- ------------------------------------------------
var volatile byte   CMCON1                    at { 0x1A }
var volatile bit    CMCON1_T1GSS              at CMCON1 : 1
var volatile bit    CMCON1_CMSYNC             at CMCON1 : 0
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit    OPTION_REG_NRAPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISIO                    at { 0x85,0x185 }
alias               TRISA                     is TRISIO
alias               PORTA_direction           is TRISIO
--
procedure PORTA_low_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   pragma inline
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   pragma inline
   return (TRISA >> 4)
end function
--
var volatile bit    TRISIO_TRISIO5            at TRISIO : 5
alias               pin_A5_direction          is TRISIO_TRISIO5
alias               pin_GP5_direction         is pin_A5_direction
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
var volatile bit    TRISIO_TRISIO4            at TRISIO : 4
alias               pin_A4_direction          is TRISIO_TRISIO4
alias               pin_GP4_direction         is pin_A4_direction
alias               pin_T1G_direction         is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISIO_TRISIO3            at TRISIO : 3
alias               pin_A3_direction          is TRISIO_TRISIO3
alias               pin_GP3_direction         is pin_A3_direction
alias               pin_MCLR_direction        is pin_A3_direction
alias               pin_VPP_direction         is pin_A3_direction
--
var volatile bit    TRISIO_TRISIO2            at TRISIO : 2
alias               pin_A2_direction          is TRISIO_TRISIO2
alias               pin_GP2_direction         is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
--
var volatile bit    TRISIO_TRISIO1            at TRISIO : 1
alias               pin_A1_direction          is TRISIO_TRISIO1
alias               pin_GP1_direction         is pin_A1_direction
alias               pin_C1IN_NEG_direction    is pin_A1_direction
alias               pin_ICSPCLK_direction     is pin_A1_direction
--
var volatile bit    TRISIO_TRISIO0            at TRISIO : 0
alias               pin_A0_direction          is TRISIO_TRISIO0
alias               pin_GP0_direction         is pin_A0_direction
alias               pin_C1IN_POS_direction    is pin_A0_direction
alias               pin_ICSPDAT_direction     is pin_A0_direction
alias               pin_ULPWU_direction       is pin_A0_direction
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_EEIE                 at PIE1 : 7
var volatile bit    PIE1_LVDIE                at PIE1 : 6
var volatile bit    PIE1_CRIE                 at PIE1 : 5
var volatile bit    PIE1_C1IE                 at PIE1 : 3
var volatile bit    PIE1_OSFIE                at PIE1 : 2
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_ULPWUE               at PCON : 5
var volatile bit    PCON_SBOREN               at PCON : 4
var volatile bit    PCON_NWUR                 at PCON : 3
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit    OSCCON_HTS                at OSCCON : 2
var volatile bit    OSCCON_LTS                at OSCCON : 1
var volatile bit    OSCCON_SCS                at OSCCON : 0
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte   LVDCON                    at { 0x94 }
var volatile bit    LVDCON_IRVST              at LVDCON : 5
var volatile bit    LVDCON_LVDEN              at LVDCON : 4
var volatile bit*3  LVDCON_LVDL               at LVDCON : 0
-- ------------------------------------------------
var volatile byte   WPUDA                     at { 0x95 }
var volatile bit    WPUDA_WPUDA5              at WPUDA : 5
var volatile bit    WPUDA_WPUDA4              at WPUDA : 4
var volatile bit    WPUDA_WPUDA2              at WPUDA : 2
var volatile bit    WPUDA_WPUDA1              at WPUDA : 1
var volatile bit    WPUDA_WPUDA0              at WPUDA : 0
-- ------------------------------------------------
var volatile byte   IOCA                      at { 0x96 }
var volatile bit    IOCA_IOCA5                at IOCA : 5
var volatile bit    IOCA_IOCA4                at IOCA : 4
var volatile bit    IOCA_IOCA3                at IOCA : 3
var volatile bit    IOCA_IOCA2                at IOCA : 2
var volatile bit    IOCA_IOCA1                at IOCA : 1
var volatile bit    IOCA_IOCA0                at IOCA : 0
-- ------------------------------------------------
var volatile byte   WDA                       at { 0x97 }
var volatile bit    WDA_WDA5                  at WDA : 5
var volatile bit    WDA_WDA4                  at WDA : 4
var volatile bit    WDA_WDA2                  at WDA : 2
var volatile bit    WDA_WDA1                  at WDA : 1
var volatile bit    WDA_WDA0                  at WDA : 0
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x99 }
var volatile bit    VRCON_VREN                at VRCON : 7
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit*4  VRCON_VR                  at VRCON : 0
-- ------------------------------------------------
var volatile byte   EEDAT                     at { 0x9A }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x9B }
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x9C }
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_RD                 at EECON1 : 0
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x9D }
-- ------------------------------------------------
var volatile byte   CRCON                     at { 0x110 }
var volatile bit    CRCON_GO                  at CRCON : 7
var volatile bit    CRCON_NDONE               at CRCON : 7
var volatile bit    CRCON_ENC                 at CRCON : 6
var volatile bit    CRCON_NDEC                at CRCON : 6
var volatile bit*2  CRCON_CRREG               at CRCON : 0
-- ------------------------------------------------
var volatile byte   CRDAT0                    at { 0x111 }
-- ------------------------------------------------
var volatile byte   CRDAT1                    at { 0x112 }
-- ------------------------------------------------
var volatile byte   CRDAT2                    at { 0x113 }
-- ------------------------------------------------
var volatile byte   CRDAT3                    at { 0x114 }
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = 0             -- no ADC module present
const byte ADC_NTOTAL_CHANNEL = 0
const byte ADC_ADCS_BITCOUNT  = 0
--
const PPS_GROUP  = PPS_0        -- no Peripheral Pin Selection
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON0 = 0b0000_0111        -- disable comparator
   CMCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   comparator_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x7 {                  -- oscillator selection bits
       RC_CLKOUT = 0x7                     -- rc oscillator: clkout function on ra4/t1g/osc2/clkout pin, rc on ra5/t1cki/osc1/clkin
       RC_NOCLKOUT = 0x6                   -- rcio oscillator: i/o function on ra4/t1g/osc2/clkout pin, rc on ra5/t1cki/osc1/clkin
       INTOSC_CLKOUT = 0x5                 -- intosc oscillator: clkout function on ra4/t1g/osc2/clkout pin, i/o function on ra5/t1cki/osc1/clkin
       INTOSC_NOCLKOUT = 0x4               -- intoscio oscillator: i/o function on ra4/t1g/osc2/clkout pin, i/o function on ra5/t1cki/osc1/clkin
       EC_NOCLKOUT = 0x3                   -- ec: i/o function on ra4/t1g/osc2/clkout, clkin on ra5/t1cki/osc1/clkin
       HS = 0x2                            -- hs oscillator: high-speed crystal/resonator on ra5/t1cki/osc1/clkin and ra4/t1g/osc2/clkout
       XT = 0x1                            -- xt oscillator: crystal/resonator on ra5/t1cki/osc1/clkin and ra4/t1g/osc2/clkout
       LP = 0x0                            -- lp oscillator: low-power crystal on ra5/t1cki/osc1/clkin and ra4/t1g/osc2/clkout
       }
pragma fuse_def WDT 0x8 {                  -- watchdog timer enable bit
       ENABLED = 0x8                       -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def PWRTE 0x10 {               -- power-up timer enable bit
       DISABLED = 0x10                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def MCLR 0x20 {                -- mclr pin function select bit
       EXTERNAL = 0x20                     -- enabled
       INTERNAL = 0x0                      -- disabled
       }
pragma fuse_def CP 0x40 {                  -- code protection bit
       DISABLED = 0x40                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def CPD 0x80 {                 -- data code protection bit
       DISABLED = 0x80                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def BROWNOUT 0x300 {           -- brown-out reset selection bits
       ENABLED = 0x300                     -- enabled
       RUNONLY = 0x200                     -- bod enabled while running and disabled in sleep. sboden bit disabled.
       CONTROL = 0x100                     -- sboden controls bod function
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def IESO 0x400 {               -- internal-external switchover bit
       ENABLED = 0x400                     -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def FCMEN 0x800 {              -- fail-safe clock monitor enable bit
       ENABLED = 0x800                     -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def WURE 0x1000 {              -- wake-up reset enable bit
       DISABLED = 0x1000                   -- disabled
       ENABLED = 0x0                       -- enabled
       }
--
