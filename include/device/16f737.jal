-- ===================================================
-- Title: JalV2 device include file for pic16f737
--
-- Author: Rob Hamerling, Copyright (c) 2008..2009, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: >=2.4j
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f737, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for config bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab830/mplab_ide/device/pic16f737.dev
--  - x:/mplab830/mpasm_suite/lkr/16f737_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.62
--  - File creation date/time: 6 Apr 2009 20:54
--
-- ===================================================
--
-- Device-ID: 0x0BA0
-- DataSheet: 30498
-- Programming Specifications: 30492
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 12.500-13.500 Default: 13.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks = 4)
pragma  target  chip  16f737
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    4096                    -- (words)
pragma  data    0x20-0x6F,0xA0-0xEF,0x110-0x16F,0x190-0x1EF
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum shared at { 0x7E,0xFE,0x17E,0x1FE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x7F,0xFF,0x17F,0x1FF }   -- (compiler)
--
const word  _FUSES_CT             = 2
const word  _FUSE_BASE[_FUSES_CT] = { 0x2007,0x2008 }
const word  _FUSES[_FUSES_CT]     = { 0x3FFF,0x3FFF }
--
const word  _ID_CT                = 4
const word  _ID_BASE[_ID_CT]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_CT]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte  INDF                 at { 0x0,0x80,0x100,0x180 }
var volatile byte  _ind                 at { 0x0,0x80,0x100,0x180 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  TMR0                 at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte  PCL                  at { 0x2,0x82,0x102,0x182 }
var volatile byte  _pcl                 at { 0x2,0x82,0x102,0x182 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  STATUS               at { 0x3,0x83,0x103,0x183 }
var volatile bit   STATUS_IRP           at STATUS : 7
var volatile bit*2 STATUS_RP            at STATUS : 5
var volatile bit   STATUS_NTO           at STATUS : 4
var volatile bit   STATUS_NPD           at STATUS : 3
var volatile bit   STATUS_Z             at STATUS : 2
var volatile bit   STATUS_DC            at STATUS : 1
var volatile bit   STATUS_C             at STATUS : 0
var volatile byte  _status              at { 0x3,0x83,0x103,0x183 }      -- (compiler)
const        byte  _irp                 =  7      -- (compiler)
const        byte  _RP1                 =  6      -- (compiler)
const        byte  _RP0                 =  5      -- (compiler)
const        byte  _not_to              =  4      -- (compiler)
const        byte  _not_pd              =  3      -- (compiler)
const        byte  _z                   =  2      -- (compiler)
const        byte  _dc                  =  1      -- (compiler)
const        byte  _c                   =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte  FSR                  at { 0x4,0x84,0x104,0x184 }
var volatile byte  _fsr                 at { 0x4,0x84,0x104,0x184 }      -- (compiler)
-- ------------------------------------------------
var volatile byte  PORTA                at { 0x5 }
--
var          byte  _PORTA_shadow        = PORTA
--
procedure _PORTA_flush() is
   pragma inline
   PORTA = _PORTA_shadow
end procedure
procedure PORTA'put(byte in x) is
   pragma inline
   _PORTA_shadow = x
   _PORTA_flush()
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA_flush()
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA_flush()
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit   PORTA_RA7            at PORTA : 7
var volatile bit   pin_A7               at PORTA : 7
--
procedure pin_A7'put(bit in x at _PORTA_shadow : 7) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA6            at PORTA : 6
var volatile bit   pin_A6               at PORTA : 6
--
procedure pin_A6'put(bit in x at _PORTA_shadow : 6) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA5            at PORTA : 5
var volatile bit   pin_A5               at PORTA : 5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA4            at PORTA : 4
var volatile bit   pin_A4               at PORTA : 4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA3            at PORTA : 3
var volatile bit   pin_A3               at PORTA : 3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA2            at PORTA : 2
var volatile bit   pin_A2               at PORTA : 2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA1            at PORTA : 1
var volatile bit   pin_A1               at PORTA : 1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit   PORTA_RA0            at PORTA : 0
var volatile bit   pin_A0               at PORTA : 0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTB                at { 0x6,0x106 }
--
var          byte  _PORTB_shadow        = PORTB
--
procedure _PORTB_flush() is
   pragma inline
   PORTB = _PORTB_shadow
end procedure
procedure PORTB'put(byte in x) is
   pragma inline
   _PORTB_shadow = x
   _PORTB_flush()
end procedure
--
procedure PORTB_low'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB_flush()
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB_flush()
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit   PORTB_RB7            at PORTB : 7
var volatile bit   pin_B7               at PORTB : 7
--
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB6            at PORTB : 6
var volatile bit   pin_B6               at PORTB : 6
--
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB5            at PORTB : 5
var volatile bit   pin_B5               at PORTB : 5
--
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB4            at PORTB : 4
var volatile bit   pin_B4               at PORTB : 4
--
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB3            at PORTB : 3
var volatile bit   pin_B3               at PORTB : 3
--
procedure pin_B3'put(bit in x at _PORTB_shadow : 3) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB2            at PORTB : 2
var volatile bit   pin_B2               at PORTB : 2
--
procedure pin_B2'put(bit in x at _PORTB_shadow : 2) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB1            at PORTB : 1
var volatile bit   pin_B1               at PORTB : 1
--
procedure pin_B1'put(bit in x at _PORTB_shadow : 1) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit   PORTB_RB0            at PORTB : 0
var volatile bit   pin_B0               at PORTB : 0
--
procedure pin_B0'put(bit in x at _PORTB_shadow : 0) is
   pragma inline
   _PORTB_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTC                at { 0x7 }
--
var          byte  _PORTC_shadow        = PORTC
--
procedure _PORTC_flush() is
   pragma inline
   PORTC = _PORTC_shadow
end procedure
procedure PORTC'put(byte in x) is
   pragma inline
   _PORTC_shadow = x
   _PORTC_flush()
end procedure
--
procedure PORTC_low'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC_flush()
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC_flush()
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit   PORTC_RC7            at PORTC : 7
var volatile bit   pin_C7               at PORTC : 7
--
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC6            at PORTC : 6
var volatile bit   pin_C6               at PORTC : 6
--
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC5            at PORTC : 5
var volatile bit   pin_C5               at PORTC : 5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC4            at PORTC : 4
var volatile bit   pin_C4               at PORTC : 4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC3            at PORTC : 3
var volatile bit   pin_C3               at PORTC : 3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC2            at PORTC : 2
var volatile bit   pin_C2               at PORTC : 2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC1            at PORTC : 1
var volatile bit   pin_C1               at PORTC : 1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit   PORTC_RC0            at PORTC : 0
var volatile bit   pin_C0               at PORTC : 0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte  PORTE                at { 0x9 }
--
var          byte  _PORTE_shadow        = PORTE
--
procedure _PORTE_flush() is
   pragma inline
   PORTE = _PORTE_shadow
end procedure
procedure PORTE'put(byte in x) is
   pragma inline
   _PORTE_shadow = x
   _PORTE_flush()
end procedure
--
procedure PORTE_low'put(byte in x) is
   _PORTE_shadow = (_PORTE_shadow & 0xF0) | (x & 0x0F)
   _PORTE_flush()
end procedure
function PORTE_low'get() return byte is
   return (PORTE & 0x0F)
end function
--
procedure PORTE_high'put(byte in x) is
   _PORTE_shadow = (_PORTE_shadow & 0x0F) | (x << 4)
   _PORTE_flush()
end procedure
function PORTE_high'get() return byte is
   return (PORTE >> 4)
end function
--
var volatile bit   PORTE_RE3            at PORTE : 3
var volatile bit   pin_E3               at PORTE : 3
--
procedure pin_E3'put(bit in x at _PORTE_shadow : 3) is
   pragma inline
   _PORTE_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte  PCLATH               at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5 PCLATH_PCLATH        at PCLATH : 0
var volatile byte  _pclath              at { 0xA,0x8A,0x10A,0x18A }      -- (compiler)
-- ------------------------------------------------
var volatile byte  INTCON               at { 0xB,0x8B,0x10B,0x18B }
var volatile bit   INTCON_GIE           at INTCON : 7
var volatile bit   INTCON_PEIE          at INTCON : 6
var volatile bit   INTCON_TMR0IE        at INTCON : 5
var volatile bit   INTCON_INTE          at INTCON : 4
var volatile bit   INTCON_RBIE          at INTCON : 3
var volatile bit   INTCON_TMR0IF        at INTCON : 2
var volatile bit   INTCON_INTF          at INTCON : 1
var volatile bit   INTCON_RBIF          at INTCON : 0
-- ------------------------------------------------
var volatile byte  PIR1                 at { 0xC }
var volatile bit   PIR1_ADIF            at PIR1 : 6
var volatile bit   PIR1_RCIF            at PIR1 : 5
var volatile bit   PIR1_TXIF            at PIR1 : 4
var volatile bit   PIR1_SSPIF           at PIR1 : 3
var volatile bit   PIR1_CCP1IF          at PIR1 : 2
var volatile bit   PIR1_TMR2IF          at PIR1 : 1
var volatile bit   PIR1_TMR1IF          at PIR1 : 0
-- ------------------------------------------------
var volatile byte  PIR2                 at { 0xD }
var volatile bit   PIR2_OSFIF           at PIR2 : 7
var volatile bit   PIR2_CMIF            at PIR2 : 6
var volatile bit   PIR2_LVDIF           at PIR2 : 5
var volatile bit   PIR2_BCLIF           at PIR2 : 3
var volatile bit   PIR2_CCP3IF          at PIR2 : 1
var volatile bit   PIR2_CCP2IF          at PIR2 : 0
-- ------------------------------------------------
var volatile word  TMR1                 at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1L                at { 0xE }
-- ------------------------------------------------
var volatile byte  TMR1H                at { 0xF }
-- ------------------------------------------------
var volatile byte  T1CON                at { 0x10 }
var volatile bit   T1CON_T1RUN          at T1CON : 6
var volatile bit*2 T1CON_T1CKPS         at T1CON : 4
var volatile bit   T1CON_T1OSCEN        at T1CON : 3
var volatile bit   T1CON_NT1SYNC        at T1CON : 2
var volatile bit   T1CON_TMR1CS         at T1CON : 1
var volatile bit   T1CON_TMR1ON         at T1CON : 0
-- ------------------------------------------------
var volatile byte  TMR2                 at { 0x11 }
-- ------------------------------------------------
var volatile byte  T2CON                at { 0x12 }
var volatile bit*4 T2CON_TOUTPS         at T2CON : 3
var volatile bit   T2CON_TMR2ON         at T2CON : 2
var volatile bit*2 T2CON_T2CKPS         at T2CON : 0
-- ------------------------------------------------
var volatile byte  SSPBUF               at { 0x13 }
-- ------------------------------------------------
var volatile byte  SSPCON               at { 0x14 }
var volatile bit   SSPCON_WCOL          at SSPCON : 7
var volatile bit   SSPCON_SSPOV         at SSPCON : 6
var volatile bit   SSPCON_SSPEN         at SSPCON : 5
var volatile bit   SSPCON_CKP           at SSPCON : 4
var volatile bit*4 SSPCON_SSPM          at SSPCON : 0
-- ------------------------------------------------
var volatile word  CCPR1                at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1L               at { 0x15 }
-- ------------------------------------------------
var volatile byte  CCPR1H               at { 0x16 }
-- ------------------------------------------------
var volatile byte  CCP1CON              at { 0x17 }
var volatile bit*2 CCP1CON_DC1B         at CCP1CON : 4
var volatile bit*4 CCP1CON_CCP1M        at CCP1CON : 0
-- ------------------------------------------------
var volatile byte  RCSTA                at { 0x18 }
var volatile bit   RCSTA_SPEN           at RCSTA : 7
var volatile bit   RCSTA_RX9            at RCSTA : 6
var volatile bit   RCSTA_SREN           at RCSTA : 5
var volatile bit   RCSTA_CREN           at RCSTA : 4
var volatile bit   RCSTA_ADDEN          at RCSTA : 3
var volatile bit   RCSTA_FERR           at RCSTA : 2
var volatile bit   RCSTA_OERR           at RCSTA : 1
var volatile bit   RCSTA_RX9D           at RCSTA : 0
-- ------------------------------------------------
var volatile byte  TXREG                at { 0x19 }
-- ------------------------------------------------
var volatile byte  RCREG                at { 0x1A }
-- ------------------------------------------------
var volatile word  CCPR2                at { 0x1B }
-- ------------------------------------------------
var volatile byte  CCPR2L               at { 0x1B }
-- ------------------------------------------------
var volatile byte  CCPR2H               at { 0x1C }
-- ------------------------------------------------
var volatile byte  CCP2CON              at { 0x1D }
var volatile bit*2 CCP2CON_DC2B         at CCP2CON : 4
var volatile bit*4 CCP2CON_CCP2M        at CCP2CON : 0
-- ------------------------------------------------
var volatile byte  ADRESH               at { 0x1E }
-- ------------------------------------------------
var volatile byte  ADCON0               at { 0x1F }
var volatile bit*2 ADCON0_ADCS          at ADCON0 : 6
var volatile bit*3 ADCON0_CHS           at ADCON0 : 3
var volatile bit   ADCON0_GO            at ADCON0 : 2
var volatile bit   ADCON0_NDONE         at ADCON0 : 2
var volatile bit   ADCON0_CHS3          at ADCON0 : 1
var volatile bit   ADCON0_ADON          at ADCON0 : 0
-- ------------------------------------------------
var volatile byte  OPTION_REG           at { 0x81,0x181 }
var volatile bit   OPTION_REG_NRBPU     at OPTION_REG : 7
var volatile bit   OPTION_REG_INTEDG    at OPTION_REG : 6
var volatile bit   OPTION_REG_T0CS      at OPTION_REG : 5
var volatile bit   OPTION_REG_T0SE      at OPTION_REG : 4
var volatile bit   OPTION_REG_PSA       at OPTION_REG : 3
var volatile bit*3 OPTION_REG_PS        at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte  TRISA                at { 0x85 }
var volatile byte  PORTA_direction      at TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit   TRISA_TRISA7         at TRISA : 7
var volatile bit   pin_A7_direction     at TRISA : 7
var volatile bit   TRISA_TRISA6         at TRISA : 6
var volatile bit   pin_A6_direction     at TRISA : 6
var volatile bit   TRISA_TRISA5         at TRISA : 5
var volatile bit   pin_A5_direction     at TRISA : 5
var volatile bit   TRISA_TRISA4         at TRISA : 4
var volatile bit   pin_A4_direction     at TRISA : 4
var volatile bit   TRISA_TRISA3         at TRISA : 3
var volatile bit   pin_A3_direction     at TRISA : 3
var volatile bit   TRISA_TRISA2         at TRISA : 2
var volatile bit   pin_A2_direction     at TRISA : 2
var volatile bit   TRISA_TRISA1         at TRISA : 1
var volatile bit   pin_A1_direction     at TRISA : 1
var volatile bit   TRISA_TRISA0         at TRISA : 0
var volatile bit   pin_A0_direction     at TRISA : 0
-- ------------------------------------------------
var volatile byte  TRISB                at { 0x86,0x186 }
var volatile byte  PORTB_direction      at TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit   TRISB_TRISB7         at TRISB : 7
var volatile bit   pin_B7_direction     at TRISB : 7
var volatile bit   TRISB_TRISB6         at TRISB : 6
var volatile bit   pin_B6_direction     at TRISB : 6
var volatile bit   TRISB_TRISB5         at TRISB : 5
var volatile bit   pin_B5_direction     at TRISB : 5
var volatile bit   TRISB_TRISB4         at TRISB : 4
var volatile bit   pin_B4_direction     at TRISB : 4
var volatile bit   TRISB_TRISB3         at TRISB : 3
var volatile bit   pin_B3_direction     at TRISB : 3
var volatile bit   TRISB_TRISB2         at TRISB : 2
var volatile bit   pin_B2_direction     at TRISB : 2
var volatile bit   TRISB_TRISB1         at TRISB : 1
var volatile bit   pin_B1_direction     at TRISB : 1
var volatile bit   TRISB_TRISB0         at TRISB : 0
var volatile bit   pin_B0_direction     at TRISB : 0
-- ------------------------------------------------
var volatile byte  TRISC                at { 0x87 }
var volatile byte  PORTC_direction      at TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit   TRISC_TRISC7         at TRISC : 7
var volatile bit   pin_C7_direction     at TRISC : 7
var volatile bit   TRISC_TRISC6         at TRISC : 6
var volatile bit   pin_C6_direction     at TRISC : 6
var volatile bit   TRISC_TRISC5         at TRISC : 5
var volatile bit   pin_C5_direction     at TRISC : 5
var volatile bit   TRISC_TRISC4         at TRISC : 4
var volatile bit   pin_C4_direction     at TRISC : 4
var volatile bit   TRISC_TRISC3         at TRISC : 3
var volatile bit   pin_C3_direction     at TRISC : 3
var volatile bit   TRISC_TRISC2         at TRISC : 2
var volatile bit   pin_C2_direction     at TRISC : 2
var volatile bit   TRISC_TRISC1         at TRISC : 1
var volatile bit   pin_C1_direction     at TRISC : 1
var volatile bit   TRISC_TRISC0         at TRISC : 0
var volatile bit   pin_C0_direction     at TRISC : 0
-- ------------------------------------------------
var volatile byte  PIE1                 at { 0x8C }
var volatile bit   PIE1_ADIE            at PIE1 : 6
var volatile bit   PIE1_RCIE            at PIE1 : 5
var volatile bit   PIE1_TXIE            at PIE1 : 4
var volatile bit   PIE1_SSPIE           at PIE1 : 3
var volatile bit   PIE1_CCP1IE          at PIE1 : 2
var volatile bit   PIE1_TMR2IE          at PIE1 : 1
var volatile bit   PIE1_TMR1IE          at PIE1 : 0
-- ------------------------------------------------
var volatile byte  PIE2                 at { 0x8D }
var volatile bit   PIE2_OSFIE           at PIE2 : 7
var volatile bit   PIE2_CMIE            at PIE2 : 6
var volatile bit   PIE2_LVDIE           at PIE2 : 5
var volatile bit   PIE2_BCLIE           at PIE2 : 3
var volatile bit   PIE2_CCP3IE          at PIE2 : 1
var volatile bit   PIE2_CCP2IE          at PIE2 : 0
-- ------------------------------------------------
var volatile byte  PCON                 at { 0x8E }
var volatile bit   PCON_SBOREN          at PCON : 2
var volatile bit   PCON_NPOR            at PCON : 1
var volatile bit   PCON_NBOR            at PCON : 0
-- ------------------------------------------------
var volatile byte  OSCCON               at { 0x8F }
var volatile bit*3 OSCCON_IRCF          at OSCCON : 4
var volatile bit   OSCCON_OSTS          at OSCCON : 3
var volatile bit   OSCCON_FLTS          at OSCCON : 2
var volatile bit*2 OSCCON_SCS           at OSCCON : 0
-- ------------------------------------------------
var volatile byte  OSCTUNE              at { 0x90 }
var volatile bit*6 OSCTUNE_TUN          at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte  SSPCON2              at { 0x91 }
var volatile bit   SSPCON2_GCEN         at SSPCON2 : 7
var volatile bit   SSPCON2_ACKSTAT      at SSPCON2 : 6
var volatile bit   SSPCON2_ACKDT        at SSPCON2 : 5
var volatile bit   SSPCON2_ACKEN        at SSPCON2 : 4
var volatile bit   SSPCON2_RCEN         at SSPCON2 : 3
var volatile bit   SSPCON2_PEN          at SSPCON2 : 2
var volatile bit   SSPCON2_RSEN         at SSPCON2 : 1
var volatile bit   SSPCON2_SEN          at SSPCON2 : 0
-- ------------------------------------------------
var volatile byte  PR2                  at { 0x92 }
-- ------------------------------------------------
var volatile byte  SSPADD               at { 0x93 }
-- ------------------------------------------------
var volatile byte  SSPSTAT              at { 0x94 }
var volatile bit   SSPSTAT_SMP          at SSPSTAT : 7
var volatile bit   SSPSTAT_CKE          at SSPSTAT : 6
var volatile bit   SSPSTAT_D            at SSPSTAT : 5
var volatile bit   SSPSTAT_NA           at SSPSTAT : 5
var volatile bit   SSPSTAT_P            at SSPSTAT : 4
var volatile bit   SSPSTAT_S            at SSPSTAT : 3
var volatile bit   SSPSTAT_R            at SSPSTAT : 2
var volatile bit   SSPSTAT_NW           at SSPSTAT : 2
var volatile bit   SSPSTAT_UA           at SSPSTAT : 1
var volatile bit   SSPSTAT_BF           at SSPSTAT : 0
-- ------------------------------------------------
var volatile word  CCPR3                at { 0x95 }
-- ------------------------------------------------
var volatile byte  CCPR3L               at { 0x95 }
-- ------------------------------------------------
var volatile byte  CCPR3H               at { 0x96 }
-- ------------------------------------------------
var volatile byte  CCP3CON              at { 0x97 }
var volatile bit*2 CCP3CON_DC3B         at CCP3CON : 4
var volatile bit*4 CCP3CON_CCP3M        at CCP3CON : 0
-- ------------------------------------------------
var volatile byte  TXSTA                at { 0x98 }
var volatile bit   TXSTA_CSRC           at TXSTA : 7
var volatile bit   TXSTA_TX9            at TXSTA : 6
var volatile bit   TXSTA_TXEN           at TXSTA : 5
var volatile bit   TXSTA_SYNC           at TXSTA : 4
var volatile bit   TXSTA_BRGH           at TXSTA : 2
var volatile bit   TXSTA_TRMT           at TXSTA : 1
var volatile bit   TXSTA_TX9D           at TXSTA : 0
-- ------------------------------------------------
var volatile byte  SPBRG                at { 0x99 }
-- ------------------------------------------------
var volatile byte  ADCON2               at { 0x9B }
var volatile bit*3 ADCON2_ACQT          at ADCON2 : 3
-- ------------------------------------------------
var volatile byte  CMCON                at { 0x9C }
var volatile bit   CMCON_C2OUT          at CMCON : 7
var volatile bit   CMCON_C1OUT          at CMCON : 6
var volatile bit   CMCON_C2INV          at CMCON : 5
var volatile bit   CMCON_C1INV          at CMCON : 4
var volatile bit   CMCON_CIS            at CMCON : 3
var volatile bit*3 CMCON_CM             at CMCON : 0
-- ------------------------------------------------
var volatile byte  CVRCON               at { 0x9D }
var volatile bit   CVRCON_CVREN         at CVRCON : 7
var volatile bit   CVRCON_CVROE         at CVRCON : 6
var volatile bit   CVRCON_CVRR          at CVRCON : 5
var volatile bit*4 CVRCON_CVR           at CVRCON : 0
-- ------------------------------------------------
var volatile byte  ADRESL               at { 0x9E }
-- ------------------------------------------------
var volatile byte  ADCON1               at { 0x9F }
var volatile bit   ADCON1_ADFM          at ADCON1 : 7
var volatile bit   ADCON1_ADCS2         at ADCON1 : 6
var volatile bit*2 ADCON1_VCFG          at ADCON1 : 4
var volatile bit*4 ADCON1_PCFG          at ADCON1 : 0
-- ------------------------------------------------
var volatile byte  WDTCON               at { 0x105 }
var volatile bit*4 WDTCON_WDTPS         at WDTCON : 1
var volatile bit   WDTCON_SWDTEN        at WDTCON : 0
-- ------------------------------------------------
var volatile byte  LVDCON               at { 0x109 }
var volatile bit   LVDCON_IRVST         at LVDCON : 5
var volatile bit   LVDCON_LVDEN         at LVDCON : 4
var volatile bit*4 LVDCON_LVDL          at LVDCON : 0
-- ------------------------------------------------
var volatile byte  PMDATA               at { 0x10C }
-- ------------------------------------------------
var volatile byte  PMADR                at { 0x10D }
-- ------------------------------------------------
var volatile byte  PMDATH               at { 0x10E }
var volatile bit*6 PMDATH_PMDATH        at PMDATH : 0
-- ------------------------------------------------
var volatile byte  PMADRH               at { 0x10F }
var volatile bit*5 PMADRH_PMADRH        at PMADRH : 0
-- ------------------------------------------------
var volatile byte  PMCON1               at { 0x18C }
var volatile bit   PMCON1_RD            at PMCON1 : 0
--
-- ===================================================
--
-- Special device dependent procedures
--
-- ---------------------------------------------------
-- Disable ADC module (ADC_group ADC_V2)
--
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_1111         -- digital I/O
   ADCON2 = 0b0000_0000
end procedure
--
-- ---------------------------------------------------
-- Disable comparator module
--
procedure comparator_off() is
   pragma inline
   CMCON  = 0b0000_0111        -- disable comparator
end procedure
--
-- ---------------------------------------------------
-- Switch analog ports to digital mode (if analog module present).
--
procedure enable_digital_io() is
   pragma inline
   adc_off()
   comparator_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC:0 0x13 {
       EXTOSC_CLKOUT = 0x13
       EXTOSC_NOCLKOUT = 0x12
       INTOSC_CLKOUT = 0x11
       INTOSC_NOCLKOUT = 0x10
       EC_NOCLKOUT = 0x3
       LP = 0x0
       XT = 0x1
       HS = 0x2
       }
pragma fuse_def WDT:0 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def PWRTE:0 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR:0 0x20 {
       EXTERNAL = 0x20
       INTERNAL = 0x0
       }
pragma fuse_def BROWNOUT:0 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
pragma fuse_def VOLTAGE:0 0x180 {
       V20 = 0x180
       V27 = 0x100
       V42 = 0x80
       V45 = 0x0
       }
pragma fuse_def BACKBUG:0 0x800 {
       DISABLED = 0x800
       ENABLED = 0x0
       }
pragma fuse_def CCP2MUX:0 0x1000 {
       RC1 = 0x1000
       RB3 = 0x0
       }
pragma fuse_def CP:0 0x2000 {
       DISABLED = 0x2000
       ENABLED = 0x0
       }
--
-- addr 0x2008
--
pragma fuse_def FCMEN:1 0x1 {
       ENABLED = 0x1
       DISABLED = 0x0
       }
pragma fuse_def IESO:1 0x2 {
       ENABLED = 0x2
       DISABLED = 0x0
       }
pragma fuse_def BORSEN:1 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
--
