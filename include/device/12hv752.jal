-- ===================================================
-- Title: JalV2 device include file for PIC12HV752
--
-- Author: Rob Hamerling, Copyright (c) 2008..2012, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic12hv752, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab885/mplab ide/device/pic12hv752.dev
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.1.36
--  - File creation date/time: 1 Jul 2012 19:52
--
-- ===================================================
--
const word DEVICE_ID   = 0x1520
const byte PICTYPE[]   = "12HV752"
const byte DATASHEET[] = "41576B"
const byte PGMSPEC[]   = "41561C"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-13.000 Default: 13.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks=4)
pragma  target  chip  12hv752
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    1024
pragma  ID      0x2000,4
pragma  data    0x40-0x7D
pragma  shared  0x7E-0x7F
--
var volatile byte _pic_accum shared at 0x7E      -- (compiler)
var volatile byte _pic_isr_w shared at 0x7F      -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0000_1111_1111_1111
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _irp                      =  7
const        byte   _rp1                      =  6
const        byte   _rp0                      =  5
const        byte   _not_to                   =  4
const        byte   _not_pd                   =  3
const        byte   _z                        =  2
const        byte   _dc                       =  1
const        byte   _c                        =  0
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0x5 }
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    PORTA_RA0                 at PORTA : 0
-- ------------------------------------------------
var volatile byte   IOCAF                     at { 0x8 }
var volatile bit    IOCAF_IOCAF5              at IOCAF : 5
var volatile bit    IOCAF_IOCAF4              at IOCAF : 4
var volatile bit    IOCAF_IOCAF3              at IOCAF : 3
var volatile bit    IOCAF_IOCAF2              at IOCAF : 2
var volatile bit    IOCAF_IOCAF1              at IOCAF : 1
var volatile bit    IOCAF_IOCAF0              at IOCAF : 0
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_IOCIE              at INTCON : 3
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_IOCIF              at INTCON : 0
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_TMR1GIF              at PIR1 : 7
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_HLTMR1IF             at PIR1 : 2
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xD }
var volatile bit    PIR2_C2IF                 at PIR2 : 5
var volatile bit    PIR2_C1IF                 at PIR2 : 4
var volatile bit    PIR2_COG1IF               at PIR2 : 2
var volatile bit    PIR2_CCP1IF               at PIR2 : 0
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xF }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xF }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0x10 }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x11 }
var volatile bit*2  T1CON_TMR1CS              at T1CON : 6
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_RESERVED            at T1CON : 3
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_TMR1ON              at T1CON : 0
-- ------------------------------------------------
var volatile byte   T1GCON                    at { 0x12 }
var volatile bit    T1GCON_TMR1GE             at T1GCON : 7
var volatile bit    T1GCON_T1GPOL             at T1GCON : 6
var volatile bit    T1GCON_T1GTM              at T1GCON : 5
var volatile bit    T1GCON_T1GSPM             at T1GCON : 4
var volatile bit    T1GCON_T1GGO              at T1GCON : 3
var volatile bit    T1GCON_NDONE              at T1GCON : 3
var volatile bit    T1GCON_T1GVAL             at T1GCON : 2
var volatile bit*2  T1GCON_T1GSS              at T1GCON : 0
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x14 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x15 }
var volatile bit*2  CCP1CON_DC1B              at CCP1CON : 4
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
-- ------------------------------------------------
var volatile word   ADRES                     at { 0x1C }
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x1C }
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1D }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1E }
var volatile bit    ADCON0_ADFM               at ADCON0 : 7
var volatile bit    ADCON0_VCFG               at ADCON0 : 6
var volatile bit*4  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_ADON               at ADCON0 : 0
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x1F }
var volatile bit*3  ADCON1_ADCS               at ADCON1 : 4
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit    OPTION_REG_NRAPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   pragma inline
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   pragma inline
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
alias               pin_A5_direction          is TRISA_TRISA5
alias               pin_C2IN1_NEG_direction   is pin_A5_direction
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_COG1OUT0_RA5_direction is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
alias               pin_A4_direction          is TRISA_TRISA4
alias               pin_AN3_direction         is pin_A4_direction
alias               pin_C1IN1_NEG_direction   is pin_A4_direction
alias               pin_T1G_RA4_direction     is pin_A4_direction
alias               pin_COG1FLT_RA4_direction is pin_A4_direction
alias               pin_COG1OUT1_RA4_direction is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
alias               pin_A3_direction          is TRISA_TRISA3
alias               pin_T1G_RA3_direction     is pin_A3_direction
alias               pin_COG1FLT_RA3_direction is pin_A3_direction
alias               pin_MCLR_direction        is pin_A3_direction
alias               pin_VPP_direction         is pin_A3_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
alias               pin_A2_direction          is TRISA_TRISA2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
alias               pin_C2OUT_direction       is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_CCP1_direction        is pin_A2_direction
alias               pin_COG1OUT0_RA2_direction is pin_A2_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
alias               pin_A1_direction          is TRISA_TRISA1
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C1IN0_NEG_direction   is pin_A1_direction
alias               pin_C2IN0_NEG_direction   is pin_A1_direction
alias               pin_VREF_POS_direction    is pin_A1_direction
alias               pin_ICSPCLK_direction     is pin_A1_direction
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
alias               pin_A0_direction          is TRISA_TRISA0
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_C1IN0_POS_direction   is pin_A0_direction
alias               pin_C2IN0_POS_direction   is pin_A0_direction
alias               pin_COG1OUT1_RA0_direction is pin_A0_direction
alias               pin_DACOUT_direction      is pin_A0_direction
alias               pin_REFOUT_direction      is pin_A0_direction
alias               pin_ICSPDAT_direction     is pin_A0_direction
--
-- ------------------------------------------------
var volatile byte   IOCAP                     at { 0x88 }
var volatile bit    IOCAP_IOCAP5              at IOCAP : 5
var volatile bit    IOCAP_IOCAP4              at IOCAP : 4
var volatile bit    IOCAP_IOCAP3              at IOCAP : 3
var volatile bit    IOCAP_IOCAP2              at IOCAP : 2
var volatile bit    IOCAP_IOCAP1              at IOCAP : 1
var volatile bit    IOCAP_IOCAP0              at IOCAP : 0
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_TMR1GIE              at PIE1 : 7
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_HLTMR1IE             at PIE1 : 2
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x8D }
var volatile bit    PIE2_C2IE                 at PIE2 : 5
var volatile bit    PIE2_C1IE                 at PIE2 : 4
var volatile bit    PIE2_COG1IE               at PIE2 : 2
var volatile bit    PIE2_CCP1IE               at PIE2 : 0
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit*2  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_HTS                at OSCCON : 2
var volatile bit    OSCCON_LTS                at OSCCON : 1
-- ------------------------------------------------
var volatile byte   FVRCON                    at { 0x90 }
var volatile bit    FVRCON_FVREN              at FVRCON : 7
var volatile bit    FVRCON_FVRRDY             at FVRCON : 6
var volatile bit    FVRCON_FVRBUFEN           at FVRCON : 5
var volatile bit    FVRCON_FVRBUFSS           at FVRCON : 4
-- ------------------------------------------------
var volatile byte   DACCON0                   at { 0x91 }
var volatile bit    DACCON0_DACEN             at DACCON0 : 7
var volatile bit    DACCON0_DACRNG            at DACCON0 : 6
var volatile bit    DACCON0_DACOE             at DACCON0 : 5
var volatile bit    DACCON0_DACPSS0           at DACCON0 : 2
-- ------------------------------------------------
var volatile byte   DACCON1                   at { 0x92 }
var volatile bit*5  DACCON1_DACR              at DACCON1 : 0
-- ------------------------------------------------
var volatile byte   CM2CON0                   at { 0x9B }
var volatile bit    CM2CON0_C2ON              at CM2CON0 : 7
var volatile bit    CM2CON0_C2OUT             at CM2CON0 : 6
var volatile bit    CM2CON0_C2OE              at CM2CON0 : 5
var volatile bit    CM2CON0_C2POL             at CM2CON0 : 4
var volatile bit    CM2CON0_C2ZLF             at CM2CON0 : 3
var volatile bit    CM2CON0_C2SP              at CM2CON0 : 2
var volatile bit    CM2CON0_C2HYS             at CM2CON0 : 1
var volatile bit    CM2CON0_C2SYNC            at CM2CON0 : 0
-- ------------------------------------------------
var volatile byte   CM2CON1                   at { 0x9C }
var volatile bit    CM2CON1_C2INTP            at CM2CON1 : 7
var volatile bit    CM2CON1_C2INTN            at CM2CON1 : 6
var volatile bit*2  CM2CON1_C2PCH             at CM2CON1 : 4
var volatile bit    CM2CON1_C2NCH0            at CM2CON1 : 0
-- ------------------------------------------------
var volatile byte   CM1CON0                   at { 0x9D }
var volatile bit    CM1CON0_C1ON              at CM1CON0 : 7
var volatile bit    CM1CON0_C1OUT             at CM1CON0 : 6
var volatile bit    CM1CON0_C1OE              at CM1CON0 : 5
var volatile bit    CM1CON0_C1POL             at CM1CON0 : 4
var volatile bit    CM1CON0_C1ZLF             at CM1CON0 : 3
var volatile bit    CM1CON0_C1SP              at CM1CON0 : 2
var volatile bit    CM1CON0_C1HYS             at CM1CON0 : 1
var volatile bit    CM1CON0_C1SYNC            at CM1CON0 : 0
-- ------------------------------------------------
var volatile byte   CM1CON1                   at { 0x9E }
var volatile bit    CM1CON1_C1INTP            at CM1CON1 : 7
var volatile bit    CM1CON1_C1INTN            at CM1CON1 : 6
var volatile bit*2  CM1CON1_C1PCH             at CM1CON1 : 4
var volatile bit    CM1CON1_C1NCH0            at CM1CON1 : 0
-- ------------------------------------------------
var volatile byte   CMOUT                     at { 0x9F }
var volatile bit    CMOUT_MCOUT2              at CMOUT : 1
var volatile bit    CMOUT_MCOUT1              at CMOUT : 0
-- ------------------------------------------------
var volatile byte   LATA                      at { 0x105 }
--
procedure PORTA'put(byte in x at LATA) is
   pragma inline
end procedure
--
procedure PORTA_low'put(byte in x) is
   pragma inline
   LATA = (LATA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low'get() return byte is
   pragma inline
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   pragma inline
   LATA = (LATA & 0x0F) | (x << 4)
end procedure
function PORTA_high'get() return byte is
   pragma inline
   return (PORTA >> 4)
end function
--
var volatile bit    LATA_LATA5                at LATA : 5
var volatile bit    pin_A5                    at PORTA : 5
alias               pin_C2IN1_NEG             is pin_A5
alias               pin_T1CKI                 is pin_A5
alias               pin_COG1OUT0_RA5          is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at LATA : 5) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA4                at LATA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_AN3                   is pin_A4
alias               pin_C1IN1_NEG             is pin_A4
alias               pin_T1G_RA4               is pin_A4
alias               pin_COG1FLT_RA4           is pin_A4
alias               pin_COG1OUT1_RA4          is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at LATA : 4) is
   pragma inline
end procedure
--
var volatile bit    pin_A3                    at PORTA : 3
alias               pin_T1G_RA3               is pin_A3
alias               pin_COG1FLT_RA3           is pin_A3
alias               pin_MCLR                  is pin_A3
alias               pin_VPP                   is pin_A3
--
var volatile bit    LATA_LATA2                at LATA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_C1OUT                 is pin_A2
alias               pin_C2OUT                 is pin_A2
alias               pin_T0CKI                 is pin_A2
alias               pin_CCP1                  is pin_A2
alias               pin_COG1OUT0_RA2          is pin_A2
--
procedure pin_A2'put(bit in x at LATA : 2) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA1                at LATA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_C1IN0_NEG             is pin_A1
alias               pin_C2IN0_NEG             is pin_A1
alias               pin_VREF_POS              is pin_A1
alias               pin_ICSPCLK               is pin_A1
--
procedure pin_A1'put(bit in x at LATA : 1) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA0                at LATA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_AN0                   is pin_A0
alias               pin_C1IN0_POS             is pin_A0
alias               pin_C2IN0_POS             is pin_A0
alias               pin_COG1OUT1_RA0          is pin_A0
alias               pin_DACOUT                is pin_A0
alias               pin_REFOUT                is pin_A0
alias               pin_ICSPDAT               is pin_A0
--
procedure pin_A0'put(bit in x at LATA : 0) is
   pragma inline
end procedure
--
-- ------------------------------------------------
var volatile byte   IOCAN                     at { 0x108 }
var volatile bit    IOCAN_IOCAN5              at IOCAN : 5
var volatile bit    IOCAN_IOCAN4              at IOCAN : 4
var volatile bit    IOCAN_IOCAN3              at IOCAN : 3
var volatile bit    IOCAN_IOCAN2              at IOCAN : 2
var volatile bit    IOCAN_IOCAN1              at IOCAN : 1
var volatile bit    IOCAN_IOCAN0              at IOCAN : 0
-- ------------------------------------------------
var volatile byte   WPUA                      at { 0x10C }
var volatile bit    WPUA_WPUA5                at WPUA : 5
var volatile bit    WPUA_WPUA4                at WPUA : 4
var volatile bit    WPUA_WPUA3                at WPUA : 3
var volatile bit    WPUA_WPUA2                at WPUA : 2
var volatile bit    WPUA_WPUA1                at WPUA : 1
var volatile bit    WPUA_WPUA0                at WPUA : 0
-- ------------------------------------------------
var volatile byte   SLRCONA                   at { 0x10D }
var volatile bit    SLRCONA_SLRA2             at SLRCONA : 2
var volatile bit    SLRCONA_SLRA0             at SLRCONA : 0
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x10F }
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x110 }
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x111 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x112 }
var volatile bit*4  T2CON_T2OUTPS             at T2CON : 3
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
-- ------------------------------------------------
var volatile byte   HLTMR1                    at { 0x113 }
-- ------------------------------------------------
var volatile byte   HLTPR1                    at { 0x114 }
-- ------------------------------------------------
var volatile byte   HLT1CON0                  at { 0x115 }
var volatile bit*4  HLT1CON0_H1OUTPS          at HLT1CON0 : 3
var volatile bit    HLT1CON0_H1ON             at HLT1CON0 : 2
var volatile bit*2  HLT1CON0_H1CKPS           at HLT1CON0 : 0
-- ------------------------------------------------
var volatile byte   HLT1CON1                  at { 0x116 }
var volatile bit*3  HLT1CON1_H1ERS            at HLT1CON1 : 2
var volatile bit    HLT1CON1_H1FEREN          at HLT1CON1 : 1
var volatile bit    HLT1CON1_H1REREN          at HLT1CON1 : 0
-- ------------------------------------------------
var volatile byte   ANSELA                    at { 0x185 }
var volatile bit    ANSELA_ANSA5              at ANSELA : 5
var volatile bit    ANSELA_ANSA4              at ANSELA : 4
alias               JANSEL_ANS3               is ANSELA_ANSA4
var volatile bit    ANSELA_ANSA2              at ANSELA : 2
alias               JANSEL_ANS2               is ANSELA_ANSA2
var volatile bit    ANSELA_ANSA1              at ANSELA : 1
alias               JANSEL_ANS1               is ANSELA_ANSA1
var volatile bit    ANSELA_ANSA0              at ANSELA : 0
alias               JANSEL_ANS0               is ANSELA_ANSA0
-- ------------------------------------------------
var volatile byte   APFCON                    at { 0x188 }
var volatile bit    APFCON_T1GSEL             at APFCON : 4
var volatile bit    APFCON_COG1FSEL           at APFCON : 2
var volatile bit    APFCON_COG1O1SEL          at APFCON : 1
var volatile bit    APFCON_COG1O0SEL          at APFCON : 0
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x189 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte   PMCON1                    at { 0x18C }
var volatile bit    PMCON1_WREN               at PMCON1 : 2
var volatile bit    PMCON1_WR                 at PMCON1 : 1
var volatile bit    PMCON1_RD                 at PMCON1 : 0
-- ------------------------------------------------
var volatile byte   PMCON2                    at { 0x18D }
-- ------------------------------------------------
var volatile word   PMADR                     at { 0x18E }
-- ------------------------------------------------
var volatile byte   PMADRL                    at { 0x18E }
-- ------------------------------------------------
var volatile byte   PMADRH                    at { 0x18F }
var volatile bit*2  PMADRH_PMADRH             at PMADRH : 0
-- ------------------------------------------------
var volatile word   PMDAT                     at { 0x190 }
-- ------------------------------------------------
var volatile byte   PMDATL                    at { 0x190 }
-- ------------------------------------------------
var volatile byte   PMDATH                    at { 0x191 }
var volatile bit*6  PMDATH_PMDATH             at PMDATH : 0
-- ------------------------------------------------
var volatile byte   COG1PH                    at { 0x192 }
var volatile bit*4  COG1PH_G1PH               at COG1PH : 0
-- ------------------------------------------------
var volatile byte   COG1BLK                   at { 0x193 }
var volatile bit*4  COG1BLK_G1BLKR            at COG1BLK : 4
var volatile bit*4  COG1BLK_G1BLKF            at COG1BLK : 0
-- ------------------------------------------------
var volatile byte   COG1DB                    at { 0x194 }
var volatile bit*4  COG1DB_G1DBR              at COG1DB : 4
var volatile bit*4  COG1DB_G1DBF              at COG1DB : 0
-- ------------------------------------------------
var volatile byte   COG1CON0                  at { 0x195 }
var volatile bit    COG1CON0_G1EN             at COG1CON0 : 7
var volatile bit    COG1CON0_G1OE1            at COG1CON0 : 6
var volatile bit    COG1CON0_G1OE0            at COG1CON0 : 5
var volatile bit    COG1CON0_G1POL1           at COG1CON0 : 4
var volatile bit    COG1CON0_G1POL0           at COG1CON0 : 3
var volatile bit    COG1CON0_G1LD             at COG1CON0 : 2
var volatile bit*2  COG1CON0_G1CS             at COG1CON0 : 0
-- ------------------------------------------------
var volatile byte   COG1CON1                  at { 0x196 }
var volatile bit    COG1CON1_G1FSIM           at COG1CON1 : 7
var volatile bit    COG1CON1_G1RSIM           at COG1CON1 : 6
var volatile bit*3  COG1CON1_G1FS             at COG1CON1 : 3
var volatile bit*3  COG1CON1_G1RS             at COG1CON1 : 0
-- ------------------------------------------------
var volatile byte   COG1ASD                   at { 0x197 }
var volatile bit    COG1ASD_G1ASDE            at COG1ASD : 7
var volatile bit    COG1ASD_G1ARSEN           at COG1ASD : 6
var volatile bit    COG1ASD_G1ASDL1           at COG1ASD : 5
var volatile bit    COG1ASD_G1ASDL0           at COG1ASD : 4
var volatile bit    COG1ASD_G1ASDSHLT         at COG1ASD : 3
var volatile bit    COG1ASD_G1ASDSC2          at COG1ASD : 2
var volatile bit    COG1ASD_G1ASDSC1          at COG1ASD : 1
var volatile bit    COG1ASD_G1ASDSFLT         at COG1ASD : 0
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = ADC_V0
const byte ADC_NTOTAL_CHANNEL = 4
const byte ADC_ADCS_BITCOUNT  = 3
--
const PPS_GROUP  = PPS_0        -- no Peripheral Pin Selection
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSELA = 0b0000_0000        -- digital I/O
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CM1CON0 = 0b0000_0000       -- disable comparator
   CM1CON1 = 0b0000_0000
   CM2CON0 = 0b0000_0000       -- disable 2nd comparator
   CM2CON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
   comparator_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x1 {                  -- fosc: oscillator selection bit
       EC_NOCLKOUT = 0x1                   -- ec oscillator mode.  clkin function on ra5/clkin
       INTOSC_NOCLKOUT = 0x0               -- internal oscillator mode.  i/o function on ra5/clkin
       }
pragma fuse_def WDT 0x8 {                  -- watchdog timer enable bit
       ENABLED = 0x8                       -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def PWRTE 0x10 {               -- power-up timer enable bit
       DISABLED = 0x10                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def MCLR 0x20 {                -- mclr/vpp pin function select bit
       EXTERNAL = 0x20                     -- enabled
       INTERNAL = 0x0                      -- disabled
       }
pragma fuse_def CP 0x40 {                  -- code protection bit
       DISABLED = 0x40                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def BROWNOUT 0x300 {           -- brown-out reset enable bits
       ENABLED = 0x300                     -- bor enabled
       RUNONLY = 0x200                     -- bor enabled during operation and disabled in sleep
       DISABLED = 0x0                      -- bor disabled
       }
pragma fuse_def WRT 0xC00 {                -- flash program memory self write enable bit
       NO_PROTECTION = 0xC00               -- disabled
       R0000_00FF = 0x800                  -- 000h to 0ffh self-write protected
       R0000_01FF = 0x400                  -- 000h to 1ffh self-write protected
       R0000_03FF = 0x0                    -- 000h to 3ffh self-write protected
       }
pragma fuse_def CKLOUTEN 0x1000 {          -- clock out enable bit
       DISABLED = 0x1000                   -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def DEBUG 0x2000 {             -- debug mode enable bit
       DISABLED = 0x2000                   -- disabled
       ENABLED = 0x0                       -- enabled
       }
--
