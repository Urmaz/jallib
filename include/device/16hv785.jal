-- ===================================================
-- Title: JalV2 device include file for PIC 16HV785
--
-- Author: Rob Hamerling, Copyright (c) 2008..2009, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4l
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16hv785, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab836/mplab_ide/device/pic16hv785.dev
--  - x:/mplab836/mpasm_suite/lkr/16hv785_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.80
--  - File creation date/time: 29 Aug 2009 10:22
--
-- ===================================================
--
const word DEVICE_ID   = 0x1220
const byte PICTYPE[]   = "16HV785"
const byte DATASHEET[] = "41249"
const byte PGMSPEC[]   = "41237"
--
-- Vdd Range: 2.500-4.875 Nominal: 4.500
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks = 4)
pragma  target  chip  16hv785
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    2048                    -- (words)
pragma  eeprom  0x2100,256
pragma  data    0x20-0x6F,0xA0-0xBF
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum shared at { 0x7E,0xFE,0x17E,0x1FE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x7F,0xFF,0x17F,0x1FF }   -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0011_1111_1111_1111
--
const word  _ID_CT                = 4
const word  _ID_BASE[_ID_CT]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_CT]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte  _status                   at { 0x3,0x83,0x103,0x183 }      -- (compiler)
const        byte  _irp                      =  7      -- (compiler)
const        byte  _RP1                      =  6      -- (compiler)
const        byte  _RP0                      =  5      -- (compiler)
const        byte  _not_to                   =  4      -- (compiler)
const        byte  _not_pd                   =  3      -- (compiler)
const        byte  _z                        =  2      -- (compiler)
const        byte  _dc                       =  1      -- (compiler)
const        byte  _c                        =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0x5,0x105 }
--
var          byte  _PORTA_shadow        = PORTA
--
procedure _PORTA_flush() is
   pragma inline
   PORTA = _PORTA_shadow
end procedure
procedure PORTA'put(byte in x) is
   pragma inline
   _PORTA_shadow = x
   _PORTA_flush()
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA_flush()
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA_flush()
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    pin_A5                    at PORTA : 5
alias               pin_T1CKI                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_AN3                   is pin_A4
alias               pin_T1G                   is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA : 3
alias               pin_MCLR                  is pin_A3
alias               pin_VPP                   is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_T0CKI                 is pin_A2
alias               pin_INT                   is pin_A2
alias               pin_C1OUT                 is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_C12IN0_NEG            is pin_A1
alias               pin_VREF                  is pin_A1
alias               pin_ICSPCLK               is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_AN0                   is pin_A0
alias               pin_C1IN_POS              is pin_A0
alias               pin_ICSPDAT               is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTB                     at { 0x6,0x106 }
--
var          byte  _PORTB_shadow        = PORTB
--
procedure _PORTB_flush() is
   pragma inline
   PORTB = _PORTB_shadow
end procedure
procedure PORTB'put(byte in x) is
   pragma inline
   _PORTB_shadow = x
   _PORTB_flush()
end procedure
--
procedure PORTB_low'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB_flush()
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB_flush()
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    pin_B7                    at PORTB : 7
alias               pin_SYNC                  is pin_B7
--
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    pin_B6                    at PORTB : 6
--
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB : 5
alias               pin_AN11                  is pin_B5
alias               pin_OP2_POS               is pin_B5
--
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB : 4
alias               pin_AN10                  is pin_B4
alias               pin_OP2_RB4               is pin_B4
--
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTC                     at { 0x7,0x107 }
--
var          byte  _PORTC_shadow        = PORTC
--
procedure _PORTC_flush() is
   pragma inline
   PORTC = _PORTC_shadow
end procedure
procedure PORTC'put(byte in x) is
   pragma inline
   _PORTC_shadow = x
   _PORTC_flush()
end procedure
--
procedure PORTC_low'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC_flush()
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC_flush()
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC7                 at PORTC : 7
var volatile bit    pin_C7                    at PORTC : 7
alias               pin_AN9                   is pin_C7
alias               pin_OP1_POS               is pin_C7
--
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC6                 at PORTC : 6
var volatile bit    pin_C6                    at PORTC : 6
alias               pin_AN8                   is pin_C6
alias               pin_OP1_RC6               is pin_C6
--
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    pin_C5                    at PORTC : 5
alias               pin_CCP1                  is pin_C5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    pin_C4                    at PORTC : 4
alias               pin_C2OUT                 is pin_C4
alias               pin_PH2                   is pin_C4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    pin_C3                    at PORTC : 3
alias               pin_AN7                   is pin_C3
alias               pin_C12IN3_NEG            is pin_C3
alias               pin_OP1_RC3               is pin_C3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    pin_C2                    at PORTC : 2
alias               pin_AN6                   is pin_C2
alias               pin_C12IN2_NEG            is pin_C2
alias               pin_OP2_RC2               is pin_C2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    pin_C1                    at PORTC : 1
alias               pin_AN5                   is pin_C1
alias               pin_C12IN1_NEG            is pin_C1
alias               pin_PH1                   is pin_C1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    pin_C0                    at PORTC : 0
alias               pin_AN4                   is pin_C0
alias               pin_C2IN_POS              is pin_C0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }      -- (compiler)
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_RAIE               at INTCON : 3
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_RAIF               at INTCON : 0
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_EEIF                 at PIR1 : 7
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_CCP1IF               at PIR1 : 5
var volatile bit    PIR1_C2IF                 at PIR1 : 4
var volatile bit    PIR1_C1IF                 at PIR1 : 3
var volatile bit    PIR1_OSFIF                at PIR1 : 2
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_TMR1ON              at T1CON : 0
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
-- ------------------------------------------------
var volatile word   CCPR                      at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x13 }
var volatile bit*8  CCPR1L_CCPRL              at CCPR1L : 0
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x14 }
var volatile bit*8  CCPR1H_CCPRH              at CCPR1H : 0
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x15 }
var volatile bit*2  CCP1CON_DCB               at CCP1CON : 4
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0x18 }
var volatile bit*4  WDTCON_WDTPS              at WDTCON : 1
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit    ADCON0_ADFM               at ADCON0 : 7
var volatile bit    ADCON0_VCFG               at ADCON0 : 6
var volatile bit*4  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_ADON               at ADCON0 : 0
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit    OPTION_REG_NRAPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85,0x185 }
var volatile byte   PORTA_direction           at TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_AN3_direction         is pin_A4_direction
alias               pin_T1G_direction         is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_MCLR_direction        is pin_A3_direction
alias               pin_VPP_direction         is pin_A3_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_INT_direction         is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C12IN0_NEG_direction  is pin_A1_direction
alias               pin_VREF_direction        is pin_A1_direction
alias               pin_ICSPCLK_direction     is pin_A1_direction
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_C1IN_POS_direction    is pin_A0_direction
alias               pin_ICSPDAT_direction     is pin_A0_direction
--
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86,0x186 }
var volatile byte   PORTB_direction           at TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
alias               pin_SYNC_direction        is pin_B7_direction
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
alias               pin_AN11_direction        is pin_B5_direction
alias               pin_OP2_POS_direction     is pin_B5_direction
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
alias               pin_AN10_direction        is pin_B4_direction
alias               pin_OP2_RB4_direction     is pin_B4_direction
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x87,0x187 }
var volatile byte   PORTC_direction           at TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
var volatile bit    pin_C7_direction          at TRISC : 7
alias               pin_AN9_direction         is pin_C7_direction
alias               pin_OP1_POS_direction     is pin_C7_direction
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
var volatile bit    pin_C6_direction          at TRISC : 6
alias               pin_AN8_direction         is pin_C6_direction
alias               pin_OP1_RC6_direction     is pin_C6_direction
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
var volatile bit    pin_C5_direction          at TRISC : 5
alias               pin_CCP1_direction        is pin_C5_direction
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
var volatile bit    pin_C4_direction          at TRISC : 4
alias               pin_C2OUT_direction       is pin_C4_direction
alias               pin_PH2_direction         is pin_C4_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
var volatile bit    pin_C3_direction          at TRISC : 3
alias               pin_AN7_direction         is pin_C3_direction
alias               pin_C12IN3_NEG_direction  is pin_C3_direction
alias               pin_OP1_RC3_direction     is pin_C3_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
var volatile bit    pin_C2_direction          at TRISC : 2
alias               pin_AN6_direction         is pin_C2_direction
alias               pin_C12IN2_NEG_direction  is pin_C2_direction
alias               pin_OP2_RC2_direction     is pin_C2_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
var volatile bit    pin_C1_direction          at TRISC : 1
alias               pin_AN5_direction         is pin_C1_direction
alias               pin_C12IN1_NEG_direction  is pin_C1_direction
alias               pin_PH1_direction         is pin_C1_direction
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
var volatile bit    pin_C0_direction          at TRISC : 0
alias               pin_AN4_direction         is pin_C0_direction
alias               pin_C2IN_POS_direction    is pin_C0_direction
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_EEIE                 at PIE1 : 7
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_CCP1IE               at PIE1 : 5
var volatile bit    PIE1_C2IE                 at PIE1 : 4
var volatile bit    PIE1_C1IE                 at PIE1 : 3
var volatile bit    PIE1_OSFIE                at PIE1 : 2
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_SBOREN               at PCON : 4
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit    OSCCON_HTS                at OSCCON : 2
var volatile bit    OSCCON_LTS                at OSCCON : 1
var volatile bit    OSCCON_SCS                at OSCCON : 0
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte   ANSEL0                    at { 0x91 }
var volatile bit    JANSEL_ANS7               at ANSEL0 : 7
var volatile bit    JANSEL_ANS6               at ANSEL0 : 6
var volatile bit    JANSEL_ANS5               at ANSEL0 : 5
var volatile bit    JANSEL_ANS4               at ANSEL0 : 4
var volatile bit    JANSEL_ANS3               at ANSEL0 : 3
var volatile bit    JANSEL_ANS2               at ANSEL0 : 2
var volatile bit    JANSEL_ANS1               at ANSEL0 : 1
var volatile bit    JANSEL_ANS0               at ANSEL0 : 0
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   ANSEL1                    at { 0x93 }
var volatile bit    JANSEL_ANS11              at ANSEL1 : 3
var volatile bit    JANSEL_ANS10              at ANSEL1 : 2
var volatile bit    JANSEL_ANS9               at ANSEL1 : 1
var volatile bit    JANSEL_ANS8               at ANSEL1 : 0
-- ------------------------------------------------
var volatile byte   WPUA                      at { 0x95 }
var volatile bit    WPUA_WPUA5                at WPUA : 5
var volatile bit    WPUA_WPUA4                at WPUA : 4
var volatile bit    WPUA_WPUA2                at WPUA : 2
var volatile bit    WPUA_WPUA1                at WPUA : 1
var volatile bit    WPUA_WPUA0                at WPUA : 0
-- ------------------------------------------------
var volatile byte   IOCA                      at { 0x96 }
var volatile bit    IOCA_IOCA5                at IOCA : 5
var volatile bit    IOCA_IOCA4                at IOCA : 4
var volatile bit    IOCA_IOCA3                at IOCA : 3
var volatile bit    IOCA_IOCA2                at IOCA : 2
var volatile bit    IOCA_IOCA1                at IOCA : 1
var volatile bit    IOCA_IOCA0                at IOCA : 0
-- ------------------------------------------------
var volatile byte   REFCON                    at { 0x98 }
var volatile bit    REFCON_BGST               at REFCON : 5
var volatile bit    REFCON_VRBB               at REFCON : 4
var volatile bit    REFCON_VREN               at REFCON : 3
var volatile bit    REFCON_VROE               at REFCON : 2
var volatile bit    REFCON_CVROE              at REFCON : 1
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x99 }
var volatile bit    VRCON_C1VREN              at VRCON : 7
var volatile bit    VRCON_C2VREN              at VRCON : 6
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit    VRCON_VR3                 at VRCON : 3
var volatile bit    VRCON_VR2                 at VRCON : 2
var volatile bit    VRCON_VR1                 at VRCON : 1
var volatile bit    VRCON_VR0                 at VRCON : 0
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x9A }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x9B }
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x9C }
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_RD                 at EECON1 : 0
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x9D }
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x9F }
var volatile bit*3  ADCON1_ADCS               at ADCON1 : 4
-- ------------------------------------------------
var volatile byte   PWMCON1                   at { 0x110 }
var volatile bit    PWMCON1_OVRLP             at PWMCON1 : 7
var volatile bit*2  PWMCON1_COMOD             at PWMCON1 : 5
var volatile bit*5  PWMCON1_CMDLY             at PWMCON1 : 0
-- ------------------------------------------------
var volatile byte   PWMCON0                   at { 0x111 }
var volatile bit    PWMCON0_PRSEN             at PWMCON0 : 7
var volatile bit    PWMCON0_PASEN             at PWMCON0 : 6
var volatile bit    PWMCON0_BLANK2            at PWMCON0 : 5
var volatile bit    PWMCON0_BLANK1            at PWMCON0 : 4
var volatile bit*2  PWMCON0_SYNC              at PWMCON0 : 2
var volatile bit    PWMCON0_PH2EN             at PWMCON0 : 1
var volatile bit    PWMCON0_PH1EN             at PWMCON0 : 0
-- ------------------------------------------------
var volatile byte   PWMCLK                    at { 0x112 }
var volatile bit    PWMCLK_PWMASE             at PWMCLK : 7
var volatile bit*2  PWMCLK_PS                 at PWMCLK : 5
var volatile bit*5  PWMCLK_PER                at PWMCLK : 0
-- ------------------------------------------------
var volatile byte   PWMPH1                    at { 0x113 }
var volatile bit    PWMPH1_POL                at PWMPH1 : 7
var volatile bit    PWMPH1_C2EN               at PWMPH1 : 6
var volatile bit    PWMPH1_C1EN               at PWMPH1 : 5
var volatile bit*5  PWMPH1_PH                 at PWMPH1 : 0
-- ------------------------------------------------
var volatile byte   PWMPH2                    at { 0x114 }
var volatile bit    PWMPH2_POL                at PWMPH2 : 7
var volatile bit    PWMPH2_C2EN               at PWMPH2 : 6
var volatile bit    PWMPH2_C1EN               at PWMPH2 : 5
var volatile bit*5  PWMPH2_PH                 at PWMPH2 : 0
-- ------------------------------------------------
var volatile byte   CM1CON0                   at { 0x119 }
var volatile bit    CM1CON0_C1ON              at CM1CON0 : 7
var volatile bit    CM1CON0_C1OUT             at CM1CON0 : 6
var volatile bit    CM1CON0_C1OE              at CM1CON0 : 5
var volatile bit    CM1CON0_C1POL             at CM1CON0 : 4
var volatile bit    CM1CON0_C1SP              at CM1CON0 : 3
var volatile bit    CM1CON0_C1R               at CM1CON0 : 2
var volatile bit*2  CM1CON0_C1CH              at CM1CON0 : 0
-- ------------------------------------------------
var volatile byte   CM2CON0                   at { 0x11A }
var volatile bit    CM2CON0_C2ON              at CM2CON0 : 7
var volatile bit    CM2CON0_C2OUT             at CM2CON0 : 6
var volatile bit    CM2CON0_C2OE              at CM2CON0 : 5
var volatile bit    CM2CON0_C2POL             at CM2CON0 : 4
var volatile bit    CM2CON0_C2SP              at CM2CON0 : 3
var volatile bit    CM2CON0_C2R               at CM2CON0 : 2
var volatile bit*2  CM2CON0_C2CH              at CM2CON0 : 0
-- ------------------------------------------------
var volatile byte   CM2CON1                   at { 0x11B }
var volatile bit    CM2CON1_MC1OUT            at CM2CON1 : 7
var volatile bit    CM2CON1_MC2OUT            at CM2CON1 : 6
var volatile bit    CM2CON1_T1GSS             at CM2CON1 : 1
var volatile bit    CM2CON1_C2SYNC            at CM2CON1 : 0
-- ------------------------------------------------
var volatile byte   OPA1CON                   at { 0x11C }
var volatile bit    OPA1CON_OPAON             at OPA1CON : 7
-- ------------------------------------------------
var volatile byte   OPA2CON                   at { 0x11D }
var volatile bit    OPA2CON_OPAON             at OPA2CON : 7
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = ADC_V0
const byte ADC_NTOTAL_CHANNEL = 12
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSEL0 = 0b0000_0000        -- all digital
   ANSEL1 = 0b0000_0000        -- all digital
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CM1CON0 = 0b0000_0000       -- disable comparator
   CM2CON0 = 0b0000_0000       -- disable 2nd comparator
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
   comparator_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC 0x7 {
       RC_CLKOUT = 0x7
       RC_NOCLKOUT = 0x6
       INTOSC_CLKOUT = 0x5
       INTOSC_NOCLKOUT = 0x4
       EC_NOCLKOUT = 0x3
       HS = 0x2
       XT = 0x1
       LP = 0x0
       }
pragma fuse_def WDT 0x8 {
       ENABLED = 0x8
       DISABLED = 0x0
       }
pragma fuse_def PWRTE 0x10 {
       DISABLED = 0x10
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x20 {
       EXTERNAL = 0x20
       INTERNAL = 0x0
       }
pragma fuse_def CP 0x40 {
       DISABLED = 0x40
       ENABLED = 0x0
       }
pragma fuse_def CPD 0x80 {
       DISABLED = 0x80
       ENABLED = 0x0
       }
pragma fuse_def BROWNOUT 0x300 {
       DISABLED = 0x0
       CONTROL = 0x100
       RUNONLY = 0x200
       ENABLED = 0x300
       }
pragma fuse_def IESO 0x400 {
       ENABLED = 0x400
       DISABLED = 0x0
       }
pragma fuse_def FCMEN 0x800 {
       ENABLED = 0x800
       DISABLED = 0x0
       }
--
