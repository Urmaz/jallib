-- ===================================================
-- Title: JalV2 device include file for PIC 16F819
--
-- Author: Rob Hamerling, Copyright (c) 2008..2009, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4k
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f819, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab833/mplab_ide/device/pic16f819.dev
--  - x:/mplab833/mpasm_suite/lkr/16f819_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.0.71
--  - File creation date/time: 1 Jul 2009 15:36
--
-- ===================================================
--
-- Device-ID: 0x04E0
-- DataSheet: 39598
-- Programming Specifications: 39603
-- Vdd Range: 2.500-5.500 Nominal: 5.000
-- Vpp Range: 12.500-13.500 Default: 12.500
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks = 4)
pragma  target  chip  16f819
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    2048                    -- (words)
pragma  eeprom  0x2100,256
pragma  data    0x20-0x6F,0xA0-0xEF,0x120-0x16F
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum shared at { 0x7E,0xFE,0x17E,0x1FE }   -- (compiler)
var volatile byte _pic_isr_w shared at { 0x7F,0xFF,0x17F,0x1FF }   -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0011_1111_1111_1111
--
const word  _ID_CT                = 4
const word  _ID_BASE[_ID_CT]      = { 0x2000,0x2001,0x2002,0x2003 }
const word  _ID[_ID_CT]           = { 0x0000,0x0000,0x0000,0x0000 }
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit*2 STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte  _status                   at { 0x3,0x83,0x103,0x183 }      -- (compiler)
const        byte  _irp                      =  7      -- (compiler)
const        byte  _RP1                      =  6      -- (compiler)
const        byte  _RP0                      =  5      -- (compiler)
const        byte  _not_to                   =  4      -- (compiler)
const        byte  _not_pd                   =  3      -- (compiler)
const        byte  _z                        =  2      -- (compiler)
const        byte  _dc                       =  1      -- (compiler)
const        byte  _c                        =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0x5 }
--
var          byte  _PORTA_shadow        = PORTA
--
procedure _PORTA_flush() is
   pragma inline
   PORTA = _PORTA_shadow
end procedure
procedure PORTA'put(byte in x) is
   pragma inline
   _PORTA_shadow = x
   _PORTA_flush()
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA_flush()
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA_flush()
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA7                 at PORTA : 7
var volatile bit    pin_A7                    at PORTA : 7
var volatile bit    pin_OSC1                  is pin_A7
var volatile bit    pin_CLKI                  is pin_A7
procedure pin_A7'put(bit in x at _PORTA_shadow : 7) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA6                 at PORTA : 6
var volatile bit    pin_A6                    at PORTA : 6
var volatile bit    pin_OSC2                  is pin_A6
var volatile bit    pin_CLKO                  is pin_A6
procedure pin_A6'put(bit in x at _PORTA_shadow : 6) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    pin_A5                    at PORTA : 5
var volatile bit    pin_MCLR                  is pin_A5
var volatile bit    pin_VPP                   is pin_A5
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    pin_A4                    at PORTA : 4
var volatile bit    pin_AN4                   is pin_A4
var volatile bit    pin_T0CKI                 is pin_A4
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA : 3
var volatile bit    pin_AN3                   is pin_A3
var volatile bit    pin_VREF_POS              is pin_A3
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA : 2
var volatile bit    pin_AN2                   is pin_A2
var volatile bit    pin_VREF                  is pin_A2
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA : 1
var volatile bit    pin_AN1                   is pin_A1
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA : 0
var volatile bit    pin_AN0                   is pin_A0
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTB                     at { 0x6,0x106 }
--
var          byte  _PORTB_shadow        = PORTB
--
procedure _PORTB_flush() is
   pragma inline
   PORTB = _PORTB_shadow
end procedure
procedure PORTB'put(byte in x) is
   pragma inline
   _PORTB_shadow = x
   _PORTB_flush()
end procedure
--
procedure PORTB_low'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB_flush()
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB_flush()
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    pin_B7                    at PORTB : 7
var volatile bit    pin_T1OSI                 is pin_B7
var volatile bit    pin_PGD                   is pin_B7
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    pin_B6                    at PORTB : 6
var volatile bit    pin_T1OSO                 is pin_B6
var volatile bit    pin_T1CKI                 is pin_B6
var volatile bit    pin_PGC                   is pin_B6
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB : 5
var volatile bit    pin_SS                    is pin_B5
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB : 4
var volatile bit    pin_SCK                   is pin_B4
var volatile bit    pin_SCL                   is pin_B4
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    pin_B3                    at PORTB : 3
var volatile bit    pin_CCP1                  is pin_B3
var volatile bit    pin_PGM                   is pin_B3
procedure pin_B3'put(bit in x at _PORTB_shadow : 3) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    pin_B2                    at PORTB : 2
var volatile bit    pin_SDO                   is pin_B2
procedure pin_B2'put(bit in x at _PORTB_shadow : 2) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    pin_B1                    at PORTB : 1
var volatile bit    pin_SDI                   is pin_B1
var volatile bit    pin_SDA                   is pin_B1
procedure pin_B1'put(bit in x at _PORTB_shadow : 1) is
   pragma inline
   _PORTB_flush()
end procedure
--
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    pin_B0                    at PORTB : 0
var volatile bit    pin_INT                   is pin_B0
procedure pin_B0'put(bit in x at _PORTB_shadow : 0) is
   pragma inline
   _PORTB_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5 PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }      -- (compiler)
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_RBIF               at INTCON : 0
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_SSPIF                at PIR1 : 3
var volatile bit    PIR1_CCP1IF               at PIR1 : 2
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xD }
var volatile bit    PIR2_EEIF                 at PIR2 : 4
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit*2 T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_TMR1ON              at T1CON : 0
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*4 T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*2 T2CON_T2CKPS              at T2CON : 0
-- ------------------------------------------------
var volatile byte   SSPBUF                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   SSPCON                    at { 0x14 }
var volatile bit    SSPCON_WCOL               at SSPCON : 7
var volatile bit    SSPCON_SSPOV              at SSPCON : 6
var volatile bit    SSPCON_SSPEN              at SSPCON : 5
var volatile bit    SSPCON_CKP                at SSPCON : 4
var volatile bit*4 SSPCON_SSPM               at SSPCON : 0
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x16 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x17 }
var volatile bit*2 CCP1CON_DC1B              at CCP1CON : 4
var volatile bit*4 CCP1CON_CCP1M             at CCP1CON : 0
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit*2 ADCON0_ADCS               at ADCON0 : 6
var volatile bit*3 ADCON0_CHS                at ADCON0 : 3
var volatile bit    ADCON0_GO                 at ADCON0 : 2
var volatile bit    ADCON0_NDONE              at ADCON0 : 2
var volatile bit    ADCON0_ADON               at ADCON0 : 0
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit    OPTION_REG_NRBPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
var volatile bit*3 OPTION_REG_PS             at OPTION_REG : 0
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
var volatile byte   PORTA_direction           at TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA7              at TRISA : 7
var volatile bit    pin_A7_direction          at TRISA : 7
var volatile bit    pin_OSC1_direction        is pin_A7_direction
var volatile bit    pin_CLKI_direction        is pin_A7_direction
var volatile bit    TRISA_TRISA6              at TRISA : 6
var volatile bit    pin_A6_direction          at TRISA : 6
var volatile bit    pin_OSC2_direction        is pin_A6_direction
var volatile bit    pin_CLKO_direction        is pin_A6_direction
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
var volatile bit    pin_MCLR_direction        is pin_A5_direction
var volatile bit    pin_VPP_direction         is pin_A5_direction
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
var volatile bit    pin_AN4_direction         is pin_A4_direction
var volatile bit    pin_T0CKI_direction       is pin_A4_direction
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
var volatile bit    pin_AN3_direction         is pin_A3_direction
var volatile bit    pin_VREF_POS_direction    is pin_A3_direction
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
var volatile bit    pin_AN2_direction         is pin_A2_direction
var volatile bit    pin_VREF_direction        is pin_A2_direction
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
var volatile bit    pin_AN1_direction         is pin_A1_direction
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
var volatile bit    pin_AN0_direction         is pin_A0_direction
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86,0x186 }
var volatile byte   PORTB_direction           at TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
var volatile bit    pin_T1OSI_direction       is pin_B7_direction
var volatile bit    pin_PGD_direction         is pin_B7_direction
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
var volatile bit    pin_T1OSO_direction       is pin_B6_direction
var volatile bit    pin_T1CKI_direction       is pin_B6_direction
var volatile bit    pin_PGC_direction         is pin_B6_direction
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
var volatile bit    pin_SS_direction          is pin_B5_direction
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
var volatile bit    pin_SCK_direction         is pin_B4_direction
var volatile bit    pin_SCL_direction         is pin_B4_direction
var volatile bit    TRISB_TRISB3              at TRISB : 3
var volatile bit    pin_B3_direction          at TRISB : 3
var volatile bit    pin_CCP1_direction        is pin_B3_direction
var volatile bit    pin_PGM_direction         is pin_B3_direction
var volatile bit    TRISB_TRISB2              at TRISB : 2
var volatile bit    pin_B2_direction          at TRISB : 2
var volatile bit    pin_SDO_direction         is pin_B2_direction
var volatile bit    TRISB_TRISB1              at TRISB : 1
var volatile bit    pin_B1_direction          at TRISB : 1
var volatile bit    pin_SDI_direction         is pin_B1_direction
var volatile bit    pin_SDA_direction         is pin_B1_direction
var volatile bit    TRISB_TRISB0              at TRISB : 0
var volatile bit    pin_B0_direction          at TRISB : 0
var volatile bit    pin_INT_direction         is pin_B0_direction
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_SSPIE                at PIE1 : 3
var volatile bit    PIE1_CCP1IE               at PIE1 : 2
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x8D }
var volatile bit    PIE2_EEIE                 at PIE2 : 4
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit*3 OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_IOFS               at OSCCON : 2
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*6 OSCTUNE_TUN               at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   SSPADD                    at { 0x93 }
-- ------------------------------------------------
var volatile byte   SSPSTAT                   at { 0x94 }
var volatile bit    SSPSTAT_SMP               at SSPSTAT : 7
var volatile bit    SSPSTAT_CKE               at SSPSTAT : 6
var volatile bit    SSPSTAT_D                 at SSPSTAT : 5
var volatile bit    SSPSTAT_NA                at SSPSTAT : 5
var volatile bit    SSPSTAT_P                 at SSPSTAT : 4
var volatile bit    SSPSTAT_S                 at SSPSTAT : 3
var volatile bit    SSPSTAT_R                 at SSPSTAT : 2
var volatile bit    SSPSTAT_NW                at SSPSTAT : 2
var volatile bit    SSPSTAT_UA                at SSPSTAT : 1
var volatile bit    SSPSTAT_BF                at SSPSTAT : 0
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x9F }
var volatile bit    ADCON1_ADFM               at ADCON1 : 7
var volatile bit    ADCON1_ADCS2              at ADCON1 : 6
var volatile bit*4 ADCON1_PCFG               at ADCON1 : 0
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x10C }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x10D }
-- ------------------------------------------------
var volatile byte   EEDATH                    at { 0x10E }
var volatile bit*6 EEDATH_EEDATH             at EEDATH : 0
-- ------------------------------------------------
var volatile byte   EEADRH                    at { 0x10F }
var volatile bit*3 EEADRH_EEADRH             at EEADRH : 0
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x18C }
var volatile bit    EECON1_EEPGD              at EECON1 : 7
var volatile bit    EECON1_FREE               at EECON1 : 4
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_RD                 at EECON1 : 0
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x18D }
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = ADC_V1
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_0111         -- digital I/O
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   adc_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- addr 0x2007
--
pragma fuse_def OSC 0x13 {
       EXTOSC_CLKOUT = 0x13
       EXTOSC_NOCLKOUT = 0x12
       INTOSC_CLKOUT = 0x11
       INTOSC_NOCLKOUT = 0x10
       EC_NOCLKOUT = 0x3
       HS = 0x2
       XT = 0x1
       LP = 0x0
       }
pragma fuse_def WDT 0x4 {
       ENABLED = 0x4
       DISABLED = 0x0
       }
pragma fuse_def PWRTE 0x8 {
       DISABLED = 0x8
       ENABLED = 0x0
       }
pragma fuse_def MCLR 0x20 {
       INTERNAL = 0x20
       INTERNAL = 0x0
       }
pragma fuse_def BROWNOUT 0x40 {
       ENABLED = 0x40
       DISABLED = 0x0
       }
pragma fuse_def LVP 0x80 {
       ENABLED = 0x80
       DISABLED = 0x0
       }
pragma fuse_def CPD 0x100 {
       DISABLED = 0x100
       ENABLED = 0x0
       }
pragma fuse_def WRT 0x600 {
       NO_PROTECTION = 0x600
       R0000_01FF = 0x400
       R0000_03FF = 0x200
       R0000_05FF = 0x0
       }
pragma fuse_def BACKBUG 0x800 {
       DISABLED = 0x800
       ENABLED = 0x0
       }
pragma fuse_def CCP1MUX 0x1000 {
       RB2 = 0x1000
       RB3 = 0x0
       }
pragma fuse_def CP 0x2000 {
       DISABLED = 0x2000
       ENABLED = 0x0
       }
--
