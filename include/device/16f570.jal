-- ===================================================
-- Title: JalV2 device include file for PIC16F570
--
-- Author: Rob Hamerling, Copyright (c) 2008..2013, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4p
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f570, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab889/mplab ide/device/pic16f570.dev
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.1.42
--  - File creation date/time: 16 Feb 2013 20:22
--
-- ===================================================
--
const word DEVICE_ID   = 0x0000
const byte PICTYPE[]   = "16F570"
const byte DATASHEET[] = "41684A"
const byte PGMSPEC[]   = "41670A"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_12            -- (banks=8)
pragma  target  chip  16f570
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   4
pragma  code    1023                     -- (excl high mem word)
pragma  eeprom  0x400,64
pragma  ID      0x840,4
pragma  data    0xE-0x1F,0x30-0x3F,0x50-0x5F,0x70-0x7F
pragma  shared  0xC-0xD
--
var volatile byte _pic_accum shared at 0xC      -- (compiler)
var volatile byte _pic_isr_w shared at 0xD      -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0xFFF
const word  _FUSES                = 0b_0000_1111_1111_1111
--
   var  volatile  byte  __osccal  at  0x5
   var  volatile  byte  __fsr     at  0x4
   asm            bcf   __fsr,5                  -- select bank 0
   asm            bcf   __fsr,6                  --   "     "
   asm            movwf __osccal                 -- calibrate oscillator
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x20,0x40,0x60 }
var volatile byte   _ind                      at { 0x0,0x20,0x40,0x60 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x41 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x22,0x42,0x62 }
var volatile byte   _pcl                      at { 0x2,0x22,0x42,0x62 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x23,0x43,0x63 }
var volatile bit    STATUS_PA2                at STATUS : 7
var volatile bit    STATUS_PA1                at STATUS : 6
var volatile bit    STATUS_PA0                at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte   _status                   at { 0x3,0x23,0x43,0x63 }
const        byte   _pa2                      =  7
const        byte   _pa1                      =  6
const        byte   _pa0                      =  5
const        byte   _not_to                   =  4
const        byte   _not_pd                   =  3
const        byte   _z                        =  2
const        byte   _dc                       =  1
const        byte   _c                        =  0
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x24,0x44,0x64 }
var volatile byte   _fsr                      at { 0x4,0x24,0x44,0x64 }
-- ------------------------------------------------
var volatile byte   OSCCAL                    at { 0x5,0x45 }
var volatile bit*7  OSCCAL_CAL                at OSCCAL : 1
-- ------------------------------------------------
var volatile byte   _PORTA                    at { 0x6,0x46 }
--
var          byte   PORTA                     at _PORTA
var          byte   _PORTA_shadow            
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   pragma inline
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   pragma inline
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA7                 at _PORTA : 7
var volatile bit    pin_A7                    at _PORTA : 7
alias               pin_OSC1                  is pin_A7
alias               pin_CLKIN                 is pin_A7
--
procedure pin_A7'put(bit in x at _PORTA_shadow : 7) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA6                 at _PORTA : 6
var volatile bit    pin_A6                    at _PORTA : 6
alias               pin_RA5                   is pin_A6
alias               pin_OSC2                  is pin_A6
alias               pin_CLKOUT                is pin_A6
--
procedure pin_A6'put(bit in x at _PORTA_shadow : 6) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA5                 at _PORTA : 5
var volatile bit    pin_A5                    at _PORTA : 5
alias               pin_AN5                   is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA4                 at _PORTA : 4
var volatile bit    pin_A4                    at _PORTA : 4
alias               pin_AN4                   is pin_A4
alias               pin_T0CKI                 is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA3                 at _PORTA : 3
var volatile bit    pin_A3                    at _PORTA : 3
alias               pin_AN3                   is pin_A3
alias               pin_C2IN_POS              is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA2                 at _PORTA : 2
var volatile bit    pin_A2                    at _PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_CVREF1                is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA1                 at _PORTA : 1
var volatile bit    pin_A1                    at _PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_C1IN_POS              is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA0                 at _PORTA : 0
var volatile bit    pin_A0                    at _PORTA : 0
alias               pin_AN0                   is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTB                    at { 0x7,0x47 }
--
var          byte   PORTB                     at _PORTB
var          byte   _PORTB_shadow            
--
procedure PORTB'put(byte in x at _PORTB_shadow) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
procedure PORTB_low'put(byte in x) is
   pragma inline
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_low'get() return byte is
   pragma inline
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   pragma inline
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_high'get() return byte is
   pragma inline
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB7                 at _PORTB : 7
var volatile bit    pin_B7                    at _PORTB : 7
alias               pin_ICSPDAT               is pin_B7
--
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB6                 at _PORTB : 6
var volatile bit    pin_B6                    at _PORTB : 6
alias               pin_ICSPCLK               is pin_B6
--
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB5                 at _PORTB : 5
var volatile bit    pin_B5                    at _PORTB : 5
--
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB4                 at _PORTB : 4
var volatile bit    pin_B4                    at _PORTB : 4
alias               pin_C2OUT                 is pin_B4
--
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB3                 at _PORTB : 3
var volatile bit    pin_B3                    at _PORTB : 3
alias               pin_C1OUT                 is pin_B3
--
procedure pin_B3'put(bit in x at _PORTB_shadow : 3) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB2                 at _PORTB : 2
var volatile bit    pin_B2                    at _PORTB : 2
--
procedure pin_B2'put(bit in x at _PORTB_shadow : 2) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB1                 at _PORTB : 1
var volatile bit    pin_B1                    at _PORTB : 1
--
procedure pin_B1'put(bit in x at _PORTB_shadow : 1) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB0                 at _PORTB : 0
var volatile bit    pin_B0                    at _PORTB : 0
--
procedure pin_B0'put(bit in x at _PORTB_shadow : 0) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTC                    at { 0x8,0x48 }
--
var          byte   PORTC                     at _PORTC
var          byte   _PORTC_shadow            
--
procedure PORTC'put(byte in x at _PORTC_shadow) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
procedure PORTC_low'put(byte in x) is
   pragma inline
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_low'get() return byte is
   pragma inline
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   pragma inline
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_high'get() return byte is
   pragma inline
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC7                 at _PORTC : 7
var volatile bit    pin_C7                    at _PORTC : 7
alias               pin_C2IN_NEG              is pin_C7
--
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC6                 at _PORTC : 6
var volatile bit    pin_C6                    at _PORTC : 6
alias               pin_AN7                   is pin_C6
alias               pin_OP2                   is pin_C6
--
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC5                 at _PORTC : 5
var volatile bit    pin_C5                    at _PORTC : 5
alias               pin_OP2_NEG               is pin_C5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC4                 at _PORTC : 4
var volatile bit    pin_C4                    at _PORTC : 4
alias               pin_OP2_POS               is pin_C4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC3                 at _PORTC : 3
var volatile bit    pin_C3                    at _PORTC : 3
alias               pin_OP1_POS               is pin_C3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC2                 at _PORTC : 2
var volatile bit    pin_C2                    at _PORTC : 2
alias               pin_OP1_NEG               is pin_C2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC1                 at _PORTC : 1
var volatile bit    pin_C1                    at _PORTC : 1
alias               pin_AN6                   is pin_C1
alias               pin_OP1                   is pin_C1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC0                 at _PORTC : 0
var volatile bit    pin_C0                    at _PORTC : 0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x9,0x49 }
var volatile bit*2  ADCON0_ADCS10             at ADCON0 : 6
var volatile bit*4  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_ADON               at ADCON0 : 0
-- ------------------------------------------------
var volatile byte   ADRES                     at { 0xA,0x4A }
-- ------------------------------------------------
var volatile byte   INTCON0                   at { 0xB,0x4B }
var volatile bit    INTCON0_ADIF              at INTCON0 : 7
var volatile bit    INTCON0_CWIF              at INTCON0 : 6
var volatile bit    INTCON0_T0IF              at INTCON0 : 5
var volatile bit    INTCON0_RBIF              at INTCON0 : 4
var volatile bit    INTCON0_GIE               at INTCON0 : 0
-- ------------------------------------------------
var volatile byte   EECON                     at { 0x21 }
var volatile bit    EECON_FREE                at EECON : 4
var volatile bit    EECON_WRERR               at EECON : 3
var volatile bit    EECON_WREN                at EECON : 2
var volatile bit    EECON_WR                  at EECON : 1
var volatile bit    EECON_RD                  at EECON : 0
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x25 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x26 }
var volatile bit*6  EEADR_EEADR               at EEADR : 0
-- ------------------------------------------------
var volatile byte   CM1CON0                   at { 0x27 }
var volatile bit    CM1CON0_C1OUT             at CM1CON0 : 7
var volatile bit    CM1CON0_NC1OUTEN          at CM1CON0 : 6
var volatile bit    CM1CON0_C1POL             at CM1CON0 : 5
var volatile bit    CM1CON0_NC1T0CS           at CM1CON0 : 4
var volatile bit    CM1CON0_C1ON              at CM1CON0 : 3
var volatile bit    CM1CON0_C1NREF            at CM1CON0 : 2
var volatile bit    CM1CON0_C1PREF            at CM1CON0 : 1
var volatile bit    CM1CON0_NC1WU             at CM1CON0 : 0
-- ------------------------------------------------
var volatile byte   CM2CON0                   at { 0x28 }
var volatile bit    CM2CON0_C2OUT             at CM2CON0 : 7
var volatile bit    CM2CON0_NC2OUTEN          at CM2CON0 : 6
var volatile bit    CM2CON0_C2POL             at CM2CON0 : 5
var volatile bit    CM2CON0_C2PREF2           at CM2CON0 : 4
var volatile bit    CM2CON0_C2ON              at CM2CON0 : 3
var volatile bit    CM2CON0_C2NREF            at CM2CON0 : 2
var volatile bit    CM2CON0_C2PREF1           at CM2CON0 : 1
var volatile bit    CM2CON0_NC2WU             at CM2CON0 : 0
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x29 }
var volatile bit    VRCON_VREN                at VRCON : 7
var volatile bit    VRCON_VROE1               at VRCON : 6
var volatile bit    VRCON_VROE2               at VRCON : 5
var volatile bit    VRCON_VRR                 at VRCON : 4
var volatile bit*4  VRCON_VR                  at VRCON : 0
-- ------------------------------------------------
var volatile byte   ANSEL                     at { 0x2A,0x6A }
var volatile bit    ANSEL_ANS7                at ANSEL : 7
alias               JANSEL_ANS7               is ANSEL_ANS7
var volatile bit    ANSEL_ANS6                at ANSEL : 6
alias               JANSEL_ANS6               is ANSEL_ANS6
var volatile bit    ANSEL_ANS5                at ANSEL : 5
alias               JANSEL_ANS5               is ANSEL_ANS5
var volatile bit    ANSEL_ANS4                at ANSEL : 4
alias               JANSEL_ANS4               is ANSEL_ANS4
var volatile bit    ANSEL_ANS3                at ANSEL : 3
alias               JANSEL_ANS3               is ANSEL_ANS3
var volatile bit    ANSEL_ANS2                at ANSEL : 2
alias               JANSEL_ANS2               is ANSEL_ANS2
var volatile bit    ANSEL_ANS1                at ANSEL : 1
alias               JANSEL_ANS1               is ANSEL_ANS1
var volatile bit    ANSEL_ANS0                at ANSEL : 0
alias               JANSEL_ANS0               is ANSEL_ANS0
-- ------------------------------------------------
var volatile byte   IW                        at { 0x61 }
-- ------------------------------------------------
var volatile byte   INTCON1                   at { 0x65 }
var volatile bit    INTCON1_ADIE              at INTCON1 : 7
var volatile bit    INTCON1_CWIE              at INTCON1 : 6
var volatile bit    INTCON1_T0IE              at INTCON1 : 5
var volatile bit    INTCON1_RBIE              at INTCON1 : 4
var volatile bit    INTCON1_WUR               at INTCON1 : 0
-- ------------------------------------------------
var volatile byte   ISTATUS                   at { 0x66 }
var volatile bit    ISTATUS_PA2               at ISTATUS : 7
var volatile bit    ISTATUS_PA1               at ISTATUS : 6
var volatile bit    ISTATUS_PA0               at ISTATUS : 5
var volatile bit    ISTATUS_NTO               at ISTATUS : 4
var volatile bit    ISTATUS_NPD               at ISTATUS : 3
var volatile bit    ISTATUS_Z                 at ISTATUS : 2
var volatile bit    ISTATUS_DC                at ISTATUS : 1
var volatile bit    ISTATUS_C                 at ISTATUS : 0
-- ------------------------------------------------
var volatile byte   IFSR                      at { 0x67 }
-- ------------------------------------------------
var volatile byte   IBSR                      at { 0x68 }
var volatile bit*3  IBSR_IBSR                 at IBSR : 0
-- ------------------------------------------------
var volatile byte   OPACON                    at { 0x69 }
var volatile bit    OPACON_OPA2ON             at OPACON : 1
var volatile bit    OPACON_OPA1ON             at OPACON : 0
-- ------------------------------------------------
var  byte _TRISA_shadow = 0b1111_1111         -- default all input
--
procedure PORTA_direction'put(byte in x at _TRISA_shadow) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   pragma inline
   _TRISA_shadow = (_TRISA_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   pragma inline
   _TRISA_shadow = (_TRISA_shadow & 0x0F) | (x << 4)
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
--
procedure pin_A7_direction'put(bit in x at _TRISA_shadow : 7) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_OSC1_direction        is pin_A7_direction
alias               pin_CLKIN_direction       is pin_A7_direction
--
procedure pin_A6_direction'put(bit in x at _TRISA_shadow : 6) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_RA5_direction         is pin_A6_direction
alias               pin_OSC2_direction        is pin_A6_direction
alias               pin_CLKOUT_direction      is pin_A6_direction
--
procedure pin_A5_direction'put(bit in x at _TRISA_shadow : 5) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_AN5_direction         is pin_A5_direction
--
procedure pin_A4_direction'put(bit in x at _TRISA_shadow : 4) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_AN4_direction         is pin_A4_direction
alias               pin_T0CKI_direction       is pin_A4_direction
--
procedure pin_A3_direction'put(bit in x at _TRISA_shadow : 3) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_AN3_direction         is pin_A3_direction
alias               pin_C2IN_POS_direction    is pin_A3_direction
--
procedure pin_A2_direction'put(bit in x at _TRISA_shadow : 2) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_CVREF1_direction      is pin_A2_direction
--
procedure pin_A1_direction'put(bit in x at _TRISA_shadow : 1) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C1IN_POS_direction    is pin_A1_direction
--
procedure pin_A0_direction'put(bit in x at _TRISA_shadow : 0) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 5
end procedure
alias               pin_AN0_direction         is pin_A0_direction
--
-- ------------------------------------------------
var  byte _TRISB_shadow = 0b1111_1111         -- default all input
--
procedure PORTB_direction'put(byte in x at _TRISB_shadow) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure PORTB_low_direction'put(byte in x) is
   pragma inline
   _TRISB_shadow = (_TRISB_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure PORTB_high_direction'put(byte in x) is
   pragma inline
   _TRISB_shadow = (_TRISB_shadow & 0x0F) | (x << 4)
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B7_direction'put(bit in x at _TRISB_shadow : 7) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
alias               pin_ICSPDAT_direction     is pin_B7_direction
--
procedure pin_B6_direction'put(bit in x at _TRISB_shadow : 6) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
alias               pin_ICSPCLK_direction     is pin_B6_direction
--
procedure pin_B5_direction'put(bit in x at _TRISB_shadow : 5) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B4_direction'put(bit in x at _TRISB_shadow : 4) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
alias               pin_C2OUT_direction       is pin_B4_direction
--
procedure pin_B3_direction'put(bit in x at _TRISB_shadow : 3) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
alias               pin_C1OUT_direction       is pin_B3_direction
--
procedure pin_B2_direction'put(bit in x at _TRISB_shadow : 2) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B1_direction'put(bit in x at _TRISB_shadow : 1) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
procedure pin_B0_direction'put(bit in x at _TRISB_shadow : 0) is
   pragma inline
   asm movf _TRISB_shadow,W
   asm tris 6
end procedure
--
-- ------------------------------------------------
var  byte _TRISC_shadow = 0b1111_1111         -- default all input
--
procedure PORTC_direction'put(byte in x at _TRISC_shadow) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure PORTC_low_direction'put(byte in x) is
   pragma inline
   _TRISC_shadow = (_TRISC_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure PORTC_high_direction'put(byte in x) is
   pragma inline
   _TRISC_shadow = (_TRISC_shadow & 0x0F) | (x << 4)
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
procedure pin_C7_direction'put(bit in x at _TRISC_shadow : 7) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_C2IN_NEG_direction    is pin_C7_direction
--
procedure pin_C6_direction'put(bit in x at _TRISC_shadow : 6) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_AN7_direction         is pin_C6_direction
alias               pin_OP2_direction         is pin_C6_direction
--
procedure pin_C5_direction'put(bit in x at _TRISC_shadow : 5) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_OP2_NEG_direction     is pin_C5_direction
--
procedure pin_C4_direction'put(bit in x at _TRISC_shadow : 4) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_OP2_POS_direction     is pin_C4_direction
--
procedure pin_C3_direction'put(bit in x at _TRISC_shadow : 3) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_OP1_POS_direction     is pin_C3_direction
--
procedure pin_C2_direction'put(bit in x at _TRISC_shadow : 2) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_OP1_NEG_direction     is pin_C2_direction
--
procedure pin_C1_direction'put(bit in x at _TRISC_shadow : 1) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
alias               pin_AN6_direction         is pin_C1_direction
alias               pin_OP1_direction         is pin_C1_direction
--
procedure pin_C0_direction'put(bit in x at _TRISC_shadow : 0) is
   pragma inline
   asm movf _TRISC_shadow,W
   asm tris 7
end procedure
--
-- ------------------------------------------------
var  byte _OPTION_REG_shadow = 0b1111_1111         -- default all set
--
procedure OPTION_REG'put(byte in x at _OPTION_REG_shadow) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_NRBWU'put(bit in x at _OPTION_REG_shadow : 7) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_NRBPU'put(bit in x at _OPTION_REG_shadow : 6) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_T0CS'put(bit in x at _OPTION_REG_shadow : 5) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_T0SE'put(bit in x at _OPTION_REG_shadow : 4) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_PSA'put(bit in x at _OPTION_REG_shadow : 3) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_PS'put(bit*3 in x at _OPTION_REG_shadow : 0) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = ADC_V0
const byte ADC_NTOTAL_CHANNEL = 8
const byte ADC_ADCS_BITCOUNT  = 0
--
const PPS_GROUP  = PPS_0        -- no Peripheral Pin Selection
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSEL  = 0b0000_0000       -- digital I/O
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CM1CON0 = 0b0000_0000       -- disable comparator
   CM2CON0 = 0b0000_0000       -- disable 2nd comparator
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
   comparator_off()
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def OSC 0x7 {                  -- oscillator
       LP = 0x0                            -- lp oscillator and 18 ms drt
       XT = 0x1                            -- xt oscillator and 18 ms drt
       HS = 0x2                            -- hs oscillator and 18 ms drt
       EC_NOCLKOUT = 0x3                   -- ec oscillator with i/o function on osc2/clkout
       INTOSC_NOCLKOUT = 0x4               -- intrc with i/o function on osc2/clkout
       INTOSC_CLKOUT = 0x5                 -- intrc with clkout function on osc2/clkout
       RC_NOCLKOUT = 0x6                   -- extrc with i/o function on osc2/clkout
       RC_CLKOUT = 0x7                     -- extrc with clkout function on osc2/clkout
       }
pragma fuse_def WDT 0x8 {                  -- watchdog timer enable bit
       ENABLED = 0x8                       -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def CP 0x10 {                  -- code protection bit
       DISABLED = 0x10                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def IOSCFS 0x40 {              -- internal oscillator frequency select
       F8MHZ = 0x40                        -- 8 mhz intosc speed
       F4MHZ = 0x0                         -- 4 mhz intosc speed
       }
pragma fuse_def CPD 0x80 {                 -- code protection bit - flash data memory
       DISABLED = 0x80                     -- disabled
       ENABLED = 0x0                       -- enabled
       }
pragma fuse_def BROWNOUT 0x100 {           -- ...
       ENABLED = 0x100                     -- enabled
       DISABLED = 0x0                      -- disabled
       }
pragma fuse_def DRTEN 0x200 {              -- ...
       ENABLED = 0x200                     -- enabled
       DISABLED = 0x0                      -- disabled
       }
--
