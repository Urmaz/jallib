-- ===================================================
-- Title: JalV2 device include file for PIC12F529T39A
--
-- Author: Rob Hamerling, Copyright (c) 2008..2013, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic12f529t39a, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {MPLAB-X 1.95} crownking.edc.jar/content/edc/../PIC12F529T39A.PIC
--
-- Notes:
--  - Created with Edc2Jal Rexx script version 0.0.21
--  - File creation date/time: 21 Nov 2013 10:37
--
-- ===================================================
--
const word DEVICE_ID   = 0x0000
const byte PICTYPE[]   = "12F529T39A"
const byte DATASHEET[] = "41635A"
const byte PGMSPEC[]   = "41619C"
--
-- Vdd Range: 2.700-3.700 Nominal: 3.300
-- Vpp Range: 12.500-13.500 Default: 13.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_12            -- (banks=8)
pragma  target  chip  12f529t39a
pragma  target  bank  0x0020
pragma  target  page  0x0200
pragma  stack   4
pragma  code    1535                     -- (excl high mem word)
pragma  eeprom  0x600,64
pragma  ID      0x640,4
pragma  data    0x7-0x1F,0x30-0x3F,0x50-0x5F,0x70-0x7F
pragma  shared  0x7-0xF
--
var volatile byte _pic_accum at 0xF      -- (compiler)
var volatile byte _pic_isr_w at 0xE      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0xFFF
const word   _FUSES                = 0b_0000_1101_1111_1111
--
var volatile byte  __osccal  at  0x5
var volatile byte  __fsr     at  0x4
asm          bcf   __fsr,5                  -- select bank 0
asm          bcf   __fsr,6                  --   "     "
asm          movwf __osccal                 -- calibrate INTOSC
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x20,0x40,0x60 }
var volatile byte   _ind                      at { 0x0,0x20,0x40,0x60 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x41 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x22,0x42,0x62 }
var volatile byte   _pcl                      at { 0x2,0x22,0x42,0x62 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x23,0x43,0x63 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_PA0                at STATUS : 5
var volatile bit    STATUS_PA1                at STATUS : 6
var volatile bit    STATUS_RBWUF              at STATUS : 7
var volatile byte   _status                   at { 0x3,0x23,0x43,0x63 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _pa0                      =  5
const        byte   _pa1                      =  6
const        byte   _rbwuf                    =  7
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x24,0x44,0x64 }
var volatile byte   _fsr                      at { 0x4,0x24,0x44,0x64 }
-- ------------------------------------------------
var volatile byte   OSCCAL                    at { 0x5,0x45 }
var volatile bit*7  OSCCAL_CAL                at OSCCAL : 1
-- ------------------------------------------------
var volatile byte   _GPIO                     at { 0x6,0x46 }
alias               _PORTA                    is _GPIO
--
var          byte   PORTA                     at _PORTA
var volatile byte   _PORTA_shadow             at 0xD
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    GPIO_GP0                  at _GPIO : 0
var volatile bit    pin_A0                    at _GPIO : 0
alias               pin_ICSPDAT               is pin_A0
alias               pin_GP0                   is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP1                  at _GPIO : 1
var volatile bit    pin_A1                    at _GPIO : 1
alias               pin_ICSPCLK               is pin_A1
alias               pin_GP1                   is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP2                  at _GPIO : 2
var volatile bit    pin_A2                    at _GPIO : 2
alias               pin_T0CKI                 is pin_A2
alias               pin_GP2                   is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP3                  at _GPIO : 3
var volatile bit    pin_A3                    at _GPIO : 3
alias               pin_VPP                   is pin_A3
alias               pin_MCLR                  is pin_A3
alias               pin_GP3                   is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP4                  at _GPIO : 4
var volatile bit    pin_A4                    at _GPIO : 4
alias               pin_OSC2                  is pin_A4
alias               pin_GP4                   is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    GPIO_GP5                  at _GPIO : 5
var volatile bit    pin_A5                    at _GPIO : 5
alias               pin_CLKIN                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_GP5                   is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   EECON                     at { 0x21,0x61 }
var volatile bit    EECON_RD                  at EECON : 0
var volatile bit    EECON_WR                  at EECON : 1
var volatile bit    EECON_WREN                at EECON : 2
var volatile bit    EECON_WRERR               at EECON : 3
var volatile bit    EECON_FREE                at EECON : 4
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x25,0x65 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x26,0x66 }
-- ------------------------------------------------
var volatile byte   _TRISA_shadow             at 0xC = 0b1111_1111    -- all input
--
procedure PORTA_direction'put(byte in x at _TRISA_shadow) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   _TRISA_shadow = (_TRISA_shadow & 0xF0) | (x & 0x0F)
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   _TRISA_shadow = (_TRISA_shadow & 0x0F) | (x << 4)
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
--
procedure pin_A0_direction'put(bit in x at _TRISA_shadow : 0) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               pin_ICSPDAT_direction     is pin_A0_direction
alias               pin_GP0_direction         is pin_A0_direction
--
procedure pin_A1_direction'put(bit in x at _TRISA_shadow : 1) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               pin_ICSPCLK_direction     is pin_A1_direction
alias               pin_GP1_direction         is pin_A1_direction
--
procedure pin_A2_direction'put(bit in x at _TRISA_shadow : 2) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_GP2_direction         is pin_A2_direction
--
procedure pin_A3_direction'put(bit in x at _TRISA_shadow : 3) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               pin_VPP_direction         is pin_A3_direction
alias               pin_MCLR_direction        is pin_A3_direction
alias               pin_GP3_direction         is pin_A3_direction
--
procedure pin_A4_direction'put(bit in x at _TRISA_shadow : 4) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_GP4_direction         is pin_A4_direction
--
procedure pin_A5_direction'put(bit in x at _TRISA_shadow : 5) is
   pragma inline
   asm movf _TRISA_shadow,W
   asm tris 6
end procedure
alias               pin_CLKIN_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_GP5_direction         is pin_A5_direction
--
-- ------------------------------------------------
var volatile byte   _OPTION_REG_shadow        at 0xB = 0b1111_1111    -- at reset
--
procedure OPTION_REG'put(byte in x at _OPTION_REG_shadow) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(bit*3 in x at _OPTION_REG_shadow : 0) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
procedure OPTION_REG_PSA'put(bit in x at _OPTION_REG_shadow : 3) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_T0SE'put(bit in x at _OPTION_REG_shadow : 4) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_T0CS'put(bit in x at _OPTION_REG_shadow : 5) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_NRBPU'put(bit in x at _OPTION_REG_shadow : 6) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
procedure OPTION_REG_NRBWU'put(bit in x at _OPTION_REG_shadow : 7) is
   pragma inline
   asm movf _OPTION_REG_shadow,0
   asm option
end procedure
--
-- ===================================================
--
--    Constants and procedures for analog features
--    --------------------------------------------
--
const      ADC_GROUP          = 0        -- no ADC module present
const byte ADC_NTOTAL_CHANNEL = 0
const byte ADC_ADCS_BITCOUNT  = 0
const byte ADC_MAX_RESOLUTION = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ===================================================
--
--    Miscellaneous
--    -------------
--
const PPS_GROUP        = PPS_0        -- no Peripheral Pin Selection
--
-- Free shared memory: 0x7-0xA
--
-- ===================================================
--
--    Symbolic Fuse Definitions
-- ------------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def OSC 0x3 {                  -- Oscillator
       LP = 0x0                            -- LP Osc With 18 ms DRT
       XT = 0x1                            -- XT Osc With 18 ms DRT
       INTOSC_NOCLKOUT = 0x2               -- INTRC With 1 ms DRT
       RC_NOCLKOUT = 0x3                   -- EXTRC With 1 ms DRT
       }
pragma fuse_def WDT 0x4 {                  -- Watchdog Timer Enable
       ENABLED = 0x4                       -- Enabled
       DISABLED = 0x0                      -- Disabled
       }
pragma fuse_def PARITY 0x8 {               -- Configuration Word Parity
       SET = 0x8                           -- Parity bit set
       CLEAR = 0x0                         -- Parity bit clear
       }
pragma fuse_def MCLR 0x10 {                -- Master Clear Enable
       EXTERNAL = 0x10                     -- RB3/MCLR Functions as MCLR
       INTERNAL = 0x0                      -- RB3/MCLR Functions as RB3
       }
pragma fuse_def IOSCFS 0x20 {              -- Internal Oscillator Frequency Select
       F8MHZ = 0x20                        -- 8 MHz INTOSC Speed
       F4MHZ = 0x0                         -- 4 MHz INTOSC Speed
       }
pragma fuse_def CPD 0x40 {                 -- Code Protection bit - Flash Data Memory
       DISABLED = 0x40                     -- Code protection off
       ENABLED = 0x0                       -- Code protection on
       }
pragma fuse_def CP 0x780 {                 -- Code Protect State
       DISABLED = 0x580                    -- Disabled
       ENABLED = 0x100                     -- Enabled
       }
--
