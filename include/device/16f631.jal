-- ===================================================
-- Title: JalV2 device include file for PIC16F631
--
-- Author: Rob Hamerling, Copyright (c) 2008..2014, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license  (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f631, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {MPLAB-X 2.00} crownking.edc.jar/content/edc/../PIC16F631.PIC
--
-- Notes:
--  - Created with Edc2Jal Rexx script version 0.0.23
--  - File creation date/time: 24 Jan 2014 14:52
--
-- ===================================================
--
const word DEVICE_ID   = 0x1420
const byte PICTYPE[]   = "16F631"
const byte DATASHEET[] = "41262E"
const byte PGMSPEC[]   = "41204H"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 11.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks=4)
pragma  target  chip  16f631
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    1024
pragma  eeprom  0x2100,128
pragma  ID      0x2000,4
pragma  data    0x40-0x7F
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum at 0x7F      -- (compiler)
var volatile byte _pic_isr_w at 0x7E      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0x2007
const word   _FUSES                = 0b_0011_1111_1111_1111
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _irp                      =  7
const        byte   _rp0                      =  5
const        byte   _rp1                      =  6
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   _PORTA                    at { 0x5,0x105 }
--
var          byte   PORTA                     at _PORTA
var volatile byte   _PORTA_shadow             at 0x7D
--
procedure PORTA'put(byte in x at _PORTA_shadow) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
procedure PORTA_low'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA = _PORTA_shadow
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA0                 at _PORTA : 0
var volatile bit    pin_A0                    at _PORTA : 0
alias               pin_AN0                   is pin_A0
alias               pin_C1IN_POS              is pin_A0
alias               pin_ICSPDAT               is pin_A0
alias               pin_ULPWU                 is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA1                 at _PORTA : 1
var volatile bit    pin_A1                    at _PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_C12IN0_NEG            is pin_A1
alias               pin_ICSPCK                is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA2                 at _PORTA : 2
var volatile bit    pin_A2                    at _PORTA : 2
alias               pin_T0CKI                 is pin_A2
alias               pin_C1OUT                 is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA3                 at _PORTA : 3
var volatile bit    pin_A3                    at _PORTA : 3
alias               pin_MCLR                  is pin_A3
alias               pin_VPP                   is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA4                 at _PORTA : 4
var volatile bit    pin_A4                    at _PORTA : 4
alias               pin_T1G                   is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
var volatile bit    PORTA_RA5                 at _PORTA : 5
var volatile bit    pin_A5                    at _PORTA : 5
alias               pin_T1CKI                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA = _PORTA_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTB                    at { 0x6,0x106 }
--
var          byte   PORTB                     at _PORTB
var volatile byte   _PORTB_shadow             at 0x7C
--
procedure PORTB'put(byte in x at _PORTB_shadow) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
procedure PORTB_low'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0xF0) | (x & 0x0F)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   _PORTB_shadow = (_PORTB_shadow & 0x0F) | (x << 4)
   _PORTB = _PORTB_shadow
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB4                 at _PORTB : 4
var volatile bit    pin_B4                    at _PORTB : 4
--
procedure pin_B4'put(bit in x at _PORTB_shadow : 4) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB5                 at _PORTB : 5
var volatile bit    pin_B5                    at _PORTB : 5
--
procedure pin_B5'put(bit in x at _PORTB_shadow : 5) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB6                 at _PORTB : 6
var volatile bit    pin_B6                    at _PORTB : 6
--
procedure pin_B6'put(bit in x at _PORTB_shadow : 6) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
var volatile bit    PORTB_RB7                 at _PORTB : 7
var volatile bit    pin_B7                    at _PORTB : 7
--
procedure pin_B7'put(bit in x at _PORTB_shadow : 7) is
   pragma inline
   _PORTB = _PORTB_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   _PORTC                    at { 0x7,0x107 }
--
var          byte   PORTC                     at _PORTC
var volatile byte   _PORTC_shadow             at 0x7B
--
procedure PORTC'put(byte in x at _PORTC_shadow) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
procedure PORTC_low'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC = _PORTC_shadow
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC0                 at _PORTC : 0
var volatile bit    pin_C0                    at _PORTC : 0
alias               pin_AN4                   is pin_C0
alias               pin_C2IN_POS              is pin_C0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC1                 at _PORTC : 1
var volatile bit    pin_C1                    at _PORTC : 1
alias               pin_AN5                   is pin_C1
alias               pin_C12IN1_NEG            is pin_C1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC2                 at _PORTC : 2
var volatile bit    pin_C2                    at _PORTC : 2
alias               pin_AN6                   is pin_C2
alias               pin_C12IN2_NEG            is pin_C2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC3                 at _PORTC : 3
var volatile bit    pin_C3                    at _PORTC : 3
alias               pin_AN7                   is pin_C3
alias               pin_C12IN3_NEG            is pin_C3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC4                 at _PORTC : 4
var volatile bit    pin_C4                    at _PORTC : 4
alias               pin_C2OUT                 is pin_C4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC5                 at _PORTC : 5
var volatile bit    pin_C5                    at _PORTC : 5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC6                 at _PORTC : 6
var volatile bit    pin_C6                    at _PORTC : 6
--
procedure pin_C6'put(bit in x at _PORTC_shadow : 6) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
var volatile bit    PORTC_RC7                 at _PORTC : 7
var volatile bit    pin_C7                    at _PORTC : 7
--
procedure pin_C7'put(bit in x at _PORTC_shadow : 7) is
   pragma inline
   _PORTC = _PORTC_shadow
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_RABIF              at INTCON : 0
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_RABIE              at INTCON : 3
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_T1IF                 at PIR1 : 0
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xD }
var volatile bit    PIR2_EEIF                 at PIR2 : 4
var volatile bit    PIR2_C1IF                 at PIR2 : 5
var volatile bit    PIR2_C2IF                 at PIR2 : 6
var volatile bit    PIR2_OSFIF                at PIR2 : 7
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_NRABPU         at OPTION_REG : 7
var volatile bit    OPTION_REG_PS0            at OPTION_REG : 0
var volatile bit    OPTION_REG_PS1            at OPTION_REG : 1
var volatile bit    OPTION_REG_PS2            at OPTION_REG : 2
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85,0x185 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
alias               pin_A0_direction          is TRISA_TRISA0
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_C1IN_POS_direction    is pin_A0_direction
alias               pin_ICSPDAT_direction     is pin_A0_direction
alias               pin_ULPWU_direction       is pin_A0_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
alias               pin_A1_direction          is TRISA_TRISA1
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C12IN0_NEG_direction  is pin_A1_direction
alias               pin_ICSPCK_direction      is pin_A1_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
alias               pin_A2_direction          is TRISA_TRISA2
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
alias               pin_A3_direction          is TRISA_TRISA3
alias               pin_MCLR_direction        is pin_A3_direction
alias               pin_VPP_direction         is pin_A3_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
alias               pin_A4_direction          is TRISA_TRISA4
alias               pin_T1G_direction         is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
alias               pin_A5_direction          is TRISA_TRISA5
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86,0x186 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
alias               pin_B4_direction          is TRISB_TRISB4
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
alias               pin_B5_direction          is TRISB_TRISB5
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
alias               pin_B6_direction          is TRISB_TRISB6
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
alias               pin_B7_direction          is TRISB_TRISB7
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x87,0x187 }
alias               PORTC_direction           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
alias               pin_C0_direction          is TRISC_TRISC0
alias               pin_AN4_direction         is pin_C0_direction
alias               pin_C2IN_POS_direction    is pin_C0_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
alias               pin_C1_direction          is TRISC_TRISC1
alias               pin_AN5_direction         is pin_C1_direction
alias               pin_C12IN1_NEG_direction  is pin_C1_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
alias               pin_C2_direction          is TRISC_TRISC2
alias               pin_AN6_direction         is pin_C2_direction
alias               pin_C12IN2_NEG_direction  is pin_C2_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
alias               pin_C3_direction          is TRISC_TRISC3
alias               pin_AN7_direction         is pin_C3_direction
alias               pin_C12IN3_NEG_direction  is pin_C3_direction
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
alias               pin_C4_direction          is TRISC_TRISC4
alias               pin_C2OUT_direction       is pin_C4_direction
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
alias               pin_C5_direction          is TRISC_TRISC5
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
alias               pin_C6_direction          is TRISC_TRISC6
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
alias               pin_C7_direction          is TRISC_TRISC7
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_T1IE                 at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x8D }
var volatile bit    PIE2_EEIE                 at PIE2 : 4
var volatile bit    PIE2_C1IE                 at PIE2 : 5
var volatile bit    PIE2_C2IE                 at PIE2 : 6
var volatile bit    PIE2_OSFIE                at PIE2 : 7
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NBOR                 at PCON : 0
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_SBOREN               at PCON : 4
var volatile bit    PCON_ULPWUE               at PCON : 5
var volatile bit    PCON_BOR                  at PCON : 0
var volatile bit    PCON_POR                  at PCON : 1
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit    OSCCON_SCS                at OSCCON : 0
var volatile bit    OSCCON_LTS                at OSCCON : 1
var volatile bit    OSCCON_HTS                at OSCCON : 2
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
-- ------------------------------------------------
var volatile byte   WPUA                      at { 0x95 }
var volatile bit    WPUA_WPUA0                at WPUA : 0
var volatile bit    WPUA_WPUA1                at WPUA : 1
var volatile bit    WPUA_WPUA2                at WPUA : 2
var volatile bit    WPUA_WPUA4                at WPUA : 4
var volatile bit    WPUA_WPUA5                at WPUA : 5
var volatile bit    WPUA_WPU0                 at WPUA : 0
var volatile bit    WPUA_WPU1                 at WPUA : 1
var volatile bit    WPUA_WPU2                 at WPUA : 2
var volatile bit    WPUA_WPU4                 at WPUA : 4
var volatile bit    WPUA_WPU5                 at WPUA : 5
-- ------------------------------------------------
var volatile byte   IOCA                      at { 0x96 }
var volatile bit    IOCA_IOCA0                at IOCA : 0
var volatile bit    IOCA_IOCA1                at IOCA : 1
var volatile bit    IOCA_IOCA2                at IOCA : 2
var volatile bit    IOCA_IOCA3                at IOCA : 3
var volatile bit    IOCA_IOCA4                at IOCA : 4
var volatile bit    IOCA_IOCA5                at IOCA : 5
var volatile bit    IOCA_IOC0                 at IOCA : 0
var volatile bit    IOCA_IOC1                 at IOCA : 1
var volatile bit    IOCA_IOC2                 at IOCA : 2
var volatile bit    IOCA_IOC3                 at IOCA : 3
var volatile bit    IOCA_IOC4                 at IOCA : 4
var volatile bit    IOCA_IOC5                 at IOCA : 5
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0x97 }
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
var volatile bit*4  WDTCON_WDTPS              at WDTCON : 1
var volatile bit    WDTCON_WDTPS0             at WDTCON : 1
var volatile bit    WDTCON_WDTPS1             at WDTCON : 2
var volatile bit    WDTCON_WDTPS2             at WDTCON : 3
var volatile bit    WDTCON_WDTPS3             at WDTCON : 4
-- ------------------------------------------------
var volatile byte   EEDAT                     at { 0x10C }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x10D }
-- ------------------------------------------------
var volatile byte   WPUB                      at { 0x115 }
var volatile bit*4  WPUB_WPUB                 at WPUB : 4
var volatile bit    WPUB_WPUB4                at WPUB : 4
var volatile bit    WPUB_WPUB5                at WPUB : 5
var volatile bit    WPUB_WPUB6                at WPUB : 6
var volatile bit    WPUB_WPUB7                at WPUB : 7
-- ------------------------------------------------
var volatile byte   IOCB                      at { 0x116 }
var volatile bit    IOCB_IOCB4                at IOCB : 4
var volatile bit    IOCB_IOCB5                at IOCB : 5
var volatile bit    IOCB_IOCB6                at IOCB : 6
var volatile bit    IOCB_IOCB7                at IOCB : 7
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x118 }
var volatile bit*4  VRCON_VR                  at VRCON : 0
var volatile bit    VRCON_VP6EN               at VRCON : 4
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit    VRCON_C2VREN              at VRCON : 6
var volatile bit    VRCON_C1VREN              at VRCON : 7
var volatile bit    VRCON_VR0                 at VRCON : 0
var volatile bit    VRCON_VR1                 at VRCON : 1
var volatile bit    VRCON_VR2                 at VRCON : 2
var volatile bit    VRCON_VR3                 at VRCON : 3
-- ------------------------------------------------
var volatile byte   CM1CON0                   at { 0x119 }
var volatile bit*2  CM1CON0_C1CH              at CM1CON0 : 0
var volatile bit    CM1CON0_C1R               at CM1CON0 : 2
var volatile bit    CM1CON0_C1POL             at CM1CON0 : 4
var volatile bit    CM1CON0_C1OE              at CM1CON0 : 5
var volatile bit    CM1CON0_C1OUT             at CM1CON0 : 6
var volatile bit    CM1CON0_C1ON              at CM1CON0 : 7
var volatile bit    CM1CON0_C1CH0             at CM1CON0 : 0
var volatile bit    CM1CON0_C1CH1             at CM1CON0 : 1
-- ------------------------------------------------
var volatile byte   CM2CON0                   at { 0x11A }
var volatile bit*2  CM2CON0_C2CH              at CM2CON0 : 0
var volatile bit    CM2CON0_C2R               at CM2CON0 : 2
var volatile bit    CM2CON0_C2POL             at CM2CON0 : 4
var volatile bit    CM2CON0_C2OE              at CM2CON0 : 5
var volatile bit    CM2CON0_C2OUT             at CM2CON0 : 6
var volatile bit    CM2CON0_C2ON              at CM2CON0 : 7
var volatile bit    CM2CON0_C2CH0             at CM2CON0 : 0
var volatile bit    CM2CON0_C2CH1             at CM2CON0 : 1
-- ------------------------------------------------
var volatile byte   CM2CON1                   at { 0x11B }
var volatile bit    CM2CON1_C2SYNC            at CM2CON1 : 0
var volatile bit    CM2CON1_T1GSS             at CM2CON1 : 1
var volatile bit    CM2CON1_MC2OUT            at CM2CON1 : 6
var volatile bit    CM2CON1_MC1OUT            at CM2CON1 : 7
-- ------------------------------------------------
var volatile byte   ANSEL                     at { 0x11E }
var volatile bit    ANSEL_ANS0                at ANSEL : 0
alias               JANSEL_ANS0               is ANSEL_ANS0
var volatile bit    ANSEL_ANS1                at ANSEL : 1
alias               JANSEL_ANS1               is ANSEL_ANS1
var volatile bit    ANSEL_ANS4                at ANSEL : 4
alias               JANSEL_ANS4               is ANSEL_ANS4
var volatile bit    ANSEL_ANS5                at ANSEL : 5
alias               JANSEL_ANS5               is ANSEL_ANS5
var volatile bit    ANSEL_ANS6                at ANSEL : 6
alias               JANSEL_ANS6               is ANSEL_ANS6
var volatile bit    ANSEL_ANS7                at ANSEL : 7
alias               JANSEL_ANS7               is ANSEL_ANS7
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x18C }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x18D }
-- ------------------------------------------------
var volatile byte   SRCON                     at { 0x19E }
var volatile bit    SRCON_PULSR               at SRCON : 2
var volatile bit    SRCON_PULSS               at SRCON : 3
var volatile bit    SRCON_C2REN               at SRCON : 4
var volatile bit    SRCON_C1SEN               at SRCON : 5
var volatile bit*2  SRCON_SR                  at SRCON : 6
var volatile bit    SRCON_SR0                 at SRCON : 6
var volatile bit    SRCON_SR1                 at SRCON : 7
--
-- ===================================================
--
--    Constants and procedures for analog features
--    --------------------------------------------
--
const      ADC_GROUP          = 0        -- no ADC module present
const byte ADC_NTOTAL_CHANNEL = 0
const byte ADC_ADCS_BITCOUNT  = 0
const byte ADC_MAX_RESOLUTION = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSEL  = 0b0000_0000       -- digital I/O
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CM1CON0 = 0b0000_0000       -- disable comparator
   CM2CON0 = 0b0000_0000       -- disable 2nd comparator
   CM2CON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   analog_off()
   comparator_off()
end procedure
--
-- ===================================================
--
--    Miscellaneous
--    -------------
--
const PPS_GROUP        = PPS_0        -- no Peripheral Pin Selection
--
-- Free shared memory: 0x70-0x7A
--
-- ===================================================
--
--    Symbolic Fuse Definitions
-- ------------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x7 {                  -- Oscillator Selection bits
       RC_CLKOUT = 0x7                     -- RC oscillator: CLKOUT function on RA4/OSC2/CLKOUT pin, RC on RA5/OSC1/CLKIN
       RC_NOCLKOUT = 0x6                   -- RCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, RC on RA5/OSC1/CLKIN
       INTOSC_CLKOUT = 0x5                 -- INTOSC oscillator: CLKOUT function on RA4/OSC2/CLKOUT pin, I/O function on RA5/OSC1/CLKIN
       INTOSC_NOCLKOUT = 0x4               -- INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function on RA5/OSC1/CLKIN
       EC_NOCLKOUT = 0x3                   -- EC: I/O function on RA4/OSC2/CLKOUT pin, CLKIN on RA5/OSC1/CLKIN
       HS = 0x2                            -- HS oscillator: High-speed crystal/resonator on RA4/OSC2/CLKOUT and RA5/OSC1/CLKIN
       XT = 0x1                            -- XT oscillator: Crystal/resonator on RA4/OSC2/CLKOUT and RA5/OSC1/CLKIN
       LP = 0x0                            -- LP oscillator: Low-power crystal on RA4/OSC2/CLKOUT and RA5/OSC1/CLKIN
       }
pragma fuse_def WDT 0x8 {                  -- Watchdog Timer Enable bit
       ENABLED = 0x8                       -- WDT enabled
       DISABLED = 0x0                      -- WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
       }
pragma fuse_def PWRTE 0x10 {               -- Power-up Timer Enable bit
       DISABLED = 0x10                     -- PWRT disabled
       ENABLED = 0x0                       -- PWRT enabled
       }
pragma fuse_def MCLR 0x20 {                -- MCLR Pin Function Select bit
       EXTERNAL = 0x20                     -- MCLR pin function is MCLR
       INTERNAL = 0x0                      -- MCLR pin function is digital input, MCLR internally tied to VDD
       }
pragma fuse_def CP 0x40 {                  -- Code Protection bit
       DISABLED = 0x40                     -- Program memory code protection is disabled
       ENABLED = 0x0                       -- Program memory code protection is enabled
       }
pragma fuse_def CPD 0x80 {                 -- Data Code Protection bit
       DISABLED = 0x80                     -- Data memory code protection is disabled
       ENABLED = 0x0                       -- Data memory code protection is enabled
       }
pragma fuse_def BROWNOUT 0x300 {           -- Brown-out Reset Selection bits
       ENABLED = 0x300                     -- BOR enabled
       RUNONLY = 0x200                     -- BOR enabled during operation and disabled in Sleep
       CONTROL = 0x100                     -- BOR controlled by SBOREN bit of the PCON register
       DISABLED = 0x0                      -- BOR disabled
       }
pragma fuse_def IESO 0x400 {               -- Internal External Switchover bit
       ENABLED = 0x400                     -- Internal External Switchover mode is enabled
       DISABLED = 0x0                      -- Internal External Switchover mode is disabled
       }
pragma fuse_def FCMEN 0x800 {              -- Fail-Safe Clock Monitor Enabled bit
       ENABLED = 0x800                     -- Fail-Safe Clock Monitor is enabled
       DISABLED = 0x0                      -- Fail-Safe Clock Monitor is disabled
       }
--
