-- ===================================================
-- Title: JalV2 device include file for PIC 16F616
--
-- Author: Rob Hamerling, Copyright (c) 2008..2010, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4n
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f616, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - x:/mplab853/mplab ide/device/pic16f616.dev
--  - x:/mplab853/MPASM Suite/LKR/16f616_g.lkr
--
-- Notes:
--  - Created with Dev2Jal Rexx script version 0.1.03
--  - File creation date/time: 6 Jul 2010 22:14
--
-- ===================================================
--
const word DEVICE_ID   = 0x1240
const byte PICTYPE[]   = "16F616"
const byte DATASHEET[] = "41288"
const byte PGMSPEC[]   = "41396"
--
-- Vdd Range: 2.000-5.500 Nominal: 5.000
-- Vpp Range: 10.000-12.000 Default: 12.000
--
-- ---------------------------------------------------
--
include chipdef_jallib                  -- common constants
--
pragma  target  cpu   PIC_14            -- (banks=2)
pragma  target  chip  16f616
pragma  target  bank  0x0080
pragma  target  page  0x0800
pragma  stack   8
pragma  code    2048                    -- (words)
pragma  ID      0x2000,4
pragma  data    0x20-0x6F,0xA0-0xBF
pragma  shared  0x70-0x7F
--
var volatile byte _pic_accum shared at 0x7E        -- (compiler)
var volatile byte _pic_isr_w shared at 0x7F        -- (compiler)
--
const word  _FUSES_CT             = 1
const word  _FUSE_BASE            = 0x2007
const word  _FUSES                = 0b_0011_1111_1111_1111
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80 }
var volatile byte   _ind                      at { 0x0,0x80 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82 }
var volatile byte   _pcl                      at { 0x2,0x82 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83 }
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_C                  at STATUS : 0
var volatile byte   _status                   at { 0x3,0x83 }      -- (compiler)
const        byte   _irp                      =  7      -- (compiler)
const        byte   _rp1                      =  6      -- (compiler)
const        byte   _rp0                      =  5      -- (compiler)
const        byte   _not_to                   =  4      -- (compiler)
const        byte   _not_pd                   =  3      -- (compiler)
const        byte   _z                        =  2      -- (compiler)
const        byte   _dc                       =  1      -- (compiler)
const        byte   _c                        =  0      -- (compiler)
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84 }
var volatile byte   _fsr                      at { 0x4,0x84 }      -- (compiler)
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0x5 }
--
var          byte  _PORTA_shadow        = PORTA
--
procedure _PORTA_flush() is
   pragma inline
   PORTA = _PORTA_shadow
end procedure
procedure PORTA'put(byte in x) is
   pragma inline
   _PORTA_shadow = x
   _PORTA_flush()
end procedure
--
procedure PORTA_low'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0xF0) | (x & 0x0F)
   _PORTA_flush()
end procedure
function PORTA_low'get() return byte is
   pragma inline
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   pragma inline
   _PORTA_shadow = (_PORTA_shadow & 0x0F) | (x << 4)
   _PORTA_flush()
end procedure
function PORTA_high'get() return byte is
   pragma inline
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    pin_A5                    at PORTA : 5
alias               pin_T1CKI                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at _PORTA_shadow : 5) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_AN3                   is pin_A4
alias               pin_T1G                   is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at _PORTA_shadow : 4) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA : 3
alias               pin_MCLR                  is pin_A3
alias               pin_VPP                   is pin_A3
--
procedure pin_A3'put(bit in x at _PORTA_shadow : 3) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_T0CKI                 is pin_A2
alias               pin_C1OUT                 is pin_A2
--
procedure pin_A2'put(bit in x at _PORTA_shadow : 2) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_C12IN0_NEG            is pin_A1
alias               pin_VREF                  is pin_A1
alias               pin_ICSPCLK               is pin_A1
--
procedure pin_A1'put(bit in x at _PORTA_shadow : 1) is
   pragma inline
   _PORTA_flush()
end procedure
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_AN0                   is pin_A0
alias               pin_C1IN_POS              is pin_A0
alias               pin_ICSPDAT               is pin_A0
--
procedure pin_A0'put(bit in x at _PORTA_shadow : 0) is
   pragma inline
   _PORTA_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTC                     at { 0x7 }
--
var          byte  _PORTC_shadow        = PORTC
--
procedure _PORTC_flush() is
   pragma inline
   PORTC = _PORTC_shadow
end procedure
procedure PORTC'put(byte in x) is
   pragma inline
   _PORTC_shadow = x
   _PORTC_flush()
end procedure
--
procedure PORTC_low'put(byte in x) is
   pragma inline
   _PORTC_shadow = (_PORTC_shadow & 0xF0) | (x & 0x0F)
   _PORTC_flush()
end procedure
function PORTC_low'get() return byte is
   pragma inline
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   pragma inline
   _PORTC_shadow = (_PORTC_shadow & 0x0F) | (x << 4)
   _PORTC_flush()
end procedure
function PORTC_high'get() return byte is
   pragma inline
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    pin_C5                    at PORTC : 5
--
procedure pin_C5'put(bit in x at _PORTC_shadow : 5) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    pin_C4                    at PORTC : 4
alias               pin_C2OUT                 is pin_C4
--
procedure pin_C4'put(bit in x at _PORTC_shadow : 4) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    pin_C3                    at PORTC : 3
alias               pin_AN7                   is pin_C3
alias               pin_C12IN3_NEG            is pin_C3
--
procedure pin_C3'put(bit in x at _PORTC_shadow : 3) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    pin_C2                    at PORTC : 2
alias               pin_AN6                   is pin_C2
alias               pin_C12IN2_NEG            is pin_C2
--
procedure pin_C2'put(bit in x at _PORTC_shadow : 2) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    pin_C1                    at PORTC : 1
alias               pin_AN5                   is pin_C1
alias               pin_C12IN1                is pin_C1
--
procedure pin_C1'put(bit in x at _PORTC_shadow : 1) is
   pragma inline
   _PORTC_flush()
end procedure
--
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    pin_C0                    at PORTC : 0
alias               pin_AN4                   is pin_C0
alias               pin_C2IN_POS              is pin_C0
--
procedure pin_C0'put(bit in x at _PORTC_shadow : 0) is
   pragma inline
   _PORTC_flush()
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A }      -- (compiler)
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B }
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_RAIE               at INTCON : 3
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_RAIF               at INTCON : 0
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_ECCPIF               at PIR1 : 5
var volatile bit    PIR1_C2IF                 at PIR1 : 4
var volatile bit    PIR1_C1IF                 at PIR1 : 3
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_TMR1ON              at T1CON : 0
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x14 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x15 }
var volatile bit*2  CCP1CON_PM                at CCP1CON : 6
var volatile bit*2  CCP1CON_DCB               at CCP1CON : 4
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
-- ------------------------------------------------
var volatile byte   PWM1CON                   at { 0x16 }
var volatile bit    PWM1CON_PRSEN             at PWM1CON : 7
var volatile bit*7  PWM1CON_PDC               at PWM1CON : 0
-- ------------------------------------------------
var volatile byte   ECCPAS                    at { 0x17 }
var volatile bit    ECCPAS_ECCPASE            at ECCPAS : 7
var volatile bit*3  ECCPAS_ECCPAS             at ECCPAS : 4
var volatile bit*2  ECCPAS_PSSAC              at ECCPAS : 2
var volatile bit*2  ECCPAS_PSSBD              at ECCPAS : 0
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x19 }
var volatile bit    VRCON_C1VREN              at VRCON : 7
var volatile bit    VRCON_C2VREN              at VRCON : 6
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit    VRCON_VP6EN               at VRCON : 4
var volatile bit*4  VRCON_VR                  at VRCON : 0
-- ------------------------------------------------
var volatile byte   CM1CON0                   at { 0x1A }
var volatile bit    CM1CON0_C1ON              at CM1CON0 : 7
var volatile bit    CM1CON0_C1OUT             at CM1CON0 : 6
var volatile bit    CM1CON0_C1OE              at CM1CON0 : 5
var volatile bit    CM1CON0_C1POL             at CM1CON0 : 4
var volatile bit    CM1CON0_C1R               at CM1CON0 : 2
var volatile bit*2  CM1CON0_C1CH              at CM1CON0 : 0
-- ------------------------------------------------
var volatile byte   CM2CON0                   at { 0x1B }
var volatile bit    CM2CON0_C2ON              at CM2CON0 : 7
var volatile bit    CM2CON0_C2OUT             at CM2CON0 : 6
var volatile bit    CM2CON0_C2OE              at CM2CON0 : 5
var volatile bit    CM2CON0_C2POL             at CM2CON0 : 4
var volatile bit    CM2CON0_C2R               at CM2CON0 : 2
var volatile bit*2  CM2CON0_C2CH              at CM2CON0 : 0
-- ------------------------------------------------
var volatile byte   CM2CON1                   at { 0x1C }
var volatile bit    CM2CON1_MC1ON             at CM2CON1 : 7
var volatile bit    CM2CON1_MC2OUT            at CM2CON1 : 6
var volatile bit    CM2CON1_T1ACS             at CM2CON1 : 4
var volatile bit    CM2CON1_C1HYS             at CM2CON1 : 3
var volatile bit    CM2CON1_C2HYS             at CM2CON1 : 2
var volatile bit    CM2CON1_T1GSS             at CM2CON1 : 1
var volatile bit    CM2CON1_C2SYNC            at CM2CON1 : 0
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit    ADCON0_ADFM               at ADCON0 : 7
var volatile bit    ADCON0_VCFG               at ADCON0 : 6
var volatile bit*4  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_ADON               at ADCON0 : 0
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81 }
var volatile bit    OPTION_REG_NRAPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
var volatile byte   PORTA_direction           at TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   pragma inline
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   pragma inline
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   pragma inline
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_AN3_direction         is pin_A4_direction
alias               pin_T1G_direction         is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_MCLR_direction        is pin_A3_direction
alias               pin_VPP_direction         is pin_A3_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C12IN0_NEG_direction  is pin_A1_direction
alias               pin_VREF_direction        is pin_A1_direction
alias               pin_ICSPCLK_direction     is pin_A1_direction
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_C1IN_POS_direction    is pin_A0_direction
alias               pin_ICSPDAT_direction     is pin_A0_direction
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x87 }
var volatile byte   PORTC_direction           at TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   pragma inline
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   pragma inline
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   pragma inline
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   pragma inline
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
var volatile bit    pin_C5_direction          at TRISC : 5
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
var volatile bit    pin_C4_direction          at TRISC : 4
alias               pin_C2OUT_direction       is pin_C4_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
var volatile bit    pin_C3_direction          at TRISC : 3
alias               pin_AN7_direction         is pin_C3_direction
alias               pin_C12IN3_NEG_direction  is pin_C3_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
var volatile bit    pin_C2_direction          at TRISC : 2
alias               pin_AN6_direction         is pin_C2_direction
alias               pin_C12IN2_NEG_direction  is pin_C2_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
var volatile bit    pin_C1_direction          at TRISC : 1
alias               pin_AN5_direction         is pin_C1_direction
alias               pin_C12IN1_direction      is pin_C1_direction
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
var volatile bit    pin_C0_direction          at TRISC : 0
alias               pin_AN4_direction         is pin_C0_direction
alias               pin_C2IN_POS_direction    is pin_C0_direction
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_ECCPIE               at PIE1 : 5
var volatile bit    PIE1_C2IE                 at PIE1 : 4
var volatile bit    PIE1_C1IE                 at PIE1 : 3
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBOR                 at PCON : 0
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
-- ------------------------------------------------
var volatile byte   ANSEL                     at { 0x91 }
var volatile bit    JANSEL_ANS7               at ANSEL : 7
var volatile bit    JANSEL_ANS6               at ANSEL : 6
var volatile bit    JANSEL_ANS5               at ANSEL : 5
var volatile bit    JANSEL_ANS4               at ANSEL : 4
var volatile bit    JANSEL_ANS3               at ANSEL : 3
var volatile bit    JANSEL_ANS2               at ANSEL : 2
var volatile bit    JANSEL_ANS1               at ANSEL : 1
var volatile bit    JANSEL_ANS0               at ANSEL : 0
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   WPUA                      at { 0x95 }
var volatile bit    WPUA_WPUA5                at WPUA : 5
var volatile bit    WPUA_WPUA4                at WPUA : 4
var volatile bit    WPUA_WPUA2                at WPUA : 2
var volatile bit    WPUA_WPUA1                at WPUA : 1
var volatile bit    WPUA_WPUA0                at WPUA : 0
-- ------------------------------------------------
var volatile byte   IOCA                      at { 0x96 }
var volatile bit    IOCA_IOCA5                at IOCA : 5
var volatile bit    IOCA_IOCA4                at IOCA : 4
var volatile bit    IOCA_IOCA3                at IOCA : 3
var volatile bit    IOCA_IOCA2                at IOCA : 2
var volatile bit    IOCA_IOCA1                at IOCA : 1
var volatile bit    IOCA_IOCA0                at IOCA : 0
-- ------------------------------------------------
var volatile byte   SRCON0                    at { 0x99 }
var volatile bit*2  SRCON0_SR                 at SRCON0 : 6
var volatile bit    SRCON0_C1SEN              at SRCON0 : 5
var volatile bit    SRCON0_C2REN              at SRCON0 : 4
var volatile bit    SRCON0_PULSS              at SRCON0 : 3
var volatile bit    SRCON0_PULSR              at SRCON0 : 2
var volatile bit    SRCON0_SRCLKEN            at SRCON0 : 0
-- ------------------------------------------------
var volatile byte   SRCON1                    at { 0x9A }
var volatile bit*2  SRCON1_SRCS               at SRCON1 : 6
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x9F }
var volatile bit*3  ADCON1_ADCS               at ADCON1 : 4
--
-- ===================================================
--
-- Special (device specific) constants and procedures
--
const ADC_GROUP = ADC_V0
const byte ADC_NTOTAL_CHANNEL = 8
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSEL  = 0b0000_0000       -- all digital
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000         -- disable ADC
   ADCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CM1CON0 = 0b0000_0000       -- disable comparator
   CM2CON0 = 0b0000_0000       -- disable 2nd comparator
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode (if analog module present).
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
   comparator_off()
end procedure
--
-- ==================================================
--
-- Symbolic Fuse definitions
-- -------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x7 {                  -- oscillator
       RC_CLKOUT = 0x7                     -- external rc clockout
       RC_NOCLKOUT = 0x6                   -- external rc no clock
       INTOSC_CLKOUT = 0x5                 -- internal rc clockout
       INTOSC_NOCLKOUT = 0x4               -- internal rc no clock
       EC_NOCLKOUT = 0x3                   -- ec
       HS = 0x2                            -- hs
       XT = 0x1                            -- xt
       LP = 0x0                            -- lp
       }
pragma fuse_def WDT 0x8 {                  -- watchdog timer
       ENABLED = 0x8                       -- on
       DISABLED = 0x0                      -- off
       }
pragma fuse_def PWRTE 0x10 {               -- power up timer
       DISABLED = 0x10                     -- off
       ENABLED = 0x0                       -- on
       }
pragma fuse_def MCLR 0x20 {                -- master clear enable
       EXTERNAL = 0x20                     -- external
       INTERNAL = 0x0                      -- internal
       }
pragma fuse_def CP 0x40 {                  -- code protect
       DISABLED = 0x40                     -- off
       ENABLED = 0x0                       -- on
       }
pragma fuse_def IOSCFS 0x80 {              -- internal oscillator frequency select
       F8MHZ = 0x80                        -- 8 mhz
       F4MHZ = 0x0                         -- 4 mhz
       }
pragma fuse_def BROWNOUT 0x300 {           -- brown out detect
       DISABLED = 0x0                      -- bod disabled
       RUNONLY = 0x200                     -- bod enabled in run, disabled in sleep
       ENABLED = 0x300                     -- bod enabled
       }
--
