-- ----------------------------------------------------------------------
-- Title: math.jal - Collection of mathematical functions.
-- Author: Rob Hamerling, Michael Watterson Copyright (c) 2009, all rights reserved.
-- Adapted-by:  Michael Watterson, Eur van Andel
-- Compiler: 2.4o
-- Revision: $Revision$
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
-- Collection of mathematical routines.
--
-- Sources: Various authors.
--
-- Notes: .
-- 1. This library contains a number of routines handling 'fixed point' numbers.
--    These numbers are contained in a signed word or signed double word
--    as <value> * 256. In other words the digits behind the decimal point are
--    stored in the least significant byte of the signed word or signed double word.
--    For example a fixed point value '+18.5' is stored in a 16-bits signed word
--    with value 256 * 18.5, which is 4736 decimal or 0x1280 hexadecimal.
--    You could also think of '+18' (0x12) being stored in the most significant byte
--    and '.5' in the least significant byte (0.5 * 256 = 128, or 0x80).
-- 2. Fixed point math is 8 bits for the decimal part in this library,
--    approximately 2 decimal places, the part after the "point" is 0 to 255.
--    sword fixed point numbers are thus -127.00 to +127.00 approx.
--    When you need bigger numbers replace all swords by sdwords and
--    sdwords by sbyte*8, if the compiler can still do the math.
--

-- --------------------------------------------------------
-- Calculate the square root of an unsigned 16-bits integer
-- Arguments: unsigned 16-bits integer
-- Returns:   unsigned 8-bits integer
-- Original:  author: Kyle York
function sqrt16(word in x) return byte is
   var word m, y
   m = 0x4000
   y = 0
   while (m != 0) loop
      var word b
      b = y | m
      y = y >> 1
      if (x >= b) then
         x = x - b
         y = y | m
      end if
      m = m >> 2
   end loop
   return byte(y)
end function


-- --------------------------------------------------------
-- Calculate the square root of an unsigned 32-bits integer
-- Arguments: unsigned 32-bits integer
-- Returns:   unsigned 16-bits integer
-- Original:  Kyle York
function sqrt32(dword in x) return word is
   var dword m, y
   m = 0x40000000
   y = 0
   while (m != 0) loop
      var dword b
      b = y | m
      y = y >> 1
      if (x >= b) then
         x = x - b
         y = y | m
      end if
      m = m >> 2
   end loop
   return word(y)
end function


-- --------------------------------------------------------------
-- Calculate number of significant decimal digits in an unsigned 16-bits integer
-- Arguments: unsigned 16-bits integer
-- Returns:   unsigned 8-bits integer
-- Original:  Michael Watterson
function digits_word(word in valu) return byte is
   var byte temp = 1
   var dword index = 9
   while (dword(valu) > index) loop
      index = index * 10 + 9
      temp = temp + 1
   end loop
   return temp
end function


-- --------------------------------------------------------------
-- Convert unsigned 8-bits integer to a signed 16-bits fixed point number
-- Arguments: unsigned 8-bits integer
-- Returns:   signed 16-bits fixed point number
-- Original:  Michael Watterson
function byte_to_fixed(byte in int) return sword is
   return ((sword(int)) << 8)
end function


-- --------------------------------------------------------------
-- Convert signed 16-bits fixed point number to a signed 8-bits integer (truncated)
-- Arguments: signed 16-bits fixed point number
-- Returns:   signed 8-bits integer
-- Original:  Michael Watterson
function trunc_fixed(sword in fixed_point) return sbyte  is
   return (sbyte(fixed_point >> 8))
end function


-- --------------------------------------------------------------
-- Convert signed 16-bits fixed point number to a signed 8-bits integer (rounded)
-- Arguments: signed 16-bits fixed point number
-- Returns:   signed 8-bits integer
-- Original:  Michael Watterson
function round_fixed(sword in fixed_point) return sbyte  is
   if ((fixed_point & 0x0080) > 0)  then           -- 128 and more = 0.5
      return (sbyte(fixed_point >> 8) + 1)         -- round up
   else
      return (sbyte(fixed_point >> 8))             -- truncate
   end  if
end function


-- --------------------------------------------------------------
-- Multiply 2 signed 16-bits fixed point numbers
-- Arguments: 2 signed 16-bits fixed point numbers
-- Returns:   signed 32-bits fixed point number
-- Original:  Michael Watterson
-- Notes:     unlike integer max is 128 * 128  *256 approx
function mult_fixed(sword in a, sword in b) return sdword is
   return ((sdword(a) * sdword(b)) >> 8)
end function


-- --------------------------------------------------------------
-- Divide 2 signed 16-bits fixed point numbers
-- Arguments: 2 signed 16-bits fixed point numbers
-- Returns:   signed 32-bits fixed point number
-- Original:  Michael Watterson
function div_fixed(sword in a, sword in b) return sdword  is
   return (sword((sdword(a) * sdword (256*256)) / sdword(b)) >> 16)
end function


-- --------------------------------------------------------------
-- Divide 2 signed 16-bits fixed point numbers
-- Arguments: 2 signed 16-bits fixed point numbers
-- Returns:   signed 16-bits number
-- Original:  Michael Watterson
-- Notes:     probably a better way to do this!
function mod_fixed(sword in a, sword in b) return sword is
   return ( a - sword(sdword(b)*((sdword(a) * sdword (256*256)) / sdword(b)) >> 16))
end function


-- --------------------------------------------------------------
-- Obtain sine value
-- Arguments: - radius (signed word)
--            - angle in degrees (signed word)
-- Returns a signed 16-bits integer
-- Original: Michael Watterson
-- Notes:     sin values scaled to (256 * 1.0 - 1) for values above zero.
-- (i.e. add one to lookup if using table directly for other than Zeroth Element)
-- apart from zero, all values are 1 less than actual
-- to allow storage in 1 byte each
const byte SINLOOKUP[] = {0, 3, 8, 12, 17, 21, 26, 30, 35, 39, 43, 48, 52, 57,
     61, 65, 70, 74, 78, 82, 87, 91, 95, 99, 103, 107, 111, 115, 119, 123, 127,
     131, 135, 138, 142, 146, 149, 153, 157, 160, 164, 167, 170, 174, 177, 180,
     183, 186, 189, 192, 195, 198, 201, 203, 206, 209, 211, 214, 216, 218, 221,
     223, 225, 227, 229, 231, 233, 235, 236, 238, 240, 241, 242, 244, 245, 246,
     247, 248, 249, 250, 251, 252, 253, 253, 254, 254, 254, 255, 255, 255, 255 }
-- .
-- 0 to 90 degrees in 1 degree steps
-- 8-bits resolution sin function R x Sin (angle) in degrees -32767 to +32767
-- Result can be same magnitude and opposite sign
-- .
-- Use to generate audio waves by changing angle at a fixed speed.
-- If using all 360 degrees in one degree steps, then frequency is step rate / 360
-- At nyquist frequency you only need 0 and 180 degrees, i.e. 1/2 sample rate.
-- If sample rate is 48kHz then for 12kHz you have only 4 samples,
-- i.e. 90 degree steps at 1.2kHz thus you use 9 degree steps.
-- 1 degree steps is thus  133.33 Hz if step speed is 48KHz
-- PWM can be loaded via this lookup
-- Use 128 and add 127 to answer for 8 bit PWM
-- Use 512 and add 511 to answer for 10bit PWM
-- If summing two frequencies, peak value is twice,
-- so add as swords < 16383 and divide sum by 2!
-- works with fixed point numbers 256 = 1.0
function rsin8(sword in radius, sword in angle) return sword is
   var sword ypos
   --make sure works for ANY angle ...
   while (angle < 0)   loop
      angle = angle + 360
   end loop
   while (angle >= 360)   loop
      angle = angle - 360
   end loop
   case angle of
      0:   ypos = 0
      90:  ypos = radius
      180: ypos = 0
      270: ypos = -radius
      otherwise
      block
         -- add or subtract one as lookups above zero have -1 so 256x 1.0
         -- fits in one byte
         if (angle > 0) & (angle < 90) then
            ypos = sword(SINLOOKUP[angle]) + 1
         elsif (angle > 90) & (angle < 180) then
            angle = angle - 90
            ypos = sword(SINLOOKUP[(90 - angle)]) + 1
         elsif (angle > 180) & (angle < 270) then
            angle = angle - 180
            ypos = -sword(SINLOOKUP[angle]) - 1
         elsif (angle > 270) & (angle < 360) then
            angle = angle - 270
            ypos = -sword(SINLOOKUP[(90 - angle)]) - 1
         end if
         ypos = ypos * radius / 256
      end block
   end case
   return (ypos)
end function


-- --------------------------------------------------------------
-- Obtain cosine value
-- Arguments: - radius (signed word)
--            - angle in degrees (signed word)
-- Returns a signed 16-bits integer
-- Original: Michael Watterson
function rcos8( sword in radius, sword in angle ) return sword is
   var sword xpos
   --make sure works for ANY angle ...
   while (angle < 0)   loop
      angle = angle + 360
   end loop
   while (angle >= 360)   loop
      angle = angle - 360
   end loop
   case angle of
      0:  xpos = radius
      90: xpos = 0
      180: xpos = -radius
      270: xpos = 0
      otherwise
      block
         -- add or subtract one as lookups above zero have -1 so 256x 1.0
         -- fits in one byte
         if (angle > 0) & (angle < 90) then
            xpos = sword(SINLOOKUP[(90 - angle)]) + 1
         elsif (angle > 90) & (angle < 180) then
            angle = angle - 90
            xpos = -sword(SINLOOKUP[angle]) - 1
         elsif (angle > 180) & (angle < 270) then
            angle = angle - 180
            xpos = -sword(SINLOOKUP[(90 - angle)]) - 1
         elsif (angle > 270) & (angle < 360) then
            angle = angle - 270
            xpos = sword(SINLOOKUP[angle]) + 1
         end if
         xpos = xpos * radius / 256
      end block
   end case
   return (xpos)
end function


-- --------------------------------------------------------------
-- Convert polar to cartesian coo-ordinates
-- Arguments: - radius (signed word)
--            - angle in degrees (signed word)
-- Returns:   - X-co-ordinate (signed word)
--            - Y-co-ordinate (signed word)
-- Original: Michael Watterson
-- Notes:    Use to rotate angle of a line by calculating endpoints.
-- Use to generate quadrature waves by changing angle at a fixed speed.
-- If using all 360 degrees in one degree steps, then frequency is step rate / 360
procedure polar_to_cartesian(sword in radius, sword in angle, sword out xpos, sword out ypos) is
   -- make sure works for ANY angle ...
   while (angle < 0)   loop
      angle = angle + 360
   end loop
   while (angle >= 360)   loop
      angle = angle - 360
   end loop
   case angle of
      0:
      block
         xpos = radius
         ypos = 0
      end block
      90:
      block
         xpos = 0
         ypos = radius
      end block
      180:
      block
         xpos = -radius
         ypos = 0
      end block
      270:
      block
         xpos = 0
         ypos = -radius
      end block
      otherwise
      block
         -- add or subtract one as lookups above zero have -1 so 256 x 1.0
         -- fits in one byte
         if (angle > 0) & (angle < 90) then
            ypos = sword(SINLOOKUP[angle]) + 1
            xpos = sword(SINLOOKUP[(90 - angle)]) + 1
         elsif (angle > 90) & (angle < 180) then
            angle = angle - 90
            xpos = -sword(SINLOOKUP[angle]) - 1
            ypos = sword(SINLOOKUP[(90 - angle)]) + 1
         elsif (angle > 180) & (angle < 270) then
            angle = angle - 180
            xpos = -sword(SINLOOKUP[(90 - angle)]) - 1
            ypos = -sword(SINLOOKUP[angle]) - 1
         elsif (angle > 270) & (angle < 360) then
            angle = angle - 270
            xpos = sword(SINLOOKUP[angle]) + 1
            ypos = -sword(SINLOOKUP[(90 - angle)]) - 1
         end if
         xpos = xpos * radius / 256
         ypos = ypos * radius / 256
      end block
   end case
end procedure


-- --------------------------------------------------------------
-- Obtain absolute value of a signed 8-bits integer
-- Arguments: signed 8-bits integer
-- Returns: unsigned 8-bits integer
-- Original: Eur van Andel
function abs8(sbyte in x) return byte is
   if x < 0 then
      return byte(-x)
   else
      return byte(x)
   end if
end function


-- --------------------------------------------------------------
-- Obtain absolute value of a signed 16-bits integer
-- Arguments: signed 16-bits integer
-- Returns: unsigned 16-bits integer
-- Original: Eur van Andel
function abs16(sword in x) return word is
   if x < 0 then
      return word(-x)
   else
      return word(x)
   end if
end function


-- --------------------------------------------------------------
-- Obtain absolute value of a signed 32-bits integer
-- Arguments: signed 32-bits integer
-- Returns:   unsigned 32-bits integer
-- Original:  Eur van Andel
function abs32(sdword in x) return dword is
   if x < 0 then
      return dword(-x)
   else
      return dword(x)
   end if
end function


-- --------------------------------------------------------------
-- Obtain sign of a signed 8-bits integer
-- Arguments: signed 8-bits integer
-- Returns:   signed 8-bits integer
--            -1 : negative
--             0 : zero
--            +1 : positive
-- Original:  Eur van Andel
function sign8(sbyte in x) return sbyte is
   if x < 0 then
      return -1
   elsif x == 0 then
      return 0
   else
      return 1
   end if
end function


-- --------------------------------------------------------------
-- Obtain sign of a signed 16-bits integer
-- Arguments: signed 8-bits integer
-- Returns:   signed 16-bits integer
--            -1 : negative
--             0 : zero
--            +1 : positive
-- Original:  Eur van Andel
function sign16(sword in x) return sbyte is
   if x < 0 then
      return -1
   elsif x == 0 then
      return 0
   else
      return 1
   end if
end function


-- --------------------------------------------------------------
-- Obtain sign of a signed 32-bits integer
-- Arguments: signed 32-bits integer
-- Returns:   signed 8-bits integer
--            -1 : negative
--             0 : zero
--            +1 : positive
-- Original:  Eur van Andel
function sign32(sdword in x) return sbyte is
   if x < 0 then
      return -1
   elsif x == 0 then
      return 0
   else
      return 1
   end if
end function


