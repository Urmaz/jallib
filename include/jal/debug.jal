-- Title: Debug via print library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: The debug library has all the same functions as the print library,
--              but the user defines constants to turn on and off this
--              library and users debug levels.
--
-- Sources:
-- The jallib print library
--

include print

-- debug enable/disable bits
var word debug_bits = 0
var bit debug_lvl_0 at debug_bits : 0
var bit debug_lvl_1 at debug_bits : 1
var bit debug_lvl_2 at debug_bits : 2
var bit debug_lvl_3 at debug_bits : 3
var bit debug_lvl_4 at debug_bits : 4
var bit debug_lvl_5 at debug_bits : 5
var bit debug_lvl_6 at debug_bits : 6
var bit debug_lvl_7 at debug_bits : 7
var bit debug_lvl_8 at debug_bits : 8
var bit debug_lvl_9 at debug_bits : 9
var bit debug_lvl_10 at debug_bits : 10
var bit debug_lvl_11 at debug_bits : 11
var bit debug_lvl_12 at debug_bits : 12
var bit debug_lvl_13 at debug_bits : 13
var bit debug_lvl_14 at debug_bits : 14
var bit debug_lvl_15 at debug_bits : 15

if DEBUG_USE_STORAGE == TRUE then
   -- debug storage array enabled
   
   -- create the array
   if !defined(debug_storage_array) then
      var byte debug_storage_array[100]
   end if
   var byte debug_storage_step = 0
   
   -- store data into the array via pseudo var
   procedure debug_storage'put(byte in data) is
      if !(debug_storage_step > count(debug_storage_array)) then
         debug_storage_array[debug_storage_step] = data
      end if
      debug_storage_step = debug_storage_step + 1
   end procedure
   
   -- alias the pesudo var output
   alias debug_data is debug_storage

   -- read the stored data out to the storage device
   procedure debug_read_storage() is
      var word count1 = 0
      for debug_storage_step using count1 loop
         if count1 > count(debug_storage_array) then
            -- CRLF
            debug_storage_data = 13
            debug_storage_data = 10
            
            -- DEGUB_OUT_OF_SPACE
            debug_storage_data = "D"
            debug_storage_data = "E"
            debug_storage_data = "B"
            debug_storage_data = "U"
            debug_storage_data = "G"
            debug_storage_data = "_"
            debug_storage_data = "O"
            debug_storage_data = "U"
            debug_storage_data = "T"
            debug_storage_data = "_"
            debug_storage_data = "O"
            debug_storage_data = "F"
            debug_storage_data = "_"
            debug_storage_data = "S"
            debug_storage_data = "P"
            debug_storage_data = "A"
            debug_storage_data = "C"
            debug_storage_data = "E"
            debug_storage_data = "!"
            exit loop
         else
            debug_storage_data = debug_storage_array[count1]
         end if
      end loop
      debug_storage_step = 0
   end procedure
else
   -- debug storage array disabled
   
   -- just declare this so we don't get errors
   procedure debug_read_storage() is
      pragma inline
   end procedure
end if

procedure debug_crlf(byte in debug_level) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_crlf(debug_data)
      end if
   end if
end procedure

procedure debug_string(byte in debug_level,byte in str_in[]) is
   ;pragma inline (bug here)
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_string(debug_data, str_in)
      end if
   end if
end procedure

procedure debug_bit_truefalse(byte in debug_level,bit in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_bit_truefalse(debug_data,data)
      end if
   end if
end procedure

procedure debug_bit_highlow(byte in debug_level,bit in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_bit_highlow(debug_data,data)
      end if
   end if
end procedure

procedure debug_bit_10(byte in debug_level,bit in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_bit_10(debug_data,data)
      end if
   end if
end procedure

procedure debug_dword_binary(byte in debug_level,dword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_dword_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_word_binary(byte in debug_level,word in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_word_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_byte_binary(byte in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_byte_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_nibble_binary(byte in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_nibble_binary(debug_data,data)
      end if
   end if
end procedure

procedure debug_dword_hex(byte in debug_level,dword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_dword_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_sdword_hex(byte in debug_level,sdword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sdword_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_word_hex(byte in debug_level,word in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_word_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_byte_hex(byte in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_byte_hex(debug_data,data)
      end if
   end if
end procedure

procedure debug_sdword_dec(byte in debug_level,sdword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sdword_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_sword_dec(byte in debug_level,sword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sword_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_sword_fp_dec(byte in debug_level,sword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sword_fp_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_sbyte_dec(byte in debug_level,sbyte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_sbyte_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_dword_dec(byte in debug_level,dword in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_dword_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_word_dec(byte in debug_level,word in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_word_dec(debug_data,data)
      end if
   end if
end procedure

procedure debug_byte_dec(byte in debug_level,byte in data) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         print_byte_dec(debug_data,data)
      end if
   end if
end procedure

procedure print_suniversal_dec(byte in debug_level,sdword in data, sdword in digit_divisor, byte in digit_number) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         _print_suniversal_dec(debug_data,data,digit_divisor,digit_number)
      end if
   end if
end procedure

procedure print_universal_dec(byte in debug_level,dword in data, sdword in digit_divisor, byte in digit_number) is
   pragma inline
   if DEBUG_MASTER_ENABLE == TRUE  then
      var byte check_enabled = (1 << debug_level)
      if (check_enabled & debug_bits) != 0 then
         _print_universal_dec(debug_data,data,digit_divisor,digit_number)
      end if
   end if
end procedure


