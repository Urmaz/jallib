-- Title: Strings Library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4k
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Library for managing strings.
--
-- Sources:
--

include characters

--------------------------------------------------------------------------------
-- compare two strings to see if they are the same. case sensitive.
-- strings must be same lenght
--------------------------------------------------------------------------------
function string_compare_case(byte in string1[], byte in string2[]) return bit is
   var bit check = 1
   var byte step
   if count(string1) == count(string2) then
      for count(string1) using step loop
         if !(string1[step] == string2[step]) then
            check = 0
         end if
      end loop
   else
      check = 0
   end if

   return check
end function

--------------------------------------------------------------------------------
-- compare two strings to see if they are the same. not case dependant.
-- strings must be same lenght
--------------------------------------------------------------------------------
function string_compare(byte in string1[], byte in string2[]) return bit is
   var bit check = 1
   var byte step
   if count(string1) == count(string2) then
      for count(string1) using step loop

         -- convert both to lower case
         var byte s1 = string1[step]
         var byte s2 = string2[step]
         char_lower(s1)
         char_lower(s2)

         -- check if they are the same
         if !(s1 == s2) then
            check = 0
         end if
      end loop
   else
      check = 0
   end if

   return check
end function

--------------------------------------------------------------------------------
-- compare the middle of string1 with string2
-- string1 must be >= length of string2
--------------------------------------------------------------------------------
function string_compare_mid(byte in string1[], byte in start, byte in string2[]) return bit is
   var bit check = 1
   var byte step
   var byte step2 = start

   if ((start + count(string2)) > count(string1)) then
      check = 0
      return
   else
      for count(string2) using step loop

         -- convert both to lower case
         var byte s1 = string1[step2]
         var byte s2 = string2[step]
         char_lower(s1)
         char_lower(s2)

         -- check if they are the same
         if !(s1 == s2) then
            check = 0
         end if

         step2 = step2 + 1
      end loop
   end if

   return check
end function

--------------------------------------------------------------------------------
-- compare the middle of string1 with string2. case sensitive.
-- string1 must be >= length of string2
--------------------------------------------------------------------------------
function string_compare_mid_case(byte in string1[], byte in start, byte in string2[]) return bit is
   var bit check = 1
   var byte step
   var byte step2 = start

   if ((start + count(string2)) > count(string1)) then
      check = 0 -- error, length is too long
      return
   else
      for count(string2) using step loop
         if !(string1[step] == string2[step]) then
            check = 0
         end if

         step2 = step2 + 1
      end loop
   end if

   return check
end function

-- return NULL terminated string length
function strlen(byte in str[]) return byte is
   var byte i = 0
   while str[i] != ASCII_NULL loop
      i = i + 1
   end loop
   return i
end function

-- compare NULL terminated strings, ala C
function strcmp(byte in str1[], byte in str2[]) return bit is
   var byte i = 0
   if strlen(str1) != strlen(str2) then
      return false
   end if
   while str1[i] != ASCII_NULL loop
      if str1[i] != str2[i] then
         return false
      end if
      i = i + 1
   end loop
   return true   
end function


