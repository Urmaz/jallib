-- Title: Library for CRC data error checking.
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: This library creates CRC data and also verifies CRC data
--
-- Notes:
-- Currently only supports 3-Bit CRC. Please add others if needed.
--
-- Sources:
-- http://www.ece.unb.ca/tervo/ee4253/crc.shtml
-- http://en.wikipedia.org/wiki/Cyclic_redundancy_check
--

--------------------------------------------------------------------------------
-- returns a 3-bit crc generated from a data byte
-- insert a 4 bit polynomial, here are some polynomial examples:
-- 1011 = x3+x+1
-- 1101 = x3+x2+1
--------------------------------------------------------------------------------
function crc_3_byte_create(byte in polynomial, byte in data) return byte is
   var word remainder = data
   var word polynomial2 = polynomial

   remainder = remainder << 3       -- add 3 zero's right of byte

   polynomial2 = polynomial2 << 7   -- move the polynomial to left

   -- make each data byte readable
   var bit bit10 at remainder : 10
   var bit bit9 at remainder : 9
   var bit bit8 at remainder : 8
   var bit bit7 at remainder : 7
   var bit bit6 at remainder : 6
   var bit bit5 at remainder : 5
   var bit bit4 at remainder : 4
   var bit bit3 at remainder : 3

   if bit10 == 1 then
      remainder = remainder ^ polynomial2 -- xor
   end if
   polynomial2 = polynomial2 >> 1         -- shift

   if bit9 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit8 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit7 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit6 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit5 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit4 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit3 == 1 then
      remainder = remainder ^ polynomial2
   end if

   return byte(remainder)                  -- return the crc data created
end function

--------------------------------------------------------------------------------
-- returns true or false if 3-bit crc is correct
-- insert same polynomial as create function
--------------------------------------------------------------------------------
function crc_3_byte_verify(byte in polynomial, byte in data, byte in crc) return byte is
   var word remainder = data
   var word polynomial2 = polynomial

   -- add the crc data to right side of byte
   remainder = remainder << 3
   remainder = remainder + crc

   polynomial2 = polynomial2 << 7 -- move polynomial to left

   -- make each data byte readable
   var bit bit10 at remainder : 10
   var bit bit9 at remainder : 9
   var bit bit8 at remainder : 8
   var bit bit7 at remainder : 7
   var bit bit6 at remainder : 6
   var bit bit5 at remainder : 5
   var bit bit4 at remainder : 4
   var bit bit3 at remainder : 3

   if bit10 == 1 then
      remainder = remainder ^ polynomial2 -- xor
   end if
   polynomial2 = polynomial2 >> 1         -- shift

   if bit9 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit8 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit7 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit6 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit5 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit4 == 1 then
      remainder = remainder ^ polynomial2
   end if
   polynomial2 = polynomial2 >> 1

   if bit3 == 1 then
      remainder = remainder ^ polynomial2
   end if

   -- return if data is good
   if remainder == 0 then
      return true
   else
      return false
   end if
end function
