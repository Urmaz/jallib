-- Title: Network Globals & Prototypes
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sets up global networking variables and procedures required for
--              networking protocols.
--
-- Sources:
-- http://www.comptechdoc.org/independent/networking/protocol/protnet.html
--

const byte ICMP = 1 -- ICMP protocol number for ip header
const byte UDP = 17 -- UDP protocol number for ip header
--------------------------------------------------------------------------------
-- setup the link layer variables & procedures
--------------------------------------------------------------------------------
if NETWORK_LINK_LAYER == NET_SLIP then
   -- alias slip for networking
   alias network_rx_packet_available is slip_packet_available   -- return TRUE if a packet is avalable in slip_rx_buffer
   alias network_send_data is slip_send_data                   -- transmit buffer
   alias network_rx_buffer is slip_rx_buffer                   -- receive buffer
   alias network_max_packet_size is SLIP_MTU                    -- max size of one packet (= size of receive buffer)
   alias network_packet_queue_size is QUEUE01_SIZE              -- size of receive buffer
   alias network_end_packet is slip_end_packet                  -- end packet data/send the data
   alias network_get_packet_size is slip_packet_size_buffer     -- get the size of the next packet
   --
   -- queue clear procedure for slip networking                 -- clear the recieve buffer
   procedure network_clear_rx_queue() is
      queue01_clear()
      queue02_clear()
   end procedure
elsif NETWORK_LINK_LAYER == NET_ETHERNET then

   if ENC_USE_INTERRUPT_PIN == TRUE then                        -- return TRUE if a packet is avalable in slip_rx_buffer
      alias network_rx_packet_available is enc_int
   else
      alias network_rx_packet_available is enc_packet_available
   end if

   alias network_max_packet_size is NETWORK_DATA_SIZE            -- max size of one packet (= size of receive buffer)
   alias network_packet_queue_size is NETWORK_DATA_SIZE          -- size of receive buffer
   alias network_end_packet is enc_end_packet                    -- end packet data/send the data
   alias network_get_packet_size is enc_packet_size              -- get the size of the next packet
   alias network_clear_rx_queue is enc_clear_rx_buffer           -- clear one packet from the recieve buffer
end if

--------------------------------------------------------------------------------
-- prototypes, see network_main.jal
--------------------------------------------------------------------------------
-- protocol prototypes
procedure icmp_read_packet()
procedure udp_read_packet()
--
-- misc networking
procedure network_switch_word_bytes(word in out data)
procedure network_switch_dword_bytes(dword in out data)
procedure network_send()
function network_byte'get(word in variable) return byte
procedure network_byte'put(word in variable, byte in value)
procedure network_word'put(word in variable, word in value)
function network_word'get(word in variable) return word
procedure network_dword'put(word in variable, dword in value)
function network_dword'get(word in variable) return dword
procedure network_send_packet(word in size)
procedure network_get_packet(word in size)
procedure network_set_destination_ip(byte in ip_0,byte in ip_1,byte in ip_2,byte in ip_3)
function network_checksum_16_byte_verify(word in start, word in size) return bit
function network_checksum_16_byte_calc(word in start, word in size) return word
procedure ethernet_header_create(byte in type, byte in mac_0, byte in mac_1, byte in mac_2, byte in mac_3, byte in mac_4, byte in mac_5)
--

--------------------------------------------------------------------------------
-- global variables
--------------------------------------------------------------------------------
--
-- network array for arranging data before transmit/recieve
;var byte*network_data_SIZE _network_data
if !defined(network_data) then
   var byte network_data[NETWORK_DATA_SIZE]
end if
--
-- make sure array does not get overwritten when in use
var bit network_data_in_use = FALSE
--
-- variable offset for variables in the network_data
var word network_var_offset = 0
--
var word network_packet_size = 0

--------------------------------------------------------------------------------
-- include required debug library
--------------------------------------------------------------------------------
if !defined(debug_data) then
   const bit DEBUG_MASTER_ENABLE = FALSE    -- enables debugging
   include debug
   -- IP_HEADER DEBUG LEVELS:
   -- lvl 2 - show text
   -- lvl 4 - show data
end if
