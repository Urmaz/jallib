-- ------------------------------------------------------
-- Title: Test program for serial_hw_int_cts.jal for 18F6722
--
-- Author: Rob Hamerling, Copyright (c) 2012..2014, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: test program for serial hardware lib (for first USART)
--              using interrupts and CTS output flow control
--
-- This file has been generated by hand (manually maintained)
--
-- Sources:
--
-- Notes: requires a serial connection to a terminal
--
-- ------------------------------------------------------

-- chip setup
include 18f6722

pragma target   clock    20_000_000                -- osc frequency

pragma target   OSC      HS
pragma target   FCMEN    disabled
pragma target   IESO     disabled
pragma target   PWRTE    enabled
pragma target   BROWNOUT disabled
pragma target   WDT      control
pragma target   MCLR     external
pragma target   LVP      disabled
pragma target   XINST    disabled
pragma target   DEBUG    disabled
pragma target   CCP2MUX  pin_E7                    -- leave C1 free for USART

WDTCON_SWDTEN = off                                -- no watchdog

include delay
include print                                      -- formatting routines

-- set all IO as digital
enable_digital_io()

-- setup USART
const serial_hw_baudrate =  115_200                -- speed
alias serial_ctsinv      is pin_A4                 -- incoming data flow control
pin_A4_direction         =  OUTPUT
var  bit serial_overflow_discard = FALSE           -- no transmit buffer overflow

include serial_hw_int_cts                          -- serial library

serial_hw_init()

const byte str[] = " PIC"

print_string(serial_hw_data, str)
print_string(serial_hw_data, PICTYPE)
serial_hw_data = " "

var byte char
forever loop
   if (serial_hw_read(char) == true) then          -- data available
      serial_hw_write(char)                        -- echo received char
   end if
end loop

