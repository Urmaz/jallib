-- Title: RC Servo Slave sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4o
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample allows your PIC to read pulses given by a RC
--              receiver. Connect your PIC to a rc receiver the same way you
--              would connect a RC servo. This will use the rc_servo_slave
--              library to output a value to the serial port dependant on
--              where your fingers are moving the controls on your remote
--              transmitter. PIC will read the pulse width at the receiver.
--
-- Sources:
--
-- notes:
-- PIC must have interrupt on change pins on port B. If you are using another
-- port, INTCON_RBIE & INTCON_RBIF may be named differently.
-- Check your datasheet for a interrupt-on-change pin.
--
-- Connect clock_out pin directly to int_on_change pin for an example without
-- an actual RC receiver.
--

-- include chip
include 18f4525                    -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  disabled        -- no watchdog
pragma target XINST disabled       -- not supported by JalV2
pragma target LVP  disabled        -- no Low Voltage Programming
pragma target MCLR external        -- reset externally
--
enable_digital_io() -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize


-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

-- choose pins to use for interrupt on change
const byte int_on_change_pins[] = {"B",4,"B",5} -- interrupt on change pin 0 and 1,  B4 and B5
include interrupt_on_change
int_on_change_init()

-- setup servo slave lib
const byte SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_0 = TRUE -- use interrupt on change pin 0 = B4
const byte SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_1 = TRUE -- use interrupt on change pin 1 = B5
const byte SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_2 = 0 -- use interrupt on change pin 2 = B6
const byte SERVO_SLAVE_USE_INT_ON_CHANGE_PIN_3 = 0 -- use interrupt on change pin 3 = B7
--
const SERVO_SLAVE_USE_TIMER = 1     -- choose a timer
--
-- set your min/max values (0 to 100)
-- adjust SERVO_SLAVE_MIN first, then adjust SERVO_SLAVE_MAX
-- so output values will range from 0 to 255.
const SERVO_SLAVE_MIN = 0 -- default is 0
const SERVO_SLAVE_MAX = 0 -- default is 0
--
include servo_rc_slave
servo_slave_init()


-- Configure PWM for the LED brightness
pin_ccp1_direction = output
include pwm_hardware
pwm_max_resolution(1)
pwm1_on() -- turn on PWM1
pwm2_on() -- turn on PWM1

-- define clock out pin
alias clock_out           is pin_a1
alias clock_out_direction is pin_a1_direction
clock_out_direction = output

-- main loop
forever loop
   -- create a pulse to measure
   -- if your receiver is not connected, you may use this signal.
   clock_out = high
   _usec_delay(1500) -- 500 to 2_500 (0.5ms to 2.5ms)
   clock_out = low
   _usec_delay(20_000)

   -- SIGNAL 1
   -- test if there is a signal. If no signal, the transmitter
   -- may be out of range, off or low on batteries.
   if servo_slave_is_valid[0] == TRUE then
      -- set the led brightness
      pwm1_set_dutycycle( servo_slave[0] )
      -- send the value to the serial port
      print_dword_dec(serial_data, servo_slave[0])
   else
      -- there must be no pulse, send a message
      const byte str1[] = "No Signal!"
      print_string(serial_data, str1)
      pwm1_set_dutycycle(0) -- turn led off
   end if

   serial_data = " "
   serial_data = "-"
   serial_data = " "

   -- SIGNAL 2
   -- test if there is a signal. If no signal, the transmitter
   -- may be out of range, off or low on batteries.
   if servo_slave_is_valid[1] == TRUE then
      -- set the led brightness
      pwm2_set_dutycycle( servo_slave[1] )
      -- send the value to the serial port
      print_dword_dec(serial_data, servo_slave[1])
   else
      -- there must be no pulse, send a message
      const byte str1[] = "No Signal!"
      print_string(serial_data, str1)
      pwm2_set_dutycycle(1) -- turn led off
   end if

   -- send crlf to serial port
   print_crlf(serial_data)
end loop
