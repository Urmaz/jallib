-- ----------------------------------------------------------------------------
-- Title: Test program for jseven (seven segment display
-- 
-- Author: Joep Suijs, Copyright (c) 2009..2014, all rights reserved.
--  
-- Adapted-by: 
--  
-- Compiler: >=2.4q2
-- Revision: $Revision$
--  
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--  
-- Description: Testing seven segment LED display 
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--  
-- Sources:
-- 
-- Notes: 
-- setup:   A seven segment display connected to a port
--  
-- ----------------------------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f67j50_ms.jal
--    * test : test_seven_segment.jal
--

;@jallib section chipdef
-- chip setup
include 18f67j50                   -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      INTOSC_NOCLKOUT_PLL      -- internal oscillator
                                                -- and using PLL
pragma target PLLDIV   P2          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96/2): 48 MHz
pragma target FCMEN    DISABLED    -- no fail-safeclock monitoring
pragma target IESO     DISABLED    -- no in/ext oscillator switchover
pragma target WDT      CONTROL     -- no watchdog
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging
--
-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
OSCCON_SCS = 0b00                  -- select primary clock source
OSCTUNE_PLLEN = enabled            -- activate PLL module
--
WDTCON_SWDTEN = OFF                 -- disable WDT
--


enable_digital_io() -- disable analog I/O (if any)

include delay 

enable_digital_io() -- disable analog I/O (if any)

include delay 

;@jallib use jseven
include seven_segment

portd_direction = all_output                

 
var byte i = 0
forever loop
                                  
   -- set backlight off for two seconds 
   portd = seven_from_digit(i) -- display char 
   delay_1ms(500) 
   
   i = i + 1
   if (i > 17) then
      i = 0
   end if

   
end loop