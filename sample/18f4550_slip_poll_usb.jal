-- Title: Sample for SLIP (Serial Line IP) with USB serial
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample sends and receives SLIP (Serial Line IP) packets
--              for communication "with USB serial" data in packet form. This sample
--              will receive packets via poll method. You must continuously
--              poll the slip_poll() procedure.
--
-- Sources:
-- http://tools.ietf.org/html/rfc1055
--

-- chip setup
include 18f4550
-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000
--
-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P1          -- reduce PLL output 96->48 MHz
pragma target USBPLL        F48MHZ      -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       MINIMUM     -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           DISABLED    -- no watchdog
pragma target CCP2MUX       ENABLED     -- CCP2 pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected


include delay

include print

-- setup the USB serial library
include usb_serial
usb_serial_init()
--
-- wait till USB device has been connected and serial port has been opened by the HOST
while !usb_serial_port_open  loop
   usb_serial_flush() -- poll USB at all times
end loop


-- setup SLIP
const word SLIP_MTU = 10  -- Max bytes per packet (Max Transfer Unit)
--
-- choose your interrupt routine. you may ignore this and create your own
-- isr or use polling method slip_poll()
const bit SLIP_USE_SERIAL_HW_ISR = FALSE -- TRUE = receive data via serial hw interrupt
--
-- choose your data carrier
alias slip_serial_data is usb_serial_data
alias slip_data_available is usb_serial_data_available
--
-- Choose the size of your receive buffer.
-- Should be the same as SLIP MTU if slip interrupts are not enabled
const byte QUEUE01_SIZE = SLIP_MTU
include queue01 -- include the queue/buffer library
alias slip_rx_buffer is queue01_nb  -- alias buffer for received data
--
-- Choose buffer to hold packet sizes
const byte QUEUE02_SIZE = 10
include queue02 -- include the queue/buffer library
alias slip_packet_size_buffer is queue02_nb     -- alias buffer for packet sizes
alias slip_packets_available is queue02_nr_used -- alias for number of packets avail
--
-- callback for when a full slip packet is received (not needed for isr)
procedure slip_received_packet_callback() is
   var byte packet_size = slip_packet_size_buffer
   if packet_size > SLIP_MTU then
      -- your packet may have a problem, it is too large
   end if

   -- send the decoded message back to the host
   for packet_size loop               -- for each byte in packet
      usb_serial_data = slip_rx_buffer -- do something with the packet data
   end loop
end procedure
--
include slip -- include the library
--
slip_init() -- init the slip library

-- main program --

-- Send some data to the serial port in slip packet form (encoded data).
const byte test_data[SLIP_MTU] = {1,2,3,0xC0,5,6,0xDB,8,9,10} -- define your packet data
var byte count1 = 0
for SLIP_MTU loop                    -- loop through all bytes in packet
   slip_send_data(test_data[count1]) -- send slip packet data via serial port
   count1 = count1 + 1
end loop
-- if you don't send SLIP_MTU bytes, then you
-- must call slip_end_packet()
;slip_end_packet()


-- Now, as a test you should send the received encoded data back
-- to the serial port. SLIP will decode it again for you and send you the decoded message.

forever loop
	usb_serial_flush()
   slip_poll() -- poll to receive slip data
   -- do other stuff but don't take too long
end loop
