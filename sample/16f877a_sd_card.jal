-- Title: Library for communicating with SD memory cards
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library provides functions for SD memory cards.
--
-- Sources:
-- SanDisk Secure Digital Card - http://www.cs.ucr.edu/~amitra/sdcard/ProdManualSDCardv1.9.pdf
-- How to use MMC/SDC - http://forums.parallax.com/forums/attach.aspx?a=32012
--

-- compiler dependant device definitions
include 16f877a
--
pragma target OSC HS               -- HS crystal or resonator
pragma target clock 20_000_000     -- oscillator frequency
--
pragma target WDT  disabled
pragma target LVP  disabled

-- include the delay library
include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200    -- set the baudrate
include serial_hardware
serial_hw_init()

-- setup spi
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
-- spi chip select pin
ALIAS sd_chip_select_direction   is pin_SS_direction
ALIAS sd_chip_select             is pin_SS
sd_chip_select_direction = output    -- chip select/slave select pin
sd_chip_select = high  -- disable the sd card
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_16) -- choose spi mode and speed

-- setup sd card library
--
-- select weather or not to switch SPI modes before every read/write
-- needed if using more then one component on the SPI bus.
const byte SD_ALWAYS_SET_SPI_MODE = TRUE
--
const bit SD_DELAY_AFTER_WRITE = TRUE -- some
include sd_card -- include sd card library
sd_init()       -- initalize the sd card

------------------------------------------------------------
-- START of PROGRAM
------------------------------------------------------------

_usec_delay(100_000)                  -- wait for power to settle

var byte low_byte, high_byte          -- vars for sending and recieving data

-- read the boot sector only (sector 0)
sd_start_read(0)                      -- get sd card ready for read at sector 0
for 256 loop                          -- read 1 sector (256 words)
  sd_read_data (low_byte, high_byte)  -- read 2 bytes of data
  serial_hw_write(low_byte)          -- send byte via serial port
  serial_hw_write(high_byte)         -- send byte via serial port
end loop
sd_stop_read()                        -- tell sd card you are done reading

-- write (0x66, 0x22) to sector 20 over and over.
low_byte = 0x66                       -- set low byte to write
high_byte = 0x22                      -- set high byte to write

sd_start_write(20)                    -- get sd card ready for write
for 256 + 128 loop                    -- write 1 sector + 1/2 sector
  sd_write_data(low_byte, high_byte)  -- write data to the card
end loop
sd_write_to_sector_end(0x00)          -- 2nd sector is not done, so finnish it
                                      -- sectors must be completed during write
                                      
sd_stop_write()                       -- tell sd card you are done writing

-- read the data back, should get (0x66, 0x22) over and over.
sd_start_read(20)                     -- get sd card ready for read at sector 20
for 512 loop                          -- read 2 sectors (512 words)
  sd_read_data(low_byte, high_byte)  -- read 2 bytes of data
  serial_hw_write(low_byte)          -- send byte via serial port
  serial_hw_write(high_byte)         -- send byte via serial port
end loop
sd_stop_read()                        -- tell sd card you are done reading

---------------
;-- read one full sector into sd_sector_buffer (512 byte array)
;sd_start_read(0)                      -- get sd card ready for read at sector 0
;sd_read_sector()
;sd_stop_read()                        -- tell sd card you are done reading
;
;-- now send it to the pc
;var word count1 = 0
;for 512 loop                          -- read 1 sector (512 bytes)
;  serial_hw_write (sd_sector_buffer[count1])          -- send byte via serial port
;  count1 = count1 + 1
;end loop
---------------
