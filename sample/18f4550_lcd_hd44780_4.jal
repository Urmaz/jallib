-- --------------------------------------------------------------------------
-- Title: Test program for lcd_hd44780_4.jal (basic / interface test)
-- Author: Eur Van Andel, Copyright (c) 2008, all rights reserved.
-- Adapted-by: Rob Hamerling, Joep Suijs
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- This sample shows how to setup an LCD and writes
-- "Hello World" to the first line, using a string and the print library.
-- Line 3 and line 4 are used as well, but will work properly only on a 4x20 LCD.
-- A counter is printed to show the running forever loop.     
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--
-- Sources:
--
-- Notes: 
-- setup: an hd44780 compatible display, used in 4-bit mode.
-- 
-- --------------------------------------------------------------------------
--
-- This file has been generated from:
--    * board: board_18f4550_af.jal
--    * test : test_lcd_hd44780_4.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV		DIVIDE_BY_5__20MHZ_INPUT_
pragma target CPUDIV		_OSC1_OSC2_SRC___1__96MHZ_PLL_SRC___2_
pragma target USBPLL		CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC			HS_PLL
pragma target FCMEN			DISABLED
pragma target IESO			DISABLED
pragma target PWRTE			DISABLED	-- power up timer
pragma target VREGEN		ENABLED		-- USB voltage regulator
pragma target VOLTAGE		V20			-- brown out voltage
pragma target BROWNOUT		DISABLED	-- no brownout detection
pragma target WDTPS			P32768		-- watch dog saler setting
pragma target WDT			DISABLED    -- no watchdog
pragma target CCP2MUX		RC1			-- CCP2 pin
pragma target PBADEN		DIGITAL		-- digital input port<0..4>
pragma target LPT1OSC		DISABLED	-- low power timer 1
pragma target MCLR			EXTERNAL	-- master reset on RE3
pragma target STVR			DISABLED    -- reset on stack over/under flow
pragma target LVP			DISABLED    -- no low-voltage programming
pragma target XINST			ENABLED		-- extended instruction set
pragma target BACKBUG		DISABLED	-- background debugging
pragma target CP_0			DISABLED	-- code block 0 not protected
pragma target CP_1			DISABLED	-- code block 1 not protected
pragma target CP_2			DISABLED	-- code block 2 not protected
pragma target CP_3			DISABLED	-- code block 3 not protected
pragma target CPB			DISABLED	-- bootblock code not write protected
pragma target CPD			DISABLED	-- eeprom code not write protected
pragma target WRT_0			DISABLED	-- table writeblock 0 not protected
pragma target WRT_1			DISABLED	-- table write block 1 not protected
pragma target WRT_2			DISABLED	-- table write block 2 not protected
pragma target WRT_3			DISABLED	-- table write block 3 not protected
pragma target WRTB			DISABLED	-- bootblock not write protected
pragma target WRTD			DISABLED	-- eeprom not write protected
pragma target WRTC			DISABLED	-- config not write protected
pragma target EBTR_0		DISABLED	-- table read block 0 not protected
pragma target EBTR_1		DISABLED	-- table read block 1 not protected
pragma target EBTR_2		DISABLED	-- table read block 2 not protected
pragma target EBTR_3		DISABLED	-- table read block 3 not protected
pragma target EBTRB 		DISABLED	-- boot block not protected

;@jallib section lcd_hd44780_4

procedure PORTLCD'put(byte in x) is

	var volatile bit x_0 at x:0
	var volatile bit x_1 at x:1 
	var volatile bit x_2 at x:2
	var volatile bit x_3 at x:3

	pin_b1 = x_0
	pin_b2 = x_1
	pin_b3 = x_2
	pin_b4 = x_3	
end procedure

function PORTLCD'get() return byte is
	var byte ret
	var volatile bit ret_0 at ret:0 = pin_b1
	var volatile bit ret_1 at ret:1 = pin_b2
	var volatile bit ret_2 at ret:2 = pin_b3
	var volatile bit ret_3 at ret:3 = pin_b4
	return ret
end function

procedure PORTLCD_direction'put(byte in x) is

	var volatile bit x_0 at x:0
	var volatile bit x_1 at x:1 
	var volatile bit x_2 at x:2
	var volatile bit x_3 at x:3

	pin_b1_direction = x_0
	pin_b2_direction = x_1
	pin_b3_direction = x_2
	pin_b4_direction = x_3
end procedure

function PORTLCD_direction'get() return byte is
	var byte ret
	var volatile bit ret_0 at ret:0 = pin_b1_direction
	var volatile bit ret_1 at ret:1 = pin_b2_direction
	var volatile bit ret_2 at ret:2 = pin_b3_direction
	var volatile bit ret_3 at ret:3 = pin_b4_direction
	return ret
end function

-- LCD IO definition
var bit lcd_rs           is pin_d2              -- LCD command/data select.
var bit lcd_rs_direction is pin_d2_direction
var bit lcd_en           is pin_b0              -- LCD data trigger
var bit lcd_en_direction is pin_b0_direction

var byte lcd_dataport is portlcd             -- LCD data  port
var byte lcd_dataport_direction is portlcd_direction
const byte LCD_ROWS     = 2                     -- 2 lines
const byte LCD_CHARS    = 16                    -- 16 chars per line
;@jallib section led
-- LED IO definition
var bit led             is pin_b3
var bit led_direction   is pin_b3_direction
var bit led2            is pin_b1
var bit led2_direction  is pin_b1_direction

enable_digital_io()

led_direction = output


lcd_rs_direction        = output
lcd_en_direction        = output
lcd_dataport_direction  = output

include lcd_hd44780_4                   -- LCD library with 4 data lines
include print                           -- formatted output library

for 4 loop                              -- blink LED 4 times to indicate startup
   LED = on
   delay_100ms(2)
   LED = off
   delay_100ms(2)
end loop

const byte str1[] = "Hello world!"      -- define strings
const byte str2[] = "third line"
const byte str3[] = "fourth line"

lcd_init()                              -- initialize LCD

print_string(lcd, str1)                 -- show hello world!
lcd_cursor_position(2,0)                     -- to 3rd line
print_string(lcd, str2)
lcd_cursor_position(3,0)                     -- to 4th line
print_string(lcd, str3)

var byte counter = 0

forever loop                            -- loop forever

   counter = counter + 1                -- update counter
   lcd_cursor_position(1,0)                  -- second line
   print_byte_hex(lcd, counter)         -- output in hex format
   delay_100ms(3)                       -- wait a little

   if counter == 255 then               -- counter wrap
      lcd_cursor_position(1,1)                -- 2nd line, 2nd char
      lcd = " "                         -- clear 2nd char
      lcd = " "                         -- clear 3rd char
   end if

end loop

