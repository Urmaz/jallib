-- ------------------------------------------------------
-- Title: Sample echo program for serial_hw_int_cts.jal for 16F1947
--
-- Author: Rob Hamerling, Copyright (c) 2012..2012, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Sample use of serial_hw_int_cts library with first USART of PIC16F1947
-- Echoes all data received from the serial interface.
-- Input flow control by CTS signalling makes sure buffer will not be overflowed
-- (provided the sender has CTS output flow control enabled!)
--
-- Sources:
--
-- Notes: Uses internal oscillator at 8 MHz with PLL enabled (32 MHz)
--
-- ------------------------------------------------------

include 16f1947

pragma target   clock  32_000_000            -- osc frequency
pragma target   OSC    INTOSC_NOCLKOUT       -- internal oscillator
pragma target   WDT    disabled              -- no watchdog
pragma target   PWRTE  enabled               -- powerup delay
pragma target   LVP    disabled              -- no low voltage programming
pragma target   PLLEN  P4                    -- enable PLL

OSCCON_IRCF = 14                             -- set 8 MHz (with PLL -> 32 MHz)

enable_digital_io()

-- setup the serial interface
const serial_hw_baudrate = 115200            -- speed
alias serial_ctsinv      is pin_B4           -- incoming data flow contro
pin_B4_direction         = OUTPUT
const bit serial_overflow_discard = FALSE    -- do not discard output data
include serial_hw_int_cts                    -- the library
serial_hw_init()                             -- init the serial interface

include delay                                -- formatting routines
include print                                -- formatting routines

delay_1ms(2)                                 -- PLL settling

var   byte str1[] = " PIC"
print_string(serial_hw_data, str1)           -- sent 'PIC'
print_string(serial_hw_data, PICTYPE)        -- sent PIC type after reset
serial_hw_data = " "                         -- space

var byte char
forever loop
   if (serial_hw_read(char) == true) then    -- char received
      serial_hw_write(char)                  -- echo received char
   end if
end loop

