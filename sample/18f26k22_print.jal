-- ------------------------------------------------------
-- Title:  18f26k22_print.jal
--
-- Author: Oliver "Kiste" Seitz
--
-- Adapted-by:
--
-- Compiler: 2.4o
-- Revision: $Revision$
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Demo program for print.jal library using Microchip PIC18f26k22.
--
-- Sources:
--
-- Notes:
-- 
--
-- ------------------------------------------------------
--
include 18f26k22                    -- target PICmicro
--
-- 
-- 
pragma target clock 64_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC	INTOSC_NOCLKOUT	-- internal oscillaor
pragma target WDT	disabled	-- no watchdog
pragma target MCLR	internal	-- no external reset
pragma target BROWNOUT	enabled		-- stay in reset until power good
pragma target PWRTE	enabled		-- wait a bit more on startup

-- These configuration bit settings are only a selection, sufficient for
-- this program, but other programs may need more or different settings.
--
enable_digital_io()                -- make all pins digital I/O
--

OSCCON_IRCF	=	0b111		-- set internal oscillator to 16MHz
OSCTUNE_PLLEN	=	true		-- enable PLL for frequency x 4 to get 64MHz

const serial_hw_baudrate=9600

var bit serial_ctsinv			-- dummy bit, we do not need cts
const serial_overflow_discard = false	-- Data we send is important. Why should one want to prepare data just for being discarded?
const   SERIAL_XMTBUFSIZE  = 255	-- transmit buffer as big as can be
const   SERIAL_RCVBUFSIZE  = 1		-- we do not receive, so no buffer needed
const   SERIAL_DELTA       = 1   

include serial_hw_int_cts

serial_hw_init()

alias serial_data is serial_hw_data

const var_size=256			-- set the maximum variable size

const PRINT_MAX_VAR_SIZE=var_size	-- use this size also for print.jal

include print

include delay

delay_1s(5)				-- some seconds initial delay to move eyes from power plug to computer screen ;-) 


var byte*var_size runner		-- this variable holds the results of the computations

var byte*var_size carry 		-- some auxiliary variable

var word counter

var bit overflow

const byte title10[]="1 Googol=\r\n10^100="
print_string(serial_data,title10)	

runner=1_000_000_000		-- the largest power of ten that can be directly assigned

for 91 loop			-- "add 91 zeroes"

  runner=runner<<1		-- runner=runner *2
  carry=runner			-- carry=runner
  carry=carry<<2		-- carry=carry *4
  runner=runner+carry		-- Alltogether: runner=runner*10

end loop

print_maxvar_dec(serial_data,runner)
print_crlf(serial_data)
print_crlf(serial_data)

const byte title11[]="The largest printable number=\r\n2^2048-1="
print_string(serial_data,title11)	

runner=0
runner=runner-1

print_maxvar_dec(serial_data,runner)
print_crlf(serial_data)
print_crlf(serial_data)




overflow=false
runner=1
counter=0

const byte title1[]="Factorials:"
print_string(serial_data,title1)	-- print a nice header
print_crlf(serial_data)

repeat

  print_word_dec(serial_data,counter)
  serial_data="!"
  serial_data="="
  print_maxvar_dec(serial_data,runner)
  print_crlf(serial_data)

			-- 0! = 1 ; n! = (n-1)! * n
			-- We do not use multiplication here, as it uses way more ram than additions.
			-- Besides, overflow detection is easy and cheap when only using additions.
			-- Execution time is no real problem, as the loop will not repeat very often, 
			-- 70! (=2485 loop runs altogether) will already result in more than 100 decimal digits.

  carry=runner
  for counter loop
    runner=runner+carry
    if runner<=carry then 
      overflow=true
    end if
  end loop
  counter=counter+1

until overflow

print_crlf(serial_data)

const byte title2[]="Powers of two:"
print_string(serial_data,title2)	-- print a nice header
print_crlf(serial_data)

counter=0
runner=1

repeat
  serial_data="2"
  serial_data="^"
  print_word_dec(serial_data,counter)
  serial_data="="
  print_maxvar_dec(serial_data,runner)
  print_crlf(serial_data)

  counter=counter+1
  runner=runner<<1
  
until runner==0

const byte title3[]="That's it!"
print_string(serial_data,title3)	-- say goodbye
print_crlf(serial_data)
print_crlf(serial_data)
delay_1ms(3)				-- wait for the last 2 bytes to be transmitted
asm sleep				-- switch off :-)

forever loop
end loop
--
