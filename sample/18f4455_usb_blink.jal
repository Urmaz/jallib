-- ------------------------------------------------------
-- Title: Blink-a-led of the Microchip pic18f4455
--
-- Author: Rob Hamerling, Copyright (c) 2008..2011, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Sample blink-a-led program for Microchip PIC18f4455.
-- Using a 20 MHz crystal, but CPU running at 48 MHz via the PLL module.
-- The LED should be blinking twice a second.
--
-- Sources:
--
-- Notes:
--  - File creation date/time: 26 Jul 2011 17:24:20.
--
-- ------------------------------------------------------
--
include 18f4455                    -- target PICmicro
--
-- Compiler directives
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2,
-- The CPU frequency is 48 MHz by using the PLL module.
pragma target clock 48_000_000     -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      HS_PLL      -- HS crystal or resonator
--                                    and using PLL
pragma target PLLDIV   P5          -- reduce OSC 20->4 MHz for PLL module
pragma target CPUDIV   P1          -- reduce PLL output 96->48 MHz
--                                 (without PLL this would be 20->20)
pragma target USBPLL   OSC         -- USB clock from primary oscillator
pragma target FCMEN    disabled    -- no fail-safe clock monitoring
pragma target IESO     disabled    -- no int/ext clock switchover
pragma target BROWNOUT disabled    -- no brownout detection
pragma target WDT      disabled    -- no watchdog
pragma target XINST    disabled    -- not supported by JalV2
pragma target DEBUG    disabled    -- no debugging
pragma target LVP      disabled    -- no Low Voltage Programming
pragma target ICPRT    disabled    -- no In Circuit Debug
pragma target MCLR     external    -- reset externally
--
-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
enable_digital_io()                -- make all pins digital I/O
--
-- Specify the pin to which the LED (with serial resistor!) is connected:
alias   led      is pin_A0
pin_A0_direction =  output
--
forever loop
   led = !led                      -- flip on->off or off>on
   _usec_delay(250_000)            -- 0.25 sec delay
end loop
--
