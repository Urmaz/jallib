-- Title: Debug via print library sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Debug sample. The debug library has all the same functions
--              as the print library, but the user defines constants to turn on
--              and off this library and users debug levels.
--
-- Sources:
-- The jallib print library
--

include 18f4550                    -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- (unspecified configuration bits may cause a different frequency!)(
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target PLLDIV  P1           -- PLL off
pragma target CPUDIV  P2           -- no cycle divisor
pragma target WDT  disabled        -- no watchdog
pragma target XINST disabled       -- not supported by JalV2
pragma target LVP  disabled        -- no Low Voltage Programming
pragma target MCLR external        -- reset externally
-- These configuration bit settings are only a selection, sufficient for
-- this program, but other programs may need more or different settings.
--
enable_digital_io()                -- make all pins digital I/O
--

include print

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()

alias debug_stream is serial_hw_data
const bit DEBUG_MASTER_ENABLE = TRUE    -- enables debugging
const byte DEBUG_ENABLE[] = {TRUE,FALSE,TRUE} -- enables/disables debug levels (0,1,2)
include debug

for 10 loop
   serial_hw_data = "!"
end loop

forever loop
   -- Debug level 0
   const byte str1[] = "The loop has begun!"
   debug_string(0,str1)
   debug_crlf(0)

   -- Debug level 1
   debug_byte_dec(1,128)
   debug_crlf(1)
   
   -- Debug level 2
   debug_dword_dec(2,70_000)
   debug_crlf(2)
   
   -- delay 1 sec
   _usec_delay(1_000_000)
end loop














;
;      const byte str1[] = "---------- begin ----------"
;      print_string(serial_sw_data, str1)
;      print_crlf(serial_sw_data)
;
;      var byte udp_header[] = {0,0,0,0}
;      var word udp_source_port at udp_header[0]
;
;      udp_source_port = 0xAABB
;
;      var byte step = 0
;      for count(udp_header) using step loop
;         print_byte_hex(serial_sw_data,udp_header[step])
;         serial_sw_data = " "
;      end loop
;      print_crlf(serial_sw_data)
;
;      const byte str2[] = "---------- end ----------"
;      print_string(serial_sw_data, str2)
;      print_crlf(serial_sw_data)

