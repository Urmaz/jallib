-- Title: Debug via print library sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
-- Revision: $Revision$
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Debug sample. The debug library has all the same functions
--              as the print library, but the user defines constants to turn on
--              and off this library and users debug levels.
--
-- Sources:
-- The jallib print library
--

include 18f4550                    -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      HS_PLL      -- HS crystal or resonator
--                                    and using PLL
pragma target PLLDIV   P5          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96)/2 -> 48 MHz
--                                    (without PLL: CPU freq. = OSC freq.)
pragma target USBPLL   F48MHZ      -- USB clock from PLL module
pragma target FCMEN    DISABLED    -- no fail-safe clock monitoring
pragma target IESO     DISABLED    -- no int/ext clock switchover
pragma target BROWNOUT DISABLED    -- no brownout detection
pragma target VREGEN   ENABLED     -- enable USB voltage regulator
--                                    (when no external regulator at Vusb)
pragma target WDT      DISABLED    -- no watchdog
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging
pragma target LVP      DISABLED    -- no Low Voltage Programming
pragma target ICPRT    DISABLED    -- no In Circuit Debug
pragma target MCLR     EXTERNAL    -- reset externally
--
-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
OSCCON_SCS = 0b00                  -- select primary clock source
--
enable_digital_io()                -- make all pins digital I/O
--

-- setup uart for communication
const serial_hw_baudrate  = 115200      -- set the baudrate
include serial_hardware
serial_hw_init()

alias debug_data is serial_hw_data
const bit DEBUG_MASTER_ENABLE = TRUE    -- enables debugging
include debug
--
-- turn on and off debug levels.
debug_lvl_1 = ON
debug_lvl_2 = OFF
debug_lvl_3 = ON

-- we are alive!
for 10 loop
   serial_hw_data = "!"
end loop

for 5 loop
   -- Debug level 0
   const byte str1[] = "The loop has begun!"
   debug_string(1,str1)
   debug_crlf(1)

   -- Debug level 1
   debug_byte_dec(2,128)
   debug_crlf(2)
   
   -- Debug level 2
   debug_dword_dec(3,70_000)
   debug_crlf(3)
   
   -- delay 1 sec
   _usec_delay(500_000)
end loop

-- we are finnished!
for 10 loop
   serial_hw_data = "!"
end loop











;
;      const byte str1[] = "---------- begin ----------"
;      print_string(serial_sw_data, str1)
;      print_crlf(serial_sw_data)
;
;      var byte udp_header[] = {0,0,0,0}
;      var word udp_source_port at udp_header[0]
;
;      udp_source_port = 0xAABB
;
;      var byte step = 0
;      for count(udp_header) using step loop
;         print_byte_hex(serial_sw_data,udp_header[step])
;         serial_sw_data = " "
;      end loop
;      print_crlf(serial_sw_data)
;
;      const byte str2[] = "---------- end ----------"
;      print_string(serial_sw_data, str2)
;      print_crlf(serial_sw_data)

