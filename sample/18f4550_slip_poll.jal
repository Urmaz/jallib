-- Title: Sample for SLIP (Serial Line IP)
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample sends and receives SLIP (Serial Line IP) packets
--              for communication with serial data in packet form.
--
-- Sources:
-- http://tools.ietf.org/html/rfc1055
--

-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P2          -- OSC1_OSC2_SRC_1_96MHZ_PLL_SRC_2
pragma target USBPLL        F48MHZ      -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V20         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           DISABLED    -- no watchdog
pragma target CCP2MUX       pin_C1      -- CCP2 pin
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected
--
--
enable_digital_io()                      -- make all pins digital I/O
--

-- setup uart for communication
const serial_hw_baudrate  = 9600   -- set the baudrate
include serial_hardware
serial_hw_init()

-- Choose the size of your recieve buffer.
-- Should be the same as SLIP MTU if slip interrupts are not enabled
const byte QUEUE01_SIZE = 10
include queue01 -- include the queue/buffer library

-- Choose the packet size size buffer (for interrupts only)
;const byte QUEUE02_SIZE = 10
;include queue02 -- include the queue/buffer library

-- setup SLIP
const word SLIP_MTU = 10  -- Max bytes per packet (Max Transfer Unit)
--
const bit SLIP_USE_ISR = FALSE                   -- TRUE = recieve data via interrupt
--
alias slip_rx_buffer is queue01_nb               -- choose buffer for recieved data
;alias slip_packet_size_buffer is queue02_nb     -- choose buffer for packet sizes
;alias slip_packets_available is queue02_nr_used -- alias for number of packets avail
--
-- choose your data carrier
alias slip_serial_data is serial_hw_data
alias slip_data_available is serial_hw_data_available
--
-- callback for when a full slip packet is recieved (not needed for isr)
procedure slip_received_packet_callback(byte in packet_size) is
   if packet_size > SLIP_MTU then
      -- your packet may have a problem, it is too large
   end if

   for packet_size loop               -- for each byte in packet
      serial_hw_data = slip_rx_buffer -- do something with the packet data
   end loop
end procedure
--
include slip -- include the library
--
slip_init() -- init the slip library

-- main program --

-- send some junk via serial port
for 4 loop
   serial_hw_data = 0
end loop

-- Send some data
const byte test_data[] = {1,2,3,0xC0,5,6,0xDB,8,9,10}
var byte count1 = 0
for 10 loop            -- loop through all bytes in packet
   slip_send_data(test_data[count1])   -- send each byte via serial port (partly SLIP encrypted)
   count1 = count1 + 1
end loop
-- if you don't send SLIP_RECIEVE_BUFFER_SIZE bytes, then you
-- must call slip_end_packet()
;slip_end_packet()

-- your main loop
forever loop
   slip_poll() -- poll for slip data
   -- do other stuff but don't take too long
end loop

