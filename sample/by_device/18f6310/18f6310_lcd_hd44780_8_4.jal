-- ------------------------------------------------------
-- Title: LCD sample program for the Microchip PIC 18f6310
--
-- Author: Rob Hamerling, Copyright (c) 2009, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: >=2.4i
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
--    LCD sample program for Microchip PIC18f6310.
--    Shows a row of digits and letters on a 2 lines LCD.
--    Blinks also a LED on pin_A0 to show program is running.
--    Uses:  - 8 LCD data lines
--           - 2 data nibbles
--
-- Sources:
--
-- Notes:
--  - File creation date/time: 3 Mar 2009 17:17:57.
--
-- ------------------------------------------------------
--
include 18f6310                    -- target PICmicro
--
-- This program assumes a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- Configuration bits may cause a different frequency!
pragma target OSC HS               -- HS crystal or resonator
pragma target clock 20_000_000     -- oscillator frequency
pragma target WDT  disabled
pragma target MCLR external
--
enable_digital_io()                -- disable analog I/O (if any)
--
pin_A0_direction       =  output   -- LED
--
const byte LCD_ROWS    =  2        -- LCD with 2 lines
const byte LCD_CHARS   =  16       -- and 16 characters per line
--
var  byte lcd_dataport_low  is portF_low       -- nibble data interface
var  byte lcd_dataport_high is portF_high
var  bit  lcd_en            is pin_A2      -- data trigger
var  bit  lcd_rs            is pin_A3      -- command/data select.
--
portF_low_direction   =  all_output        -- )
portF_high_direction   =  all_output        -- )
pin_A2_direction   =  output            -- } set port/pin directions
pin_A3_direction   =  output            -- )
--
include lcd_hd44780_8
--
lcd_init()                         -- init the lcd controller
--
include delay                      -- fetch delay library
--
forever loop
   var byte c[LCD_CHARS] = "0123456789ABCDEF"
   var byte i,j
   for LCD_ROWS using i loop
      lcd_cursor_position(i,i)
      for LCD_CHARS - i using j loop
         pin_A0 = !pin_A0          -- flip the LED
         lcd_write_char(c[j])
         delay_100ms(3)
      end loop
   end loop
   delay_100ms(10)
   lcd_clear_screen()
end loop
--
