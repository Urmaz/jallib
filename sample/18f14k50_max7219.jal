-- ------------------------------------------------------
-- Title: Test 7-segment module with MAX7219 chip
--
-- Author: Rob Hamerling, Copyright (c) 2014..2014, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Simple program to test the max7219 library.
-- Most procedures and functions are called at least once,
-- with different arguments to show the capabilities of
-- a ready-built PCB with 8x8 led matrix display
--
-- Sources:
--
-- Notes:
--
-- ------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f14k50_af.jal
--    * test : test_max7219.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000

-- fuses
pragma target CPUDIV        P1              -- NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV        P1              -- USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK_NO_DIVIDE
pragma target OSC           HS
pragma target PLLEN         ENABLED         -- OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED        -- power up timer
pragma target BROWNOUT      DISABLED        -- no brownout detection
pragma target VOLTAGE       V30             -- brown out voltage
pragma target WDT           CONTROL         -- watchdog software controlled
pragma target WDTPS         P32K            -- watch dog scaler setting
pragma target MCLR          EXTERNAL        -- external reset
pragma target LVP           DISABLED        -- no low-voltage programming
pragma target XINST         ENABLED         -- extended instruction set
pragma target DEBUG         DISABLED        -- background debugging
pragma target CP0           DISABLED        -- code block 0 not protected
pragma target CP1           DISABLED        -- code block 1 not protected
pragma target CPB           DISABLED        -- bootblock code not write protected
pragma target WRT0          DISABLED        -- table writeblock 0 not protected
pragma target WRT1          DISABLED        -- table write block 1 not protected
pragma target WRTB          DISABLED        -- bootblock not write protected
pragma target WRTC          DISABLED        -- config not write protected
pragma target EBTR0         DISABLED        -- table read block 0 not protected
pragma target EBTR1         DISABLED        -- table read block 1 not protected
pragma target EBTRB         DISABLED        -- boot block not protected
pragma target HFOFST        ENABLED         -- THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

WDTCON_SWDTEN = OFF                          -- WDT off

include delay                       -- library with delay procedures

-- setup MAX7219
alias max7219_din  is pin_A0
alias max7219_clk  is pin_A1
alias max7219_cs   is pin_A2

pin_A0_direction = OUTPUT
pin_A1_direction = OUTPUT
pin_A2_direction = OUTPUT
--
const bit MAX7219_DISPLAY_CACHE = TRUE   -- use cache
--
include max7219                      -- library for the TM1638
max7219_init()                       -- initalize the TM1638
--

var byte i,j

max7219_display_intensity(MAX7219_DISPLAY_PWM3)

forever loop

   for 8 using i loop
      max7219_display_col(i, TRUE)        -- column
      delay_100ms(2)
      max7219_display_col(i, FALSE)
   end loop

   for 8 using i loop
      max7219_display_row(i, TRUE)        -- row
      delay_100ms(2)
      max7219_display_row(i, FALSE)
   end loop

   for 8 using i loop                     -- diagonal 1
      max7219_display_bit(i, i, TRUE)
      delay_100ms(1)
   end loop
   for 8 using i loop                     -- diagonal 2
      max7219_display_bit(i, 7 - i, TRUE)
      delay_100ms(1)
   end loop

   max7219_display_blink(3,3)             -- blinking cross

   for 16 using i loop                    -- intensity range
      max7219_display_intensity(i)
      delay_100ms(2)
   end loop

   max7219_display_clear()
   max7219_display_intensity(MAX7219_DISPLAY_PWM3)

   for 8 using i loop                     -- triangle
      max7219_display_byte_bin(i, (2 << i) - 1)
      delay_100ms(2)
   end loop

   for 15 using i loop                    -- walking diagonal
      for 8 using j loop
         if ((i < j + 8)  &  (i >= j)) then
            max7219_display_byte_bin(j, 1 << (i - j))
         else
            max7219_display_byte_bin(j, 0)
         end if
      end loop
      delay_100ms(2)
   end loop

   const byte v[] = {24,60,126,255}
   const byte h[] = {24,36,66,129}
   for 4 using i loop                     -- big bang
      for 4 using j loop
         if j < i then
            max7219_display_byte_bin(3 - j, h[i])
            max7219_display_byte_bin(4 + j, h[i])
         elsif j == i then
            max7219_display_byte_bin(3 - j, v[i])
            max7219_display_byte_bin(4 + j, v[i])
         else
            max7219_display_byte_bin(3 - j, 0)
            max7219_display_byte_bin(4 + j, 0)
         end if
      end loop
      delay_100ms(3)
   end loop
   max7219_display_clear()
   delay_100ms(5)

   const byte s[] = {60,66,165,141,141,165,66,60}
   for 8 using i loop
      max7219_display_byte_bin(i, s[i])
   end loop
   for 3 using i loop
      delay_100ms(5)
      max7219_display_bit(5, 5, FALSE)
      delay_100ms(2)
      max7219_display_bit(5, 5, TRUE)
   end loop
   delay_100ms(5)
   max7219_display_clear()

end loop

