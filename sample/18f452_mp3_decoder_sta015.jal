-- Title: sta015/sta013 mp3 decoder sample
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: example usage of the sta015 mp3 decoder. plays .mp3 files from
--              a fat32 formatted sd card or hard disk
--
-- If you send data faster, you can play higher bitrate mp3's.
-- Try using a faster PIC clock speed.
--
-- Sources:
-- http://www.st.com/stonline/books/pdf/docs/7042.pdf
-- http://www.pjrc.com/mp3/sta013.html
--
-- include chip
include 18F452                   -- target picmicro
-- this program assumes a 20 mhz resonator or crystal
-- is connected to pins osc1 and osc2.
pragma target osc hs              -- hs crystal or resonator
pragma target clock 20_000_000    -- oscillator frequency
--
pragma target wdt  disabled
pragma target lvp  disabled
--

enable_digital_io() -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize

-- setup uart for communication
const serial_hw_baudrate  = 38400   -- set the baudrate
include serial_hardware
serial_hw_init()

-- setup spi for the sd card
-- spi chip select pin
ALIAS sd_chip_select_direction   is pin_SS_direction
ALIAS sd_chip_select             is pin_SS
sd_chip_select_direction = output    -- chip select/slave select pin
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
sd_chip_select = high  -- disable the sd card
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed

-- setup the sd card
const bit SD_ALWAYS_SET_SPI_MODE = TRUE
const bit SD_DELAY_AFTER_WRITE = TRUE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings

-- setup fat32 --
-- include the required files
include pic_data_eeprom
include format  -- include format library (required by some fat32 procedures)
-- change these vaues to save memory
const word FAT32_FILES_MAX = 40            -- the max number of files allowed in a directory
const byte FAT32_FILENAME_SIZE = 100        -- choose max filename size. if a filename is longer the this, beginning chars will be cut. short filenames are 12 bytes.
const FAT32_DIR_FRAGMENTS_TO_ALLOW = 10     -- (0 = you must have a defragmented media), usually directories are fragmented.
--                                          -- uses 6 bytes memory per fragment allowed
--                                          -- windows defrag does not defragment directories.
const FAT32_FILE_FRAGMENTS_TO_ALLOW = 10    -- (0 = you must have a defragmented media)
--                                          -- uses 8 bytes memory per fragment allowed
const bit FAT_32_FILENAME_IN_EEPROM = FALSE -- PIC eeprom is slow, loads filenames slow, false = use internal memory
var byte LONGNAMELOCATION = 0               -- The start location for the filename in eeprom. use only if FAT_32_FILENAME_IN_EEPROM = TRUE
--
-- experts may change the following values
const byte FAT32_USE_SECTOR_BUFFER = FALSE  -- must be true if using SD card + external memory on SPI bus
;const byte FAT32_ENTRIES_MAX = 1           -- highest file entry address can be 256
const byte FAT32_ENTRIES_MAX = 2            -- highest file entry address can be 65535
--
-- choose a memory source for the file list
const bit FAT32_USE_INTERNAL_MEMORY = TRUE -- Use internal memory for file location list
IF FAT32_USE_INTERNAL_MEMORY == TRUE THEN
   -- Setup a large array for storing sector data, This is where filename locations are stored
   const dword LARGE_ARRAY_2_SIZE = FAT32_FILES_MAX               -- choose number of array variables
   const dword LARGE_ARRAY_2_VARIABLE_SIZE = FAT32_ENTRIES_MAX    -- choose bytes size of variables
   include large_array_2                    -- include the array library
   ALIAS entry_location is large_array_2
elsif FAT32_USE_INTERNAL_MEMORY == FALSE THEN
   -- put your own code here if you wish to allow massive amounts of files per directory
   
   -- example usage of 23k256 for external memory
   
   -- setup 23k256 for external memory
   -- setup chip select pin
   ALIAS sram_23k256_chip_select             is pin_a2
   ALIAS sram_23k256_chip_select_direction   is pin_a2_direction
   -- initial settings
   sram_23k256_chip_select_direction = output    -- chip select/slave select pin
   sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
   -- initalize 23k256 in byte mode
   include sram_23k256 -- setup Microchip 23k256 sram
   sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode
   
   -- alias the 23k256 device word array
   ;alias entry_location is sram_23k256_byte  -- highest file entry address can be 256
   alias entry_location is sram_23k256_word   -- highest file entry address can be 65535
END IF
--
include fat32   -- include fat32 library -- include fat32

-- CHOOSE FILE ATTRIBUTES TO FILTER OUT
fat32_filter_is_read_only  = FALSE
fat32_filter_is_hidden     = FALSE
fat32_filter_is_system     = FALSE
fat32_filter_is_volume_id  = FALSE
fat32_filter_is_directory  = FALSE
fat32_filter_is_archive    = FALSE

-- sta015 requires i2c
const word _i2c_bus_speed = 1 -- * 100kHz
const bit _i2c_level = true   -- i2c levels (not SMB)
--
alias i2c_scl   is pin_c1
alias i2c_scl_direction  is pin_c1_direction
alias i2c_sda   is pin_c2
alias i2c_sda_direction   is pin_c2_direction
--
include i2c_software
i2c_initialize()

--setup mp3 decoder sta015
-- setup pins for sta015 mp3 decoder
alias sta015_hw_reset                 is pin_d1                    -- reset pin
alias sta015_hw_reset_direction       is pin_d1_direction
alias sta015_bit_en                   is pin_e1                    -- chip select pin
alias sta015_bit_en_direction         is pin_e1_direction
alias sta015_data_request             is pin_e2                    -- data request pin
alias sta015_data_request_direction   is pin_e2_direction
-- we already set these pins with spi
;alias sta015_data                     is pin_sdo                   -- To SDI
;alias sta015_data_direction           is pin_sdo_direction
;alias sta015_clock                    is pin_scl                   -- SCKR
;alias sta015_clock_direction          is pin_scl_direction
--
-- set the inputs and outputs for these pins
sta015_hw_reset_direction = output
sta015_bit_en_direction = output
sta015_data_request_direction = input
-- again, we already set these pins with spi
;sta015_data_direction = output
;sta015_clock_direction = output
--
-- 0 = full folume (0db) 1.5db volume loss per value up
-- base & treble can not go higher then max volume, see notes in mp3_decoder_sta015.jal
const byte STA015_DEFAULT_ATTENUATION = 0
const byte STA015_ALWAYS_SET_SPI_MODE = TRUE
--
include mp3_decoder_sta015 -- include the sta015 library
sta015_init(STA015_OSC_20) -- setup sta015 with 20mhz crystal

include random -- include random number generator to play random files
function random_byte_choose(byte in low_data, byte in high_data) return byte is
   pragma inline
   
   var byte randome_byte
   randome_byte = byte(random_word())
   
   while (randome_byte < low_data) | (randome_byte > high_data) loop
      randome_byte = byte(random_word())
   end loop
   
   return randome_byte
end function

-- user procedures

-- procedure for sending 80 "-----------------" via serial port
procedure next() is
   serial_hw_write (13)-- send (carriage return, line feed) characters to serial port
   serial_hw_write (10)
   for 80 loop
      serial_hw_write ("-")
   end loop
   serial_hw_write (13)-- send (carriage return, line feed) characters to serial port
   serial_hw_write (10)
end procedure

-- start of main program

fat32_init(1)       -- initialize fat32, go to 1st primary partition's root dir "\"

------------------------------------------------------------
-- list a directory, send it via serial port
------------------------------------------------------------
fat32_list_dir() -- see the procedure, sends dir listing via serial port

------------------------------------------------------------
-- example user interaction,
-- if volume id selected, list the current dir (root dir)
-- if directory selected go into it and list it
-- if file selected go into a mp3 file and play it
--
-- see "enable_user_interaction = FALSE" in this example
------------------------------------------------------------

var byte file_number = 0
var dword count8 = 0
var bit play = true
var byte sta_command
var byte x
forever loop
   
   next() -- send "-----" then loop and wait for user input
   
   -- wait for user to send serial data (file selection)
   while !serial_hw_data_available loop
   end loop
   file_number = serial_hw_data
   
   -- display the filename chosen
   format_word_dec(serial_hw_data,file_number,6,0) -- send the file number
   serial_hw_write (".")
   serial_hw_write (" ")
   fat32_read_file_info(file_number) -- read file's name, location, size, attributes into memory
   fat32_read_filename()             -- send the file name via serial port
   
   next() -- send "-----" then loop and wait for user input
   
   -- choose a file for reading or dir for opening
   if fat32_cd(file_number) then            -- if change directory is successful
      fat32_list_dir()                      -- sends dir listing via serial port
   elsif fat32_file_open(file_number) then  -- if go into file is successful
      
      -------------------------------------------------------------------------
      -- use more functions of the lib, see the advance example below
      var byte enable_user_interaction = FALSE
      -------------------------------------------------------------------------
      
      -- basic example if enable_user_interaction = TRUE  (slower data transfer)
      if enable_user_interaction == TRUE then
         count8 = 0
         for (fat32_file_size / 512) loop
            fat32_start_read (fat32_file_location + count8)  -- go in the file, get ready to read
            fat32_read_sector()   -- read one sector of the file
            fat32_stop_read ()    -- end of file, set media idle
            -- now send it to sta015
            var word count1 = 0                         -- sector data count
            for 512 loop                                -- loop till end of sector read
               sta015_send(fat32_sector_buffer[count1]) -- send data to sta015
               count1 = count1 + 1
            end loop
            count8 = count8 + 1
         end loop
         
         
         
         -- advanced example if enable_user_interaction = FALSE   (faster data transfer)
      elsif enable_user_interaction == FALSE then
         count8 = 0
         for (fat32_file_size / 512) loop
            fat32_start_read (fat32_file_location + count8)  -- go in the file, get ready to read
            fat32_read_sector()  -- read one sector
            fat32_stop_read ()   -- end of file, set media idle
            
            -- now send it to sta015
            -- set spi mode 0,1
            SSPCON_CKP = 0
            SSPSTAT_CKE = 1
            
            -- enable chip select on sta015
            sta015_bit_en = high
            
            var word count1 = 0                      -- sector data count
            for 512 loop                             -- loop till end of sector read
               while sta015_data_request == low loop -- wait till data gets requested
                  
                  -- time to do stuff here, but don't take too long
                  if serial_hw_data_available then   -- check for user input
                     x = serial_hw_data
                     
                     if x == 0 then                -- stop playing and exit loop
                        play = false
                        exit loop
                     elsif x == 50 then            -- send the mp3's info via serial port
                        sta015_send_volume()
                     else
                        sta015_write_command (x)   -- send a command such as volume up & down
                        sta015_send_volume()
                     end if
                     
                  end if
               end loop
               
               if play == false then             -- user choose to stop playing, exit loop
                  fat32_list_dir()
                  exit loop
               end if
               
               
               spi_master_hw = (fat32_sector_buffer[count1])  -- send data to sta015 via spi
               
               ;-- does the same as the above spi code but faster:
               ;SSPBUF = fat32_sector_buffer[count1]       -- send the data
               ;while ( SSPSTAT_BF == 0 ) loop end loop    -- wait till it has been sent
               
               count1 = count1 + 1
            end loop
            
            
            if play == false then                -- stop playing and exit loop
               play = true
               exit loop
            end if
            
            sta015_bit_en = low   -- enable chip select
            
            count8 = count8 + 1
         end loop
         
      end if
   end if
end loop
