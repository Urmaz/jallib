-- ------------------------------------------------------
-- Title: Test program for serial_hw_int_cts.jal
--
-- Author: Joep Suijs, Copyright (c) 2008..2011, all rights reserved.
--
-- Adapted-by: Albert Faber
--
-- Compiler: >=2.4l
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: test program for serial hardware lib using interrutps.
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--
-- Sources:
--
-- Notes: 
--    setup: a serial connection to a terminal
--
-- ------------------------------------------------------
--
-- This file has been generated from:
--    * board: board_16f877a_startersguide.jal
--    * test : test_serial_hw_int_cts.jal
--

;@jallib section chipdef
-- chip setup
include 16f877a

pragma target clock 20_000_000                  -- xtal frequency
pragma target OSC        hs
pragma target   LVP disabled
pragma target   WDT disabled
;@jallib section led
-- LED IO definition
alias led             is pin_c2             ; red
alias led_direction   is pin_c2_direction
alias led2            is pin_d7             ; yellow
alias led2_direction  is pin_d7_direction
alias led3            is pin_d6             ; green
alias led3_direction  is pin_d6_direction

include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200
alias serial_ctsinv  is  pin_B4        -- incoming data flow control
var  bit serial_overflow_discard = true   -- With transmit buffer overflow

include serial_hw_int_cts
serial_hw_init()

include print                       -- output library

led_direction = output
for 4 loop
   LED = on
   delay_100ms(3)
   LED = off
   delay_100ms(3)
end loop



const byte str1[] = "Hello serial world\r\n"   -- define a string
print_string(serial_hw_data, str1)  -- output string to serial

-- inform user PIC is ready !
serial_hw_write("!")

-- let's build our loop
var byte char	-- will store received char
var word counter = 10
forever loop
	if serial_hw_read(char)	then

      if (char == " ") then
         -- space triggers large output
         for 40 loop 
            var byte i
            for 9 using i loop
               serial_hw_data = i | 0x30  
            end loop      
         end loop        
         counter = 50000  -- restart timeout (don't let the dot interfere)
      else
   		serial_hw_write(char)	-- that's the echo...
      end if
	end if
	
	counter = counter - 1;
	if (counter == 0) then
	   counter = 50000
      serial_hw_data = "."	   
      LED = ! LED
   end if
end loop
