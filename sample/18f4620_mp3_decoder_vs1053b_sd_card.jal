-- Title: vs1053b mp3 decoder sample
-- Author: Matthew Schinkel, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: example usage of the vs1053 mp3 decoder. plays .mp3 files from
--              a fat32 formatted sd card
--
-- Sources:
-- www.vlsi.fi/fileadmin/datasheets/vlsi/vs1053.pdf
--

include 18f4620                    -- target PICmicro
--
-- This program assumes that a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- (unspecified configuration bits may cause a different frequency!)(
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  disabled        -- no watchdog
pragma target LVP  disabled        -- no Low Voltage Programming
pragma target MCLR external        -- reset externally
--
enable_digital_io()                -- make all pins digital I/O
--

-- include the delay library
include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200    -- set the baudrate
include serial_hardware
serial_hw_init()

include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed

alias sd_chip_select is pin_a5
alias sd_chip_select_direction is pin_a5_direction
sd_chip_select_direction = output

-- setup the sd card
const bit SD_ALWAYS_SET_SPI_MODE = TRUE
const bit SD_DELAY_AFTER_WRITE = TRUE
include sd_card              -- include the sd card ide hard disk library
sd_init()                    -- initialize startup settings

-- spi is required by sta015, so set it up.
-- if we are using an sd card, we already initilized the SPI bus, so skip this.
if defined(spi_init) == false then
   include spi_master_hw         -- includes the spi library
   -- define spi inputs/outputs
   pin_sdi_direction = input    -- spi input
   pin_sdo_direction = output   -- spi output
   pin_sck_direction = output   -- spi clock
   --
   spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
end if

-- setup fat32 --
-- include the required files
include pic_data_eeprom
include format  -- include format library (required by some fat32 procedures)
-- change these vaues to save memory
const word FAT32_FILES_MAX = 50            -- the max number of files allowed in a directory
const byte FAT32_FILENAME_SIZE = 100        -- choose max filename size. if a filename is longer the this, beginning chars will be cut. short filenames are 12 bytes.
const FAT32_DIR_FRAGMENTS_TO_ALLOW = 10     -- (0 = you must have a defragmented media), usually directories are fragmented.
--                                          -- uses 6 bytes memory per fragment allowed
--                                          -- windows defrag does not defragment directories.
const FAT32_FILE_FRAGMENTS_TO_ALLOW = 10    -- (0 = you must have a defragmented media)
--                                          -- uses 8 bytes memory per fragment allowed
const bit FAT_32_FILENAME_IN_EEPROM = FALSE -- PIC eeprom is slow, loads filenames slow, false = use internal memory
var byte LONGNAMELOCATION = 0               -- The start location for the filename in eeprom. use only if FAT_32_FILENAME_IN_EEPROM = TRUE
--
-- experts may change the following values
const byte FAT32_USE_SECTOR_BUFFER = FALSE  -- must be true if using SD card + external memory on SPI bus
;const byte FAT32_ENTRIES_MAX = 1           -- highest file entry address can be 256
const byte FAT32_ENTRIES_MAX = 2            -- highest file entry address can be 65535
--
-- choose a memory source for the file list
const bit FAT32_USE_INTERNAL_MEMORY = TRUE -- Use internal memory for file location list
IF FAT32_USE_INTERNAL_MEMORY == TRUE THEN
   -- Setup a large array for storing sector data, This is where filename locations are stored
   const dword LARGE_ARRAY_2_SIZE = FAT32_FILES_MAX               -- choose number of array variables
   const dword LARGE_ARRAY_2_VARIABLE_SIZE = FAT32_ENTRIES_MAX    -- choose bytes size of variables
   include large_array_2                    -- include the array library
   ALIAS entry_location is large_array_2
elsif FAT32_USE_INTERNAL_MEMORY == FALSE THEN
   -- put your own code here if you wish to allow massive amounts of files per directory

   -- example usage of 23k256 for external memory

   -- spi is required by 23k256, so set it up.
   -- if we are using an sd card, we already initilized the SPI bus, so skip this.
   if defined(sd_init) == false then  -- if we are using an sd card, we already did this step
      include spi_master_hw        -- includes the spi library
      -- define spi inputs/outputs
      pin_sdi_direction = input    -- spi input
      pin_sdo_direction = output   -- spi output
      pin_sck_direction = output   -- spi clock
      --
      spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
   end if

   -- setup 23k256 for external memory
   -- setup chip select pin
   ALIAS sram_23k256_chip_select             is pin_a2
   ALIAS sram_23k256_chip_select_direction   is pin_a2_direction
   -- initial settings
   sram_23k256_chip_select_direction = output    -- chip select/slave select pin
   sram_23k256_chip_select = high                -- start chip slect high (chip disabled)
   -- initalize 23k256 in byte mode
   include sram_23k256 -- setup Microchip 23k256 sram
   sram_23k256_init(SRAM_23K256_SEQUENTIAL_MODE, SRAM_23K256_HOLD_DISABLE)  -- init 23k256 in sequential mode

  -- alias the 23k256 device word array
  ;alias entry_location is sram_23k256_byte  -- highest file entry address can be 256
   alias entry_location is sram_23k256_word   -- highest file entry address can be 65535
END IF
--
include fat32   -- include fat32 library -- include fat32
--
-- CHOOSE FILE ATTRIBUTES TO FILTER OUT
fat32_filter_is_read_only  = FALSE
fat32_filter_is_hidden     = FALSE
fat32_filter_is_system     = FALSE
fat32_filter_is_volume_id  = FALSE
fat32_filter_is_directory  = FALSE
fat32_filter_is_archive    = FALSE

-- setup vs1053(b)
alias vs_cs_xcs                 is pin_e1                     -- command chip select pin
alias vs_cs_xcs_direction       is pin_e1_direction
alias vs_cs_dcs                 is pin_c0                     -- data chip select pin
alias vs_cs_dcs_direction       is pin_c0_direction
alias vs_dreq                   is pin_e2                     -- data request pin
alias vs_dreq_direction         is pin_e2
--
vs_cs_xcs_direction = output
vs_cs_dcs_direction = output
vs_dreq_direction = input
--
vs_cs_xcs = high -- disable command chip select
vs_cs_dcs = high -- disable data chip select
--
-- select weather or not to switch SPI modes before every read/write
-- needed if using more then one component on the SPI bus.
const byte VS_ALWAYS_SET_SPI_MODE = TRUE
--
include mp3_decoder_vs1053b
vs_init()

include random -- include random number generator to play random files
function random_byte_choose(byte in low_data, byte in high_data) return byte is
   pragma inline

   var byte randome_byte
   randome_byte = byte(random_word())

   while (randome_byte < low_data) | (randome_byte > high_data) loop
      randome_byte = byte(random_word())
   end loop

   return randome_byte
end function

-- user procedures

-- procedure for sending 80 "-----------------" via serial port
procedure next() is
   serial_hw_write (13)-- send (carriage return, line feed) characters to serial port
   serial_hw_write (10)
   for 80 loop
      serial_hw_write ("-")
   end loop
   serial_hw_write (13)-- send (carriage return, line feed) characters to serial port
   serial_hw_write (10)
end procedure

next()

spi_init(SPI_MODE_00,SPI_RATE_FOSC_16) -- init spi, choose mode and speed

include print
var word junk
vs_register_read(VS_REG_MODE,junk)
print_word_dec(serial_hw_data, junk)
serial_hw_write (13)-- send (carriage return, line feed) characters to serial port
serial_hw_write (10)

;forever loop
;end loop



-- start of main program
fat32_init(1)       -- initialize fat32, go to 1st primary partition's root dir "\"

------------------------------------------------------------
-- list a directory, send it via serial port
------------------------------------------------------------
fat32_list_dir() -- see the procedure, sends dir listing via serial port

------------------------------------------------------------
-- example user interaction,
-- if volume id selected, list the current dir (root dir)
-- if directory selected go into it and list it
-- if file selected go into a mp3 file and play it
--
-- see enable_user_interaction = FALSE in this example
------------------------------------------------------------

var byte file_number = 0
var dword count8 = 0
var bit play = true
var byte sta_command
var byte x
forever loop

   next() -- send "-----" then loop and wait for user input

   -- wait for user to send serial data (file selection)
   while !serial_hw_data_available loop
   end loop
   file_number = serial_hw_data

   -- display the filename chosen
   format_word_dec(serial_hw_data,file_number,6,0) -- send the file number
   serial_hw_write (".")
   serial_hw_write (" ")
   fat32_read_file_info(file_number) -- read file's name, location, size, attributes into memory
   fat32_read_filename()             -- send the file name via serial port

   next() -- send "-----" then loop and wait for user input

   -- choose a file for reading or dir for opening
   if fat32_cd(file_number) then            -- if change directory is successful
      fat32_list_dir()                      -- sends dir listing via serial port
   elsif fat32_file_open(file_number) then  -- if go into file is successful

      -------------------------------------------------------------------------
      -- use more functions of the lib, see the advance example below
      var byte enable_user_interaction = FALSE
      -------------------------------------------------------------------------

      -- basic example if enable_user_interaction = TRUE  (slower data transfer)
      if enable_user_interaction == TRUE then
         count8 = 0
         for (fat32_file_size / 512) loop
            fat32_start_read (fat32_file_location + count8)  -- go in the file, get ready to read
            fat32_read_sector()   -- read one sector of the file
            fat32_stop_read ()    -- end of file, set media idle
            -- now send it to sta015
            var word count1 = 0                         -- sector data count
            for 512 loop                                -- loop till end of sector read
               ;sdi_send(fat32_sector_buffer[count1]) -- send data to sta015
               count1 = count1 + 1
            end loop
            count8 = count8 + 1
         end loop



      -- advanced example if enable_user_interaction = FALSE   (faster data transfer)
      elsif enable_user_interaction == FALSE then
         count8 = 0
         for (fat32_file_size / 512) loop
            fat32_start_read (fat32_file_location + count8)  -- go in the file, get ready to read
            fat32_read_sector()  -- read one sector
            fat32_stop_read ()   -- end of file, set media idle

            -- now send it to vs1053b
            -- set 0,1
            SSPCON_CKP = 0
            SSPSTAT_CKE = 1

            -- enable chip select on sta015
;            sta015_bit_en = high
            vs_cs_dcs = low
            
            var word count1 = 0                      -- sector data count
            for 16 loop                             -- loop till end of sector read
               while vs_dreq == low loop -- wait till data gets requested
               end loop

               for 32 loop
                  spi_master_hw = (fat32_sector_buffer[count1])
                  count1 = count1 + 1
               end loop
            end loop


            vs_cs_dcs = high

;            sta015_bit_en = low   -- enable chip select

            count8 = count8 + 1
         end loop

      end if
   end if
end loop
