-- Title: servo control library
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This library moves a servo such as a servo used in radio control (RC)
--              and also turns a led on and off after each movement.
--
-- Sources:
-- http://www.horrorseek.com/home/halloween/wolfstone/Motors/svoint_RCServos.html
--
-- notes:
-- see notes in library file servo.jal
--

-- include chip
include 18F452                   -- target picmicro

-- This program assumes a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  disabled        -- no watchdog
pragma target LVP  disabled        -- no Low Voltage Programming

enable_digital_io()                -- disable analog I/O (if any)

-- led definition
alias led                is pin_a0
alias led_direction      is pin_a0_direction
--
led_direction = output

-- aliases timer0 for 18f PICs (remove if you are using 16f)
-- timer0 is used by servo.jal
alias option_reg_t0cs is t0con_t0cs
alias option_reg_psa is t0con_psa
alias option_reg_ps IS t0con_t0ps

-- setup servo pins
alias servo_1             is pin_b0
alias servo_1_direction   is pin_b0_direction
servo_1_direction = output
--
alias servo_2             is pin_b1
alias servo_2_direction   is pin_b1_direction
servo_2_direction = output
--
;alias servo_3             is pin_b2
;alias servo_3_direction   is pin_b2_direction
;servo_3_direction = output
;--
;alias servo_4             is pin_b3
;alias servo_4_direction   is pin_b3_direction
;servo_4_direction = output
;--
;alias servo_5             is pin_b4
;alias servo_5_direction   is pin_b4_direction
;servo_5_direction = output
;--
;alias servo_6             is pin_b5
;alias servo_6_direction   is pin_b5_direction
;servo_6_direction = output
;--
;alias servo_7             is pin_b6
;alias servo_7_direction   is pin_b6_direction
;servo_7_direction = output
;--
;alias servo_8             is pin_b7
;alias servo_8_direction   is pin_b7_direction
;servo_8_direction = output

-- set number of servos
const byte SERVO_AMOUNT = 2
-- set movement resolution
const byte SERVO_RESOLUTION = 10
-- with resolution = 10
const byte SERVO_MIN   = 80
const byte SERVO_MAX   = 235
--
include servo -- include the servo library
servo_init()

servo_move(127,1) ;start servo 1 centered
servo_move(127,2) ;start servo 2 centered

-- move both servo's in opposite directions
forever loop
   led = !led
   _usec_delay(500_000)
   servo_move(0,1)          ;move all the way to one side
   servo_move(256,2)

   led = !led
   _usec_delay(500_000)
   servo_move(127,1)        ;move to center
   servo_move(127,2)

   led = !led
   _usec_delay(500_000)
   servo_move(256,1)        ;move all the way to the other side
   servo_move(0,2)
   
   led = !led
   _usec_delay(500_000)
   servo_move(127,1)        ;move to center
   servo_move(127,2)
end loop

