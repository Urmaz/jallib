-- ------------------------------------------------------
-- Title: Test program for serial_hw_int_cts.jal
--
-- Author: Joep Suijs, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by: Albert Faber
--
-- Compiler: >=2.4l
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: test program for serial hardware lib using interrutps.
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--
-- Sources:
--
-- Notes: 
--    setup: a serial connection to a terminal
--
-- ------------------------------------------------------
--
-- This file has been generated from:
--    * board: board_18F4550_AF.jal
--    * test : test_serial_hw_int_cts.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P2          -- OSC1_OSC2_SRC_1_96MHZ_PLL_SRC_2
pragma target USBPLL        F48MHZ      -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V20         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           DISABLED    -- no watchdog
pragma target CCP2MUX       pin_C1      -- CCP2 pin
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

;@jallib section led
-- LED IO definition
alias led is pin_b3
alias led_direction is pin_b3_direction
alias led2 is pin_b1
alias led2_direction is pin_b1_direction

include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200

alias serial_ctsinv  is  pin_B4        -- incoming data flow control
var  bit serial_overflow_discard = true   -- With transmit buffer overflow

include serial_hw_int_cts
serial_hw_init()

include print                       -- output library

led_direction = output
for 4 loop
   LED = on
   delay_100ms(3)
   LED = off
   delay_100ms(3)
end loop



const byte str1[] = "Hello serial world\r\n"   -- define a string
print_string(serial_hw_data, str1)  -- output string to serial

-- inform user PIC is ready !
serial_hw_write("!")

-- let's build our loop
var byte char	-- will store received char
var word counter = 10
forever loop
	if serial_hw_read(char)	then

      if (char == " ") then
         -- space triggers large output
         for 40 loop 
            var byte i
            for 9 using i loop
               serial_hw_data = i | 0x30  
            end loop      
         end loop        
         counter = 50000  -- restart timeout (don't let the dot interfere)
      else
   		serial_hw_write(char)	-- that's the echo...
      end if
	end if
	
	counter = counter - 1;
	if (counter == 0) then
	   counter = 50000
      serial_hw_data = "."	   
      LED = ! LED
   end if
end loop
