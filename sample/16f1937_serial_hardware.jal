-- ------------------------------------------------------
-- Title: Sample echo program for serial_hardware.jal for 16F1937
--
-- Author: Rob Hamerling, Copyright (c) 2008..2010, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4n
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Sample use of serial_hw_int_cts library for PIC16F1937
-- Echoes all data received from the serial interface.
-- Input flow control by CTS signalling makes sure buffer will not be overflowed
-- (provided the sender has CTS output flow control enabled!)
--
-- Sources:
--
-- Notes: Uses internal oscillator at 8 MHz with PLL enabled (32 MHz)
--
-- ------------------------------------------------------

include 16f1937

pragma target   clock  32_000_000           -- osc frequency
pragma target   OSC    INTOSC_NOCLKOUT      -- internal oscillator
pragma target   WDT    disabled             -- no watchdog
pragma target   PWRTE  enabled              -- powerup delay
pragma target   LVP    disabled             -- no low voltage programming
pragma target   DEBUG  disabled             -- no debug
pragma target   PLLEN  P4                   -- enable PLL

OSCCON_IRCF = 14                            -- set 8 MHz (with PLL -> 32 MHz)

enable_digital_io()

-- setup the serial interface
const serial_hw_baudrate = 115200           -- line speed
alias serial_ctsinv  is pin_C5              -- incoming data flow control
pin_C5_direction     =  OUTPUT
var  bit serial_overflow_discard = false    -- no transmit buffer overflow
include serial_hw_int_cts                   -- the library
serial_hw_init()                            -- init the serial interface

include print                               -- formatting routines

var   byte str1[] = " PIC "
print_string(serial_hw_data, str1)          -- sent 'PIC'
print_string(serial_hw_data, PICTYPE)       -- sent PIC type after reset
serial_hw_data = " "                        -- space

var byte char
forever loop
   if (serial_hw_read(char) == true) then   -- char received
      serial_hw_write(char)                 -- echo incoming char
   end if
end loop

