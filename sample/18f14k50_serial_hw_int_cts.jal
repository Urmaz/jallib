-- ------------------------------------------------------
-- Title: Test program for serial_hw_int_cts.jal
--
-- Author: Joep Suijs, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by: 
--
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: test program for serial hardware lib using interrutps.
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--
-- Sources:
--
-- Notes: 
--    setup: a serial connection to a terminal
--
-- ------------------------------------------------------
--
-- This file has been generated from:
--    * board: board_18f14k50_af.jal
--    * test : test_serial_hw_int_cts.jal
--

;@jallib section chipdef
-- chip setup
include 18f14k50

-- This file is the setup for my homebrew, 18f14k50 board
-- Currently it is a bare board, with just a PIC and a couple of headers
-- A 12 MHz external crystal and 15pf caps connected to OSC1/2
-- pin 17 (Vusb) with a 220 nF capacitor to the ground
-- The connection between PC and the 18F14k50
-- +5v to power the board (don't forget 100nf decoupling cap
-- data- wire to pin 18 (D-)
-- data+ wire to pin 19 (D+)
-- ground wire to the Vss of the PIC
-- even though the external crystal is 12 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target CPUDIV		NO_CPU_SYSTEM_CLOCK_DIVIDE
pragma target USBDIV		USB_CLOCK_COMES_DIRECTLY_FROM_THE_OSC1_OSC2_OSCILLATOR_BLOCK__NO_DIVIDE
pragma target OSC				HS
pragma target PLLEN			OSCILLATOR_MULTIPLIED_BY_4
pragma target FCMEN			DISABLED
pragma target IESO			DISABLED
pragma target PWRTE			DISABLED	-- power up timer
pragma target BROWNOUT	DISABLED	-- no brownout detection
pragma target VOLTAGE		V30			-- brown out voltage
pragma target WDT				DISABLED    -- no watchdog
pragma target WDTPS			P32768		-- watch dog saler setting
pragma target MCLR			INTERNAL	-- no master reset
pragma target LVP				DISABLED    -- no low-voltage programming
pragma target XINST			ENABLED		-- extended instruction set
pragma target BACKBUG		DISABLED	-- background debugging
pragma target CP_0			DISABLED	-- code block 0 not protected
pragma target CP_1			DISABLED	-- code block 1 not protected
pragma target CPB				DISABLED	-- bootblock code not write protected
pragma target WRT_0			DISABLED	-- table writeblock 0 not protected
pragma target WRT_1			DISABLED	-- table write block 1 not protected
pragma target WRTB			DISABLED	-- bootblock not write protected
pragma target WRTC			DISABLED	-- config not write protected
pragma target EBTR_0		DISABLED	-- table read block 0 not protected
pragma target EBTR_1		DISABLED	-- table read block 1 not protected
pragma target EBTRB 		DISABLED	-- boot block not protected    
pragma target HFOFST 	THE_SYSTEM_CLOCK_IS_HELD_OFF_UNTIL_THE_HFINTOSC_IS_STABLE

;@jallib section led
-- LED IO definition
var bit led             is pin_c4
var bit led_direction   is pin_c4_direction
var bit led2            is pin_c6
var bit led2_direction  is pin_c6_direction

include delay

-- set all IO as digital
enable_digital_io()

-- ok, now setup serial;@jallib section serial
const serial_hw_baudrate = 115_200

var  bit serial_ctsinv  is  pin_B4        -- incoming data flow control
var  bit serial_overflow_discard = true   -- With transmit buffer overflow

include serial_hw_int_cts
serial_hw_init()

include print                       -- output library

led_direction = output
for 4 loop
   LED = on
   delay_100ms(3)
   LED = off
   delay_100ms(3)
end loop



const byte str1[] = "Hello serial world\r\n"   -- define a string
print_string(serial_hw_data, str1)  -- output string to serial

-- inform user PIC is ready !
serial_hw_write("!")

-- let's build our loop
var byte char	-- will store received char
var word counter = 10
forever loop
	if serial_hw_read(char)	then

      if (char == " ") then
         -- space triggers large output
         for 40 loop 
            var byte i
            for 9 using i loop
               serial_hw_data = i | 0x30  
            end loop      
         end loop        
         counter = 50000  -- restart timeout (don't let the dot interfere)
      else
   		serial_hw_write(char)	-- that's the echo...
      end if
	end if
	
	counter = counter - 1;
	if (counter == 0) then
	   counter = 50000
      serial_hw_data = "."	   
      LED = ! LED
   end if
end loop
