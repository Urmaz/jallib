-- Title: Master part of i2c slave check bus test
-- Author: Sebastien Lelong, Copyright (c) 2008-2009, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.4i
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this test corresponds to the master part
-- of i2c hardware slave bus check testing program. It blinks a little,
-- then send a i2c command, then infinitely loop. 
-- This is a one-shot test, if you want to run it again, reset your PICs
-- (or switch the power off/on...)
--
-- Sources:
--
--
-- This file has been generated from:
--    * board: board_16f723_af.jal
--    * test : test_i2c_sw_master_check_bus.jal
--

;@jallib section chipdef

-- device include
include 16f723

-- Internal osc, running at 16 MHz
pragma target clock       16_000_000


-- fuses
pragma target OSC INTOSC_NOCLKOUT
pragma target WDT DISABLED
pragma target PWRTE DISABLED
pragma target MCLR INTERNAL
pragma target CP DISABLED
pragma target BROWNOUT DISABLED
pragma target VOLTAGE V19
pragma target  WDTCS STANDARD_WATCHDOG_TIMER_IS_SELECTED
pragma target PLLEN _16MHZ
pragma target DEBUG DISABLED
pragma target VCAPEN VCAP_FUNCTIONALITY_IS_ENABLED_ON_RA0
enable_digital_io()

;@jallib section led
-- LED IO definition
var bit led             is pin_a7
var bit led_direction   is pin_a7_direction
var bit led2            is pin_a6
var bit led2_direction  is pin_a6_direction


-- whether or not using the serial port
-- blink a little, then send i2c command
led_direction = output
for 8 loop
   led = on
   _usec_delay(250000)
   led = off
   _usec_delay(250000)
end loop

;@jallib section i2c
-- I2C io definition, using hardware I2C
var volatile bit i2c_scl            is pin_c3
var volatile bit i2c_scl_direction  is pin_c3_direction
var volatile bit i2c_sda            is pin_c4
var volatile bit i2c_sda_direction  is pin_c4_direction
-- i2c setup
const word _i2c_bus_speed = 4 ; 400kHz
const bit _i2c_level = true   ; i2c levels (not SMB)
include i2c_software                
i2c_initialize()

var byte i2c_tx_buffer[2]
var byte i2c_rx_buffer[1]
include i2c_level1
var byte icaddress = 0x1F	-- slave address, can be anything

-- go! If slave starts to flash at high speed,
-- it works !
-- dummy command
i2c_tx_buffer[0] = "."
var bit _trash = i2c_send_receive(icaddress, 1, 1)

forever loop
   -- reached the end of test
end loop
