-- Title: Program to test an i2c bus (using i2c hardware slave)
-- Author: Sebastien Lelong, Copyright (c) 2008-2009, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.4i
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this is a one shot test program. It's used to check if
-- i2c bus is properly operational. It requires an SSP/i2c enabled PIC
-- --
-- The idea is enable Start/Stop interrupts. When master sends something, whatever
-- the address, it should produce an interrupt on this slave. As soon as interrupt
-- is dealt with, a LED is flashing indefinitely (it also slowly blink when PIC is up)
--
-- Sources:
--
--
-- This file has been generated from:
--    * board: board_18f4550_af.jal
--    * test : test_i2c_hw_slave_check_bus.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV		DIVIDE_BY_5__20MHZ_INPUT_
pragma target CPUDIV		_OSC1_OSC2_SRC___1__96MHZ_PLL_SRC___2_
pragma target USBPLL		CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC			HS_PLL
pragma target FCMEN			DISABLED
pragma target IESO			DISABLED
pragma target PWRTE			DISABLED	-- power up timer
pragma target VREGEN		ENABLED		-- USB voltage regulator
pragma target VOLTAGE		V20			-- brown out voltage
pragma target BROWNOUT		DISABLED	-- no brownout detection
pragma target WDTPS			P32768		-- watch dog saler setting
pragma target WDT			DISABLED    -- no watchdog
pragma target CCP2MUX		RC1			-- CCP2 pin
pragma target PBADEN		DIGITAL		-- digital input port<0..4>
pragma target LPT1OSC		DISABLED	-- low power timer 1
pragma target MCLR			EXTERNAL	-- master reset on RE3
pragma target STVR			DISABLED    -- reset on stack over/under flow
pragma target LVP			DISABLED    -- no low-voltage programming
pragma target XINST			ENABLED		-- extended instruction set
pragma target BACKBUG		DISABLED	-- background debugging
pragma target CP_0			DISABLED	-- code block 0 not protected
pragma target CP_1			DISABLED	-- code block 1 not protected
pragma target CP_2			DISABLED	-- code block 2 not protected
pragma target CP_3			DISABLED	-- code block 3 not protected
pragma target CPB			DISABLED	-- bootblock code not write protected
pragma target CPD			DISABLED	-- eeprom code not write protected
pragma target WRT_0			DISABLED	-- table writeblock 0 not protected
pragma target WRT_1			DISABLED	-- table write block 1 not protected
pragma target WRT_2			DISABLED	-- table write block 2 not protected
pragma target WRT_3			DISABLED	-- table write block 3 not protected
pragma target WRTB			DISABLED	-- bootblock not write protected
pragma target WRTD			DISABLED	-- eeprom not write protected
pragma target WRTC			DISABLED	-- config not write protected
pragma target EBTR_0		DISABLED	-- table read block 0 not protected
pragma target EBTR_1		DISABLED	-- table read block 1 not protected
pragma target EBTR_2		DISABLED	-- table read block 2 not protected
pragma target EBTR_3		DISABLED	-- table read block 3 not protected
pragma target EBTRB 		DISABLED	-- boot block not protected

enable_digital_io()
;@jallib section led
-- LED IO definition
var bit led             is pin_b3
var bit led_direction   is pin_b3_direction
var bit led2            is pin_b1
var bit led2_direction  is pin_b1_direction

-- i2c setup
-- with Start/Stop interrupts
const bit i2c_enable_start_stop_interrupts = true
include i2c_hw_slave
const SLAVE_ADDRESS = 0x23 -- whatever, it's not important, and can be
						   -- different from the address the master wants
						   -- to talk to
-- this init automatically sets global/peripherals interrupts
i2c_hw_slave_init(SLAVE_ADDRESS)


-- Main ISR
procedure i2c_isr() is
   pragma interrupt
   if ! PIR1_SSPIF then
      return
   end if
   -- reset flag  
   PIR1_SSPIF = false
   -- tmp store SSPSTAT and mask out unimportant bit
   var byte tmpstat
   tmpstat = SSPSTAT
   -- check start signals
   if (tmpstat == 0b_1000) then
	  -- If we get there, this means this is an SSP/I2C interrupts
   	  -- and this means i2c bus is properly operational !!!
   	  while true loop
   	     led = on
   	     _usec_delay(100000)
   	     led = off
   	     _usec_delay(100000)
   	  end loop
   end if
end procedure

-- Blink a little when PIC is up
led_direction = output
for 4 loop
   led = on
   _usec_delay(250000)
   led = off
   _usec_delay(250000)
end loop

-- waiting for interrupts
forever loop
end loop