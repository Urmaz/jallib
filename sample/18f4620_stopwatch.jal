-- Title: Sample stopwatch
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This example shows basic usage stopwatch library which can
--              be used to time events
--
-- Sources:
--

-- include chip
include 18f4620                   -- target picmicro
-- this program assumes a 20 mhz resonator or crystal
-- is connected to pins osc1 and osc2.
pragma target osc INTOSC_NOCLKOUT              -- hs crystal or resonator
;pragma target osc hs              -- hs crystal or resonator
;pragma target clock 20_000_000    -- oscillator frequency
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  disabled
pragma target lvp  disabled
pragma target MCLR external        -- reset externally
--;
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = true  -- multiply internal osc by 4
;--
enable_digital_io()                -- make all pins digital I/O
--
_usec_delay(100_000) -- wait for power to settle


include delay

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


include print

-- set stopwatch variable size, (2 = word) or (4 = dword)
const STOPWATCH_VAR_SIZE = 4 -- (4 is default if not defined)
--
-- the lowest time unit to measure
const STOPWATCH_MIN_VALUE = STOPWATCH_NS -- (STOPWATCH_NS is default if not defined)
--
-- choose what timer to use
const STOPWATCH_USE_TIMER = 1 -- (1 is default if not defined)
include stopwatch -- include the library
--
stopwatch_init()

-- main program here

-- print serial start characters
print_crlf(serial_hw_data)
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = " "

stopwatch_start() -- start the stopwatch

-- create some delay to measure
asm nop
;delay_1us() -- some delay
;delay_1ms(1) -- some delay
;delay_1s(1) -- some delay

stopwatch_stop() -- stop the stopwatch

-- print error message if stopwatch time was too long
if stopwatch_time_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error1[] = "Stopwatch time overflow error occurred"
   print_string(serial_hw_data, error1)
end if

-- print error message if stopwatch instruction count ran too long
if stopwatch_cycle_overflow == TRUE then
   print_crlf(serial_hw_data)
   const byte error2[] = "Stopwatch instruction cycle overflow error occurred"
   print_string(serial_hw_data, error2)
end if

-- measure instructions run and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch_cycles)
const byte instructions[] = " instruction(s)"
print_string(serial_hw_data, instructions)

-- measure time taken and print it to serial port
print_crlf(serial_hw_data)
print_dword_dec(serial_hw_data, stopwatch)

-- print the time unit of measurement
if STOPWATCH_MIN_VALUE == STOPWATCH_NS then
   serial_hw_data = "n"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_US then
   serial_hw_data = "u"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_MS then
   serial_hw_data = "m"
   serial_hw_data = "s"
elsif STOPWATCH_MIN_VALUE == STOPWATCH_S then
   serial_hw_data = "s"
end if

-- print serial end characters
print_crlf(serial_hw_data)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"