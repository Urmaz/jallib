-- ------------------------------------------------------
-- Title: Test a chain of 8x8 LED matrices with MAX7219 chips
--
-- Author: Rob Hamerling, Copyright (c) 2014..2014, all rights reserved.
--
-- Adapted-by:
--
-- Revision: $Revision$
--
-- Compiler: 2.4q2
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Simple program to test the max7219n library.
-- Most procedures and functions are called at least once,
-- with different arguments to show the capabilities of
-- a chain of 3 ready-built PCBs with 8x8 led matrix display.
--
-- Sources:
--
-- Notes: See also samples for a single MAX7219 module
--
-- ------------------------------------------------------
--
-- This file has been generated by jallib.py from:
--    * board: board_18f2450_af.jal
--    * test : test_max7219n.jal
--

;@jallib section chipdef
-- chip setup
include 18f2450

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz since pragma target CPUDIV is P1
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 (20 MHz)
pragma target CPUDIV        P1          -- [primary oscillator src: /1][96 mhz pll src: /2]
pragma target USBDIV        P2          -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL      -- hs + pll, usb hs
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V21         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog scaler setting
pragma target WDT           CONTROL     -- watchdog software controlled
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          INTERNAL    -- no master reset
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTRB         DISABLED    -- boot block not protected

WDTCON_SWDTEN = OFF                     -- disable watchdog

-- setup MAX7219n
alias max7219_din  is pin_A0
alias max7219_cs   is pin_A1
alias max7219_clk  is pin_A2

pin_A0_direction = OUTPUT
pin_A1_direction = OUTPUT
pin_A2_direction = OUTPUT

const bit MAX7219_DISPLAY_CACHE = TRUE   -- use cache

const byte MAX7219_NUM = 3           -- 3 chained MAX7219 modules

include max7219n                     -- library for the MAX7219
delay_1s(1)                          -- power up delay before init
max7219_init()                       -- initalize the MAX7219

var byte i,j

forever loop

   max7219_display_clear()
   max7219_display_test(5)
   max7219_display_intensity(MAX7219_DISPLAY_PWM3)

   for MAX7219_NUM using i loop
      for 8 using j loop
         max7219_display_col(i, j, TRUE)
         delay_100ms(2)
         max7219_display_col(i, j, FALSE)
      end loop
   end loop

   for 8 using i loop
      for MAX7219_NUM using j loop
         max7219_display_row(j, i, TRUE)
      end loop
      delay_100ms(2)
      for MAX7219_NUM using j loop
         max7219_display_row(j, i, FALSE)
      end loop
   end loop

   for 8 using i loop
      max7219_display_bit(0, i, i, TRUE)
      delay_100ms(1)
   end loop
   for 8 using i loop
      max7219_display_bit(1, i, 7 - i, TRUE)
      delay_100ms(1)
   end loop
   for 8 using i loop
      max7219_display_bit(2, i, i, TRUE)
      delay_100ms(1)
   end loop

   max7219_display_blink(3,3)             -- blink

   for 16 using i loop                    -- intensity range
      max7219_display_intensity(i)
      delay_100ms(2)
   end loop

   max7219_display_intensity(MAX7219_DISPLAY_PWM3)

   const byte v[] = {24,60,126,255}
   const byte h[] = {24,36,66,129}
   for 4 using i loop                     -- big bang
      for 4 using j loop
         if j < i then
            max7219_display_byte_bin(1, 3 - j, h[i])
            max7219_display_byte_bin(1, 4 + j, h[i])
         elsif j == i then
            max7219_display_byte_bin(1, 3 - j, v[i])
            max7219_display_byte_bin(1, 4 + j, v[i])
         else
            max7219_display_byte_bin(1, 3 - j, 0)
            max7219_display_byte_bin(1, 4 + j, 0)
         end if
      end loop
      delay_100ms(3)
   end loop
   delay_100ms(5)

   const byte s[] = {60,66,165,141,141,165,66,60}
   for 8 using i loop
      max7219_display_byte_bin(1, i, s[i])
   end loop
   for 3 using i loop
      delay_100ms(5)
      max7219_display_bit(1, 5, 5, FALSE)
      delay_100ms(2)
      max7219_display_bit(1, 5, 5, TRUE)
   end loop
   delay_100ms(5)

end loop
