-- Title: test timer0 interval
--
-- Author: Joep Suijs, Copyright (c) 2008, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4g
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: test the library timero_isr_interval
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
-- 
-- Notes:
--          
--
-- This file has been generated from:
--    * board: board_16f88_js.jal
--    * test : test_timer0_interval.jal
--

;@jallib section chipdef
-- chip setup
include 16f88

;-- 
;-- This setup assumes a 20 MHz resonator or crystal
;-- is connected to pins OSC1 and OSC2.
pragma target OSC       HS             -- HS crystal or resonator
pragma target clock     20_000_000     -- oscillator frequency
pragma target WDT       disabled       -- no watchdog
pragma target LVP       disabled       -- no low-voltage programming
pragma target CCP1MUX   RB3            -- ccp1 pin on B3

--
-- This setup uses the internal oscillator
;pragma target OSC       INTOSC_NOCLKOUT   -- HS crystal or resonator
;pragma target clock     8_000_000         -- oscillator frequency
;pragma target WDT       disabled          -- no watchdog
;pragma target LVP       disabled          -- no low-voltage programming
;pragma target CCP1MUX   RB3               -- ccp1 pin on B3
;OSCCON_IRCF = 7                           -- set prescaler to 1 (8 MHz)

;@jallib section led
-- LED IO definition
var bit led             is pin_b3
var bit led_direction   is pin_b3_direction
var bit led2            is pin_b1
var bit led2_direction  is pin_b1_direction

led_direction = output
led2_direction = output

-- set all IO as digital
enable_digital_io()

-- setup the timer0_isr_interval library
const timer0_isr_rate = 1000  -- 1 kHz isr rate
const DELAY_SLOTS = 2         -- support 2 delays at the same time
include timer0_isr_interval
timer0_isr_init()             -- init timer0 isr

var word prev_isr_counter

   forever loop   
      
      if (isr_counter != prev_isr_counter) then
         prev_isr_counter = isr_counter
         -- put here code that you want  
         -- to execute each tick.               
      end if ; 1 kHz loop   
           
      if (check_delay(0)) then
         set_delay(0, 409) -- 409 ticks on delay-slot 0
         led = !led                  
      end if
      if (check_delay(1)) then
         set_delay(1, 619) -- 619 ticks on delay-slot 1
         led2 = !led2
      end if
   end loop

; end of main
