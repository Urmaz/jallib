-- Title: Sample file for CRC data error checking.
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4m
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample shows usage of the CRC library which can be used
--              to create or verify crc data.
--
-- Notes:
--
-- Sources:
-- http://www.ece.unb.ca/tervo/ee4253/crc.shtml
-- http://en.wikipedia.org/wiki/Cyclic_redundancy_check
--

include 18f4620                    -- target PICmicro
--
-- This program assumes a 20 MHz resonator or crystal
-- is connected to pins OSC1 and OSC2.
-- Unspecified configuration bits may cause a different frequency!
pragma target clock 20_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target OSC  HS              -- HS crystal or resonator
pragma target WDT  disabled        -- no watchdog
pragma target LVP  disabled        -- no Low Voltage Programming
pragma target MCLR external        -- reset externally

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()

include crc

-- Imaginary master device code
const byte poly = 0b1101                -- choose a polynomial
var byte crc                            -- holds 3-bit crc data
crc = crc_3_byte_create(poly, 0b110010) -- create the crc data

-- Imaginary data transmission here

-- Imaginary slave device code
const byte poly2 = 0b1101                              -- use same polynomial
var byte is_good_data                                  -- holds true or false
is_good_data = crc_3_byte_verify(poly2, 0b110010, crc) -- verify crc data

forever loop -- now do something after data has been recieved
   _usec_delay (1_000_000)
   
   -- sends 3-bit crc data
   serial_hw_data = (crc)
   
   -- You will receive TRUE, unless the data input for
   -- create function is different then data input for
   -- verify function
   serial_hw_data = (is_good_data)
end loop

