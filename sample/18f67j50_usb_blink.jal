-- ------------------------------------------------------
-- Title: Blink-a-led of the Microchip pic18f67j50 (with USB)
--
-- Author: Rob Hamerling, Copyright (c) 2008..2011, all rights reserved.
--
-- Adapted-by:
--
-- Compiler: 2.4o
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description:
-- Sample blink-a-led program for Microchip PIC18f67j50.
-- The program assumes a 20 MHz crystal is connected to OSC1/OSC2,
-- but the CPU will be running at 48 MHz via the PLL module.
-- Check: the LED should be blinking twice a second!
--
-- Sources:
--
-- Notes:
--  - File creation date/time: 27 Jul 2011 14:08:06.
--
-- ------------------------------------------------------
--
include 18f67j50                   -- target PICmicro
--
-- Compiler directives
pragma target CLOCK    48_000_000  -- CPU frequency
--
-- Configuration memory settings (fuses)
pragma target OSC      HS_PLL      -- HS crystal or resonator
--                                    and using PLL
pragma target PLLDIV   P5          -- reduce OSC 20->4 MHz for PLL input
pragma target CPUDIV   P1          -- CPU freq. from PLL(96/2): 48 MHz
pragma target FCMEN    DISABLED    -- no fail-safe clock monitoring
pragma target IESO     DISABLED    -- no int/ext clock switchover
pragma target WDT      DISABLED    -- no watchdog
pragma target XINST    DISABLED    -- not supported by JalV2
pragma target DEBUG    DISABLED    -- no debugging
--
-- Note: Not specified:
--       Code protection, Boot Block Code protection, Data EEPROM protection,
--       Write protection, Configuration Memory write protection,
--       Table Read protection, Boot Block Table Read protection,
--       and maybe some other configuration bits.
--
enable_digital_io()                -- make all pins digital I/O
--
OSCTUNE_PLLEN = enabled            -- activate PLL module
--
-- Specify the pin to which the LED (with serial resistor!) is connected:
alias   led      is pin_A0
pin_A0_direction =  output
--
forever loop
   led = !led                      -- flip on->off or off>on
   _usec_delay(249_999)            -- for blinking at 2 Hz
end loop
--
