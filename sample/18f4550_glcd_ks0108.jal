-- Title: Test program for i2c hardware slave, message interface implementation
-- Author: Joep Suijs, Copyright (c) 2008-2009, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.4m
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample shows how to implements an i2c hardware slave,
-- using the message interface lib. Basically, this i2c slave waits for
-- a full message to arrive and then calls a user routine to process the message and
-- (optional) prepare a response.
--
--
-- This file has been generated from:
--    * board: board_18f4550_af.jal
--    * test : test_glcd_ks0108.jal
--

;@jallib section chipdef
-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P2          -- OSC1_OSC2_SRC_1_96MHZ_PLL_SRC_2
pragma target USBPLL        F48MHZ      -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       MINIMUM     -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           DISABLED    -- no watchdog
pragma target CCP2MUX       ENABLED     -- CCP2 pin C1
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected




;@jallib section glcd
-- GRAPHIC_LCD IO definition
var volatile byte GLCD_DATAPRT     is portd
var volatile byte GLCD_DATAPRT_DIR is portd_direction

var volatile bit GLCD_RW  is pin_b4
var volatile bit GLCD_CS1 is pin_b0
var volatile bit GLCD_E   is pin_b5
var volatile bit GLCD_DI  is pin_b2
var volatile bit GLCD_RST is pin_c0
var volatile bit GLCD_CS2 is pin_b1

var volatile bit GLCD_RW_DIRECTION  is pin_b4_direction
var volatile bit GLCD_CS1_DIRECTION is pin_b0_direction
var volatile bit GLCD_E_DIRECTION   is pin_b5_direction
var volatile bit GLCD_DI_DIRECTION  is pin_b2_direction
var volatile bit GLCD_RST_DIRECTION is pin_c0_direction
var volatile bit GLCD_CS2_DIRECTION is pin_b1_direction

;@jallib section led
-- LED IO definition
alias led is pin_b3
alias led_direction is pin_b3_direction
alias led2 is pin_b1
alias led2_direction is pin_b1_direction
led_direction = output

-- setup serial (see echo.jal for more details);@jallib section serial
const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

include print
include random

include delay     
include glcd_ks0108      
include glcd_common
lcd_init()

const byte str1[] = "Test graph display.      "      -- define a string
print_string(serial_hw_data, str1)                 -- output string

lcd_box  ( 0,0, 127,63)  
     
include print

-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
-- Game of Life - 
-- ----------------------------------------------------------------------------
-- Game of Life is a cool way to demo your graphic screen. 
-- Note that GOL directly works on the LCD for efficency. 
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------

var byte gol_first_column[9]
var byte gol_prev_column[9]
var byte gol_this_column[9]
var byte gol_next_column[9]

var byte gol_output_column[9]

-- ----------------------------------------------------------------------------
const byte power[] = { 1, 2, 4, 8, 16, 32, 64, 128 }
-- ----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------  
-- gol_get_bit - get one bit from a colomn
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
function gol_get_bit(byte in row_nr, byte in column[9]) return bit is
   
   var byte byte_nr = (row_nr >> 3) & 0x07
   var byte bit_nr  = row_nr & 0x07
   
   return ((column[byte_nr] & power[bit_nr]) != 0)
   
end function

-- ----------------------------------------------------------------------------
-- gol_set_outbit - set one bit in gol_output_column
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_set_outbit(byte in row_nr) is
   
   var byte byte_nr = (row_nr >> 3) & 0x07
   var byte bit_nr  = row_nr & 0x07

;   var bit*3 byte_nr at row_nr : 3
;   var bit*3 bit_nr  at row_nr : 0

   gol_output_column[byte_nr] = gol_output_column[byte_nr] | power[bit_nr]
            
end procedure



-- ----------------------------------------------------------------------------
-- gol_randomize - Game of Life _ Randomize screen
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_randomize() is
   var byte x, y, r
   
   for 8 using y loop 
      for 128 using x loop     
         r =  random_byte()
         ks0108_write_byte(x, y*8, r)
      end loop
   end loop 
end procedure

-- ----------------------------------------------------------------------------
-- gol_read_column - read the designated column from display memeory
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_read_column(byte in col_nr, byte out column[9]) is
   var byte y        
   if (col_nr < 127) then
      -- real read
      for 8 using y loop
         column[y] = ks0108_read_byte(col_nr, y * 8)
      end loop      
   else
      -- get copy of first column
      for 8 using y loop
         column[y] = gol_first_column[y]
      end loop      
   end if

end procedure       


procedure gol_print_column(byte in column[9]) is
   var byte i  
   var bit b
   
   for 64 using i loop
      b = gol_get_bit(i, column)
      if (b) then
         serial_hw_data = "*"
      else
         serial_hw_data = "."
      end if
   end loop 
   print_crlf(serial_hw_data)
end procedure

-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_write_column(byte in col_nr) is
   var byte y        
   for 8 using y loop
      ks0108_write_byte(col_nr, y * 8, gol_output_column[y])
   end loop      
end procedure

-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_copy_column(byte in in_column[9], byte out out_column[9]) is
   var byte x
   for 8 using x loop
      out_column[x] = in_column[x]
   end loop      
end procedure

-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_clear_column(byte in out column[9]) is
   var byte x
   for 8 using x loop
      column[x] = 0
   end loop      
end procedure

-- nbs - NumberofBitsSet     
--                  0  1  2  3  4  5  6  7
const byte nbs[] = {0, 1, 1, 2, 1, 2, 2, 3}

-- ----------------------------------------------------------------------------
-- gol_gen_column() - live a generation on a column
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_gen_column() is        
   var byte i
   var byte neighbours
   
   var byte bottom = 0
   var byte middle = 0
   var byte top    = 0

   var bit bottom_p at bottom : 0   
   var bit bottom_t at bottom : 1   
   var bit bottom_n at bottom : 2   

   var bit middle_p at middle : 0   
   var bit middle_t at middle : 1   
   var bit middle_n at middle : 2   

   var bit top_p at top : 0   
   var bit top_t at top : 1   
   var bit top_n at top : 2   

   middle_p = gol_get_bit(255, gol_prev_column)
   middle_t = gol_get_bit(255, gol_this_column)
   middle_n = gol_get_bit(255, gol_next_column)

   top_p = gol_get_bit(0, gol_prev_column)
   top_t = gol_get_bit(0, gol_this_column)
   top_n = gol_get_bit(0, gol_next_column)

   i = 1
   repeat
      -- shift one up
      bottom = middle
      middle = top   

      -- get new row
      top_p = gol_get_bit(i, gol_prev_column)
      top_t = gol_get_bit(i, gol_this_column)
      top_n = gol_get_bit(i, gol_next_column)

      neighbours = nbs[bottom] + nbs[(middle & 5)] + nbs[top]      
;print_byte_dec(serial_hw_data, neighbours)
;serial_hw_data = " "
      if (neighbours == 2) then
         -- remain the same
;         gol_set_outbit(i-1, (middle & 2) == 2)      
         if ((middle & 2) == 2) then
            gol_set_outbit(i-1)      
         end if
      elsif (neighbours == 3) then        
         -- become alive
         gol_set_outbit(i-1)       
      else              
         -- less then 2 or more then 3 = die
;         gol_set_outbit(i-1, false)                
      end if                 
      i = i + 1
   until i > 64

;   print_crlf(serial_hw_data)
;   gol_print_column(gol_prev_column)
;   gol_print_column(gol_this_column)
;   gol_print_column(gol_next_column)
;   gol_print_column(gol_output_column)
;   print_crlf(serial_hw_data)

   
end procedure

-- ----------------------------------------------------------------------------
-- gol_generation - live one generation
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure gol_generation() is
   var byte x

   gol_read_column(0, gol_first_column)
   gol_copy_column(gol_first_column, gol_this_column)

   for 128 using x loop
      gol_clear_column(gol_output_column)                -- clear output
      gol_copy_column(gol_this_column, gol_prev_column)  -- shift
      gol_copy_column(gol_next_column, gol_this_column)  -- shift
      gol_read_column(x+1, gol_next_column)              -- get new

      gol_gen_column()
      gol_write_column(x)            
   end loop             
   
end procedure





glcd_char_y_pos  = 20;  
glcd_char_x_pos = 20

   gol_randomize()

forever loop

;    line(0, 0, 64, 64)
;   print_string(lcd, str1)
;   glcd_box  ( 0,0, 127,63)  

if (false) then
   delay_100ms(5)

   -- fill with chars    
   var byte x, y, char;
   char = 32 
   for 9 using y loop 
      for 25 using x loop
         lcd_setcursor(y, x)
         lcd = char
         char = char + 1
         if (char > 122) then char = 32 end if   
      end loop
   end loop 
end if
   -- randomize

   gol_generation()   
;   delay_100ms(1)
   

   serial_hw_data = "+"

end loop
