-- Title: Debug sample
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4n
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Debug sample. The debug library has all the same functions
--              as the print library, but the user defines constants to turn on
--              and off this library and users debug levels.
--
-- Sources:
-- The jallib print library
--

-- include chip
include 18f4620                   -- target picmicro
-- this program assumes a 20 mhz resonator or crystal
-- is connected to pins osc1 and osc2.
pragma target osc INTOSC_NOCLKOUT              -- hs crystal or resonator
;pragma target osc hs              -- hs crystal or resonator
;pragma target clock 20_000_000    -- oscillator frequency
pragma target clock 32_000_000    -- oscillator frequency
--
pragma target wdt  CONTROL
pragma target lvp  disabled
pragma target MCLR external        -- reset externally
--;
;OSCCON_IRCF = 0b110   -- set int osc to 4mhz
OSCCON_IRCF = 0b111   -- set internal osc to 8mhz
OSCTUNE_PLLEN = true  -- multiply internal osc by 4
;--
enable_digital_io()                -- make all pins digital I/O
--
_usec_delay(100_000) -- wait for power to settle


-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available


alias debug_data is serial_data
const bit DEBUG_MASTER_ENABLE = TRUE    -- enables debugging
include debug
--
-- turn on and off debug levels.
debug_lvl_1 = ON
debug_lvl_2 = OFF
debug_lvl_3 = ON

-- we are alive!
for 10 loop
   serial_hw_data = "!"
end loop

var byte step = 0
forever loop
   -- Debug level 0
   const byte str1[] = "The loop has begun!"
   debug_string(1,str1)
   debug_crlf(1)

   -- Debug level 1
   debug_dword_dec(2,70_000)
   step = step + 1
   debug_crlf(2)

   -- Debug level 2
   debug_byte_dec(3,step)
   debug_crlf(3)

   -- delay 1 sec
   _usec_delay(500_000)
end loop
