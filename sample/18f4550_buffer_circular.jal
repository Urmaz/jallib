-- Title: Circular Buffer Example.
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4l
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Creates a circular buffer then sends buffer contents and
--              buffer status via serial port.
--
-- Sources:
-- http://en.wikipedia.org/wiki/Circular_buffer
--
-- Notes:
-- change BUFFER_1_SIZE to a byte if possible (if small buffer)
-- you may use the large array library to make a bigger buffer
--
-- Example:
-- const byte BUFFER_1_WIDTH = 2            -- choose width of buffer variables
-- const dword BUFFER_1_SIZE = 100          -- choose number of buffer variables
-- var byte*BUFFER_1_WIDTH buffer_1_array[BUFFER_1_SIZE] -- the buffer array
-- include buffer                           -- include buffer library
--

-- chip setup
include 18f4550

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV        P5          -- divide by 5 - 20MHZ_INPUT
pragma target CPUDIV        P2          -- OSC1_OSC2_SRC_1_96MHZ_PLL_SRC_2
pragma target USBPLL        F48MHZ      -- CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC           HS_PLL
pragma target FCMEN         DISABLED
pragma target IESO          DISABLED
pragma target PWRTE         DISABLED    -- power up timer
pragma target VREGEN        ENABLED     -- USB voltage regulator
pragma target VOLTAGE       V20         -- brown out voltage
pragma target BROWNOUT      DISABLED    -- no brownout detection
pragma target WDTPS         P32K        -- watch dog saler setting
pragma target WDT           DISABLED    -- no watchdog
pragma target CCP2MUX       pin_C1      -- CCP2 pin
pragma target PBADEN        DIGITAL     -- digital input port<0..4>
pragma target LPT1OSC       LOW_POWER   -- low power timer 1
pragma target MCLR          EXTERNAL    -- master reset on RE3
pragma target STVR          DISABLED    -- reset on stack over/under flow
pragma target LVP           DISABLED    -- no low-voltage programming
pragma target XINST         ENABLED     -- extended instruction set
pragma target DEBUG         DISABLED    -- background debugging
pragma target CP0           DISABLED    -- code block 0 not protected
pragma target CP1           DISABLED    -- code block 1 not protected
pragma target CP2           DISABLED    -- code block 2 not protected
pragma target CP3           DISABLED    -- code block 3 not protected
pragma target CPB           DISABLED    -- bootblock code not write protected
pragma target CPD           DISABLED    -- eeprom code not write protected
pragma target WRT0          DISABLED    -- table writeblock 0 not protected
pragma target WRT1          DISABLED    -- table write block 1 not protected
pragma target WRT2          DISABLED    -- table write block 2 not protected
pragma target WRT3          DISABLED    -- table write block 3 not protected
pragma target WRTB          DISABLED    -- bootblock not write protected
pragma target WRTD          DISABLED    -- eeprom not write protected
pragma target WRTC          DISABLED    -- config not write protected
pragma target EBTR0         DISABLED    -- table read block 0 not protected
pragma target EBTR1         DISABLED    -- table read block 1 not protected
pragma target EBTR2         DISABLED    -- table read block 2 not protected
pragma target EBTR3         DISABLED    -- table read block 3 not protected
pragma target EBTRB         DISABLED    -- boot block not protected
--
--
enable_digital_io()                      -- make all pins digital I/O
--

-- setup uart for communication
const serial_hw_baudrate  = 38400        -- set the baudrate
include serial_hardware
serial_hw_init()

-- include the print library
include print
;const byte string_crlf[2] = {13,10}      -- carriage return/line feed
const byte string_crlf[] = "\r\n"      -- carriage return/line feed

-- setup the buffer library
const byte BUFFER_1_WIDTH = 2            -- choose width of buffer variables
const dword BUFFER_1_SIZE = 100          -- choose number of buffer variables
--
-- setup the buffer array (if buffer is <= then 256 bytes)
var byte*BUFFER_1_WIDTH buffer_1_array[BUFFER_1_SIZE] -- the buffer array
-- setup the buffer array (if buffer is > then 256 bytes)
;const dword LARGE_ARRAY_1_SIZE = BUFFER_1_SIZE          -- choose number of array variables
;const dword LARGE_ARRAY_1_VARIABLE_SIZE = BUFFER_1_WIDTH    -- choose size of variables (byte*1)
;include large_array_1                    -- include the array library
;alias buffer_1_array is large_array_1    -- rename/alias the array to create buffer array
--
include buffer_circular                   -- include buffer library
-- rename your buffer
alias my_buffer is buffer_1_data
alias my_buffer_count is buffer_1_count
alias my_buffer_overflow is buffer_1_overflow
alias my_buffer_underrun is buffer_1_underrun
alias my_buffer_empty is buffer_1_empty
alias my_buffer_full is buffer_1_full


-- Main Program
_usec_delay(1_000_000)

-- send some start data
print_string(serial_hw_data,string_crlf)
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
print_string(serial_hw_data,string_crlf)


-- add data to buffer
for 100 loop
   my_buffer = 55
end loop

-- remove data from buffer
var byte*BUFFER_1_WIDTH data
for 50 loop
   data = my_buffer
end loop

-- Print the number of values stored in the buffer
const byte string1[] = "Number of values in buffer: "
print_string(serial_hw_data,string1)

print_word_dec(serial_hw_data,my_buffer_count)
print_string(serial_hw_data,string_crlf)

-- Print the buffer status
const byte string3[] = "Buffer status (full-empty|overflow-underrun): "
print_string(serial_hw_data,string3)

print_dword_dec(serial_hw_data, my_buffer_full)      -- TRUE if buffer is full
serial_hw_data = "-"
print_dword_dec(serial_hw_data, my_buffer_empty)     -- TRUE if buffer is empty
serial_hw_data = "|"
print_dword_dec(serial_hw_data, my_buffer_overflow)  -- TRUE if buffer overflow
serial_hw_data = "-"
print_dword_dec(serial_hw_data, my_buffer_underrun)  -- TRUE if buffer underrun
print_string(serial_hw_data,string_crlf)

-- Print the data that is stored in the buffer
const byte string2[] = "Data from buffer: "
print_string(serial_hw_data,string2)

var word counnt1 = my_buffer_count     -- get the number of values stored in the buffer
for counnt1 loop                       -- loop till all are sent
   data = my_buffer                    -- get data
   print_word_dec(serial_hw_data,data) -- send data via serial port
   serial_hw_data = ","                -- data seperator
end loop

-- the end
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
serial_hw_data = "!"
