-- ------------------------------------------------------
-- Title: Test program for lcd_hd44780_4 and lcd_hd44780_common (extended test)
--
-- Author: Richard Zengerink, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by: Joep Suijs
--
-- Compiler: >=2.4g
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Testing lcd_hd44780_4 and lcd_hd44780_common
-- This is to test all hd44780_common features. See test_lcd_*
-- for a basic display test.
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--
-- Sources:
--
-- Notes: 
-- setup: an hd44780 compatible display, used in 4-bit mode.
--
-- ------------------------------------------------------

enable_digital_io() -- disable analog I/O (if any)

;@jallib use chipdef
;@jallib use lcd_hd44780_4
;@jallib use led

-- ----------------------------------------------------------------------------
-- optionally include this file to gain access to the tc_var* variables
-- ----------------------------------------------------------------------------
include serial_tc_header


-- setup libs, io etc
lcd_rs_direction        = output
lcd_en_direction        = output
lcd_dataport_direction  = output

include print
include lcd_hd44780_4
include delay 
lcd_init()                              -- initialize LCD



   var byte data
   var word wvalue = 0
   var byte value = 0
   var byte value1 = 0
   var byte test = 0
   var byte hrs = 12
   var byte min = 55
   var byte sec = 40
   var byte year = 09
   var word yearw = 2009
   var byte month = 03
   var byte day = 23

   const byte teststring[] = "test display"

   lcd_cursor_position (1, 1)
   lcd_clear_screen()
   lcd_home()
   
   
   lcd = "T"
   lcd = "e"
   lcd = "s"
   lcd = "t"
;   delay_100ms (10)


-- -----------------------------------------------------------------------------
-- Define all unit tests required
-- (testname string constants are optional)
-- -----------------------------------------------------------------------------

-- test support function             
var byte testchar = "a"
procedure increment_testchar() is
   testchar = testchar + 1;
   if (testchar > "z") then 
      testchar = "a" 
   end if
end procedure
-- test support function end



const byte testname_a[] = "clear screen"
procedure unit_test_a() is                
   lcd_clear_screen()   
end procedure

const byte testname_b[] = "home"
procedure unit_test_b() is                
   lcd_home()   
end procedure

const byte testname_c[] = "set cursor position to 0,0 (start line 0)"
procedure unit_test_c() is                
   lcd_cursor_position(0,0)   
end procedure

const byte testname_d[] = "set cursor position to 1,0 (start line 1)"
procedure unit_test_d() is                
   lcd_cursor_position(1,0)   
end procedure

const byte testname_e[] = "set cursor position to 2,0 (start line 2)"
procedure unit_test_e() is                
   lcd_cursor_position(2,0)   
end procedure

const byte testname_f[] = "set cursor position to 3,0 (start line 3)"
procedure unit_test_f() is                
   lcd_cursor_position(3,0)   
end procedure

const byte testname_g[] = "set cursor position to tc_var0, tc_var1"
procedure unit_test_g() is                
   lcd_cursor_position(tc_var0, tc_var1)   
end procedure

const byte testname_h[] = "print 4 incremening chars to cursor pos with lcd_write_char"
procedure unit_test_h() is                
   for 4 loop
      lcd_write_char(testchar)
      increment_testchar()
   end loop
end procedure

const byte testname_i[] = "print 4 incremening chars to cursor pos with lcd'put"
procedure unit_test_i() is                
   for 4 loop
      lcd = testchar
      increment_testchar()
   end loop
end procedure

-- this test shows a incrementing counter on the first line
-- and a progress bar on the second line.
const byte testname_p[] = "progress bar"
procedure unit_test_p() is           
   const byte bar_divider = (255 / (LCD_CHARS-1))

   const byte tc_p[] = "progress      "
   lcd_cursor_position(0,0)  
   print_string(lcd, tc_p);
   
   lcd_cursor_blink_display (off,off,on) -- cursor off (blink off, display on)
   lcd_clear_line(1)
   for 256 using value loop
      -- print var
      lcd_cursor_position(0,9)  
      print_byte_dec(lcd, value)
      
      -- print coressponding progress bar
      lcd_progress(1, value / bar_divider +1, 0xFF)
      
      -- wait & increment
      delay_1ms(20)
   end loop
end procedure


const byte testname_z[] = "shift test"
procedure unit_test_z() is                

      lcd_cursor_position (2, 1)      
      print_string(lcd, teststring)
      
      delay_100ms (10)
      lcd_shift_right (6)
      delay_100ms (10)
      lcd_shift_left (4)
      delay_100ms (10)
   
end procedure

const byte testname_y[] = "blink on test"
procedure unit_test_y() is                

      lcd_cursor_position (2, 1)
      

      lcd_cursor_position (2, 1)      
      print_string(lcd, teststring)
      lcd_cursor_blink_display (on,on,on)
      delay_100ms (10)
      lcd_cursor_shift_left (4)
      delay_100ms (10)
      lcd_cursor_shift_right (6)
      delay_100ms (10)
      lcd_clear_line  ( 2 )
      delay_100ms (10)
      lcd_home()
      delay_100ms (10)
      lcd_clear_screen()
   
end procedure


const byte testname_x[] = "blink off test"
procedure unit_test_x() is                

      lcd_cursor_blink_display (off,off,on)
      lcd_clear_line  (2)
      value = 0
      while value < 255  loop
;         lcd_bvalue_dp_line_pos_left_sign ( value, 0, 1, 5, true, false)
         value = value + 1
         delay_1ms(50)
         lcd_progress  (2, (value/17)+1, 0xFF)
      end loop
;      lcd_bvalue_dp_line_pos_left_sign ( value, 0, 1, 5, true, false)
      delay_100ms (20)
      lcd_clear_screen()
end procedure

const byte testname_w[] = "blink off test"
procedure unit_test_w() is                

;      lcd_bvalue_dp_line_pos_left_sign ( 200, 0, 1, 1, true, false)
;      delay_100ms (10)
;      lcd_bvalue_dp_line_pos_left_sign ( 5, 0, 1, 5, true, false)
;      delay_100ms (10)
;      lcd_bvalue_dp_line_pos_left_sign ( 7, 0, 1, 9, false, false)
;      delay_100ms (10)
;      lcd_bvalue_dp_line_pos_left_sign ( 112, 1, 1, 13, false, false)
;      delay_100ms (10)

      lcd_clear_line  (2)

      lcd_write_char("V")
      lcd_write_char("a")
      lcd_write_char("l")

      lcd_cursor_position (2, 5)  ;

      lcd_write_char ("=")


      lcd_clear_line  (1)

      value1 = 0
      wvalue = 5000

;      while wvalue != 0  loop
;         lcd_wvalue_dp_line_pos_left_sign ( wvalue, 2, 2, 7, true, false)
;         wvalue = wvalue - 1
;         delay_1ms(3)
;       end loop
;         lcd_wvalue_dp_line_pos_left_sign ( wvalue, 2, 2, 7, true, false)
;      delay_100ms (20)

;      lcd_clearscreen()
;      lcd_cursor_position (1, 5)
;      lcd_date ( day, month, year, "-", true )
;
;      sec = 40
;
;      while sec< 60 loop
;         lcd_cursor_position (2, 5)
;         lcd_time ( hrs, min, sec, ":" )
;         sec = sec + 1
;         delay_100ms (10)
;      end loop
;      lcd_cursor_position (1, 5)
;      lcd_date ( day, month, yearw, "/", false )
;      delay_100ms (30)
end procedure

const byte testname_v[] = "hex run test"
procedure unit_test_v() is                

      lcd_clear_screen()

      value1 = 0
      lcd_cursor_position (1, 5)
      lcd = "="
      while value1 < 255  loop
;         lcd_bvalue_dp_line_pos_left_sign ( value1, 0, 1, 1, false, false)
         lcd_cursor_position (1, 7)
         print_prefix = true;
         print_byte_hex(lcd, value1);

         value1 = value1 + 1
         delay_1ms(250)
      end loop

      wvalue = 0
      lcd_cursor_position (2, 7)
      lcd = "="


;      while wvalue < 2000  loop
;         lcd_wvalue_dp_line_pos_left_sign ( wvalue, 0, 2, 1, false, false)
;         lcd_cursor_position (2, 9)
;         print_prefix = true;
;         print_byte_hex(lcd, wvalue);
;         
;         wvalue = wvalue + 1
;         delay_1ms(5)
;      end loop

      lcd_clear_screen()

end procedure


-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------
-- include testconsole after definition of unit tests
-- -----------------------------------------------------------------------------
-- -----------------------------------------------------------------------------
include serial_testconsole
testconsole_init()
testconsole()  -- contains forever loop


