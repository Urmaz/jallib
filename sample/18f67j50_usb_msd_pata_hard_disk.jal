-- Title: USB Mass Storage Device Sample (Hard Disk)
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4o
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Test program for mass storage with SD hard disk.
--
-- Sources:
-- http://www.usb.org/developers/devclass_docs/usbmassbulk_10.pdf
-- http://www.usb.org/developers/devclass_docs/usbmass-ufi10.pdf
-- http://direction.scene-double.com/2008/07/08/usb-msd-bootloader-for-pic-microcontrollers.aspx
--
-- Notes:
-- Important: SEE usb_reset_callback() procedure notes!
-- A fix needs to be made to usb lib.
--

include 18f67j50                    -- target PICmicro
-- include chip
pragma target clock 48_000_000     -- oscillator frequency
-- configuration memory settings (fuses)
pragma target WDT  disabled        -- no watchdog
pragma target PLLDIV        P2     -- divide by 2
pragma target CPUDIV        P1     -- no cpu system clock divide
pragma target OSC  INTOSC_NOCLKOUT_PLL -- internal resonator
pragma target IESO  DISABLED
pragma target FCMEN DISABLED
OSCTUNE_PLLEN = 1                  -- set 96mhz pll
OSCCON_SCS = 0b00
_usec_delay(1_000)                 -- wait for OSC PLL to settle
--
enable_digital_io()   -- disable all analog pins if any
_usec_delay (100_000) -- wait for power to stablilize
--
enable_digital_io()                -- make all pins digital I/O

include delay

include print

-- setup uart for communication
const serial_hw_baudrate  = 115200   -- set the baudrate
include serial_hardware
serial_hw_init()
-- some aliases so it is easy to change from serial hw to serial sw.
alias serial_write is serial_hw_write
alias serial_read is serial_hw_read
alias serial_data is serial_hw_data
alias serial_data_available is serial_hw_data_available

-- setup SPI library
include spi_master_hw         -- includes the spi library
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
--
spi_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
alias spi_master is spi_master_hw
alias spi_master_exchange is spi_master_hw_exchange

-- whether or not using the serial port
const HAS_SERIAL_DEBUG_PORT = 1

include format

-- enable usb debugging
const bit USB_DEBUG = FALSE
const bit USB_DEBUG_HIGH = FALSE

;const bit USB_HID_DEBUG = TRUE
;const bit USB_HID_DEBUG_HIGH = TRUE

-- setup debug lib
alias debug_data is serial_data
const bit DEBUG_MASTER_ENABLE = OFF    -- enables debugging
include debug
--
-- turn on and off debug levels.
debug_lvl_0 = ON
debug_lvl_1 = OFF -- display data in/out
debug_lvl_2 = OFF  -- display commands
debug_lvl_3 = OFF  -- short debug info
--
var byte debug_text1[] = "DEBUG STARTED"
debug_string(DEBUG_1,debug_text1)
debug_crlf(DEBUG_1)

-- setup hard disk library
const bit PATA_HD_READ_EXTRA_SPEED = FALSE -- uses additonal code space to add a speed boost to sector_read procedures
const byte PATA_HD_USE_CS0_CS1_PINS = TRUE -- set true if you will use Alternate Status, Digital Output or Drive Address registers
const bit PATA_HD_NO_INVERTER = TRUE -- if true, an external inverter chip is not needed on /iowr, /iord, /cs0, /cs1 pins
-- pin assignments
alias     pata_hd_data_low              is porta   -- data port (low bits)
alias     pata_hd_data_low_direction    is porta_direction
alias     pata_hd_data_high             is portd   -- data port (high bits)
alias     pata_hd_data_high_direction   is portd_direction
alias     pata_hd_a0                    is pin_g2
alias     pata_hd_a0_direction          is pin_g2_direction
alias     pata_hd_a1                    is pin_g3
alias     pata_hd_a1_direction          is pin_g3_direction
alias     pata_hd_a2                    is pin_g4
alias     pata_hd_a2_direction          is pin_g4_direction
alias     pata_hd_iowr                  is pin_g0
alias     pata_hd_iowr_direction        is pin_g0_direction
alias     pata_hd_iord                  is pin_g1
alias     pata_hd_iord_direction        is pin_g1_direction
alias     pata_hd_cs1                   is pin_c1
alias     pata_hd_cs1_direction         is pin_c1_direction
alias     pata_hd_cs0                   is pin_c0
alias     pata_hd_cs0_direction         is pin_c0_direction
--
pata_hd_a0_direction = output    -- register select pin
pata_hd_a1_direction = output    -- register select pin
pata_hd_a2_direction = output    -- register select pin
pata_hd_iowr_direction = output  -- used for write pulse
pata_hd_iord_direction = output  -- used for read pulse
pata_hd_cs1_direction = output   -- register select pin
pata_hd_cs0_direction = output   -- register select pin
--
include pata_hard_disk           -- include the parallel ata ide hard disk library
pata_hd_init()                   -- initialize startup settings


-- setup MSD library
const MSD_STORAGE_DEVICE = PATA_HARD_DISK -- select storage device
var dword usb_msd_block_size = 512
var dword usb_msd_num_of_blocks = 209715200 -- 2097152 * 512 = 1gb
--
-- sector reading is faster, takes more ram. currently sector reads don't work!
const USB_MSD_SECTOR_READS = TRUE
include usb_msd
usb_msd_init()

------------------------- main program -------------------------

-- print welcome string
print_crlf(serial_data)
const  byte str_welcome[] = "JAL USB MSD demo! Please wait about 10 for the device is configured."
print_string(serial_data, str_welcome )
print_crlf(serial_data)

-- wait till MSD is configured
usb_msd_wait_configured()

-- notify user
const  byte str1[] = "Mass Storage Device (MSD) has been configured by the HOST!"
print_string(serial_data, str1 )
print_crlf(serial_data)
const  byte str2[] = "It may take a few seconds to become available on your pc."
print_string(serial_data, str2 )
print_crlf(serial_data)
print_crlf(serial_data)

-- main loop
var word char_count = 0
forever loop
   -- poll the usb ISR function on a regular base, in order to 
   -- serve the USB MSD requests
   usb_msd_tasks()
   
   -- let us know the PIC is actually doing something
   -- by sending char "_" to serial port
   if char_count == 40000 then
      serial_data = "."
      _usec_delay(100)
      char_count = 0
   end if
   char_count = char_count + 1
end loop




