-- ------------------------------------------------------
-- Title: Test program for i2c_hardware.jal
--
-- Author: Joep Suijs, Copyright (c) 2008..2008, all rights reserved.
--
-- Adapted-by: 
--
-- Compiler: >=2.4g
--
-- This file is part of jallib  (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Level 0 i2c test program
--    interact with an i2c eeprom using the i2c primitives
-- --
-- This file defines a test for JALLIB testing, using a test-board
--  defined by a BOARD file .
--
-- Sources:
--
-- Notes: 
--    setup: 
--         an 24lc256 i2c eeprom, connected to the test board i2c pins.
--         a serial connection to a terminal
--
-- ------------------------------------------------------
--
-- This file has been generated on 03/24/09 20:40:20, from:
--    * board: board_18f2450_af.jal
--    * test : test_i2c_sw_l1.jal
--


;@jallib section chipdef
-- chip setup
include 18f2450

-- even though the external crystal is 20 MHz, the configuration is such that
-- the CPU clock is derived from the 96 Mhz PLL clock (div2), therefore set
-- target frequency to 48 MHz
pragma target clock       48_000_000


-- fuses
pragma target PLLDIV		DIVIDE_BY_5__20MHZ_INPUT_
pragma target CPUDIV		_OSC1_OSC2_SRC___1__96MHZ_PLL_SRC___2_
pragma target USBPLL		CLOCK_SRC_FROM_96MHZ_PLL_2
pragma target OSC			HS_PLL
pragma target FCMEN			DISABLED
pragma target IESO			DISABLED
pragma target PWRTE			DISABLED	-- power up timer
pragma target VREGEN		ENABLED		-- USB voltage regulator
pragma target VOLTAGE		V20			-- brown out voltage
pragma target BROWNOUT		DISABLED	-- no brownout detection
pragma target WDTPS			P32768		-- watch dog saler setting
pragma target WDT			DISABLED    -- no watchdog
pragma target PBADEN		DIGITAL		-- digital input port<0..4>
pragma target LPT1OSC		DISABLED	-- low power timer 1
-- pragma target MCLR			EXTERNAL	-- master reset on RE3
pragma target MCLR			INTERNAL	-- no master reset 
pragma target STVR			DISABLED    -- reset on stack over/under flow
pragma target LVP			DISABLED    -- no low-voltage programming
pragma target ENICPORT		DISABLED	-- In circuit debugger
pragma target XINST			ENABLED		-- extended instruction set
pragma target BACKBUG		DISABLED	-- background debugging
pragma target CP_0			DISABLED	-- code block 0 not protected
pragma target CP_1			DISABLED	-- code block 1 not protected
pragma target CPB			DISABLED	-- bootblock code not write protected
pragma target WRT_0			DISABLED	-- table writeblock 0 not protected
pragma target WRT_1			DISABLED	-- table write block 1 not protected
pragma target WRTB			DISABLED	-- bootblock not write protected
pragma target WRTC			DISABLED	-- config not write protected
pragma target EBTR_0		DISABLED	-- table read block 0 not protected
pragma target EBTR_1		DISABLED	-- table read block 1 not protected
pragma target EBTRB 		DISABLED	-- boot block not protected

;@jallib section i2c
-- I2C io definition
var volatile bit i2c_scl            is pin_b4
var volatile bit i2c_scl_direction  is pin_b4_direction

-- b3 is pin-compatible with 16f648a board file, b1 is on hardware pins
;var volatile bit i2c_sda            is pin_b3
;var volatile bit i2c_sda_direction  is pin_b3_direction
var volatile bit i2c_sda            is pin_b1
var volatile bit i2c_sda_direction  is pin_b1_direction

-- generic setup (see releated examples for more details);@jallib section serial
const serial_hw_baudrate = 115_200


include serial_hardware
serial_hw_init()
include print
include delay

-- i2c setup
const word _i2c_bus_speed = 1 ; * 100kHz
const bit _i2c_level = true   ; i2c levels (not SMB)

include i2c_software                
;include i2c_hardware

i2c_initialize()


var byte i2c_tx_buffer[10]
var byte i2c_rx_buffer[10]

include i2c_level1

-- we're alive
const byte str1[] = "Test.\r\n" 
print_string(serial_hw_data, str1)


var bit r
var byte i
forever loop

   -- Send 2 bytes address to device 0xA0 and then read 3 bytes of data
   i2c_tx_buffer[0] = 0  -- high byte address within i2c eeprom
   i2c_tx_buffer[1] = 0  -- low byte address within i2c eeprom
   r = i2c_send_receive(0xA0, 2, 3)
   
;   -- same as above
;   r = i2c_receive_wordaddr(0xA0, 0x0000, 3)

   print_bit_truefalse(serial_hw_data, r)
   serial_hw_data = " "

   print_byte_hex(serial_hw_data, i2c_rx_buffer[0]);
   serial_hw_data = " "
   print_byte_hex(serial_hw_data, i2c_rx_buffer[1]);
   serial_hw_data = " "
   print_byte_hex(serial_hw_data, i2c_rx_buffer[2]);
   serial_hw_data = " "
   
   -- write part (increment 3rd byte at 0x0002)
   i2c_tx_buffer[0] = 0  -- high byte address within i2c eeprom
   i2c_tx_buffer[1] = 2  -- low byte address within i2c eeprom
   i2c_tx_buffer[2] = i2c_rx_buffer[2] + 1  -- data
   r = i2c_send_receive(0xA0, 3, 0)
   print_bit_truefalse(serial_hw_data, r)
   serial_hw_data = " "
   
   print_crlf(serial_hw_data)
   
   delay_100ms(10)
end loop
